
bin/v1.reeeflow.elf:     file format elf32-littlearm


Disassembly of section .text:

00000150 <__aeabi_drsub>:
     150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     154:	e002      	b.n	15c <__adddf3>
     156:	bf00      	nop

00000158 <__aeabi_dsub>:
     158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000015c <__adddf3>:
     15c:	b530      	push	{r4, r5, lr}
     15e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     162:	ea4f 0543 	mov.w	r5, r3, lsl #1
     166:	ea94 0f05 	teq	r4, r5
     16a:	bf08      	it	eq
     16c:	ea90 0f02 	teqeq	r0, r2
     170:	bf1f      	itttt	ne
     172:	ea54 0c00 	orrsne.w	ip, r4, r0
     176:	ea55 0c02 	orrsne.w	ip, r5, r2
     17a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     17e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     182:	f000 80e2 	beq.w	34a <__adddf3+0x1ee>
     186:	ea4f 5454 	mov.w	r4, r4, lsr #21
     18a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     18e:	bfb8      	it	lt
     190:	426d      	neglt	r5, r5
     192:	dd0c      	ble.n	1ae <__adddf3+0x52>
     194:	442c      	add	r4, r5
     196:	ea80 0202 	eor.w	r2, r0, r2
     19a:	ea81 0303 	eor.w	r3, r1, r3
     19e:	ea82 0000 	eor.w	r0, r2, r0
     1a2:	ea83 0101 	eor.w	r1, r3, r1
     1a6:	ea80 0202 	eor.w	r2, r0, r2
     1aa:	ea81 0303 	eor.w	r3, r1, r3
     1ae:	2d36      	cmp	r5, #54	; 0x36
     1b0:	bf88      	it	hi
     1b2:	bd30      	pophi	{r4, r5, pc}
     1b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1c4:	d002      	beq.n	1cc <__adddf3+0x70>
     1c6:	4240      	negs	r0, r0
     1c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1d8:	d002      	beq.n	1e0 <__adddf3+0x84>
     1da:	4252      	negs	r2, r2
     1dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e0:	ea94 0f05 	teq	r4, r5
     1e4:	f000 80a7 	beq.w	336 <__adddf3+0x1da>
     1e8:	f1a4 0401 	sub.w	r4, r4, #1
     1ec:	f1d5 0e20 	rsbs	lr, r5, #32
     1f0:	db0d      	blt.n	20e <__adddf3+0xb2>
     1f2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1f6:	fa22 f205 	lsr.w	r2, r2, r5
     1fa:	1880      	adds	r0, r0, r2
     1fc:	f141 0100 	adc.w	r1, r1, #0
     200:	fa03 f20e 	lsl.w	r2, r3, lr
     204:	1880      	adds	r0, r0, r2
     206:	fa43 f305 	asr.w	r3, r3, r5
     20a:	4159      	adcs	r1, r3
     20c:	e00e      	b.n	22c <__adddf3+0xd0>
     20e:	f1a5 0520 	sub.w	r5, r5, #32
     212:	f10e 0e20 	add.w	lr, lr, #32
     216:	2a01      	cmp	r2, #1
     218:	fa03 fc0e 	lsl.w	ip, r3, lr
     21c:	bf28      	it	cs
     21e:	f04c 0c02 	orrcs.w	ip, ip, #2
     222:	fa43 f305 	asr.w	r3, r3, r5
     226:	18c0      	adds	r0, r0, r3
     228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     22c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     230:	d507      	bpl.n	242 <__adddf3+0xe6>
     232:	f04f 0e00 	mov.w	lr, #0
     236:	f1dc 0c00 	rsbs	ip, ip, #0
     23a:	eb7e 0000 	sbcs.w	r0, lr, r0
     23e:	eb6e 0101 	sbc.w	r1, lr, r1
     242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     246:	d31b      	bcc.n	280 <__adddf3+0x124>
     248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     24c:	d30c      	bcc.n	268 <__adddf3+0x10c>
     24e:	0849      	lsrs	r1, r1, #1
     250:	ea5f 0030 	movs.w	r0, r0, rrx
     254:	ea4f 0c3c 	mov.w	ip, ip, rrx
     258:	f104 0401 	add.w	r4, r4, #1
     25c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     264:	f080 809a 	bcs.w	39c <__adddf3+0x240>
     268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     26c:	bf08      	it	eq
     26e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     272:	f150 0000 	adcs.w	r0, r0, #0
     276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     27a:	ea41 0105 	orr.w	r1, r1, r5
     27e:	bd30      	pop	{r4, r5, pc}
     280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     284:	4140      	adcs	r0, r0
     286:	eb41 0101 	adc.w	r1, r1, r1
     28a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     28e:	f1a4 0401 	sub.w	r4, r4, #1
     292:	d1e9      	bne.n	268 <__adddf3+0x10c>
     294:	f091 0f00 	teq	r1, #0
     298:	bf04      	itt	eq
     29a:	4601      	moveq	r1, r0
     29c:	2000      	moveq	r0, #0
     29e:	fab1 f381 	clz	r3, r1
     2a2:	bf08      	it	eq
     2a4:	3320      	addeq	r3, #32
     2a6:	f1a3 030b 	sub.w	r3, r3, #11
     2aa:	f1b3 0220 	subs.w	r2, r3, #32
     2ae:	da0c      	bge.n	2ca <__adddf3+0x16e>
     2b0:	320c      	adds	r2, #12
     2b2:	dd08      	ble.n	2c6 <__adddf3+0x16a>
     2b4:	f102 0c14 	add.w	ip, r2, #20
     2b8:	f1c2 020c 	rsb	r2, r2, #12
     2bc:	fa01 f00c 	lsl.w	r0, r1, ip
     2c0:	fa21 f102 	lsr.w	r1, r1, r2
     2c4:	e00c      	b.n	2e0 <__adddf3+0x184>
     2c6:	f102 0214 	add.w	r2, r2, #20
     2ca:	bfd8      	it	le
     2cc:	f1c2 0c20 	rsble	ip, r2, #32
     2d0:	fa01 f102 	lsl.w	r1, r1, r2
     2d4:	fa20 fc0c 	lsr.w	ip, r0, ip
     2d8:	bfdc      	itt	le
     2da:	ea41 010c 	orrle.w	r1, r1, ip
     2de:	4090      	lslle	r0, r2
     2e0:	1ae4      	subs	r4, r4, r3
     2e2:	bfa2      	ittt	ge
     2e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2e8:	4329      	orrge	r1, r5
     2ea:	bd30      	popge	{r4, r5, pc}
     2ec:	ea6f 0404 	mvn.w	r4, r4
     2f0:	3c1f      	subs	r4, #31
     2f2:	da1c      	bge.n	32e <__adddf3+0x1d2>
     2f4:	340c      	adds	r4, #12
     2f6:	dc0e      	bgt.n	316 <__adddf3+0x1ba>
     2f8:	f104 0414 	add.w	r4, r4, #20
     2fc:	f1c4 0220 	rsb	r2, r4, #32
     300:	fa20 f004 	lsr.w	r0, r0, r4
     304:	fa01 f302 	lsl.w	r3, r1, r2
     308:	ea40 0003 	orr.w	r0, r0, r3
     30c:	fa21 f304 	lsr.w	r3, r1, r4
     310:	ea45 0103 	orr.w	r1, r5, r3
     314:	bd30      	pop	{r4, r5, pc}
     316:	f1c4 040c 	rsb	r4, r4, #12
     31a:	f1c4 0220 	rsb	r2, r4, #32
     31e:	fa20 f002 	lsr.w	r0, r0, r2
     322:	fa01 f304 	lsl.w	r3, r1, r4
     326:	ea40 0003 	orr.w	r0, r0, r3
     32a:	4629      	mov	r1, r5
     32c:	bd30      	pop	{r4, r5, pc}
     32e:	fa21 f004 	lsr.w	r0, r1, r4
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	f094 0f00 	teq	r4, #0
     33a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     33e:	bf06      	itte	eq
     340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     344:	3401      	addeq	r4, #1
     346:	3d01      	subne	r5, #1
     348:	e74e      	b.n	1e8 <__adddf3+0x8c>
     34a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     34e:	bf18      	it	ne
     350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     354:	d029      	beq.n	3aa <__adddf3+0x24e>
     356:	ea94 0f05 	teq	r4, r5
     35a:	bf08      	it	eq
     35c:	ea90 0f02 	teqeq	r0, r2
     360:	d005      	beq.n	36e <__adddf3+0x212>
     362:	ea54 0c00 	orrs.w	ip, r4, r0
     366:	bf04      	itt	eq
     368:	4619      	moveq	r1, r3
     36a:	4610      	moveq	r0, r2
     36c:	bd30      	pop	{r4, r5, pc}
     36e:	ea91 0f03 	teq	r1, r3
     372:	bf1e      	ittt	ne
     374:	2100      	movne	r1, #0
     376:	2000      	movne	r0, #0
     378:	bd30      	popne	{r4, r5, pc}
     37a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     37e:	d105      	bne.n	38c <__adddf3+0x230>
     380:	0040      	lsls	r0, r0, #1
     382:	4149      	adcs	r1, r1
     384:	bf28      	it	cs
     386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     38a:	bd30      	pop	{r4, r5, pc}
     38c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     390:	bf3c      	itt	cc
     392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     396:	bd30      	popcc	{r4, r5, pc}
     398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     39c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3a4:	f04f 0000 	mov.w	r0, #0
     3a8:	bd30      	pop	{r4, r5, pc}
     3aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3ae:	bf1a      	itte	ne
     3b0:	4619      	movne	r1, r3
     3b2:	4610      	movne	r0, r2
     3b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3b8:	bf1c      	itt	ne
     3ba:	460b      	movne	r3, r1
     3bc:	4602      	movne	r2, r0
     3be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3c2:	bf06      	itte	eq
     3c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3c8:	ea91 0f03 	teqeq	r1, r3
     3cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d0:	bd30      	pop	{r4, r5, pc}
     3d2:	bf00      	nop

000003d4 <__aeabi_ui2d>:
     3d4:	f090 0f00 	teq	r0, #0
     3d8:	bf04      	itt	eq
     3da:	2100      	moveq	r1, #0
     3dc:	4770      	bxeq	lr
     3de:	b530      	push	{r4, r5, lr}
     3e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3e8:	f04f 0500 	mov.w	r5, #0
     3ec:	f04f 0100 	mov.w	r1, #0
     3f0:	e750      	b.n	294 <__adddf3+0x138>
     3f2:	bf00      	nop

000003f4 <__aeabi_i2d>:
     3f4:	f090 0f00 	teq	r0, #0
     3f8:	bf04      	itt	eq
     3fa:	2100      	moveq	r1, #0
     3fc:	4770      	bxeq	lr
     3fe:	b530      	push	{r4, r5, lr}
     400:	f44f 6480 	mov.w	r4, #1024	; 0x400
     404:	f104 0432 	add.w	r4, r4, #50	; 0x32
     408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     40c:	bf48      	it	mi
     40e:	4240      	negmi	r0, r0
     410:	f04f 0100 	mov.w	r1, #0
     414:	e73e      	b.n	294 <__adddf3+0x138>
     416:	bf00      	nop

00000418 <__aeabi_f2d>:
     418:	0042      	lsls	r2, r0, #1
     41a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     41e:	ea4f 0131 	mov.w	r1, r1, rrx
     422:	ea4f 7002 	mov.w	r0, r2, lsl #28
     426:	bf1f      	itttt	ne
     428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     42c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     434:	4770      	bxne	lr
     436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     43a:	bf08      	it	eq
     43c:	4770      	bxeq	lr
     43e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     442:	bf04      	itt	eq
     444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     448:	4770      	bxeq	lr
     44a:	b530      	push	{r4, r5, lr}
     44c:	f44f 7460 	mov.w	r4, #896	; 0x380
     450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     458:	e71c      	b.n	294 <__adddf3+0x138>
     45a:	bf00      	nop

0000045c <__aeabi_ul2d>:
     45c:	ea50 0201 	orrs.w	r2, r0, r1
     460:	bf08      	it	eq
     462:	4770      	bxeq	lr
     464:	b530      	push	{r4, r5, lr}
     466:	f04f 0500 	mov.w	r5, #0
     46a:	e00a      	b.n	482 <__aeabi_l2d+0x16>

0000046c <__aeabi_l2d>:
     46c:	ea50 0201 	orrs.w	r2, r0, r1
     470:	bf08      	it	eq
     472:	4770      	bxeq	lr
     474:	b530      	push	{r4, r5, lr}
     476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     47a:	d502      	bpl.n	482 <__aeabi_l2d+0x16>
     47c:	4240      	negs	r0, r0
     47e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     482:	f44f 6480 	mov.w	r4, #1024	; 0x400
     486:	f104 0432 	add.w	r4, r4, #50	; 0x32
     48a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     48e:	f43f aed8 	beq.w	242 <__adddf3+0xe6>
     492:	f04f 0203 	mov.w	r2, #3
     496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     49a:	bf18      	it	ne
     49c:	3203      	addne	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4aa:	f1c2 0320 	rsb	r3, r2, #32
     4ae:	fa00 fc03 	lsl.w	ip, r0, r3
     4b2:	fa20 f002 	lsr.w	r0, r0, r2
     4b6:	fa01 fe03 	lsl.w	lr, r1, r3
     4ba:	ea40 000e 	orr.w	r0, r0, lr
     4be:	fa21 f102 	lsr.w	r1, r1, r2
     4c2:	4414      	add	r4, r2
     4c4:	e6bd      	b.n	242 <__adddf3+0xe6>
     4c6:	bf00      	nop

000004c8 <__aeabi_dmul>:
     4c8:	b570      	push	{r4, r5, r6, lr}
     4ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4d6:	bf1d      	ittte	ne
     4d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4dc:	ea94 0f0c 	teqne	r4, ip
     4e0:	ea95 0f0c 	teqne	r5, ip
     4e4:	f000 f8de 	bleq	6a4 <__aeabi_dmul+0x1dc>
     4e8:	442c      	add	r4, r5
     4ea:	ea81 0603 	eor.w	r6, r1, r3
     4ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4fa:	bf18      	it	ne
     4fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     508:	d038      	beq.n	57c <__aeabi_dmul+0xb4>
     50a:	fba0 ce02 	umull	ip, lr, r0, r2
     50e:	f04f 0500 	mov.w	r5, #0
     512:	fbe1 e502 	umlal	lr, r5, r1, r2
     516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     51a:	fbe0 e503 	umlal	lr, r5, r0, r3
     51e:	f04f 0600 	mov.w	r6, #0
     522:	fbe1 5603 	umlal	r5, r6, r1, r3
     526:	f09c 0f00 	teq	ip, #0
     52a:	bf18      	it	ne
     52c:	f04e 0e01 	orrne.w	lr, lr, #1
     530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     53c:	d204      	bcs.n	548 <__aeabi_dmul+0x80>
     53e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     542:	416d      	adcs	r5, r5
     544:	eb46 0606 	adc.w	r6, r6, r6
     548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     54c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     55c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     560:	bf88      	it	hi
     562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     566:	d81e      	bhi.n	5a6 <__aeabi_dmul+0xde>
     568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     56c:	bf08      	it	eq
     56e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     572:	f150 0000 	adcs.w	r0, r0, #0
     576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     57a:	bd70      	pop	{r4, r5, r6, pc}
     57c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     580:	ea46 0101 	orr.w	r1, r6, r1
     584:	ea40 0002 	orr.w	r0, r0, r2
     588:	ea81 0103 	eor.w	r1, r1, r3
     58c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     590:	bfc2      	ittt	gt
     592:	ebd4 050c 	rsbsgt	r5, r4, ip
     596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     59a:	bd70      	popgt	{r4, r5, r6, pc}
     59c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a0:	f04f 0e00 	mov.w	lr, #0
     5a4:	3c01      	subs	r4, #1
     5a6:	f300 80ab 	bgt.w	700 <__aeabi_dmul+0x238>
     5aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5ae:	bfde      	ittt	le
     5b0:	2000      	movle	r0, #0
     5b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5b6:	bd70      	pople	{r4, r5, r6, pc}
     5b8:	f1c4 0400 	rsb	r4, r4, #0
     5bc:	3c20      	subs	r4, #32
     5be:	da35      	bge.n	62c <__aeabi_dmul+0x164>
     5c0:	340c      	adds	r4, #12
     5c2:	dc1b      	bgt.n	5fc <__aeabi_dmul+0x134>
     5c4:	f104 0414 	add.w	r4, r4, #20
     5c8:	f1c4 0520 	rsb	r5, r4, #32
     5cc:	fa00 f305 	lsl.w	r3, r0, r5
     5d0:	fa20 f004 	lsr.w	r0, r0, r4
     5d4:	fa01 f205 	lsl.w	r2, r1, r5
     5d8:	ea40 0002 	orr.w	r0, r0, r2
     5dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5e8:	fa21 f604 	lsr.w	r6, r1, r4
     5ec:	eb42 0106 	adc.w	r1, r2, r6
     5f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5f4:	bf08      	it	eq
     5f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5fa:	bd70      	pop	{r4, r5, r6, pc}
     5fc:	f1c4 040c 	rsb	r4, r4, #12
     600:	f1c4 0520 	rsb	r5, r4, #32
     604:	fa00 f304 	lsl.w	r3, r0, r4
     608:	fa20 f005 	lsr.w	r0, r0, r5
     60c:	fa01 f204 	lsl.w	r2, r1, r4
     610:	ea40 0002 	orr.w	r0, r0, r2
     614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     61c:	f141 0100 	adc.w	r1, r1, #0
     620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     624:	bf08      	it	eq
     626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	f1c4 0520 	rsb	r5, r4, #32
     630:	fa00 f205 	lsl.w	r2, r0, r5
     634:	ea4e 0e02 	orr.w	lr, lr, r2
     638:	fa20 f304 	lsr.w	r3, r0, r4
     63c:	fa01 f205 	lsl.w	r2, r1, r5
     640:	ea43 0302 	orr.w	r3, r3, r2
     644:	fa21 f004 	lsr.w	r0, r1, r4
     648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     64c:	fa21 f204 	lsr.w	r2, r1, r4
     650:	ea20 0002 	bic.w	r0, r0, r2
     654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     65c:	bf08      	it	eq
     65e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     662:	bd70      	pop	{r4, r5, r6, pc}
     664:	f094 0f00 	teq	r4, #0
     668:	d10f      	bne.n	68a <__aeabi_dmul+0x1c2>
     66a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     66e:	0040      	lsls	r0, r0, #1
     670:	eb41 0101 	adc.w	r1, r1, r1
     674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     678:	bf08      	it	eq
     67a:	3c01      	subeq	r4, #1
     67c:	d0f7      	beq.n	66e <__aeabi_dmul+0x1a6>
     67e:	ea41 0106 	orr.w	r1, r1, r6
     682:	f095 0f00 	teq	r5, #0
     686:	bf18      	it	ne
     688:	4770      	bxne	lr
     68a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     68e:	0052      	lsls	r2, r2, #1
     690:	eb43 0303 	adc.w	r3, r3, r3
     694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     698:	bf08      	it	eq
     69a:	3d01      	subeq	r5, #1
     69c:	d0f7      	beq.n	68e <__aeabi_dmul+0x1c6>
     69e:	ea43 0306 	orr.w	r3, r3, r6
     6a2:	4770      	bx	lr
     6a4:	ea94 0f0c 	teq	r4, ip
     6a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6ac:	bf18      	it	ne
     6ae:	ea95 0f0c 	teqne	r5, ip
     6b2:	d00c      	beq.n	6ce <__aeabi_dmul+0x206>
     6b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6b8:	bf18      	it	ne
     6ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6be:	d1d1      	bne.n	664 <__aeabi_dmul+0x19c>
     6c0:	ea81 0103 	eor.w	r1, r1, r3
     6c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6c8:	f04f 0000 	mov.w	r0, #0
     6cc:	bd70      	pop	{r4, r5, r6, pc}
     6ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6d2:	bf06      	itte	eq
     6d4:	4610      	moveq	r0, r2
     6d6:	4619      	moveq	r1, r3
     6d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6dc:	d019      	beq.n	712 <__aeabi_dmul+0x24a>
     6de:	ea94 0f0c 	teq	r4, ip
     6e2:	d102      	bne.n	6ea <__aeabi_dmul+0x222>
     6e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6e8:	d113      	bne.n	712 <__aeabi_dmul+0x24a>
     6ea:	ea95 0f0c 	teq	r5, ip
     6ee:	d105      	bne.n	6fc <__aeabi_dmul+0x234>
     6f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6f4:	bf1c      	itt	ne
     6f6:	4610      	movne	r0, r2
     6f8:	4619      	movne	r1, r3
     6fa:	d10a      	bne.n	712 <__aeabi_dmul+0x24a>
     6fc:	ea81 0103 	eor.w	r1, r1, r3
     700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     70c:	f04f 0000 	mov.w	r0, #0
     710:	bd70      	pop	{r4, r5, r6, pc}
     712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     71a:	bd70      	pop	{r4, r5, r6, pc}

0000071c <__aeabi_ddiv>:
     71c:	b570      	push	{r4, r5, r6, lr}
     71e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     72a:	bf1d      	ittte	ne
     72c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     730:	ea94 0f0c 	teqne	r4, ip
     734:	ea95 0f0c 	teqne	r5, ip
     738:	f000 f8a7 	bleq	88a <_min_heap_size+0x8a>
     73c:	eba4 0405 	sub.w	r4, r4, r5
     740:	ea81 0e03 	eor.w	lr, r1, r3
     744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     748:	ea4f 3101 	mov.w	r1, r1, lsl #12
     74c:	f000 8088 	beq.w	860 <_min_heap_size+0x60>
     750:	ea4f 3303 	mov.w	r3, r3, lsl #12
     754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     75c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     760:	ea4f 2202 	mov.w	r2, r2, lsl #8
     764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     76c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     774:	429d      	cmp	r5, r3
     776:	bf08      	it	eq
     778:	4296      	cmpeq	r6, r2
     77a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     77e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     782:	d202      	bcs.n	78a <__aeabi_ddiv+0x6e>
     784:	085b      	lsrs	r3, r3, #1
     786:	ea4f 0232 	mov.w	r2, r2, rrx
     78a:	1ab6      	subs	r6, r6, r2
     78c:	eb65 0503 	sbc.w	r5, r5, r3
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     79a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     79e:	ebb6 0e02 	subs.w	lr, r6, r2
     7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7a6:	bf22      	ittt	cs
     7a8:	1ab6      	subcs	r6, r6, r2
     7aa:	4675      	movcs	r5, lr
     7ac:	ea40 000c 	orrcs.w	r0, r0, ip
     7b0:	085b      	lsrs	r3, r3, #1
     7b2:	ea4f 0232 	mov.w	r2, r2, rrx
     7b6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
     7be:	bf22      	ittt	cs
     7c0:	1ab6      	subcs	r6, r6, r2
     7c2:	4675      	movcs	r5, lr
     7c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7c8:	085b      	lsrs	r3, r3, #1
     7ca:	ea4f 0232 	mov.w	r2, r2, rrx
     7ce:	ebb6 0e02 	subs.w	lr, r6, r2
     7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7d6:	bf22      	ittt	cs
     7d8:	1ab6      	subcs	r6, r6, r2
     7da:	4675      	movcs	r5, lr
     7dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ee:	bf22      	ittt	cs
     7f0:	1ab6      	subcs	r6, r6, r2
     7f2:	4675      	movcs	r5, lr
     7f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7f8:	ea55 0e06 	orrs.w	lr, r5, r6
     7fc:	d018      	beq.n	830 <_min_heap_size+0x30>
     7fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
     802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     806:	ea4f 1606 	mov.w	r6, r6, lsl #4
     80a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     80e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     81a:	d1c0      	bne.n	79e <__aeabi_ddiv+0x82>
     81c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     820:	d10b      	bne.n	83a <_min_heap_size+0x3a>
     822:	ea41 0100 	orr.w	r1, r1, r0
     826:	f04f 0000 	mov.w	r0, #0
     82a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     82e:	e7b6      	b.n	79e <__aeabi_ddiv+0x82>
     830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     834:	bf04      	itt	eq
     836:	4301      	orreq	r1, r0
     838:	2000      	moveq	r0, #0
     83a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     83e:	bf88      	it	hi
     840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     844:	f63f aeaf 	bhi.w	5a6 <__aeabi_dmul+0xde>
     848:	ebb5 0c03 	subs.w	ip, r5, r3
     84c:	bf04      	itt	eq
     84e:	ebb6 0c02 	subseq.w	ip, r6, r2
     852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     856:	f150 0000 	adcs.w	r0, r0, #0
     85a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     85e:	bd70      	pop	{r4, r5, r6, pc}
     860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     86c:	bfc2      	ittt	gt
     86e:	ebd4 050c 	rsbsgt	r5, r4, ip
     872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     876:	bd70      	popgt	{r4, r5, r6, pc}
     878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     87c:	f04f 0e00 	mov.w	lr, #0
     880:	3c01      	subs	r4, #1
     882:	e690      	b.n	5a6 <__aeabi_dmul+0xde>
     884:	ea45 0e06 	orr.w	lr, r5, r6
     888:	e68d      	b.n	5a6 <__aeabi_dmul+0xde>
     88a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     88e:	ea94 0f0c 	teq	r4, ip
     892:	bf08      	it	eq
     894:	ea95 0f0c 	teqeq	r5, ip
     898:	f43f af3b 	beq.w	712 <__aeabi_dmul+0x24a>
     89c:	ea94 0f0c 	teq	r4, ip
     8a0:	d10a      	bne.n	8b8 <_min_heap_size+0xb8>
     8a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8a6:	f47f af34 	bne.w	712 <__aeabi_dmul+0x24a>
     8aa:	ea95 0f0c 	teq	r5, ip
     8ae:	f47f af25 	bne.w	6fc <__aeabi_dmul+0x234>
     8b2:	4610      	mov	r0, r2
     8b4:	4619      	mov	r1, r3
     8b6:	e72c      	b.n	712 <__aeabi_dmul+0x24a>
     8b8:	ea95 0f0c 	teq	r5, ip
     8bc:	d106      	bne.n	8cc <_min_heap_size+0xcc>
     8be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8c2:	f43f aefd 	beq.w	6c0 <__aeabi_dmul+0x1f8>
     8c6:	4610      	mov	r0, r2
     8c8:	4619      	mov	r1, r3
     8ca:	e722      	b.n	712 <__aeabi_dmul+0x24a>
     8cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d0:	bf18      	it	ne
     8d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8d6:	f47f aec5 	bne.w	664 <__aeabi_dmul+0x19c>
     8da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8de:	f47f af0d 	bne.w	6fc <__aeabi_dmul+0x234>
     8e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8e6:	f47f aeeb 	bne.w	6c0 <__aeabi_dmul+0x1f8>
     8ea:	e712      	b.n	712 <__aeabi_dmul+0x24a>

000008ec <__gedf2>:
     8ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8f0:	e006      	b.n	900 <__cmpdf2+0x4>
     8f2:	bf00      	nop

000008f4 <__ledf2>:
     8f4:	f04f 0c01 	mov.w	ip, #1
     8f8:	e002      	b.n	900 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__cmpdf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	f84d cd04 	str.w	ip, [sp, #-4]!
     904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     90c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     910:	bf18      	it	ne
     912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     916:	d01b      	beq.n	950 <__cmpdf2+0x54>
     918:	b001      	add	sp, #4
     91a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     91e:	bf0c      	ite	eq
     920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     924:	ea91 0f03 	teqne	r1, r3
     928:	bf02      	ittt	eq
     92a:	ea90 0f02 	teqeq	r0, r2
     92e:	2000      	moveq	r0, #0
     930:	4770      	bxeq	lr
     932:	f110 0f00 	cmn.w	r0, #0
     936:	ea91 0f03 	teq	r1, r3
     93a:	bf58      	it	pl
     93c:	4299      	cmppl	r1, r3
     93e:	bf08      	it	eq
     940:	4290      	cmpeq	r0, r2
     942:	bf2c      	ite	cs
     944:	17d8      	asrcs	r0, r3, #31
     946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     94a:	f040 0001 	orr.w	r0, r0, #1
     94e:	4770      	bx	lr
     950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     958:	d102      	bne.n	960 <__cmpdf2+0x64>
     95a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     95e:	d107      	bne.n	970 <__cmpdf2+0x74>
     960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     968:	d1d6      	bne.n	918 <__cmpdf2+0x1c>
     96a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     96e:	d0d3      	beq.n	918 <__cmpdf2+0x1c>
     970:	f85d 0b04 	ldr.w	r0, [sp], #4
     974:	4770      	bx	lr
     976:	bf00      	nop

00000978 <__aeabi_cdrcmple>:
     978:	4684      	mov	ip, r0
     97a:	4610      	mov	r0, r2
     97c:	4662      	mov	r2, ip
     97e:	468c      	mov	ip, r1
     980:	4619      	mov	r1, r3
     982:	4663      	mov	r3, ip
     984:	e000      	b.n	988 <__aeabi_cdcmpeq>
     986:	bf00      	nop

00000988 <__aeabi_cdcmpeq>:
     988:	b501      	push	{r0, lr}
     98a:	f7ff ffb7 	bl	8fc <__cmpdf2>
     98e:	2800      	cmp	r0, #0
     990:	bf48      	it	mi
     992:	f110 0f00 	cmnmi.w	r0, #0
     996:	bd01      	pop	{r0, pc}

00000998 <__aeabi_dcmpeq>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff fff4 	bl	988 <__aeabi_cdcmpeq>
     9a0:	bf0c      	ite	eq
     9a2:	2001      	moveq	r0, #1
     9a4:	2000      	movne	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_dcmplt>:
     9ac:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b0:	f7ff ffea 	bl	988 <__aeabi_cdcmpeq>
     9b4:	bf34      	ite	cc
     9b6:	2001      	movcc	r0, #1
     9b8:	2000      	movcs	r0, #0
     9ba:	f85d fb08 	ldr.w	pc, [sp], #8
     9be:	bf00      	nop

000009c0 <__aeabi_dcmple>:
     9c0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9c4:	f7ff ffe0 	bl	988 <__aeabi_cdcmpeq>
     9c8:	bf94      	ite	ls
     9ca:	2001      	movls	r0, #1
     9cc:	2000      	movhi	r0, #0
     9ce:	f85d fb08 	ldr.w	pc, [sp], #8
     9d2:	bf00      	nop

000009d4 <__aeabi_dcmpge>:
     9d4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9d8:	f7ff ffce 	bl	978 <__aeabi_cdrcmple>
     9dc:	bf94      	ite	ls
     9de:	2001      	movls	r0, #1
     9e0:	2000      	movhi	r0, #0
     9e2:	f85d fb08 	ldr.w	pc, [sp], #8
     9e6:	bf00      	nop

000009e8 <__aeabi_dcmpgt>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff ffc4 	bl	978 <__aeabi_cdrcmple>
     9f0:	bf34      	ite	cc
     9f2:	2001      	movcc	r0, #1
     9f4:	2000      	movcs	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_d2iz>:
     9fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d215      	bcs.n	a32 <__aeabi_d2iz+0x36>
     a06:	d511      	bpl.n	a2c <__aeabi_d2iz+0x30>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d912      	bls.n	a38 <__aeabi_d2iz+0x3c>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a22:	fa23 f002 	lsr.w	r0, r3, r2
     a26:	bf18      	it	ne
     a28:	4240      	negne	r0, r0
     a2a:	4770      	bx	lr
     a2c:	f04f 0000 	mov.w	r0, #0
     a30:	4770      	bx	lr
     a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a36:	d105      	bne.n	a44 <__aeabi_d2iz+0x48>
     a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a3c:	bf08      	it	eq
     a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a42:	4770      	bx	lr
     a44:	f04f 0000 	mov.w	r0, #0
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <__aeabi_d2uiz>:
     a4c:	004a      	lsls	r2, r1, #1
     a4e:	d211      	bcs.n	a74 <__aeabi_d2uiz+0x28>
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d211      	bcs.n	a7a <__aeabi_d2uiz+0x2e>
     a56:	d50d      	bpl.n	a74 <__aeabi_d2uiz+0x28>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d40e      	bmi.n	a80 <__aeabi_d2uiz+0x34>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	fa23 f002 	lsr.w	r0, r3, r2
     a72:	4770      	bx	lr
     a74:	f04f 0000 	mov.w	r0, #0
     a78:	4770      	bx	lr
     a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a7e:	d102      	bne.n	a86 <__aeabi_d2uiz+0x3a>
     a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a84:	4770      	bx	lr
     a86:	f04f 0000 	mov.w	r0, #0
     a8a:	4770      	bx	lr

00000a8c <__aeabi_uldivmod>:
     a8c:	b953      	cbnz	r3, aa4 <__aeabi_uldivmod+0x18>
     a8e:	b94a      	cbnz	r2, aa4 <__aeabi_uldivmod+0x18>
     a90:	2900      	cmp	r1, #0
     a92:	bf08      	it	eq
     a94:	2800      	cmpeq	r0, #0
     a96:	bf1c      	itt	ne
     a98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     aa0:	f000 b974 	b.w	d8c <__aeabi_idiv0>
     aa4:	f1ad 0c08 	sub.w	ip, sp, #8
     aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     aac:	f000 f806 	bl	abc <__udivmoddi4>
     ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
     ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ab8:	b004      	add	sp, #16
     aba:	4770      	bx	lr

00000abc <__udivmoddi4>:
     abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ac0:	9e08      	ldr	r6, [sp, #32]
     ac2:	4604      	mov	r4, r0
     ac4:	4688      	mov	r8, r1
     ac6:	2b00      	cmp	r3, #0
     ac8:	f040 8085 	bne.w	bd6 <__udivmoddi4+0x11a>
     acc:	428a      	cmp	r2, r1
     ace:	4615      	mov	r5, r2
     ad0:	d948      	bls.n	b64 <__udivmoddi4+0xa8>
     ad2:	fab2 f282 	clz	r2, r2
     ad6:	b14a      	cbz	r2, aec <__udivmoddi4+0x30>
     ad8:	f1c2 0720 	rsb	r7, r2, #32
     adc:	fa01 f302 	lsl.w	r3, r1, r2
     ae0:	fa20 f707 	lsr.w	r7, r0, r7
     ae4:	4095      	lsls	r5, r2
     ae6:	ea47 0803 	orr.w	r8, r7, r3
     aea:	4094      	lsls	r4, r2
     aec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     af0:	0c23      	lsrs	r3, r4, #16
     af2:	fbb8 f7fe 	udiv	r7, r8, lr
     af6:	fa1f fc85 	uxth.w	ip, r5
     afa:	fb0e 8817 	mls	r8, lr, r7, r8
     afe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     b02:	fb07 f10c 	mul.w	r1, r7, ip
     b06:	4299      	cmp	r1, r3
     b08:	d909      	bls.n	b1e <__udivmoddi4+0x62>
     b0a:	18eb      	adds	r3, r5, r3
     b0c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     b10:	f080 80e3 	bcs.w	cda <__udivmoddi4+0x21e>
     b14:	4299      	cmp	r1, r3
     b16:	f240 80e0 	bls.w	cda <__udivmoddi4+0x21e>
     b1a:	3f02      	subs	r7, #2
     b1c:	442b      	add	r3, r5
     b1e:	1a5b      	subs	r3, r3, r1
     b20:	b2a4      	uxth	r4, r4
     b22:	fbb3 f0fe 	udiv	r0, r3, lr
     b26:	fb0e 3310 	mls	r3, lr, r0, r3
     b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b2e:	fb00 fc0c 	mul.w	ip, r0, ip
     b32:	45a4      	cmp	ip, r4
     b34:	d909      	bls.n	b4a <__udivmoddi4+0x8e>
     b36:	192c      	adds	r4, r5, r4
     b38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b3c:	f080 80cb 	bcs.w	cd6 <__udivmoddi4+0x21a>
     b40:	45a4      	cmp	ip, r4
     b42:	f240 80c8 	bls.w	cd6 <__udivmoddi4+0x21a>
     b46:	3802      	subs	r0, #2
     b48:	442c      	add	r4, r5
     b4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     b4e:	eba4 040c 	sub.w	r4, r4, ip
     b52:	2700      	movs	r7, #0
     b54:	b11e      	cbz	r6, b5e <__udivmoddi4+0xa2>
     b56:	40d4      	lsrs	r4, r2
     b58:	2300      	movs	r3, #0
     b5a:	e9c6 4300 	strd	r4, r3, [r6]
     b5e:	4639      	mov	r1, r7
     b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b64:	2a00      	cmp	r2, #0
     b66:	d053      	beq.n	c10 <__udivmoddi4+0x154>
     b68:	fab2 f282 	clz	r2, r2
     b6c:	2a00      	cmp	r2, #0
     b6e:	f040 80b6 	bne.w	cde <__udivmoddi4+0x222>
     b72:	1b49      	subs	r1, r1, r5
     b74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b78:	fa1f f885 	uxth.w	r8, r5
     b7c:	2701      	movs	r7, #1
     b7e:	fbb1 fcfe 	udiv	ip, r1, lr
     b82:	0c23      	lsrs	r3, r4, #16
     b84:	fb0e 111c 	mls	r1, lr, ip, r1
     b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     b8c:	fb08 f10c 	mul.w	r1, r8, ip
     b90:	4299      	cmp	r1, r3
     b92:	d907      	bls.n	ba4 <__udivmoddi4+0xe8>
     b94:	18eb      	adds	r3, r5, r3
     b96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b9a:	d202      	bcs.n	ba2 <__udivmoddi4+0xe6>
     b9c:	4299      	cmp	r1, r3
     b9e:	f200 80ec 	bhi.w	d7a <__udivmoddi4+0x2be>
     ba2:	4684      	mov	ip, r0
     ba4:	1a59      	subs	r1, r3, r1
     ba6:	b2a3      	uxth	r3, r4
     ba8:	fbb1 f0fe 	udiv	r0, r1, lr
     bac:	fb0e 1410 	mls	r4, lr, r0, r1
     bb0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     bb4:	fb08 f800 	mul.w	r8, r8, r0
     bb8:	45a0      	cmp	r8, r4
     bba:	d907      	bls.n	bcc <__udivmoddi4+0x110>
     bbc:	192c      	adds	r4, r5, r4
     bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     bc2:	d202      	bcs.n	bca <__udivmoddi4+0x10e>
     bc4:	45a0      	cmp	r8, r4
     bc6:	f200 80dc 	bhi.w	d82 <__udivmoddi4+0x2c6>
     bca:	4618      	mov	r0, r3
     bcc:	eba4 0408 	sub.w	r4, r4, r8
     bd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     bd4:	e7be      	b.n	b54 <__udivmoddi4+0x98>
     bd6:	428b      	cmp	r3, r1
     bd8:	d908      	bls.n	bec <__udivmoddi4+0x130>
     bda:	2e00      	cmp	r6, #0
     bdc:	d078      	beq.n	cd0 <__udivmoddi4+0x214>
     bde:	2700      	movs	r7, #0
     be0:	e9c6 0100 	strd	r0, r1, [r6]
     be4:	4638      	mov	r0, r7
     be6:	4639      	mov	r1, r7
     be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bec:	fab3 f783 	clz	r7, r3
     bf0:	b97f      	cbnz	r7, c12 <__udivmoddi4+0x156>
     bf2:	428b      	cmp	r3, r1
     bf4:	d302      	bcc.n	bfc <__udivmoddi4+0x140>
     bf6:	4282      	cmp	r2, r0
     bf8:	f200 80bd 	bhi.w	d76 <__udivmoddi4+0x2ba>
     bfc:	1a84      	subs	r4, r0, r2
     bfe:	eb61 0303 	sbc.w	r3, r1, r3
     c02:	2001      	movs	r0, #1
     c04:	4698      	mov	r8, r3
     c06:	2e00      	cmp	r6, #0
     c08:	d0a9      	beq.n	b5e <__udivmoddi4+0xa2>
     c0a:	e9c6 4800 	strd	r4, r8, [r6]
     c0e:	e7a6      	b.n	b5e <__udivmoddi4+0xa2>
     c10:	deff      	udf	#255	; 0xff
     c12:	f1c7 0520 	rsb	r5, r7, #32
     c16:	40bb      	lsls	r3, r7
     c18:	fa22 fc05 	lsr.w	ip, r2, r5
     c1c:	ea4c 0c03 	orr.w	ip, ip, r3
     c20:	fa01 f407 	lsl.w	r4, r1, r7
     c24:	fa20 f805 	lsr.w	r8, r0, r5
     c28:	fa21 f305 	lsr.w	r3, r1, r5
     c2c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     c30:	ea48 0404 	orr.w	r4, r8, r4
     c34:	fbb3 f9fe 	udiv	r9, r3, lr
     c38:	0c21      	lsrs	r1, r4, #16
     c3a:	fb0e 3319 	mls	r3, lr, r9, r3
     c3e:	fa1f f88c 	uxth.w	r8, ip
     c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     c46:	fb09 fa08 	mul.w	sl, r9, r8
     c4a:	459a      	cmp	sl, r3
     c4c:	fa02 f207 	lsl.w	r2, r2, r7
     c50:	fa00 f107 	lsl.w	r1, r0, r7
     c54:	d90b      	bls.n	c6e <__udivmoddi4+0x1b2>
     c56:	eb1c 0303 	adds.w	r3, ip, r3
     c5a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     c5e:	f080 8088 	bcs.w	d72 <__udivmoddi4+0x2b6>
     c62:	459a      	cmp	sl, r3
     c64:	f240 8085 	bls.w	d72 <__udivmoddi4+0x2b6>
     c68:	f1a9 0902 	sub.w	r9, r9, #2
     c6c:	4463      	add	r3, ip
     c6e:	eba3 030a 	sub.w	r3, r3, sl
     c72:	b2a4      	uxth	r4, r4
     c74:	fbb3 f0fe 	udiv	r0, r3, lr
     c78:	fb0e 3310 	mls	r3, lr, r0, r3
     c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c80:	fb00 f808 	mul.w	r8, r0, r8
     c84:	45a0      	cmp	r8, r4
     c86:	d908      	bls.n	c9a <__udivmoddi4+0x1de>
     c88:	eb1c 0404 	adds.w	r4, ip, r4
     c8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     c90:	d26b      	bcs.n	d6a <__udivmoddi4+0x2ae>
     c92:	45a0      	cmp	r8, r4
     c94:	d969      	bls.n	d6a <__udivmoddi4+0x2ae>
     c96:	3802      	subs	r0, #2
     c98:	4464      	add	r4, ip
     c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     c9e:	eba4 0408 	sub.w	r4, r4, r8
     ca2:	fba0 8902 	umull	r8, r9, r0, r2
     ca6:	454c      	cmp	r4, r9
     ca8:	46c6      	mov	lr, r8
     caa:	464b      	mov	r3, r9
     cac:	d354      	bcc.n	d58 <__udivmoddi4+0x29c>
     cae:	d051      	beq.n	d54 <__udivmoddi4+0x298>
     cb0:	2e00      	cmp	r6, #0
     cb2:	d069      	beq.n	d88 <__udivmoddi4+0x2cc>
     cb4:	ebb1 020e 	subs.w	r2, r1, lr
     cb8:	eb64 0403 	sbc.w	r4, r4, r3
     cbc:	fa04 f505 	lsl.w	r5, r4, r5
     cc0:	fa22 f307 	lsr.w	r3, r2, r7
     cc4:	40fc      	lsrs	r4, r7
     cc6:	431d      	orrs	r5, r3
     cc8:	e9c6 5400 	strd	r5, r4, [r6]
     ccc:	2700      	movs	r7, #0
     cce:	e746      	b.n	b5e <__udivmoddi4+0xa2>
     cd0:	4637      	mov	r7, r6
     cd2:	4630      	mov	r0, r6
     cd4:	e743      	b.n	b5e <__udivmoddi4+0xa2>
     cd6:	4618      	mov	r0, r3
     cd8:	e737      	b.n	b4a <__udivmoddi4+0x8e>
     cda:	4607      	mov	r7, r0
     cdc:	e71f      	b.n	b1e <__udivmoddi4+0x62>
     cde:	f1c2 0320 	rsb	r3, r2, #32
     ce2:	fa20 f703 	lsr.w	r7, r0, r3
     ce6:	4095      	lsls	r5, r2
     ce8:	fa01 f002 	lsl.w	r0, r1, r2
     cec:	fa21 f303 	lsr.w	r3, r1, r3
     cf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     cf4:	4338      	orrs	r0, r7
     cf6:	0c01      	lsrs	r1, r0, #16
     cf8:	fbb3 f7fe 	udiv	r7, r3, lr
     cfc:	fa1f f885 	uxth.w	r8, r5
     d00:	fb0e 3317 	mls	r3, lr, r7, r3
     d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d08:	fb07 f308 	mul.w	r3, r7, r8
     d0c:	428b      	cmp	r3, r1
     d0e:	fa04 f402 	lsl.w	r4, r4, r2
     d12:	d907      	bls.n	d24 <__udivmoddi4+0x268>
     d14:	1869      	adds	r1, r5, r1
     d16:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     d1a:	d228      	bcs.n	d6e <__udivmoddi4+0x2b2>
     d1c:	428b      	cmp	r3, r1
     d1e:	d926      	bls.n	d6e <__udivmoddi4+0x2b2>
     d20:	3f02      	subs	r7, #2
     d22:	4429      	add	r1, r5
     d24:	1acb      	subs	r3, r1, r3
     d26:	b281      	uxth	r1, r0
     d28:	fbb3 f0fe 	udiv	r0, r3, lr
     d2c:	fb0e 3310 	mls	r3, lr, r0, r3
     d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d34:	fb00 f308 	mul.w	r3, r0, r8
     d38:	428b      	cmp	r3, r1
     d3a:	d907      	bls.n	d4c <__udivmoddi4+0x290>
     d3c:	1869      	adds	r1, r5, r1
     d3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     d42:	d210      	bcs.n	d66 <__udivmoddi4+0x2aa>
     d44:	428b      	cmp	r3, r1
     d46:	d90e      	bls.n	d66 <__udivmoddi4+0x2aa>
     d48:	3802      	subs	r0, #2
     d4a:	4429      	add	r1, r5
     d4c:	1ac9      	subs	r1, r1, r3
     d4e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     d52:	e714      	b.n	b7e <__udivmoddi4+0xc2>
     d54:	4541      	cmp	r1, r8
     d56:	d2ab      	bcs.n	cb0 <__udivmoddi4+0x1f4>
     d58:	ebb8 0e02 	subs.w	lr, r8, r2
     d5c:	eb69 020c 	sbc.w	r2, r9, ip
     d60:	3801      	subs	r0, #1
     d62:	4613      	mov	r3, r2
     d64:	e7a4      	b.n	cb0 <__udivmoddi4+0x1f4>
     d66:	4660      	mov	r0, ip
     d68:	e7f0      	b.n	d4c <__udivmoddi4+0x290>
     d6a:	4618      	mov	r0, r3
     d6c:	e795      	b.n	c9a <__udivmoddi4+0x1de>
     d6e:	4667      	mov	r7, ip
     d70:	e7d8      	b.n	d24 <__udivmoddi4+0x268>
     d72:	4681      	mov	r9, r0
     d74:	e77b      	b.n	c6e <__udivmoddi4+0x1b2>
     d76:	4638      	mov	r0, r7
     d78:	e745      	b.n	c06 <__udivmoddi4+0x14a>
     d7a:	f1ac 0c02 	sub.w	ip, ip, #2
     d7e:	442b      	add	r3, r5
     d80:	e710      	b.n	ba4 <__udivmoddi4+0xe8>
     d82:	3802      	subs	r0, #2
     d84:	442c      	add	r4, r5
     d86:	e721      	b.n	bcc <__udivmoddi4+0x110>
     d88:	4637      	mov	r7, r6
     d8a:	e6e8      	b.n	b5e <__udivmoddi4+0xa2>

00000d8c <__aeabi_idiv0>:
     d8c:	4770      	bx	lr
     d8e:	bf00      	nop

00000d90 <cmu_update_clocks>:
    // LFE Clock
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
}
void cmu_update_clocks()
{
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
     d90:	49a7      	ldr	r1, [pc, #668]	; (1030 <cmu_update_clocks+0x2a0>)
     d92:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
     d96:	049b      	lsls	r3, r3, #18
{
     d98:	b530      	push	{r4, r5, lr}
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
     d9a:	d518      	bpl.n	dce <cmu_update_clocks+0x3e>
    {
        float fPLLMul = (float)(((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
     d9c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
     d9e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
     da0:	f3c2 420b 	ubfx	r2, r2, #16, #12
     da4:	3201      	adds	r2, #1
     da6:	ee07 2a90 	vmov	s15, r2
     daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
     dae:	3301      	adds	r3, #1
     db0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
     db4:	ee07 3a90 	vmov	s15, r3

        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
     db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        float fPLLMul = (float)(((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
     dba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
     dbe:	f003 0318 	and.w	r3, r3, #24
     dc2:	2b08      	cmp	r3, #8
        float fPLLMul = (float)(((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
     dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
     dc8:	d025      	beq.n	e16 <cmu_update_clocks+0x86>
     dca:	d813      	bhi.n	df4 <cmu_update_clocks+0x64>
     dcc:	b1cb      	cbz	r3, e02 <cmu_update_clocks+0x72>
                HFRCO_VALUE = 0 * fPLLMul; // TODO: Support external clock
            break;
        }
    }

    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
     dce:	4b99      	ldr	r3, [pc, #612]	; (1034 <cmu_update_clocks+0x2a4>)

    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
     dd0:	4997      	ldr	r1, [pc, #604]	; (1030 <cmu_update_clocks+0x2a0>)
    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
     dd2:	6818      	ldr	r0, [r3, #0]
     dd4:	4b98      	ldr	r3, [pc, #608]	; (1038 <cmu_update_clocks+0x2a8>)
     dd6:	6018      	str	r0, [r3, #0]
    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
     dd8:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
     ddc:	4b97      	ldr	r3, [pc, #604]	; (103c <cmu_update_clocks+0x2ac>)
     dde:	f002 0207 	and.w	r2, r2, #7
     de2:	3a01      	subs	r2, #1
     de4:	2a06      	cmp	r2, #6
     de6:	d824      	bhi.n	e32 <cmu_update_clocks+0xa2>
     de8:	e8df f002 	tbb	[pc, r2]
     dec:	b4b2211e 	.word	0xb4b2211e
     df0:	bbb7      	.short	0xbbb7
     df2:	bd          	.byte	0xbd
     df3:	00          	.byte	0x00
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
     df4:	2b10      	cmp	r3, #16
     df6:	d011      	beq.n	e1c <cmu_update_clocks+0x8c>
     df8:	2b18      	cmp	r3, #24
     dfa:	d1e8      	bne.n	dce <cmu_update_clocks+0x3e>
                HFRCO_VALUE = 0 * fPLLMul; // TODO: Support external clock
     dfc:	ed9f 7a90 	vldr	s14, [pc, #576]	; 1040 <cmu_update_clocks+0x2b0>
     e00:	e001      	b.n	e06 <cmu_update_clocks+0x76>
                HFRCO_VALUE = HFXO_VALUE * fPLLMul;
     e02:	ed9f 7a90 	vldr	s14, [pc, #576]	; 1044 <cmu_update_clocks+0x2b4>
                HFRCO_VALUE = 0 * fPLLMul; // TODO: Support external clock
     e06:	4b90      	ldr	r3, [pc, #576]	; (1048 <cmu_update_clocks+0x2b8>)
     e08:	ee67 7a87 	vmul.f32	s15, s15, s14
     e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e10:	edc3 7a00 	vstr	s15, [r3]
            break;
     e14:	e7db      	b.n	dce <cmu_update_clocks+0x3e>
                HFRCO_VALUE = LFXO_VALUE * fPLLMul;
     e16:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 104c <cmu_update_clocks+0x2bc>
     e1a:	e7f4      	b.n	e06 <cmu_update_clocks+0x76>
                HFRCO_VALUE = USHFRCO_VALUE * fPLLMul;
     e1c:	4b8c      	ldr	r3, [pc, #560]	; (1050 <cmu_update_clocks+0x2c0>)
     e1e:	ed93 7a00 	vldr	s14, [r3]
     e22:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     e26:	e7ee      	b.n	e06 <cmu_update_clocks+0x76>
    {
        case CMU_HFCLKSTATUS_SELECTED_HFRCO:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE;
     e28:	4a87      	ldr	r2, [pc, #540]	; (1048 <cmu_update_clocks+0x2b8>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_HFRCODIV2:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
        case CMU_HFCLKSTATUS_SELECTED_USHFRCO:
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
     e2a:	6812      	ldr	r2, [r2, #0]
     e2c:	e000      	b.n	e30 <cmu_update_clocks+0xa0>
            HFSRC_CLOCK_FREQ = HFXO_VALUE;
     e2e:	4a89      	ldr	r2, [pc, #548]	; (1054 <cmu_update_clocks+0x2c4>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_CLKIN0:
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
     e30:	601a      	str	r2, [r3, #0]
        break;
    }

    HF_CLOCK_FREQ = HFSRC_CLOCK_FREQ / (((CMU->HFPRESC & _CMU_HFPRESC_PRESC_MASK) >> _CMU_HFPRESC_PRESC_SHIFT) + 1);
     e32:	681c      	ldr	r4, [r3, #0]
     e34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
     e38:	4a87      	ldr	r2, [pc, #540]	; (1058 <cmu_update_clocks+0x2c8>)
     e3a:	f3c3 2304 	ubfx	r3, r3, #8, #5
     e3e:	3301      	adds	r3, #1
     e40:	fbb4 f3f3 	udiv	r3, r4, r3
     e44:	6013      	str	r3, [r2, #0]

    switch(CMU->HFPRESC & _CMU_HFPRESC_HFCLKLEPRESC_MASK)
     e46:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
     e4a:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
     e4e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
     e52:	f000 808a 	beq.w	f6a <cmu_update_clocks+0x1da>
     e56:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
     e5a:	f000 8088 	beq.w	f6e <cmu_update_clocks+0x1de>
     e5e:	b912      	cbnz	r2, e66 <cmu_update_clocks+0xd6>
    {
        case CMU_HFPRESC_HFCLKLEPRESC_DIV2:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 1;
     e60:	085a      	lsrs	r2, r3, #1
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV4:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV8:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
     e62:	497e      	ldr	r1, [pc, #504]	; (105c <cmu_update_clocks+0x2cc>)
     e64:	600a      	str	r2, [r1, #0]
        break;
    }

    HFBUS_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFBUSPRESC & _CMU_HFBUSPRESC_PRESC_MASK) >> _CMU_HFBUSPRESC_PRESC_SHIFT) + 1);
     e66:	4a72      	ldr	r2, [pc, #456]	; (1030 <cmu_update_clocks+0x2a0>)
     e68:	4d7d      	ldr	r5, [pc, #500]	; (1060 <cmu_update_clocks+0x2d0>)
     e6a:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
     e6e:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e72:	3101      	adds	r1, #1
     e74:	fbb3 f1f1 	udiv	r1, r3, r1
     e78:	6029      	str	r1, [r5, #0]
    HFCORE_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFCOREPRESC & _CMU_HFCOREPRESC_PRESC_MASK) >> _CMU_HFCOREPRESC_PRESC_SHIFT) + 1);
     e7a:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
     e7e:	4d79      	ldr	r5, [pc, #484]	; (1064 <cmu_update_clocks+0x2d4>)
     e80:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e84:	3101      	adds	r1, #1
     e86:	fbb3 f1f1 	udiv	r1, r3, r1
     e8a:	6029      	str	r1, [r5, #0]
    HFEXP_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFEXPPRESC & _CMU_HFEXPPRESC_PRESC_MASK) >> _CMU_HFEXPPRESC_PRESC_SHIFT) + 1);
     e8c:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
     e90:	4d75      	ldr	r5, [pc, #468]	; (1068 <cmu_update_clocks+0x2d8>)
     e92:	f3c1 2104 	ubfx	r1, r1, #8, #5
     e96:	3101      	adds	r1, #1
     e98:	fbb3 f1f1 	udiv	r1, r3, r1
     e9c:	6029      	str	r1, [r5, #0]
    HFPER_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESC & _CMU_HFPERPRESC_PRESC_MASK) >> _CMU_HFPERPRESC_PRESC_SHIFT) + 1);
     e9e:	f8d2 110c 	ldr.w	r1, [r2, #268]	; 0x10c
     ea2:	4d72      	ldr	r5, [pc, #456]	; (106c <cmu_update_clocks+0x2dc>)
     ea4:	f3c1 2108 	ubfx	r1, r1, #8, #9
     ea8:	3101      	adds	r1, #1
     eaa:	fbb3 f1f1 	udiv	r1, r3, r1
     eae:	6029      	str	r1, [r5, #0]
    HFPERB_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCB & _CMU_HFPERPRESCB_PRESC_MASK) >> _CMU_HFPERPRESCB_PRESC_SHIFT) + 1);
     eb0:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
     eb4:	4d6e      	ldr	r5, [pc, #440]	; (1070 <cmu_update_clocks+0x2e0>)
     eb6:	f3c1 2108 	ubfx	r1, r1, #8, #9
     eba:	3101      	adds	r1, #1
     ebc:	fbb3 f1f1 	udiv	r1, r3, r1
     ec0:	6029      	str	r1, [r5, #0]
    HFPERC_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCC & _CMU_HFPERPRESCC_PRESC_MASK) >> _CMU_HFPERPRESCC_PRESC_SHIFT) + 1);
     ec2:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
     ec6:	4d6b      	ldr	r5, [pc, #428]	; (1074 <cmu_update_clocks+0x2e4>)
     ec8:	f3c1 2108 	ubfx	r1, r1, #8, #9
     ecc:	3101      	adds	r1, #1
     ece:	fbb3 f1f1 	udiv	r1, r3, r1
     ed2:	6029      	str	r1, [r5, #0]

    switch(CMU->DBGCLKSEL & _CMU_DBGCLKSEL_DBG_MASK)
     ed4:	6f12      	ldr	r2, [r2, #112]	; 0x70
     ed6:	f002 0203 	and.w	r2, r2, #3
     eda:	2a01      	cmp	r2, #1
     edc:	d04f      	beq.n	f7e <cmu_update_clocks+0x1ee>
     ede:	2a00      	cmp	r2, #0
     ee0:	d047      	beq.n	f72 <cmu_update_clocks+0x1e2>
     ee2:	2a02      	cmp	r2, #2
     ee4:	d048      	beq.n	f78 <cmu_update_clocks+0x1e8>
        case CMU_DBGCLKSEL_DBG_HFRCODIV2:
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
    }

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
     ee6:	4952      	ldr	r1, [pc, #328]	; (1030 <cmu_update_clocks+0x2a0>)
     ee8:	4a63      	ldr	r2, [pc, #396]	; (1078 <cmu_update_clocks+0x2e8>)
     eea:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
     eee:	f003 0330 	and.w	r3, r3, #48	; 0x30
     ef2:	2b10      	cmp	r3, #16
     ef4:	d04c      	beq.n	f90 <cmu_update_clocks+0x200>
     ef6:	d845      	bhi.n	f84 <cmu_update_clocks+0x1f4>
     ef8:	2b00      	cmp	r3, #0
     efa:	d04c      	beq.n	f96 <cmu_update_clocks+0x206>
        case CMU_ADCCTRL_ADC0CLKSEL_HFSRCCLK:
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC0_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKDIV_MASK) >> _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) + 1);
     efc:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
     f00:	6815      	ldr	r5, [r2, #0]
     f02:	f003 0303 	and.w	r3, r3, #3
     f06:	3301      	adds	r3, #1
     f08:	fbb5 f3f3 	udiv	r3, r5, r3
     f0c:	6013      	str	r3, [r2, #0]

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
     f0e:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
     f12:	4a5a      	ldr	r2, [pc, #360]	; (107c <cmu_update_clocks+0x2ec>)
     f14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
     f1c:	d045      	beq.n	faa <cmu_update_clocks+0x21a>
     f1e:	d83c      	bhi.n	f9a <cmu_update_clocks+0x20a>
     f20:	2b00      	cmp	r3, #0
     f22:	d045      	beq.n	fb0 <cmu_update_clocks+0x220>
        case CMU_ADCCTRL_ADC1CLKSEL_HFSRCCLK:
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC1_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKDIV_MASK) >> _CMU_ADCCTRL_ADC1CLKDIV_SHIFT) + 1);
     f24:	4b42      	ldr	r3, [pc, #264]	; (1030 <cmu_update_clocks+0x2a0>)
     f26:	6810      	ldr	r0, [r2, #0]
     f28:	f8d3 115c 	ldr.w	r1, [r3, #348]	; 0x15c
     f2c:	f3c1 4101 	ubfx	r1, r1, #16, #2
     f30:	3101      	adds	r1, #1
     f32:	fbb0 f1f1 	udiv	r1, r0, r1
     f36:	6011      	str	r1, [r2, #0]

    switch(CMU->LFACLKSEL & _CMU_LFACLKSEL_LFA_MASK)
     f38:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
     f3c:	4a50      	ldr	r2, [pc, #320]	; (1080 <cmu_update_clocks+0x2f0>)
     f3e:	f001 0107 	and.w	r1, r1, #7
     f42:	2904      	cmp	r1, #4
     f44:	d838      	bhi.n	fb8 <cmu_update_clocks+0x228>
     f46:	e8df f001 	tbb	[pc, r1]
     f4a:	6b35      	.short	0x6b35
     f4c:	376e      	.short	0x376e
     f4e:	71          	.byte	0x71
     f4f:	00          	.byte	0x00
            HFSRC_CLOCK_FREQ = LFRCO_VALUE;
     f50:	4a4c      	ldr	r2, [pc, #304]	; (1084 <cmu_update_clocks+0x2f4>)
     f52:	e76a      	b.n	e2a <cmu_update_clocks+0x9a>
            HFSRC_CLOCK_FREQ = LFXO_VALUE;
     f54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     f58:	e76a      	b.n	e30 <cmu_update_clocks+0xa0>
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
     f5a:	4a3b      	ldr	r2, [pc, #236]	; (1048 <cmu_update_clocks+0x2b8>)
     f5c:	6812      	ldr	r2, [r2, #0]
     f5e:	0852      	lsrs	r2, r2, #1
     f60:	e766      	b.n	e30 <cmu_update_clocks+0xa0>
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
     f62:	4a3b      	ldr	r2, [pc, #236]	; (1050 <cmu_update_clocks+0x2c0>)
     f64:	e761      	b.n	e2a <cmu_update_clocks+0x9a>
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
     f66:	2200      	movs	r2, #0
     f68:	e762      	b.n	e30 <cmu_update_clocks+0xa0>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
     f6a:	089a      	lsrs	r2, r3, #2
     f6c:	e779      	b.n	e62 <cmu_update_clocks+0xd2>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
     f6e:	08da      	lsrs	r2, r3, #3
     f70:	e777      	b.n	e62 <cmu_update_clocks+0xd2>
            DBG_CLOCK_FREQ = AUX_CLOCK_FREQ;
     f72:	4b45      	ldr	r3, [pc, #276]	; (1088 <cmu_update_clocks+0x2f8>)
     f74:	6018      	str	r0, [r3, #0]
        break;
     f76:	e7b6      	b.n	ee6 <cmu_update_clocks+0x156>
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
     f78:	4b33      	ldr	r3, [pc, #204]	; (1048 <cmu_update_clocks+0x2b8>)
     f7a:	681b      	ldr	r3, [r3, #0]
     f7c:	085b      	lsrs	r3, r3, #1
     f7e:	4a42      	ldr	r2, [pc, #264]	; (1088 <cmu_update_clocks+0x2f8>)
     f80:	6013      	str	r3, [r2, #0]
        break;
     f82:	e7b0      	b.n	ee6 <cmu_update_clocks+0x156>
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
     f84:	2b20      	cmp	r3, #32
     f86:	d005      	beq.n	f94 <cmu_update_clocks+0x204>
     f88:	2b30      	cmp	r3, #48	; 0x30
     f8a:	d1b7      	bne.n	efc <cmu_update_clocks+0x16c>
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
     f8c:	6014      	str	r4, [r2, #0]
        break;
     f8e:	e7b5      	b.n	efc <cmu_update_clocks+0x16c>
            ADC0_CLOCK_FREQ = AUX_CLOCK_FREQ;
     f90:	6010      	str	r0, [r2, #0]
        break;
     f92:	e7b3      	b.n	efc <cmu_update_clocks+0x16c>
            ADC0_CLOCK_FREQ = HFXO_VALUE;
     f94:	4b2f      	ldr	r3, [pc, #188]	; (1054 <cmu_update_clocks+0x2c4>)
     f96:	6013      	str	r3, [r2, #0]
        break;
     f98:	e7b0      	b.n	efc <cmu_update_clocks+0x16c>
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
     f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
     f9e:	d006      	beq.n	fae <cmu_update_clocks+0x21e>
     fa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
     fa4:	d1be      	bne.n	f24 <cmu_update_clocks+0x194>
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
     fa6:	6014      	str	r4, [r2, #0]
        break;
     fa8:	e7bc      	b.n	f24 <cmu_update_clocks+0x194>
            ADC1_CLOCK_FREQ = AUX_CLOCK_FREQ;
     faa:	6010      	str	r0, [r2, #0]
        break;
     fac:	e7ba      	b.n	f24 <cmu_update_clocks+0x194>
            ADC1_CLOCK_FREQ = HFXO_VALUE;
     fae:	4b29      	ldr	r3, [pc, #164]	; (1054 <cmu_update_clocks+0x2c4>)
     fb0:	6013      	str	r3, [r2, #0]
        break;
     fb2:	e7b7      	b.n	f24 <cmu_update_clocks+0x194>
    {
        case CMU_LFACLKSEL_LFA_DISABLED:
            LFA_CLOCK_FREQ = 0;
     fb4:	2100      	movs	r1, #0
        break;
        case CMU_LFACLKSEL_LFA_LFXO:
            LFA_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFACLKSEL_LFA_ULFRCO:
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
     fb6:	6011      	str	r1, [r2, #0]
        break;
    }

    LESENSE_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LESENSE_MASK) >> _CMU_LFAPRESC0_LESENSE_SHIFT);
     fb8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
     fbc:	6812      	ldr	r2, [r2, #0]
     fbe:	4833      	ldr	r0, [pc, #204]	; (108c <cmu_update_clocks+0x2fc>)
     fc0:	f3c1 2101 	ubfx	r1, r1, #8, #2
     fc4:	fa02 f101 	lsl.w	r1, r2, r1
     fc8:	6001      	str	r1, [r0, #0]
    RTC_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK) >> _CMU_LFAPRESC0_RTC_SHIFT);
     fca:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
     fce:	4830      	ldr	r0, [pc, #192]	; (1090 <cmu_update_clocks+0x300>)
     fd0:	f3c1 4103 	ubfx	r1, r1, #16, #4
     fd4:	fa02 f101 	lsl.w	r1, r2, r1
     fd8:	6001      	str	r1, [r0, #0]
    LCD_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK) >> _CMU_LFAPRESC0_LCD_SHIFT);
     fda:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
     fde:	482d      	ldr	r0, [pc, #180]	; (1094 <cmu_update_clocks+0x304>)
     fe0:	f3c1 3102 	ubfx	r1, r1, #12, #3
     fe4:	fa02 f101 	lsl.w	r1, r2, r1
     fe8:	6001      	str	r1, [r0, #0]
    LETIMER0_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK) >> _CMU_LFAPRESC0_LETIMER0_SHIFT);
     fea:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
     fee:	482a      	ldr	r0, [pc, #168]	; (1098 <cmu_update_clocks+0x308>)
     ff0:	f001 010f 	and.w	r1, r1, #15
     ff4:	fa02 f101 	lsl.w	r1, r2, r1
     ff8:	6001      	str	r1, [r0, #0]
    LETIMER1_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER1_MASK) >> _CMU_LFAPRESC0_LETIMER1_SHIFT);
     ffa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
     ffe:	f3c1 1103 	ubfx	r1, r1, #4, #4
    1002:	408a      	lsls	r2, r1
    1004:	4925      	ldr	r1, [pc, #148]	; (109c <cmu_update_clocks+0x30c>)
    1006:	600a      	str	r2, [r1, #0]

    switch(CMU->LFBCLKSEL & _CMU_LFBCLKSEL_LFB_MASK)
    1008:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    100c:	4b24      	ldr	r3, [pc, #144]	; (10a0 <cmu_update_clocks+0x310>)
    100e:	f002 0207 	and.w	r2, r2, #7
    1012:	2a04      	cmp	r2, #4
    1014:	d84a      	bhi.n	10ac <cmu_update_clocks+0x31c>
    1016:	e8df f002 	tbb	[pc, r2]
    101a:	7647      	.short	0x7647
    101c:	7c79      	.short	0x7c79
    101e:	7e          	.byte	0x7e
    101f:	00          	.byte	0x00
            LFA_CLOCK_FREQ = LFRCO_VALUE;
    1020:	4918      	ldr	r1, [pc, #96]	; (1084 <cmu_update_clocks+0x2f4>)
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    1022:	6809      	ldr	r1, [r1, #0]
    1024:	e7c7      	b.n	fb6 <cmu_update_clocks+0x226>
            LFA_CLOCK_FREQ = LFXO_VALUE;
    1026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    102a:	e7c4      	b.n	fb6 <cmu_update_clocks+0x226>
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    102c:	491d      	ldr	r1, [pc, #116]	; (10a4 <cmu_update_clocks+0x314>)
    102e:	e7f8      	b.n	1022 <cmu_update_clocks+0x292>
    1030:	400e4000 	.word	0x400e4000
    1034:	20000000 	.word	0x20000000
    1038:	200000e8 	.word	0x200000e8
    103c:	200000d0 	.word	0x200000d0
    1040:	00000000 	.word	0x00000000
    1044:	4b189680 	.word	0x4b189680
    1048:	20000004 	.word	0x20000004
    104c:	47000000 	.word	0x47000000
    1050:	20000010 	.word	0x20000010
    1054:	00989680 	.word	0x00989680
    1058:	200000f0 	.word	0x200000f0
    105c:	200000a8 	.word	0x200000a8
    1060:	200000d4 	.word	0x200000d4
    1064:	200000bc 	.word	0x200000bc
    1068:	200000dc 	.word	0x200000dc
    106c:	200000ec 	.word	0x200000ec
    1070:	200000e0 	.word	0x200000e0
    1074:	200000d8 	.word	0x200000d8
    1078:	200000b4 	.word	0x200000b4
    107c:	200000c0 	.word	0x200000c0
    1080:	200000a4 	.word	0x200000a4
    1084:	20000008 	.word	0x20000008
    1088:	20000104 	.word	0x20000104
    108c:	200000f4 	.word	0x200000f4
    1090:	200000f8 	.word	0x200000f8
    1094:	200000fc 	.word	0x200000fc
    1098:	2000009c 	.word	0x2000009c
    109c:	200000b0 	.word	0x200000b0
    10a0:	200000b8 	.word	0x200000b8
    10a4:	2000000c 	.word	0x2000000c
    {
        case CMU_LFBCLKSEL_LFB_DISABLED:
            LFB_CLOCK_FREQ = 0;
    10a8:	2200      	movs	r2, #0
        break;
        case CMU_LFBCLKSEL_LFB_HFCLKLE:
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
        break;
        case CMU_LFBCLKSEL_LFB_ULFRCO:
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    10aa:	601a      	str	r2, [r3, #0]
        break;
    }

    LEUART0_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK) >> _CMU_LFBPRESC0_LEUART0_SHIFT);
    10ac:	681a      	ldr	r2, [r3, #0]
    10ae:	4b31      	ldr	r3, [pc, #196]	; (1174 <cmu_update_clocks+0x3e4>)
    10b0:	4831      	ldr	r0, [pc, #196]	; (1178 <cmu_update_clocks+0x3e8>)
    10b2:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    10b6:	f001 0103 	and.w	r1, r1, #3
    10ba:	fa02 f101 	lsl.w	r1, r2, r1
    10be:	6001      	str	r1, [r0, #0]
    LEUART1_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK) >> _CMU_LFBPRESC0_LEUART1_SHIFT);
    10c0:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    10c4:	482d      	ldr	r0, [pc, #180]	; (117c <cmu_update_clocks+0x3ec>)
    10c6:	f3c1 1101 	ubfx	r1, r1, #4, #2
    10ca:	fa02 f101 	lsl.w	r1, r2, r1
    10ce:	6001      	str	r1, [r0, #0]
    SYSTICK_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_SYSTICK_MASK) >> _CMU_LFBPRESC0_SYSTICK_SHIFT);
    10d0:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    10d4:	482a      	ldr	r0, [pc, #168]	; (1180 <cmu_update_clocks+0x3f0>)
    10d6:	f3c1 2103 	ubfx	r1, r1, #8, #4
    10da:	fa02 f101 	lsl.w	r1, r2, r1
    10de:	6001      	str	r1, [r0, #0]
    CSEN_CLOCK_FREQ = LFB_CLOCK_FREQ << (((CMU->LFBPRESC0 & _CMU_LFBPRESC0_CSEN_MASK) >> _CMU_LFBPRESC0_CSEN_SHIFT) + 4);
    10e0:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    10e4:	f3c1 3101 	ubfx	r1, r1, #12, #2
    10e8:	3104      	adds	r1, #4
    10ea:	408a      	lsls	r2, r1
    10ec:	4925      	ldr	r1, [pc, #148]	; (1184 <cmu_update_clocks+0x3f4>)
    10ee:	600a      	str	r2, [r1, #0]

    switch(CMU->LFCCLKSEL & _CMU_LFCCLKSEL_LFC_MASK)
    10f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    10f4:	f002 0207 	and.w	r2, r2, #7
    10f8:	2a04      	cmp	r2, #4
    10fa:	d811      	bhi.n	1120 <cmu_update_clocks+0x390>
    10fc:	e8df f002 	tbb	[pc, r2]
    1100:	10201c0d 	.word	0x10201c0d
    1104:	24          	.byte	0x24
    1105:	00          	.byte	0x00
            LFB_CLOCK_FREQ = LFRCO_VALUE;
    1106:	4a20      	ldr	r2, [pc, #128]	; (1188 <cmu_update_clocks+0x3f8>)
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    1108:	6812      	ldr	r2, [r2, #0]
    110a:	e7ce      	b.n	10aa <cmu_update_clocks+0x31a>
            LFB_CLOCK_FREQ = LFXO_VALUE;
    110c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1110:	e7cb      	b.n	10aa <cmu_update_clocks+0x31a>
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
    1112:	4a1e      	ldr	r2, [pc, #120]	; (118c <cmu_update_clocks+0x3fc>)
    1114:	e7f8      	b.n	1108 <cmu_update_clocks+0x378>
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    1116:	4a1e      	ldr	r2, [pc, #120]	; (1190 <cmu_update_clocks+0x400>)
    1118:	e7f6      	b.n	1108 <cmu_update_clocks+0x378>
    {
        case CMU_LFCCLKSEL_LFC_DISABLED:
            LFC_CLOCK_FREQ = 0;
    111a:	4a1e      	ldr	r2, [pc, #120]	; (1194 <cmu_update_clocks+0x404>)
    111c:	2100      	movs	r1, #0
        break;
        case CMU_LFCCLKSEL_LFC_LFXO:
            LFC_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFCCLKSEL_LFC_ULFRCO:
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    111e:	6011      	str	r1, [r2, #0]
        break;
    }

    switch(CMU->LFECLKSEL & _CMU_LFECLKSEL_LFE_MASK)
    1120:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1124:	4b1c      	ldr	r3, [pc, #112]	; (1198 <cmu_update_clocks+0x408>)
    1126:	f002 0207 	and.w	r2, r2, #7
    112a:	2a04      	cmp	r2, #4
    112c:	d810      	bhi.n	1150 <cmu_update_clocks+0x3c0>
    112e:	e8df f002 	tbb	[pc, r2]
    1132:	190d      	.short	0x190d
    1134:	0f1c      	.short	0x0f1c
    1136:	1f          	.byte	0x1f
    1137:	00          	.byte	0x00
            LFC_CLOCK_FREQ = LFRCO_VALUE;
    1138:	4a13      	ldr	r2, [pc, #76]	; (1188 <cmu_update_clocks+0x3f8>)
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    113a:	6811      	ldr	r1, [r2, #0]
    113c:	4a15      	ldr	r2, [pc, #84]	; (1194 <cmu_update_clocks+0x404>)
    113e:	e7ee      	b.n	111e <cmu_update_clocks+0x38e>
            LFC_CLOCK_FREQ = LFXO_VALUE;
    1140:	4a14      	ldr	r2, [pc, #80]	; (1194 <cmu_update_clocks+0x404>)
    1142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1146:	e7ea      	b.n	111e <cmu_update_clocks+0x38e>
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    1148:	4a11      	ldr	r2, [pc, #68]	; (1190 <cmu_update_clocks+0x400>)
    114a:	e7f6      	b.n	113a <cmu_update_clocks+0x3aa>
    {
        case CMU_LFECLKSEL_LFE_DISABLED:
            LFE_CLOCK_FREQ = 0;
    114c:	2200      	movs	r2, #0
        break;
        case CMU_LFECLKSEL_LFE_LFXO:
            LFE_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFECLKSEL_LFE_ULFRCO:
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    114e:	601a      	str	r2, [r3, #0]
        break;
    }

    RTCC_CLOCK_FREQ = LFE_CLOCK_FREQ << ((CMU->LFEPRESC0 & _CMU_LFEPRESC0_RTCC_MASK) >> _CMU_LFEPRESC0_RTCC_SHIFT);
    1150:	4a08      	ldr	r2, [pc, #32]	; (1174 <cmu_update_clocks+0x3e4>)
    1152:	681b      	ldr	r3, [r3, #0]
    1154:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
    1158:	f002 0203 	and.w	r2, r2, #3
    115c:	4093      	lsls	r3, r2
    115e:	4a0f      	ldr	r2, [pc, #60]	; (119c <cmu_update_clocks+0x40c>)
    1160:	6013      	str	r3, [r2, #0]
}
    1162:	bd30      	pop	{r4, r5, pc}
            LFE_CLOCK_FREQ = LFRCO_VALUE;
    1164:	4a08      	ldr	r2, [pc, #32]	; (1188 <cmu_update_clocks+0x3f8>)
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    1166:	6812      	ldr	r2, [r2, #0]
    1168:	e7f1      	b.n	114e <cmu_update_clocks+0x3be>
            LFE_CLOCK_FREQ = LFXO_VALUE;
    116a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    116e:	e7ee      	b.n	114e <cmu_update_clocks+0x3be>
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    1170:	4a07      	ldr	r2, [pc, #28]	; (1190 <cmu_update_clocks+0x400>)
    1172:	e7f8      	b.n	1166 <cmu_update_clocks+0x3d6>
    1174:	400e4000 	.word	0x400e4000
    1178:	20000100 	.word	0x20000100
    117c:	200000c8 	.word	0x200000c8
    1180:	200000ac 	.word	0x200000ac
    1184:	200000a0 	.word	0x200000a0
    1188:	20000008 	.word	0x20000008
    118c:	200000a8 	.word	0x200000a8
    1190:	2000000c 	.word	0x2000000c
    1194:	200000e4 	.word	0x200000e4
    1198:	200000cc 	.word	0x200000cc
    119c:	200000c4 	.word	0x200000c4

000011a0 <cmu_config_waitstates>:
void cmu_config_waitstates(uint32_t ulFrequency)
{
    if(ulFrequency <= 32000000)
    11a0:	4b05      	ldr	r3, [pc, #20]	; (11b8 <cmu_config_waitstates+0x18>)
    11a2:	4298      	cmp	r0, r3
    11a4:	4b05      	ldr	r3, [pc, #20]	; (11bc <cmu_config_waitstates+0x1c>)
        CMU->CTRL &= ~CMU_CTRL_WSHFLE;
    11a6:	681a      	ldr	r2, [r3, #0]
    11a8:	bf94      	ite	ls
    11aa:	f422 3280 	bicls.w	r2, r2, #65536	; 0x10000
    else
        CMU->CTRL |= CMU_CTRL_WSHFLE;
    11ae:	f442 3280 	orrhi.w	r2, r2, #65536	; 0x10000
    11b2:	601a      	str	r2, [r3, #0]
}
    11b4:	4770      	bx	lr
    11b6:	bf00      	nop
    11b8:	01e84800 	.word	0x01e84800
    11bc:	400e4000 	.word	0x400e4000

000011c0 <cmu_hfrco_calib>:

void cmu_hfrco_calib(uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
    11c0:	4b08      	ldr	r3, [pc, #32]	; (11e4 <cmu_hfrco_calib+0x24>)
    11c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    11c6:	04d2      	lsls	r2, r2, #19
    11c8:	d40a      	bmi.n	11e0 <cmu_hfrco_calib+0x20>
        return;

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
    11ca:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    11ce:	01d2      	lsls	r2, r2, #7
    11d0:	d4fb      	bmi.n	11ca <cmu_hfrco_calib+0xa>

    CMU->HFRCOCTRL = ulCalibration;
    11d2:	6118      	str	r0, [r3, #16]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
    11d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    11d8:	01d2      	lsls	r2, r2, #7
    11da:	d4fb      	bmi.n	11d4 <cmu_hfrco_calib+0x14>

    HFRCO_VALUE = ulTargetFrequency;
    11dc:	4b02      	ldr	r3, [pc, #8]	; (11e8 <cmu_hfrco_calib+0x28>)
    11de:	6019      	str	r1, [r3, #0]
}
    11e0:	4770      	bx	lr
    11e2:	bf00      	nop
    11e4:	400e4000 	.word	0x400e4000
    11e8:	20000004 	.word	0x20000004

000011ec <cmu_init>:
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
    11ec:	4a38      	ldr	r2, [pc, #224]	; (12d0 <cmu_init+0xe4>)
    11ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
{
    11f2:	b510      	push	{r4, lr}
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
    11f4:	04dc      	lsls	r4, r3, #19
    11f6:	d506      	bpl.n	1206 <cmu_init+0x1a>
        CMU->OSCENCMD = CMU_OSCENCMD_DPLLDIS;
    11f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    11fc:	6613      	str	r3, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_DPLLENS);
    11fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    1202:	04d8      	lsls	r0, r3, #19
    1204:	d4fb      	bmi.n	11fe <cmu_init+0x12>
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    1206:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    120a:	f013 0f04 	tst.w	r3, #4
    120e:	4b30      	ldr	r3, [pc, #192]	; (12d0 <cmu_init+0xe4>)
    1210:	d005      	beq.n	121e <cmu_init+0x32>
        CMU->OSCENCMD = CMU_OSCENCMD_HFXODIS;
    1212:	2108      	movs	r1, #8
    1214:	6611      	str	r1, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_HFXOENS);
    1216:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    121a:	0751      	lsls	r1, r2, #29
    121c:	d4fb      	bmi.n	1216 <cmu_init+0x2a>
    CMU->HFXOCTRL = CMU_HFXOCTRL_PEAKDETMODE_AUTOCMD | CMU_HFXOCTRL_MODE_XTAL;
    121e:	2210      	movs	r2, #16
    1220:	625a      	str	r2, [r3, #36]	; 0x24
    CMU->HFXOCTRL1 = CMU_HFXOCTRL1_PEAKDETTHR_DEFAULT;
    1222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1226:	629a      	str	r2, [r3, #40]	; 0x28
    CMU->HFXOSTEADYSTATECTRL |= CMU_HFXOSTEADYSTATECTRL_PEAKMONEN;
    1228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    122a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    122e:	631a      	str	r2, [r3, #48]	; 0x30
    CMU->HFXOTIMEOUTCTRL = (7 << _CMU_HFXOTIMEOUTCTRL_PEAKDETTIMEOUT_SHIFT) | (8 << _CMU_HFXOTIMEOUTCTRL_STEADYTIMEOUT_SHIFT) | (12 << _CMU_HFXOTIMEOUTCTRL_STARTUPTIMEOUT_SHIFT);
    1230:	f247 028c 	movw	r2, #28812	; 0x708c
    1234:	635a      	str	r2, [r3, #52]	; 0x34
    CMU->OSCENCMD = CMU_OSCENCMD_HFXOEN;
    1236:	2204      	movs	r2, #4
    1238:	661a      	str	r2, [r3, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_HFXORDY));
    123a:	4b25      	ldr	r3, [pc, #148]	; (12d0 <cmu_init+0xe4>)
    123c:	461c      	mov	r4, r3
    123e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1242:	0712      	lsls	r2, r2, #28
    1244:	d5fb      	bpl.n	123e <cmu_init+0x52>
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFXO;
    1246:	2202      	movs	r2, #2
    1248:	675a      	str	r2, [r3, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFXO);
    124a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    124e:	f003 0307 	and.w	r3, r3, #7
    1252:	2b02      	cmp	r3, #2
    1254:	d1f9      	bne.n	124a <cmu_init+0x5e>
    cmu_hfrco_calib(HFRCO_CALIB_72M | CMU_HFRCOCTRL_FINETUNINGEN, 72000000);
    1256:	4b1f      	ldr	r3, [pc, #124]	; (12d4 <cmu_init+0xe8>)
    1258:	491f      	ldr	r1, [pc, #124]	; (12d8 <cmu_init+0xec>)
    125a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
    125e:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
    1262:	f7ff ffad 	bl	11c0 <cmu_hfrco_calib>
    CMU->DPLLCTRL = CMU_DPLLCTRL_REFSEL_HFXO | CMU_DPLLCTRL_AUTORECOVER | CMU_DPLLCTRL_EDGESEL_RISE | CMU_DPLLCTRL_MODE_FREQLL;
    1266:	2306      	movs	r3, #6
    1268:	6423      	str	r3, [r4, #64]	; 0x40
    CMU->DPLLCTRL1 = (719 << _CMU_DPLLCTRL1_N_SHIFT) | (99 << _CMU_DPLLCTRL1_M_SHIFT); // fHFRCO = fHFXO * (N + 1) / (M + 1)
    126a:	4b1c      	ldr	r3, [pc, #112]	; (12dc <cmu_init+0xf0>)
    126c:	6463      	str	r3, [r4, #68]	; 0x44
    CMU->OSCENCMD = CMU_OSCENCMD_DPLLEN;
    126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1272:	6623      	str	r3, [r4, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_DPLLRDY));
    1274:	4c16      	ldr	r4, [pc, #88]	; (12d0 <cmu_init+0xe4>)
    1276:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    127a:	049b      	lsls	r3, r3, #18
    127c:	d5fb      	bpl.n	1276 <cmu_init+0x8a>
    cmu_config_waitstates(36000000);
    127e:	4818      	ldr	r0, [pc, #96]	; (12e0 <cmu_init+0xf4>)
    1280:	f7ff ff8e 	bl	11a0 <cmu_config_waitstates>
    msc_config_waitstates(72000000);
    1284:	4814      	ldr	r0, [pc, #80]	; (12d8 <cmu_init+0xec>)
    1286:	f000 fc0b 	bl	1aa0 <msc_config_waitstates>
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
    128a:	2300      	movs	r3, #0
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
    128c:	f44f 7280 	mov.w	r2, #256	; 0x100
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
    1290:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
    1294:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    CMU->HFCOREPRESC = 0 << _CMU_HFCOREPRESC_PRESC_SHIFT;
    1298:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    CMU->HFPERPRESC = 1 << _CMU_HFPERPRESC_PRESC_SHIFT;
    129c:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    CMU->HFEXPPRESC = 0 << _CMU_HFEXPPRESC_PRESC_SHIFT;
    12a0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    CMU->HFPERPRESCB = 0 << _CMU_HFPERPRESCB_PRESC_SHIFT;
    12a4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    CMU->HFPERPRESCC = 1 << _CMU_HFPERPRESCC_PRESC_SHIFT;
    12a8:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    CMU->CTRL |= CMU_CTRL_HFPERCLKEN;
    12ac:	6823      	ldr	r3, [r4, #0]
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFRCO);
    12ae:	4a08      	ldr	r2, [pc, #32]	; (12d0 <cmu_init+0xe4>)
    CMU->CTRL |= CMU_CTRL_HFPERCLKEN;
    12b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    12b4:	6023      	str	r3, [r4, #0]
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFRCO;
    12b6:	2301      	movs	r3, #1
    12b8:	6763      	str	r3, [r4, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFRCO);
    12ba:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
    12be:	f003 0307 	and.w	r3, r3, #7
    12c2:	2b01      	cmp	r3, #1
    12c4:	d1f9      	bne.n	12ba <cmu_init+0xce>
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
    12c6:	2304      	movs	r3, #4
    12c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
    12cc:	bd10      	pop	{r4, pc}
    12ce:	bf00      	nop
    12d0:	400e4000 	.word	0x400e4000
    12d4:	0fe081b0 	.word	0x0fe081b0
    12d8:	044aa200 	.word	0x044aa200
    12dc:	02cf0063 	.word	0x02cf0063
    12e0:	02255100 	.word	0x02255100

000012e4 <cmu_ushfrco_calib>:

void cmu_ushfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(!ubEnable)
    12e4:	4b10      	ldr	r3, [pc, #64]	; (1328 <cmu_ushfrco_calib+0x44>)
    12e6:	b938      	cbnz	r0, 12f8 <cmu_ushfrco_calib+0x14>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCODIS;
    12e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    12ec:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_USHFRCOENS);
    12ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    12f2:	0552      	lsls	r2, r2, #21
    12f4:	d4fb      	bmi.n	12ee <cmu_ushfrco_calib+0xa>
    12f6:	4770      	bx	lr

        return;
    }

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
    12f8:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    12fc:	0040      	lsls	r0, r0, #1
    12fe:	d4fb      	bmi.n	12f8 <cmu_ushfrco_calib+0x14>

    CMU->USHFRCOCTRL = ulCalibration;
    1300:	6099      	str	r1, [r3, #8]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
    1302:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
    1306:	0048      	lsls	r0, r1, #1
    1308:	d4fb      	bmi.n	1302 <cmu_ushfrco_calib+0x1e>

    if(ubEnable && !(CMU->STATUS & CMU_STATUS_USHFRCOENS))
    130a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    130e:	0549      	lsls	r1, r1, #21
    1310:	d407      	bmi.n	1322 <cmu_ushfrco_calib+0x3e>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCOEN;
    1312:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1316:	6619      	str	r1, [r3, #96]	; 0x60

        while(!(CMU->STATUS & CMU_STATUS_USHFRCORDY));
    1318:	4903      	ldr	r1, [pc, #12]	; (1328 <cmu_ushfrco_calib+0x44>)
    131a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    131e:	051b      	lsls	r3, r3, #20
    1320:	d5fb      	bpl.n	131a <cmu_ushfrco_calib+0x36>
    }

    USHFRCO_VALUE = ulTargetFrequency;
    1322:	4b02      	ldr	r3, [pc, #8]	; (132c <cmu_ushfrco_calib+0x48>)
    1324:	601a      	str	r2, [r3, #0]
}
    1326:	4770      	bx	lr
    1328:	400e4000 	.word	0x400e4000
    132c:	20000010 	.word	0x20000010

00001330 <cmu_auxhfrco_calib>:

void cmu_auxhfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(!ubEnable)
    1330:	4b0f      	ldr	r3, [pc, #60]	; (1370 <cmu_auxhfrco_calib+0x40>)
    1332:	b930      	cbnz	r0, 1342 <cmu_auxhfrco_calib+0x12>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCODIS;
    1334:	2220      	movs	r2, #32
    1336:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_AUXHFRCOENS);
    1338:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    133c:	06d2      	lsls	r2, r2, #27
    133e:	d4fb      	bmi.n	1338 <cmu_auxhfrco_calib+0x8>
    1340:	4770      	bx	lr

        return;
    }

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
    1342:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    1346:	0180      	lsls	r0, r0, #6
    1348:	d4fb      	bmi.n	1342 <cmu_auxhfrco_calib+0x12>

    CMU->AUXHFRCOCTRL = ulCalibration;
    134a:	6199      	str	r1, [r3, #24]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
    134c:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
    1350:	0188      	lsls	r0, r1, #6
    1352:	d4fb      	bmi.n	134c <cmu_auxhfrco_calib+0x1c>

    if(ubEnable && !(CMU->STATUS & CMU_STATUS_AUXHFRCOENS))
    1354:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    1358:	06c9      	lsls	r1, r1, #27
    135a:	d406      	bmi.n	136a <cmu_auxhfrco_calib+0x3a>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCOEN;
    135c:	2110      	movs	r1, #16
    135e:	6619      	str	r1, [r3, #96]	; 0x60

        while(!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));
    1360:	4903      	ldr	r1, [pc, #12]	; (1370 <cmu_auxhfrco_calib+0x40>)
    1362:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    1366:	069b      	lsls	r3, r3, #26
    1368:	d5fb      	bpl.n	1362 <cmu_auxhfrco_calib+0x32>
    }

    AUXHFRCO_VALUE = ulTargetFrequency;
    136a:	4b02      	ldr	r3, [pc, #8]	; (1374 <cmu_auxhfrco_calib+0x44>)
    136c:	601a      	str	r2, [r3, #0]
}
    136e:	4770      	bx	lr
    1370:	400e4000 	.word	0x400e4000
    1374:	20000000 	.word	0x20000000

00001378 <cmu_hfxo_startup_calib>:

void cmu_hfxo_startup_calib(uint16_t usIBTrim, uint16_t usCTune)
{
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    1378:	4a08      	ldr	r2, [pc, #32]	; (139c <cmu_hfxo_startup_calib+0x24>)
    137a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    137e:	075b      	lsls	r3, r3, #29
    1380:	d40a      	bmi.n	1398 <cmu_hfxo_startup_calib+0x20>
        return;

    CMU->HFXOSTARTUPCTRL = (CMU->HFXOSTARTUPCTRL & ~(_CMU_HFXOSTARTUPCTRL_CTUNE_MASK | _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT) & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK);
    1382:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1384:	0d1b      	lsrs	r3, r3, #20
    1386:	f3c0 000a 	ubfx	r0, r0, #0, #11
    138a:	051b      	lsls	r3, r3, #20
    138c:	4303      	orrs	r3, r0
    138e:	4804      	ldr	r0, [pc, #16]	; (13a0 <cmu_hfxo_startup_calib+0x28>)
    1390:	ea00 20c1 	and.w	r0, r0, r1, lsl #11
    1394:	4303      	orrs	r3, r0
    1396:	62d3      	str	r3, [r2, #44]	; 0x2c
}
    1398:	4770      	bx	lr
    139a:	bf00      	nop
    139c:	400e4000 	.word	0x400e4000
    13a0:	000ff800 	.word	0x000ff800

000013a4 <cmu_hfxo_get_startup_current>:
float cmu_hfxo_get_startup_current()
{
    return HFXO_IBTRIM_TO_UA((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK) >> _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_SHIFT);
    13a4:	4a07      	ldr	r2, [pc, #28]	; (13c4 <cmu_hfxo_get_startup_current+0x20>)
    13a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    13a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    13aa:	f44f 7120 	mov.w	r1, #640	; 0x280
    13ae:	b2d2      	uxtb	r2, r2
    13b0:	f3c3 2341 	ubfx	r3, r3, #9, #2
    13b4:	fb01 2303 	mla	r3, r1, r3, r2
    13b8:	005b      	lsls	r3, r3, #1
    13ba:	ee00 3a10 	vmov	s0, r3
}
    13be:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    13c2:	4770      	bx	lr
    13c4:	400e4000 	.word	0x400e4000

000013c8 <cmu_hfxo_get_startup_cap>:
float cmu_hfxo_get_startup_cap()
{
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
    13c8:	4b07      	ldr	r3, [pc, #28]	; (13e8 <cmu_hfxo_get_startup_cap+0x20>)
}
    13ca:	ed9f 7a08 	vldr	s14, [pc, #32]	; 13ec <cmu_hfxo_get_startup_cap+0x24>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
    13ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
    13d0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 13f0 <cmu_hfxo_get_startup_cap+0x28>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
    13d4:	f3c3 23c8 	ubfx	r3, r3, #11, #9
    13d8:	ee07 3a90 	vmov	s15, r3
    13dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    13e0:	eea7 0a87 	vfma.f32	s0, s15, s14
    13e4:	4770      	bx	lr
    13e6:	bf00      	nop
    13e8:	400e4000 	.word	0x400e4000
    13ec:	3dac0831 	.word	0x3dac0831
    13f0:	410b3333 	.word	0x410b3333

000013f4 <cmu_hfxo_steady_calib>:
void cmu_hfxo_steady_calib(uint16_t usIBTrim, uint16_t usCTune)
{
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    13f4:	4a08      	ldr	r2, [pc, #32]	; (1418 <cmu_hfxo_steady_calib+0x24>)
    13f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    13fa:	075b      	lsls	r3, r3, #29
    13fc:	d40a      	bmi.n	1414 <cmu_hfxo_steady_calib+0x20>
        return;

    CMU->HFXOSTEADYSTATECTRL = (CMU->HFXOSTEADYSTATECTRL & ~(_CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK | _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK);
    13fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1400:	0d1b      	lsrs	r3, r3, #20
    1402:	f3c0 000a 	ubfx	r0, r0, #0, #11
    1406:	051b      	lsls	r3, r3, #20
    1408:	4303      	orrs	r3, r0
    140a:	4804      	ldr	r0, [pc, #16]	; (141c <cmu_hfxo_steady_calib+0x28>)
    140c:	ea00 20c1 	and.w	r0, r0, r1, lsl #11
    1410:	4303      	orrs	r3, r0
    1412:	6313      	str	r3, [r2, #48]	; 0x30
}
    1414:	4770      	bx	lr
    1416:	bf00      	nop
    1418:	400e4000 	.word	0x400e4000
    141c:	000ff800 	.word	0x000ff800

00001420 <cmu_hfxo_get_steady_current>:
float cmu_hfxo_get_steady_current()
{
    return HFXO_IBTRIM_TO_UA((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_SHIFT);
    1420:	4a07      	ldr	r2, [pc, #28]	; (1440 <cmu_hfxo_get_steady_current+0x20>)
    1422:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1424:	6b12      	ldr	r2, [r2, #48]	; 0x30
    1426:	f44f 7120 	mov.w	r1, #640	; 0x280
    142a:	b2d2      	uxtb	r2, r2
    142c:	f3c3 2341 	ubfx	r3, r3, #9, #2
    1430:	fb01 2303 	mla	r3, r1, r3, r2
    1434:	005b      	lsls	r3, r3, #1
    1436:	ee00 3a10 	vmov	s0, r3
}
    143a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    143e:	4770      	bx	lr
    1440:	400e4000 	.word	0x400e4000

00001444 <cmu_hfxo_get_steady_cap>:
float cmu_hfxo_get_steady_cap()
{
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT);
    1444:	4b07      	ldr	r3, [pc, #28]	; (1464 <cmu_hfxo_get_steady_cap+0x20>)
}
    1446:	ed9f 7a08 	vldr	s14, [pc, #32]	; 1468 <cmu_hfxo_get_steady_cap+0x24>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT);
    144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    144c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 146c <cmu_hfxo_get_steady_cap+0x28>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT);
    1450:	f3c3 23c8 	ubfx	r3, r3, #11, #9
    1454:	ee07 3a90 	vmov	s15, r3
    1458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    145c:	eea7 0a87 	vfma.f32	s0, s15, s14
    1460:	4770      	bx	lr
    1462:	bf00      	nop
    1464:	400e4000 	.word	0x400e4000
    1468:	3dac0831 	.word	0x3dac0831
    146c:	410b3333 	.word	0x410b3333

00001470 <cmu_hfxo_get_pda_ibtrim>:
uint16_t cmu_hfxo_get_pda_ibtrim(uint8_t ubTrigger)
{
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    1470:	4a09      	ldr	r2, [pc, #36]	; (1498 <cmu_hfxo_get_pda_ibtrim+0x28>)
    1472:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    1476:	f013 0304 	ands.w	r3, r3, #4
    147a:	d00b      	beq.n	1494 <cmu_hfxo_get_pda_ibtrim+0x24>
        return 0;

    if(ubTrigger)
    147c:	b128      	cbz	r0, 148a <cmu_hfxo_get_pda_ibtrim+0x1a>
    {
        CMU->CMD = CMU_CMD_HFXOPEAKDETSTART;
    147e:	2310      	movs	r3, #16
    1480:	6653      	str	r3, [r2, #100]	; 0x64
        while(!(CMU->STATUS & CMU_STATUS_HFXOPEAKDETRDY));
    1482:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    1486:	025b      	lsls	r3, r3, #9
    1488:	d5fb      	bpl.n	1482 <cmu_hfxo_get_pda_ibtrim+0x12>
    }

    return (CMU->HFXOTRIMSTATUS & _CMU_HFXOTRIMSTATUS_IBTRIMXOCORE_MASK) >> _CMU_HFXOTRIMSTATUS_IBTRIMXOCORE_SHIFT;
    148a:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    148e:	f3c0 000a 	ubfx	r0, r0, #0, #11
    1492:	4770      	bx	lr
        return 0;
    1494:	4618      	mov	r0, r3
}
    1496:	4770      	bx	lr
    1498:	400e4000 	.word	0x400e4000

0000149c <cmu_hfxo_get_pda_current>:
float cmu_hfxo_get_pda_current(uint8_t ubTrigger)
{
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    149c:	4b0e      	ldr	r3, [pc, #56]	; (14d8 <cmu_hfxo_get_pda_current+0x3c>)
    149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    14a2:	075b      	lsls	r3, r3, #29
{
    14a4:	b510      	push	{r4, lr}
    14a6:	4604      	mov	r4, r0
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    14a8:	d512      	bpl.n	14d0 <cmu_hfxo_get_pda_current+0x34>
        return 0;

    return HFXO_IBTRIM_TO_UA(cmu_hfxo_get_pda_ibtrim(ubTrigger));
    14aa:	f7ff ffe1 	bl	1470 <cmu_hfxo_get_pda_ibtrim>
    14ae:	4601      	mov	r1, r0
    14b0:	4620      	mov	r0, r4
    14b2:	f7ff ffdd 	bl	1470 <cmu_hfxo_get_pda_ibtrim>
    14b6:	f44f 7320 	mov.w	r3, #640	; 0x280
    14ba:	f3c1 2141 	ubfx	r1, r1, #9, #2
    14be:	b2c0      	uxtb	r0, r0
    14c0:	fb03 0101 	mla	r1, r3, r1, r0
    14c4:	0049      	lsls	r1, r1, #1
    14c6:	ee07 1a90 	vmov	s15, r1
    14ca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
    14ce:	bd10      	pop	{r4, pc}
        return 0;
    14d0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 14dc <cmu_hfxo_get_pda_current+0x40>
    14d4:	e7fb      	b.n	14ce <cmu_hfxo_get_pda_current+0x32>
    14d6:	bf00      	nop
    14d8:	400e4000 	.word	0x400e4000
    14dc:	00000000 	.word	0x00000000

000014e0 <cmu_hfxo_get_pma_ibtrim>:
uint16_t cmu_hfxo_get_pma_ibtrim()
{
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    14e0:	4b05      	ldr	r3, [pc, #20]	; (14f8 <cmu_hfxo_get_pma_ibtrim+0x18>)
    14e2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    14e6:	f010 0004 	ands.w	r0, r0, #4
        return 0;

    return (CMU->HFXOTRIMSTATUS & _CMU_HFXOTRIMSTATUS_IBTRIMXOCOREMON_MASK) >> _CMU_HFXOTRIMSTATUS_IBTRIMXOCOREMON_SHIFT;
    14ea:	bf1c      	itt	ne
    14ec:	f8d3 009c 	ldrne.w	r0, [r3, #156]	; 0x9c
    14f0:	f3c0 400a 	ubfxne	r0, r0, #16, #11
}
    14f4:	4770      	bx	lr
    14f6:	bf00      	nop
    14f8:	400e4000 	.word	0x400e4000

000014fc <cmu_hfxo_get_pma_current>:
float cmu_hfxo_get_pma_current()
{
    14fc:	b508      	push	{r3, lr}
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    14fe:	4b0d      	ldr	r3, [pc, #52]	; (1534 <cmu_hfxo_get_pma_current+0x38>)
    1500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1504:	075b      	lsls	r3, r3, #29
    1506:	d511      	bpl.n	152c <cmu_hfxo_get_pma_current+0x30>
        return 0;

    return HFXO_IBTRIM_TO_UA(cmu_hfxo_get_pma_ibtrim());
    1508:	f7ff ffea 	bl	14e0 <cmu_hfxo_get_pma_ibtrim>
    150c:	4602      	mov	r2, r0
    150e:	f7ff ffe7 	bl	14e0 <cmu_hfxo_get_pma_ibtrim>
    1512:	f44f 7320 	mov.w	r3, #640	; 0x280
    1516:	f3c2 2241 	ubfx	r2, r2, #9, #2
    151a:	b2c0      	uxtb	r0, r0
    151c:	fb03 0202 	mla	r2, r3, r2, r0
    1520:	0052      	lsls	r2, r2, #1
    1522:	ee07 2a90 	vmov	s15, r2
    1526:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
    152a:	bd08      	pop	{r3, pc}
        return 0;
    152c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 1538 <cmu_hfxo_get_pma_current+0x3c>
    1530:	e7fb      	b.n	152a <cmu_hfxo_get_pma_current+0x2e>
    1532:	bf00      	nop
    1534:	400e4000 	.word	0x400e4000
    1538:	00000000 	.word	0x00000000

0000153c <crc_init>:

#else

void crc_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPCRC;
    153c:	4a07      	ldr	r2, [pc, #28]	; (155c <crc_init+0x20>)
    153e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    1542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1546:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    GPCRC->CTRL = GPCRC_CTRL_BYTEREVERSE | GPCRC_CTRL_BITREVERSE | GPCRC_CTRL_POLYSEL_CRC32 | GPCRC_CTRL_EN_ENABLE;
    154a:	4b05      	ldr	r3, [pc, #20]	; (1560 <crc_init+0x24>)
    154c:	f240 6201 	movw	r2, #1537	; 0x601
    1550:	601a      	str	r2, [r3, #0]
    GPCRC->INIT = 0xFFFFFFFF;
    1552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1556:	609a      	str	r2, [r3, #8]
}
    1558:	4770      	bx	lr
    155a:	bf00      	nop
    155c:	400e4000 	.word	0x400e4000
    1560:	4001c000 	.word	0x4001c000

00001564 <dbg_init>:
    dbg_swo_putc(ch, 0);
}

void dbg_init()
{
    CMU->DBGCLKSEL = CMU_DBGCLKSEL_DBG_HFRCODIV2;
    1564:	4b02      	ldr	r3, [pc, #8]	; (1570 <dbg_init+0xc>)
    1566:	2202      	movs	r2, #2
    1568:	671a      	str	r2, [r3, #112]	; 0x70

    cmu_update_clocks();
    156a:	f7ff bc11 	b.w	d90 <cmu_update_clocks>
    156e:	bf00      	nop
    1570:	400e4000 	.word	0x400e4000

00001574 <dbg_swo_config>:
}
void dbg_swo_config(uint32_t ulChannelMask, uint32_t ulFrequency)
{
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    1574:	4a11      	ldr	r2, [pc, #68]	; (15bc <dbg_swo_config+0x48>)
    1576:	68d3      	ldr	r3, [r2, #12]
    1578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    157c:	60d3      	str	r3, [r2, #12]
    TPI->SPPR = 2 << TPI_SPPR_TXMODE_Pos;
    157e:	4a10      	ldr	r2, [pc, #64]	; (15c0 <dbg_swo_config+0x4c>)
    1580:	2302      	movs	r3, #2
    1582:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
    1586:	4b0f      	ldr	r3, [pc, #60]	; (15c4 <dbg_swo_config+0x50>)
    1588:	681b      	ldr	r3, [r3, #0]
    158a:	fbb3 f1f1 	udiv	r1, r3, r1
    TPI->FFCR = 0x00000100;
    158e:	f44f 7380 	mov.w	r3, #256	; 0x100
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
    1592:	3901      	subs	r1, #1
    1594:	6111      	str	r1, [r2, #16]
    TPI->FFCR = 0x00000100;
    1596:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    DWT->CTRL = 0x400003FE;
    159a:	4b0b      	ldr	r3, [pc, #44]	; (15c8 <dbg_swo_config+0x54>)
    159c:	4a0b      	ldr	r2, [pc, #44]	; (15cc <dbg_swo_config+0x58>)
    159e:	601a      	str	r2, [r3, #0]
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) | ITM_TCR_ITMENA_Msk;
    15a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    15a4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    15a8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ITM->LAR = 0xC5ACCE55;
    15ac:	4a08      	ldr	r2, [pc, #32]	; (15d0 <dbg_swo_config+0x5c>)
    15ae:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TPR = ulChannelMask;
    15b2:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ITM->TER = ulChannelMask;
    15b6:	f8c3 0e00 	str.w	r0, [r3, #3584]	; 0xe00
}
    15ba:	4770      	bx	lr
    15bc:	e000edf0 	.word	0xe000edf0
    15c0:	e0040000 	.word	0xe0040000
    15c4:	20000104 	.word	0x20000104
    15c8:	e0001000 	.word	0xe0001000
    15cc:	400003fe 	.word	0x400003fe
    15d0:	c5acce55 	.word	0xc5acce55

000015d4 <dbg_swo_send_uint8>:
{
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
}
void dbg_swo_send_uint8(uint8_t ubData, uint8_t ubChannel)
{
    if (!(ITM->TCR & ITM_TCR_ITMENA_Msk))
    15d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
{
    15d8:	b510      	push	{r4, lr}
    if (!(ITM->TCR & ITM_TCR_ITMENA_Msk))
    15da:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
    15de:	07d2      	lsls	r2, r2, #31
    15e0:	d50a      	bpl.n	15f8 <dbg_swo_send_uint8+0x24>
        return;

    if (!(ITM->TER & (1 << ubChannel)))
    15e2:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
    15e6:	2201      	movs	r2, #1
    15e8:	408a      	lsls	r2, r1
    15ea:	4222      	tst	r2, r4
    15ec:	d004      	beq.n	15f8 <dbg_swo_send_uint8+0x24>
        return;

    while(!ITM->PORT[0].u8);
    15ee:	781a      	ldrb	r2, [r3, #0]
    15f0:	2a00      	cmp	r2, #0
    15f2:	d0fc      	beq.n	15ee <dbg_swo_send_uint8+0x1a>

    ITM->PORT[ubChannel].u8 = ubData;
    15f4:	f803 0021 	strb.w	r0, [r3, r1, lsl #2]
}
    15f8:	bd10      	pop	{r4, pc}

000015fa <_putchar>:
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
    15fa:	2100      	movs	r1, #0
    15fc:	f7ff bfea 	b.w	15d4 <dbg_swo_send_uint8>

00001600 <crypto_init>:
#include "crypto.h"

void crypto_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_CRYPTO0;
    1600:	4a03      	ldr	r2, [pc, #12]	; (1610 <crypto_init+0x10>)
    1602:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    1606:	f043 0302 	orr.w	r3, r3, #2
    160a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
    160e:	4770      	bx	lr
    1610:	400e4000 	.word	0x400e4000

00001614 <_hardfault_isr>:

void trace_stack(uint32_t *pulFaultStackAddress);

void __attribute__ ((naked)) _hardfault_isr()
{
    __asm__ volatile
    1614:	f01e 0f04 	tst.w	lr, #4
    1618:	bf0c      	ite	eq
    161a:	f3ef 8008 	mrseq	r0, MSP
    161e:	f3ef 8009 	mrsne	r0, PSP
    1622:	6981      	ldr	r1, [r0, #24]
    1624:	4a00      	ldr	r2, [pc, #0]	; (1628 <hardfault_trace_stack_addr>)
    1626:	4710      	bx	r2

00001628 <hardfault_trace_stack_addr>:
    1628:	00001675 	.word	0x00001675

0000162c <_memmanage_isr>:
    );
}

void __attribute__ ((naked)) _memmanage_isr()
{
    __asm__ volatile
    162c:	f01e 0f04 	tst.w	lr, #4
    1630:	bf0c      	ite	eq
    1632:	f3ef 8008 	mrseq	r0, MSP
    1636:	f3ef 8009 	mrsne	r0, PSP
    163a:	6981      	ldr	r1, [r0, #24]
    163c:	4a00      	ldr	r2, [pc, #0]	; (1640 <memmanage_trace_stack_addr>)
    163e:	4710      	bx	r2

00001640 <memmanage_trace_stack_addr>:
    1640:	00001759 	.word	0x00001759

00001644 <_busfault_isr>:
    );
}

void __attribute__ ((naked)) _busfault_isr()
{
    __asm__ volatile
    1644:	f01e 0f04 	tst.w	lr, #4
    1648:	bf0c      	ite	eq
    164a:	f3ef 8008 	mrseq	r0, MSP
    164e:	f3ef 8009 	mrsne	r0, PSP
    1652:	6981      	ldr	r1, [r0, #24]
    1654:	4a00      	ldr	r2, [pc, #0]	; (1658 <busfault_trace_stack_addr>)
    1656:	4710      	bx	r2

00001658 <busfault_trace_stack_addr>:
    1658:	0000184d 	.word	0x0000184d

0000165c <_usagefault_isr>:
    );
}

void __attribute__ ((naked)) _usagefault_isr()
{
    __asm__ volatile
    165c:	f01e 0f04 	tst.w	lr, #4
    1660:	bf0c      	ite	eq
    1662:	f3ef 8008 	mrseq	r0, MSP
    1666:	f3ef 8009 	mrsne	r0, PSP
    166a:	6981      	ldr	r1, [r0, #24]
    166c:	4a00      	ldr	r2, [pc, #0]	; (1670 <usagefault_trace_stack_addr>)
    166e:	4710      	bx	r2

00001670 <usagefault_trace_stack_addr>:
    1670:	0000194d 	.word	0x0000194d

00001674 <hardfault_trace_stack>:
        " usagefault_trace_stack_addr: .word usagefault_trace_stack \n"
    );
}

void hardfault_trace_stack(uint32_t *pulFaultStackAddress)
{
    1674:	b500      	push	{lr}
    1676:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1678:	6803      	ldr	r3, [r0, #0]
    167a:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    167c:	6843      	ldr	r3, [r0, #4]
    167e:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1680:	6883      	ldr	r3, [r0, #8]
    1682:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1684:	68c3      	ldr	r3, [r0, #12]
    1686:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1688:	6903      	ldr	r3, [r0, #16]
    168a:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    168c:	6943      	ldr	r3, [r0, #20]
    168e:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1690:	6983      	ldr	r3, [r0, #24]
    1692:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    1694:	4921      	ldr	r1, [pc, #132]	; (171c <hardfault_trace_stack+0xa8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1696:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    1698:	4821      	ldr	r0, [pc, #132]	; (1720 <hardfault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    169a:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    169c:	f002 fada 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    16a0:	9a00      	ldr	r2, [sp, #0]
    16a2:	491e      	ldr	r1, [pc, #120]	; (171c <hardfault_trace_stack+0xa8>)
    16a4:	481f      	ldr	r0, [pc, #124]	; (1724 <hardfault_trace_stack+0xb0>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
    16a6:	4c20      	ldr	r4, [pc, #128]	; (1728 <hardfault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    16a8:	f002 fad4 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    16ac:	9a01      	ldr	r2, [sp, #4]
    16ae:	491b      	ldr	r1, [pc, #108]	; (171c <hardfault_trace_stack+0xa8>)
    16b0:	481e      	ldr	r0, [pc, #120]	; (172c <hardfault_trace_stack+0xb8>)
    16b2:	f002 facf 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    16b6:	9a02      	ldr	r2, [sp, #8]
    16b8:	4918      	ldr	r1, [pc, #96]	; (171c <hardfault_trace_stack+0xa8>)
    16ba:	481d      	ldr	r0, [pc, #116]	; (1730 <hardfault_trace_stack+0xbc>)
    16bc:	f002 faca 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    16c0:	9a03      	ldr	r2, [sp, #12]
    16c2:	4916      	ldr	r1, [pc, #88]	; (171c <hardfault_trace_stack+0xa8>)
    16c4:	481b      	ldr	r0, [pc, #108]	; (1734 <hardfault_trace_stack+0xc0>)
    16c6:	f002 fac5 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    16ca:	9a04      	ldr	r2, [sp, #16]
    16cc:	4913      	ldr	r1, [pc, #76]	; (171c <hardfault_trace_stack+0xa8>)
    16ce:	481a      	ldr	r0, [pc, #104]	; (1738 <hardfault_trace_stack+0xc4>)
    16d0:	f002 fac0 	bl	3c54 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    16d4:	9a05      	ldr	r2, [sp, #20]
    16d6:	4911      	ldr	r1, [pc, #68]	; (171c <hardfault_trace_stack+0xa8>)
    16d8:	4818      	ldr	r0, [pc, #96]	; (173c <hardfault_trace_stack+0xc8>)
    16da:	f002 fabb 	bl	3c54 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    16de:	9a06      	ldr	r2, [sp, #24]
    16e0:	490e      	ldr	r1, [pc, #56]	; (171c <hardfault_trace_stack+0xa8>)
    16e2:	4817      	ldr	r0, [pc, #92]	; (1740 <hardfault_trace_stack+0xcc>)
    16e4:	f002 fab6 	bl	3c54 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    16e8:	9a07      	ldr	r2, [sp, #28]
    16ea:	490c      	ldr	r1, [pc, #48]	; (171c <hardfault_trace_stack+0xa8>)
    16ec:	4815      	ldr	r0, [pc, #84]	; (1744 <hardfault_trace_stack+0xd0>)
    16ee:	f002 fab1 	bl	3c54 <printf>
    DBGPRINTLN_CTX("------------------------------");
    16f2:	490a      	ldr	r1, [pc, #40]	; (171c <hardfault_trace_stack+0xa8>)
    16f4:	4814      	ldr	r0, [pc, #80]	; (1748 <hardfault_trace_stack+0xd4>)
    16f6:	f002 faad 	bl	3c54 <printf>
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
    16fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    16fc:	4907      	ldr	r1, [pc, #28]	; (171c <hardfault_trace_stack+0xa8>)
    16fe:	4813      	ldr	r0, [pc, #76]	; (174c <hardfault_trace_stack+0xd8>)
    1700:	f002 faa8 	bl	3c54 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1704:	6862      	ldr	r2, [r4, #4]
    1706:	4905      	ldr	r1, [pc, #20]	; (171c <hardfault_trace_stack+0xa8>)
    1708:	4811      	ldr	r0, [pc, #68]	; (1750 <hardfault_trace_stack+0xdc>)
    170a:	f002 faa3 	bl	3c54 <printf>
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    170e:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1712:	4902      	ldr	r1, [pc, #8]	; (171c <hardfault_trace_stack+0xa8>)
    1714:	480f      	ldr	r0, [pc, #60]	; (1754 <hardfault_trace_stack+0xe0>)
    1716:	f002 fa9d 	bl	3c54 <printf>

    while(1);
    171a:	e7fe      	b.n	171a <hardfault_trace_stack+0xa6>
    171c:	00003ecc 	.word	0x00003ecc
    1720:	00003f73 	.word	0x00003f73
    1724:	00003f95 	.word	0x00003f95
    1728:	e000ed00 	.word	0xe000ed00
    172c:	00003faa 	.word	0x00003faa
    1730:	00003fbf 	.word	0x00003fbf
    1734:	00003fd4 	.word	0x00003fd4
    1738:	00003fe9 	.word	0x00003fe9
    173c:	00003fff 	.word	0x00003fff
    1740:	00004026 	.word	0x00004026
    1744:	00004051 	.word	0x00004051
    1748:	0000407f 	.word	0x0000407f
    174c:	000040a7 	.word	0x000040a7
    1750:	000040be 	.word	0x000040be
    1754:	000040d5 	.word	0x000040d5

00001758 <memmanage_trace_stack>:
}

void memmanage_trace_stack(uint32_t *pulFaultStackAddress)
{
    1758:	b500      	push	{lr}
    175a:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    175c:	6803      	ldr	r3, [r0, #0]
    175e:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1760:	6843      	ldr	r3, [r0, #4]
    1762:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1764:	6883      	ldr	r3, [r0, #8]
    1766:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1768:	68c3      	ldr	r3, [r0, #12]
    176a:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    176c:	6903      	ldr	r3, [r0, #16]
    176e:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1770:	6943      	ldr	r3, [r0, #20]
    1772:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1774:	6983      	ldr	r3, [r0, #24]
    1776:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    1778:	4924      	ldr	r1, [pc, #144]	; (180c <memmanage_trace_stack+0xb4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    177a:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    177c:	4824      	ldr	r0, [pc, #144]	; (1810 <memmanage_trace_stack+0xb8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    177e:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    1780:	f002 fa68 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1784:	9a00      	ldr	r2, [sp, #0]
    1786:	4921      	ldr	r1, [pc, #132]	; (180c <memmanage_trace_stack+0xb4>)
    1788:	4822      	ldr	r0, [pc, #136]	; (1814 <memmanage_trace_stack+0xbc>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    178a:	4c23      	ldr	r4, [pc, #140]	; (1818 <memmanage_trace_stack+0xc0>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    178c:	f002 fa62 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1790:	9a01      	ldr	r2, [sp, #4]
    1792:	491e      	ldr	r1, [pc, #120]	; (180c <memmanage_trace_stack+0xb4>)
    1794:	4821      	ldr	r0, [pc, #132]	; (181c <memmanage_trace_stack+0xc4>)
    1796:	f002 fa5d 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    179a:	9a02      	ldr	r2, [sp, #8]
    179c:	491b      	ldr	r1, [pc, #108]	; (180c <memmanage_trace_stack+0xb4>)
    179e:	4820      	ldr	r0, [pc, #128]	; (1820 <memmanage_trace_stack+0xc8>)
    17a0:	f002 fa58 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    17a4:	9a03      	ldr	r2, [sp, #12]
    17a6:	4919      	ldr	r1, [pc, #100]	; (180c <memmanage_trace_stack+0xb4>)
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <memmanage_trace_stack+0xcc>)
    17aa:	f002 fa53 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    17ae:	9a04      	ldr	r2, [sp, #16]
    17b0:	4916      	ldr	r1, [pc, #88]	; (180c <memmanage_trace_stack+0xb4>)
    17b2:	481d      	ldr	r0, [pc, #116]	; (1828 <memmanage_trace_stack+0xd0>)
    17b4:	f002 fa4e 	bl	3c54 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    17b8:	9a05      	ldr	r2, [sp, #20]
    17ba:	4914      	ldr	r1, [pc, #80]	; (180c <memmanage_trace_stack+0xb4>)
    17bc:	481b      	ldr	r0, [pc, #108]	; (182c <memmanage_trace_stack+0xd4>)
    17be:	f002 fa49 	bl	3c54 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    17c2:	9a06      	ldr	r2, [sp, #24]
    17c4:	4911      	ldr	r1, [pc, #68]	; (180c <memmanage_trace_stack+0xb4>)
    17c6:	481a      	ldr	r0, [pc, #104]	; (1830 <memmanage_trace_stack+0xd8>)
    17c8:	f002 fa44 	bl	3c54 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    17cc:	9a07      	ldr	r2, [sp, #28]
    17ce:	490f      	ldr	r1, [pc, #60]	; (180c <memmanage_trace_stack+0xb4>)
    17d0:	4818      	ldr	r0, [pc, #96]	; (1834 <memmanage_trace_stack+0xdc>)
    17d2:	f002 fa3f 	bl	3c54 <printf>
    DBGPRINTLN_CTX("------------------------------");
    17d6:	490d      	ldr	r1, [pc, #52]	; (180c <memmanage_trace_stack+0xb4>)
    17d8:	4817      	ldr	r0, [pc, #92]	; (1838 <memmanage_trace_stack+0xe0>)
    17da:	f002 fa3b 	bl	3c54 <printf>
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    17de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    17e0:	490a      	ldr	r1, [pc, #40]	; (180c <memmanage_trace_stack+0xb4>)
    17e2:	4816      	ldr	r0, [pc, #88]	; (183c <memmanage_trace_stack+0xe4>)
    17e4:	b2d2      	uxtb	r2, r2
    17e6:	f002 fa35 	bl	3c54 <printf>
    DBGPRINTLN_CTX("MMFAR [0x%08X]", SCB->MMFAR);
    17ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
    17ec:	4907      	ldr	r1, [pc, #28]	; (180c <memmanage_trace_stack+0xb4>)
    17ee:	4814      	ldr	r0, [pc, #80]	; (1840 <memmanage_trace_stack+0xe8>)
    17f0:	f002 fa30 	bl	3c54 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    17f4:	6862      	ldr	r2, [r4, #4]
    17f6:	4905      	ldr	r1, [pc, #20]	; (180c <memmanage_trace_stack+0xb4>)
    17f8:	4812      	ldr	r0, [pc, #72]	; (1844 <memmanage_trace_stack+0xec>)
    17fa:	f002 fa2b 	bl	3c54 <printf>
    17fe:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1802:	4902      	ldr	r1, [pc, #8]	; (180c <memmanage_trace_stack+0xb4>)
    1804:	4810      	ldr	r0, [pc, #64]	; (1848 <memmanage_trace_stack+0xf0>)
    1806:	f002 fa25 	bl	3c54 <printf>

    while(1);
    180a:	e7fe      	b.n	180a <memmanage_trace_stack+0xb2>
    180c:	00003ee2 	.word	0x00003ee2
    1810:	000040eb 	.word	0x000040eb
    1814:	00003f95 	.word	0x00003f95
    1818:	e000ed00 	.word	0xe000ed00
    181c:	00003faa 	.word	0x00003faa
    1820:	00003fbf 	.word	0x00003fbf
    1824:	00003fd4 	.word	0x00003fd4
    1828:	00003fe9 	.word	0x00003fe9
    182c:	00003fff 	.word	0x00003fff
    1830:	00004026 	.word	0x00004026
    1834:	00004051 	.word	0x00004051
    1838:	0000407f 	.word	0x0000407f
    183c:	0000411a 	.word	0x0000411a
    1840:	00004132 	.word	0x00004132
    1844:	000040be 	.word	0x000040be
    1848:	000040d5 	.word	0x000040d5

0000184c <busfault_trace_stack>:
}

void busfault_trace_stack(uint32_t *pulFaultStackAddress)
{
    184c:	b500      	push	{lr}
    184e:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1850:	6803      	ldr	r3, [r0, #0]
    1852:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1854:	6843      	ldr	r3, [r0, #4]
    1856:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1858:	6883      	ldr	r3, [r0, #8]
    185a:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    185c:	68c3      	ldr	r3, [r0, #12]
    185e:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1860:	6903      	ldr	r3, [r0, #16]
    1862:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1864:	6943      	ldr	r3, [r0, #20]
    1866:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1868:	6983      	ldr	r3, [r0, #24]
    186a:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    186c:	4927      	ldr	r1, [pc, #156]	; (190c <busfault_trace_stack+0xc0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    186e:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1870:	4827      	ldr	r0, [pc, #156]	; (1910 <busfault_trace_stack+0xc4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1872:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1874:	f002 f9ee 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1878:	9a00      	ldr	r2, [sp, #0]
    187a:	4924      	ldr	r1, [pc, #144]	; (190c <busfault_trace_stack+0xc0>)
    187c:	4825      	ldr	r0, [pc, #148]	; (1914 <busfault_trace_stack+0xc8>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    187e:	4c26      	ldr	r4, [pc, #152]	; (1918 <busfault_trace_stack+0xcc>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1880:	f002 f9e8 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1884:	9a01      	ldr	r2, [sp, #4]
    1886:	4921      	ldr	r1, [pc, #132]	; (190c <busfault_trace_stack+0xc0>)
    1888:	4824      	ldr	r0, [pc, #144]	; (191c <busfault_trace_stack+0xd0>)
    188a:	f002 f9e3 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    188e:	9a02      	ldr	r2, [sp, #8]
    1890:	491e      	ldr	r1, [pc, #120]	; (190c <busfault_trace_stack+0xc0>)
    1892:	4823      	ldr	r0, [pc, #140]	; (1920 <busfault_trace_stack+0xd4>)
    1894:	f002 f9de 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    1898:	9a03      	ldr	r2, [sp, #12]
    189a:	491c      	ldr	r1, [pc, #112]	; (190c <busfault_trace_stack+0xc0>)
    189c:	4821      	ldr	r0, [pc, #132]	; (1924 <busfault_trace_stack+0xd8>)
    189e:	f002 f9d9 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    18a2:	9a04      	ldr	r2, [sp, #16]
    18a4:	4919      	ldr	r1, [pc, #100]	; (190c <busfault_trace_stack+0xc0>)
    18a6:	4820      	ldr	r0, [pc, #128]	; (1928 <busfault_trace_stack+0xdc>)
    18a8:	f002 f9d4 	bl	3c54 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    18ac:	9a05      	ldr	r2, [sp, #20]
    18ae:	4917      	ldr	r1, [pc, #92]	; (190c <busfault_trace_stack+0xc0>)
    18b0:	481e      	ldr	r0, [pc, #120]	; (192c <busfault_trace_stack+0xe0>)
    18b2:	f002 f9cf 	bl	3c54 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    18b6:	9a06      	ldr	r2, [sp, #24]
    18b8:	4914      	ldr	r1, [pc, #80]	; (190c <busfault_trace_stack+0xc0>)
    18ba:	481d      	ldr	r0, [pc, #116]	; (1930 <busfault_trace_stack+0xe4>)
    18bc:	f002 f9ca 	bl	3c54 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    18c0:	9a07      	ldr	r2, [sp, #28]
    18c2:	4912      	ldr	r1, [pc, #72]	; (190c <busfault_trace_stack+0xc0>)
    18c4:	481b      	ldr	r0, [pc, #108]	; (1934 <busfault_trace_stack+0xe8>)
    18c6:	f002 f9c5 	bl	3c54 <printf>
    DBGPRINTLN_CTX("------------------------------");
    18ca:	4910      	ldr	r1, [pc, #64]	; (190c <busfault_trace_stack+0xc0>)
    18cc:	481a      	ldr	r0, [pc, #104]	; (1938 <busfault_trace_stack+0xec>)
    18ce:	f002 f9c1 	bl	3c54 <printf>
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    18d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    18d4:	490d      	ldr	r1, [pc, #52]	; (190c <busfault_trace_stack+0xc0>)
    18d6:	4819      	ldr	r0, [pc, #100]	; (193c <busfault_trace_stack+0xf0>)
    18d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    18dc:	f002 f9ba 	bl	3c54 <printf>
    DBGPRINTLN_CTX("BFAR [0x%08X]", SCB->BFAR);
    18e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    18e2:	490a      	ldr	r1, [pc, #40]	; (190c <busfault_trace_stack+0xc0>)
    18e4:	4816      	ldr	r0, [pc, #88]	; (1940 <busfault_trace_stack+0xf4>)
    18e6:	f002 f9b5 	bl	3c54 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    18ea:	6862      	ldr	r2, [r4, #4]
    18ec:	4907      	ldr	r1, [pc, #28]	; (190c <busfault_trace_stack+0xc0>)
    18ee:	4815      	ldr	r0, [pc, #84]	; (1944 <busfault_trace_stack+0xf8>)
    18f0:	f002 f9b0 	bl	3c54 <printf>
    18f4:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    18f8:	4904      	ldr	r1, [pc, #16]	; (190c <busfault_trace_stack+0xc0>)
    18fa:	4813      	ldr	r0, [pc, #76]	; (1948 <busfault_trace_stack+0xfc>)
    18fc:	f002 f9aa 	bl	3c54 <printf>

    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
    1900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1904:	2201      	movs	r2, #1
    1906:	645a      	str	r2, [r3, #68]	; 0x44

    while(1);
    1908:	e7fe      	b.n	1908 <busfault_trace_stack+0xbc>
    190a:	bf00      	nop
    190c:	00003ef8 	.word	0x00003ef8
    1910:	00003f24 	.word	0x00003f24
    1914:	00003f95 	.word	0x00003f95
    1918:	e000ed00 	.word	0xe000ed00
    191c:	00003faa 	.word	0x00003faa
    1920:	00003fbf 	.word	0x00003fbf
    1924:	00003fd4 	.word	0x00003fd4
    1928:	00003fe9 	.word	0x00003fe9
    192c:	00003fff 	.word	0x00003fff
    1930:	00004026 	.word	0x00004026
    1934:	00004051 	.word	0x00004051
    1938:	0000407f 	.word	0x0000407f
    193c:	00003f45 	.word	0x00003f45
    1940:	00003f5c 	.word	0x00003f5c
    1944:	000040be 	.word	0x000040be
    1948:	000040d5 	.word	0x000040d5

0000194c <usagefault_trace_stack>:
}

void usagefault_trace_stack(uint32_t *pulFaultStackAddress)
{
    194c:	b500      	push	{lr}
    194e:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1950:	6803      	ldr	r3, [r0, #0]
    1952:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1954:	6843      	ldr	r3, [r0, #4]
    1956:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1958:	6883      	ldr	r3, [r0, #8]
    195a:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    195c:	68c3      	ldr	r3, [r0, #12]
    195e:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1960:	6903      	ldr	r3, [r0, #16]
    1962:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1964:	6943      	ldr	r3, [r0, #20]
    1966:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1968:	6983      	ldr	r3, [r0, #24]
    196a:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    196c:	4922      	ldr	r1, [pc, #136]	; (19f8 <usagefault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    196e:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1970:	4822      	ldr	r0, [pc, #136]	; (19fc <usagefault_trace_stack+0xb0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1972:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1974:	f002 f96e 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1978:	9a00      	ldr	r2, [sp, #0]
    197a:	491f      	ldr	r1, [pc, #124]	; (19f8 <usagefault_trace_stack+0xac>)
    197c:	4820      	ldr	r0, [pc, #128]	; (1a00 <usagefault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    197e:	4c21      	ldr	r4, [pc, #132]	; (1a04 <usagefault_trace_stack+0xb8>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1980:	f002 f968 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1984:	9a01      	ldr	r2, [sp, #4]
    1986:	491c      	ldr	r1, [pc, #112]	; (19f8 <usagefault_trace_stack+0xac>)
    1988:	481f      	ldr	r0, [pc, #124]	; (1a08 <usagefault_trace_stack+0xbc>)
    198a:	f002 f963 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    198e:	9a02      	ldr	r2, [sp, #8]
    1990:	4919      	ldr	r1, [pc, #100]	; (19f8 <usagefault_trace_stack+0xac>)
    1992:	481e      	ldr	r0, [pc, #120]	; (1a0c <usagefault_trace_stack+0xc0>)
    1994:	f002 f95e 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    1998:	9a03      	ldr	r2, [sp, #12]
    199a:	4917      	ldr	r1, [pc, #92]	; (19f8 <usagefault_trace_stack+0xac>)
    199c:	481c      	ldr	r0, [pc, #112]	; (1a10 <usagefault_trace_stack+0xc4>)
    199e:	f002 f959 	bl	3c54 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    19a2:	9a04      	ldr	r2, [sp, #16]
    19a4:	4914      	ldr	r1, [pc, #80]	; (19f8 <usagefault_trace_stack+0xac>)
    19a6:	481b      	ldr	r0, [pc, #108]	; (1a14 <usagefault_trace_stack+0xc8>)
    19a8:	f002 f954 	bl	3c54 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    19ac:	9a05      	ldr	r2, [sp, #20]
    19ae:	4912      	ldr	r1, [pc, #72]	; (19f8 <usagefault_trace_stack+0xac>)
    19b0:	4819      	ldr	r0, [pc, #100]	; (1a18 <usagefault_trace_stack+0xcc>)
    19b2:	f002 f94f 	bl	3c54 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    19b6:	9a06      	ldr	r2, [sp, #24]
    19b8:	490f      	ldr	r1, [pc, #60]	; (19f8 <usagefault_trace_stack+0xac>)
    19ba:	4818      	ldr	r0, [pc, #96]	; (1a1c <usagefault_trace_stack+0xd0>)
    19bc:	f002 f94a 	bl	3c54 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    19c0:	9a07      	ldr	r2, [sp, #28]
    19c2:	490d      	ldr	r1, [pc, #52]	; (19f8 <usagefault_trace_stack+0xac>)
    19c4:	4816      	ldr	r0, [pc, #88]	; (1a20 <usagefault_trace_stack+0xd4>)
    19c6:	f002 f945 	bl	3c54 <printf>
    DBGPRINTLN_CTX("------------------------------");
    19ca:	490b      	ldr	r1, [pc, #44]	; (19f8 <usagefault_trace_stack+0xac>)
    19cc:	4815      	ldr	r0, [pc, #84]	; (1a24 <usagefault_trace_stack+0xd8>)
    19ce:	f002 f941 	bl	3c54 <printf>
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    19d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    19d4:	4908      	ldr	r1, [pc, #32]	; (19f8 <usagefault_trace_stack+0xac>)
    19d6:	4814      	ldr	r0, [pc, #80]	; (1a28 <usagefault_trace_stack+0xdc>)
    19d8:	f3c2 32cf 	ubfx	r2, r2, #15, #16
    19dc:	f002 f93a 	bl	3c54 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    19e0:	6862      	ldr	r2, [r4, #4]
    19e2:	4905      	ldr	r1, [pc, #20]	; (19f8 <usagefault_trace_stack+0xac>)
    19e4:	4811      	ldr	r0, [pc, #68]	; (1a2c <usagefault_trace_stack+0xe0>)
    19e6:	f002 f935 	bl	3c54 <printf>
    19ea:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    19ee:	4902      	ldr	r1, [pc, #8]	; (19f8 <usagefault_trace_stack+0xac>)
    19f0:	480f      	ldr	r0, [pc, #60]	; (1a30 <usagefault_trace_stack+0xe4>)
    19f2:	f002 f92f 	bl	3c54 <printf>

    while(1);
    19f6:	e7fe      	b.n	19f6 <usagefault_trace_stack+0xaa>
    19f8:	00003f0d 	.word	0x00003f0d
    19fc:	0000414a 	.word	0x0000414a
    1a00:	00003f95 	.word	0x00003f95
    1a04:	e000ed00 	.word	0xe000ed00
    1a08:	00003faa 	.word	0x00003faa
    1a0c:	00003fbf 	.word	0x00003fbf
    1a10:	00003fd4 	.word	0x00003fd4
    1a14:	00003fe9 	.word	0x00003fe9
    1a18:	00003fff 	.word	0x00003fff
    1a1c:	00004026 	.word	0x00004026
    1a20:	00004051 	.word	0x00004051
    1a24:	0000407f 	.word	0x0000407f
    1a28:	0000416d 	.word	0x0000416d
    1a2c:	000040be 	.word	0x000040be
    1a30:	000040d5 	.word	0x000040d5

00001a34 <msc_flash_lock>:

    msc_flash_lock();
}
void msc_flash_lock()
{
    MSC->LOCK = MSC_LOCK_LOCKKEY_LOCK;
    1a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a38:	2200      	movs	r2, #0
    1a3a:	641a      	str	r2, [r3, #64]	; 0x40
    MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_LOCK;
    1a3c:	655a      	str	r2, [r3, #84]	; 0x54
    MSC->BANKSWITCHLOCK = MSC_BANKSWITCHLOCK_BANKSWITCHLOCKKEY_LOCK;
    1a3e:	671a      	str	r2, [r3, #112]	; 0x70

    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
    1a40:	689a      	ldr	r2, [r3, #8]
    1a42:	f022 0201 	bic.w	r2, r2, #1
    1a46:	609a      	str	r2, [r3, #8]
}
    1a48:	4770      	bx	lr

00001a4a <msc_flash_unlock>:
void msc_flash_unlock()
{
    MSC->LOCK = MSC_LOCK_LOCKKEY_UNLOCK;
    1a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a4e:	f641 3271 	movw	r2, #7025	; 0x1b71
    1a52:	641a      	str	r2, [r3, #64]	; 0x40
    MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_UNLOCK;
    1a54:	f246 321a 	movw	r2, #25370	; 0x631a
    1a58:	655a      	str	r2, [r3, #84]	; 0x54
    MSC->BANKSWITCHLOCK = MSC_BANKSWITCHLOCK_BANKSWITCHLOCKKEY_UNLOCK;
    1a5a:	f647 422b 	movw	r2, #31787	; 0x7c2b
    1a5e:	671a      	str	r2, [r3, #112]	; 0x70

    MSC->WRITECTRL |= MSC_WRITECTRL_WREN;
    1a60:	689a      	ldr	r2, [r3, #8]
    1a62:	f042 0201 	orr.w	r2, r2, #1
    1a66:	609a      	str	r2, [r3, #8]
}
    1a68:	4770      	bx	lr

00001a6a <msc_init>:
{
    1a6a:	b508      	push	{r3, lr}
    msc_flash_unlock();
    1a6c:	f7ff ffed 	bl	1a4a <msc_flash_unlock>
    MSC->CTRL |= MSC_CTRL_IFCREADCLEAR | MSC_CTRL_CLKDISFAULTEN | MSC_CTRL_ADDRFAULTEN;
    1a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a74:	681a      	ldr	r2, [r3, #0]
    1a76:	f042 020b 	orr.w	r2, r2, #11
    1a7a:	601a      	str	r2, [r3, #0]
    MSC->READCTRL |= MSC_READCTRL_SCBTP;
    1a7c:	685a      	ldr	r2, [r3, #4]
    1a7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a82:	605a      	str	r2, [r3, #4]
    MSC->WRITECTRL = MSC_WRITECTRL_RWWEN;
    1a84:	2220      	movs	r2, #32
    1a86:	609a      	str	r2, [r3, #8]
    MSC->BOOTLOADERCTRL = MSC_BOOTLOADERCTRL_BLWDIS;
    1a88:	2202      	movs	r2, #2
    1a8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    MSC->CACHECONFIG0 = MSC_CACHECONFIG0_CACHELPLEVEL_MINACTIVITY;
    1a8e:	2203      	movs	r2, #3
    1a90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
    1a94:	2201      	movs	r2, #1
    1a96:	645a      	str	r2, [r3, #68]	; 0x44
}
    1a98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    msc_flash_lock();
    1a9c:	f7ff bfca 	b.w	1a34 <msc_flash_lock>

00001aa0 <msc_config_waitstates>:
{
    1aa0:	b508      	push	{r3, lr}
    msc_flash_unlock();
    1aa2:	f7ff ffd2 	bl	1a4a <msc_flash_unlock>
    if(ulFrequency <= 18000000)
    1aa6:	4b23      	ldr	r3, [pc, #140]	; (1b34 <msc_config_waitstates+0x94>)
    1aa8:	4298      	cmp	r0, r3
    1aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1aae:	d815      	bhi.n	1adc <msc_config_waitstates+0x3c>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS0;
    1ab0:	685a      	ldr	r2, [r3, #4]
    1ab2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
    1ab6:	605a      	str	r2, [r3, #4]
        MSC->CTRL &= ~MSC_CTRL_WAITMODE_WS1;
    1ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1abc:	6813      	ldr	r3, [r2, #0]
    1abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1ac2:	6013      	str	r3, [r2, #0]
    if(ulFrequency <= 38000000)
    1ac4:	4b1c      	ldr	r3, [pc, #112]	; (1b38 <msc_config_waitstates+0x98>)
    1ac6:	4298      	cmp	r0, r3
    1ac8:	d928      	bls.n	1b1c <msc_config_waitstates+0x7c>
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN;
    1aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1ace:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    1ad2:	f043 1306 	orr.w	r3, r3, #393222	; 0x60006
    1ad6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    1ada:	e025      	b.n	1b28 <msc_config_waitstates+0x88>
    else if(ulFrequency <= 36000000)
    1adc:	4a17      	ldr	r2, [pc, #92]	; (1b3c <msc_config_waitstates+0x9c>)
    1ade:	4290      	cmp	r0, r2
    1ae0:	d805      	bhi.n	1aee <msc_config_waitstates+0x4e>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
    1ae2:	685a      	ldr	r2, [r3, #4]
    1ae4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    1ae8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1aec:	e7e3      	b.n	1ab6 <msc_config_waitstates+0x16>
    else if(ulFrequency <= 54000000)
    1aee:	4a14      	ldr	r2, [pc, #80]	; (1b40 <msc_config_waitstates+0xa0>)
    1af0:	4290      	cmp	r0, r2
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
    1af2:	685a      	ldr	r2, [r3, #4]
    else if(ulFrequency <= 54000000)
    1af4:	d80e      	bhi.n	1b14 <msc_config_waitstates+0x74>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
    1af6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    1afa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    1afe:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
    1b00:	4b10      	ldr	r3, [pc, #64]	; (1b44 <msc_config_waitstates+0xa4>)
    1b02:	4298      	cmp	r0, r3
    1b04:	d9d8      	bls.n	1ab8 <msc_config_waitstates+0x18>
        MSC->CTRL |= MSC_CTRL_WAITMODE_WS1;
    1b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1b0a:	6813      	ldr	r3, [r2, #0]
    1b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1b10:	6013      	str	r3, [r2, #0]
    if(ulFrequency <= 38000000)
    1b12:	e7da      	b.n	1aca <msc_config_waitstates+0x2a>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS3;
    1b14:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
    1b18:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
    1b1a:	e7f4      	b.n	1b06 <msc_config_waitstates+0x66>
        MSC->RAMCTRL &= ~(MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN);
    1b1c:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    1b20:	f023 1306 	bic.w	r3, r3, #393222	; 0x60006
    1b24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN;
    1b28:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    1b2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    msc_flash_lock();
    1b30:	f7ff bf80 	b.w	1a34 <msc_flash_lock>
    1b34:	0112a880 	.word	0x0112a880
    1b38:	0243d580 	.word	0x0243d580
    1b3c:	02255100 	.word	0x02255100
    1b40:	0337f980 	.word	0x0337f980
    1b44:	02faf080 	.word	0x02faf080

00001b48 <emu_vmon_thresh_get>:
}
static float emu_vmon_thresh_get(uint8_t ubThresh1V86, uint8_t ubThresh2V98, uint8_t ubCurrentThresh)
{
    // Convert from BCD
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    1b48:	230a      	movs	r3, #10
{
    1b4a:	b510      	push	{r4, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    1b4c:	0904      	lsrs	r4, r0, #4
    1b4e:	f000 000f 	and.w	r0, r0, #15
    1b52:	fb13 0404 	smlabb	r4, r3, r4, r0
    1b56:	ee07 4a90 	vmov	s15, r4
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    1b5a:	0908      	lsrs	r0, r1, #4
    1b5c:	f001 010f 	and.w	r1, r1, #15
    1b60:	fb13 1100 	smlabb	r1, r3, r0, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    1b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    1b68:	ee07 1a90 	vmov	s15, r1
    1b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Interpolate between the two calibration thresholds
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    1b70:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 1b9c <emu_vmon_thresh_get+0x54>
    float fOffset = 1.86f - (fSlope * fThresh1V86);
    1b74:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 1ba0 <emu_vmon_thresh_get+0x58>
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    1b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    1b7c:	0911      	lsrs	r1, r2, #4
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    1b7e:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    1b82:	f002 020f 	and.w	r2, r2, #15
    1b86:	fb13 2301 	smlabb	r3, r3, r1, r2
    1b8a:	ee07 3a90 	vmov	s15, r3
    float fOffset = 1.86f - (fSlope * fThresh1V86);
    1b8e:	eea7 0a66 	vfms.f32	s0, s14, s13
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    1b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Find the Code for the target voltage
    float fCurrentVoltage = (fCurrentThresh * fSlope) + fOffset;

    return fCurrentVoltage;
}
    1b96:	eea7 0aa6 	vfma.f32	s0, s15, s13
    1b9a:	bd10      	pop	{r4, pc}
    1b9c:	3f8f5c29 	.word	0x3f8f5c29
    1ba0:	3fee147b 	.word	0x3fee147b

00001ba4 <emu_vmon_thresh_calc>:
{
    1ba4:	b507      	push	{r0, r1, r2, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    1ba6:	230a      	movs	r3, #10
    1ba8:	0902      	lsrs	r2, r0, #4
    1baa:	f000 000f 	and.w	r0, r0, #15
    1bae:	fb13 0202 	smlabb	r2, r3, r2, r0
    1bb2:	ee07 2a90 	vmov	s15, r2
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    1bb6:	090a      	lsrs	r2, r1, #4
    1bb8:	f001 010f 	and.w	r1, r1, #15
    1bbc:	fb13 1302 	smlabb	r3, r3, r2, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    1bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    1bc4:	ee07 3a90 	vmov	s15, r3
    1bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    1bcc:	ed9f 6a17 	vldr	s12, [pc, #92]	; 1c2c <emu_vmon_thresh_calc+0x88>
    1bd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1bd4:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fOffset = 1.86f - (fSlope * fThresh1V86);
    1bd8:	eddf 7a15 	vldr	s15, [pc, #84]	; 1c30 <emu_vmon_thresh_calc+0x8c>
    1bdc:	eee7 7a66 	vfms.f32	s15, s14, s13
    float fTargetThresh = roundf((fTargetVoltage - fOffset) / fSlope);
    1be0:	ee30 0a67 	vsub.f32	s0, s0, s15
    1be4:	ee80 0a26 	vdiv.f32	s0, s0, s13
    1be8:	f002 f85c 	bl	3ca4 <roundf>
    uint8_t ubDecThresh = fTargetThresh / 10.f;
    1bec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    1bf0:	eec0 7a07 	vdiv.f32	s15, s0, s14
    1bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1bf8:	edcd 7a01 	vstr	s15, [sp, #4]
    1bfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    uint8_t ubUniThresh = fTargetThresh - (ubDecThresh * 10);
    1c00:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1c04:	0052      	lsls	r2, r2, #1
    1c06:	ee07 2a90 	vmov	s15, r2
    1c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1c0e:	ee30 0a67 	vsub.f32	s0, s0, s15
    1c12:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    uint8_t ubTargetThresh = ((ubDecThresh & 0xF) << 4) | (ubUniThresh & 0xF);
    1c16:	ee10 2a10 	vmov	r2, s0
    1c1a:	f002 000f 	and.w	r0, r2, #15
    1c1e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
    1c22:	b2c0      	uxtb	r0, r0
    1c24:	b003      	add	sp, #12
    1c26:	f85d fb04 	ldr.w	pc, [sp], #4
    1c2a:	bf00      	nop
    1c2c:	3f8f5c29 	.word	0x3f8f5c29
    1c30:	3fee147b 	.word	0x3fee147b

00001c34 <_emu_isr>:

void _emu_isr()
{
    uint32_t ulFlags = EMU->IFC;
    1c34:	4b15      	ldr	r3, [pc, #84]	; (1c8c <_emu_isr+0x58>)
    1c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    if(ulFlags & EMU_IFC_VMONAVDDFALL)
    1c38:	f013 0101 	ands.w	r1, r3, #1
    1c3c:	d015      	beq.n	1c6a <_emu_isr+0x36>
        g_ubAVDDLow = 1;
    1c3e:	4a14      	ldr	r2, [pc, #80]	; (1c90 <_emu_isr+0x5c>)
    1c40:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
        g_ubAVDDLow = 0;
    1c42:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONALTAVDDFALL)
    1c44:	f013 0104 	ands.w	r1, r3, #4
    1c48:	d013      	beq.n	1c72 <_emu_isr+0x3e>
        g_ubAltAVDDLow = 1;
    1c4a:	4a12      	ldr	r2, [pc, #72]	; (1c94 <_emu_isr+0x60>)
    1c4c:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
        g_ubAltAVDDLow = 0;
    1c4e:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONDVDDFALL)
    1c50:	f013 0110 	ands.w	r1, r3, #16
    1c54:	d011      	beq.n	1c7a <_emu_isr+0x46>
        g_ubDVDDLow = 1;
    1c56:	4a10      	ldr	r2, [pc, #64]	; (1c98 <_emu_isr+0x64>)
    1c58:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
        g_ubDVDDLow = 0;
    1c5a:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONIO0FALL)
    1c5c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
    1c60:	d00f      	beq.n	1c82 <_emu_isr+0x4e>
        g_ubIOVDDLow = 1;
    1c62:	4b0e      	ldr	r3, [pc, #56]	; (1c9c <_emu_isr+0x68>)
    1c64:	2201      	movs	r2, #1
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
        g_ubIOVDDLow = 0;
    1c66:	701a      	strb	r2, [r3, #0]
}
    1c68:	4770      	bx	lr
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
    1c6a:	079a      	lsls	r2, r3, #30
    1c6c:	d5ea      	bpl.n	1c44 <_emu_isr+0x10>
        g_ubAVDDLow = 0;
    1c6e:	4a08      	ldr	r2, [pc, #32]	; (1c90 <_emu_isr+0x5c>)
    1c70:	e7e7      	b.n	1c42 <_emu_isr+0xe>
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
    1c72:	0718      	lsls	r0, r3, #28
    1c74:	d5ec      	bpl.n	1c50 <_emu_isr+0x1c>
        g_ubAltAVDDLow = 0;
    1c76:	4a07      	ldr	r2, [pc, #28]	; (1c94 <_emu_isr+0x60>)
    1c78:	e7e9      	b.n	1c4e <_emu_isr+0x1a>
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
    1c7a:	069a      	lsls	r2, r3, #26
    1c7c:	d5ee      	bpl.n	1c5c <_emu_isr+0x28>
        g_ubDVDDLow = 0;
    1c7e:	4a06      	ldr	r2, [pc, #24]	; (1c98 <_emu_isr+0x64>)
    1c80:	e7eb      	b.n	1c5a <_emu_isr+0x26>
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
    1c82:	061b      	lsls	r3, r3, #24
    1c84:	d5f0      	bpl.n	1c68 <_emu_isr+0x34>
        g_ubIOVDDLow = 0;
    1c86:	4b05      	ldr	r3, [pc, #20]	; (1c9c <_emu_isr+0x68>)
    1c88:	e7ed      	b.n	1c66 <_emu_isr+0x32>
    1c8a:	bf00      	nop
    1c8c:	400e3000 	.word	0x400e3000
    1c90:	20000080 	.word	0x20000080
    1c94:	20000081 	.word	0x20000081
    1c98:	20000082 	.word	0x20000082
    1c9c:	20000083 	.word	0x20000083

00001ca0 <emu_init>:

void emu_init()
{
    EMU->PWRCTRL = EMU_PWRCTRL_IMMEDIATEPWRSWITCH | EMU_PWRCTRL_REGPWRSEL_DVDD | EMU_PWRCTRL_ANASW_AVDD;
    1ca0:	4b07      	ldr	r3, [pc, #28]	; (1cc0 <emu_init+0x20>)
    1ca2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    1ca6:	63da      	str	r2, [r3, #60]	; 0x3c

    EMU->IFC = _EMU_IFC_MASK; // Clear pending IRQs
    1ca8:	4a06      	ldr	r2, [pc, #24]	; (1cc4 <emu_init+0x24>)
    1caa:	62da      	str	r2, [r3, #44]	; 0x2c
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
    1cac:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <emu_init+0x28>)
    1cae:	2201      	movs	r2, #1
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
    1cb0:	21e0      	movs	r1, #224	; 0xe0
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
    1cb2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
    1cb6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    IRQ_ENABLE(EMU_IRQn); // Enable vector
    1cba:	601a      	str	r2, [r3, #0]
}
    1cbc:	4770      	bx	lr
    1cbe:	bf00      	nop
    1cc0:	400e3000 	.word	0x400e3000
    1cc4:	e3df37ff 	.word	0xe3df37ff
    1cc8:	e000e100 	.word	0xe000e100

00001ccc <emu_get_temperature>:
float emu_get_temperature()
{
    EMU->IFC = EMU_IFC_TEMP;
    1ccc:	4912      	ldr	r1, [pc, #72]	; (1d18 <emu_get_temperature+0x4c>)
    1cce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    1cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    while(!(EMU->IF & EMU_IF_TEMP));
    1cd4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    1cd6:	009b      	lsls	r3, r3, #2
    1cd8:	d5fc      	bpl.n	1cd4 <emu_get_temperature+0x8>

    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    1cda:	4b10      	ldr	r3, [pc, #64]	; (1d1c <emu_get_temperature+0x50>)
    float fEMUCalibrationTemp = (DEVINFO->EMUTEMP & _DEVINFO_EMUTEMP_EMUTEMPROOM_MASK) >> _DEVINFO_EMUTEMP_EMUTEMPROOM_SHIFT;
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    1cdc:	ed9f 6a10 	vldr	s12, [pc, #64]	; 1d20 <emu_get_temperature+0x54>
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    1ce0:	681a      	ldr	r2, [r3, #0]
    float fEMUCalibrationTemp = (DEVINFO->EMUTEMP & _DEVINFO_EMUTEMP_EMUTEMPROOM_MASK) >> _DEVINFO_EMUTEMP_EMUTEMPROOM_SHIFT;
    1ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    float fEMUTemp = fCalibrationTemp + fTempCoefEM01 * (fEMUCalibrationTemp - EMU->TEMP);
    1ce4:	ed91 7a08 	vldr	s14, [r1, #32]
    float fEMUCalibrationTemp = (DEVINFO->EMUTEMP & _DEVINFO_EMUTEMP_EMUTEMPROOM_MASK) >> _DEVINFO_EMUTEMP_EMUTEMPROOM_SHIFT;
    1ce8:	b2db      	uxtb	r3, r3
    1cea:	ee07 3a90 	vmov	s15, r3
    1cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fEMUTemp = fCalibrationTemp + fTempCoefEM01 * (fEMUCalibrationTemp - EMU->TEMP);
    1cf2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    1cf6:	eec7 6a86 	vdiv.f32	s13, s15, s12
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    1cfa:	f3c2 4307 	ubfx	r3, r2, #16, #8
    float fEMUTemp = fCalibrationTemp + fTempCoefEM01 * (fEMUCalibrationTemp - EMU->TEMP);
    1cfe:	ee37 7ac7 	vsub.f32	s14, s15, s14
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    1d02:	ee00 3a10 	vmov	s0, r3
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    1d06:	eddf 7a07 	vldr	s15, [pc, #28]	; 1d24 <emu_get_temperature+0x58>
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    1d0a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    1d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15

    return fEMUTemp;
}
    1d12:	eea7 0a27 	vfma.f32	s0, s14, s15
    1d16:	4770      	bx	lr
    1d18:	400e3000 	.word	0x400e3000
    1d1c:	0fe081b0 	.word	0x0fe081b0
    1d20:	42c80000 	.word	0x42c80000
    1d24:	3e8e5604 	.word	0x3e8e5604

00001d28 <emu_vmon_avdd_config>:
void emu_vmon_avdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh, float fHighThresh, float *pfHighThresh)
{
    1d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d2c:	4689      	mov	r9, r1
    1d2e:	ed2d 8b02 	vpush	{d8}
    1d32:	4690      	mov	r8, r2
    1d34:	eeb0 8a60 	vmov.f32	s16, s1
    if(!ubEnable)
    1d38:	b970      	cbnz	r0, 1d58 <emu_vmon_avdd_config+0x30>
    {
        EMU->VMONAVDDCTRL &= ~EMU_VMONAVDDCTRL_EN;
    1d3a:	4b23      	ldr	r3, [pc, #140]	; (1dc8 <emu_vmon_avdd_config+0xa0>)
    1d3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1d40:	f022 0201 	bic.w	r2, r2, #1
    1d44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        EMU->IEN &= ~(EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL);
    1d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1d4a:	f022 0203 	bic.w	r2, r2, #3
    1d4e:	631a      	str	r2, [r3, #48]	; 0x30
        *pfHighThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubHighThresh);

    EMU->IFC = EMU_IFC_VMONAVDDRISE | EMU_IFC_VMONAVDDFALL;
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
}
    1d50:	ecbd 8b02 	vpop	{d8}
    1d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
    1d58:	4b1c      	ldr	r3, [pc, #112]	; (1dcc <emu_vmon_avdd_config+0xa4>)
    1d5a:	f8d3 5140 	ldr.w	r5, [r3, #320]	; 0x140
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
    1d5e:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
    1d62:	b2ed      	uxtb	r5, r5
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
    1d64:	f3c6 2607 	ubfx	r6, r6, #8, #8
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    1d68:	4631      	mov	r1, r6
    1d6a:	4628      	mov	r0, r5
    1d6c:	f7ff ff1a 	bl	1ba4 <emu_vmon_thresh_calc>
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
    1d70:	eeb0 0a48 	vmov.f32	s0, s16
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    1d74:	4607      	mov	r7, r0
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
    1d76:	4631      	mov	r1, r6
    1d78:	4628      	mov	r0, r5
    1d7a:	f7ff ff13 	bl	1ba4 <emu_vmon_thresh_calc>
    1d7e:	4604      	mov	r4, r0
    if(pfLowThresh)
    1d80:	f1b9 0f00 	cmp.w	r9, #0
    1d84:	d006      	beq.n	1d94 <emu_vmon_avdd_config+0x6c>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    1d86:	463a      	mov	r2, r7
    1d88:	4631      	mov	r1, r6
    1d8a:	4628      	mov	r0, r5
    1d8c:	f7ff fedc 	bl	1b48 <emu_vmon_thresh_get>
    1d90:	ed89 0a00 	vstr	s0, [r9]
    if(pfHighThresh)
    1d94:	f1b8 0f00 	cmp.w	r8, #0
    1d98:	d006      	beq.n	1da8 <emu_vmon_avdd_config+0x80>
        *pfHighThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubHighThresh);
    1d9a:	4622      	mov	r2, r4
    1d9c:	4631      	mov	r1, r6
    1d9e:	4628      	mov	r0, r5
    1da0:	f7ff fed2 	bl	1b48 <emu_vmon_thresh_get>
    1da4:	ed88 0a00 	vstr	s0, [r8]
    EMU->IFC = EMU_IFC_VMONAVDDRISE | EMU_IFC_VMONAVDDFALL;
    1da8:	4b07      	ldr	r3, [pc, #28]	; (1dc8 <emu_vmon_avdd_config+0xa0>)
    1daa:	2203      	movs	r2, #3
    1dac:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    1dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
    1db0:	0424      	lsls	r4, r4, #16
    1db2:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    1db6:	f042 0203 	orr.w	r2, r2, #3
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
    1dba:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    1dbe:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
    1dc0:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    1dc4:	e7c4      	b.n	1d50 <emu_vmon_avdd_config+0x28>
    1dc6:	bf00      	nop
    1dc8:	400e3000 	.word	0x400e3000
    1dcc:	0fe081b0 	.word	0x0fe081b0

00001dd0 <emu_vmon_dvdd_config>:
    EMU->IFC = EMU_IFC_VMONALTAVDDRISE | EMU_IFC_VMONALTAVDDFALL;
    EMU->IEN |= EMU_IEN_VMONALTAVDDRISE | EMU_IEN_VMONALTAVDDFALL;
    EMU->VMONALTAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONALTAVDDCTRL_THRESFINE_SHIFT) | EMU_VMONALTAVDDCTRL_EN;
}
void emu_vmon_dvdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
    1dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dd2:	460f      	mov	r7, r1
    if(!ubEnable)
    1dd4:	b958      	cbnz	r0, 1dee <emu_vmon_dvdd_config+0x1e>
    {
        EMU->VMONDVDDCTRL &= ~EMU_VMONDVDDCTRL_EN;
    1dd6:	4b17      	ldr	r3, [pc, #92]	; (1e34 <emu_vmon_dvdd_config+0x64>)
    1dd8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    1ddc:	f022 0201 	bic.w	r2, r2, #1
    1de0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        EMU->IEN &= ~(EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL);
    1de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1de6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    1dea:	631a      	str	r2, [r3, #48]	; 0x30
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);

    EMU->IFC = EMU_IFC_VMONDVDDRISE | EMU_IFC_VMONDVDDFALL;
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
}
    1dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
    1dee:	4b12      	ldr	r3, [pc, #72]	; (1e38 <emu_vmon_dvdd_config+0x68>)
    1df0:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
    1df4:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
    1df8:	b2ed      	uxtb	r5, r5
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
    1dfa:	f3c6 2607 	ubfx	r6, r6, #8, #8
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    1dfe:	4631      	mov	r1, r6
    1e00:	4628      	mov	r0, r5
    1e02:	f7ff fecf 	bl	1ba4 <emu_vmon_thresh_calc>
    1e06:	4604      	mov	r4, r0
    if(pfLowThresh)
    1e08:	b137      	cbz	r7, 1e18 <emu_vmon_dvdd_config+0x48>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    1e0a:	4602      	mov	r2, r0
    1e0c:	4631      	mov	r1, r6
    1e0e:	4628      	mov	r0, r5
    1e10:	f7ff fe9a 	bl	1b48 <emu_vmon_thresh_get>
    1e14:	ed87 0a00 	vstr	s0, [r7]
    EMU->IFC = EMU_IFC_VMONDVDDRISE | EMU_IFC_VMONDVDDFALL;
    1e18:	4b06      	ldr	r3, [pc, #24]	; (1e34 <emu_vmon_dvdd_config+0x64>)
    1e1a:	2230      	movs	r2, #48	; 0x30
    1e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    1e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    1e20:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    1e22:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    1e26:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    1e2a:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    1e2c:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    1e30:	e7dc      	b.n	1dec <emu_vmon_dvdd_config+0x1c>
    1e32:	bf00      	nop
    1e34:	400e3000 	.word	0x400e3000
    1e38:	0fe081b0 	.word	0x0fe081b0

00001e3c <emu_vmon_iovdd_config>:
void emu_vmon_iovdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
    1e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e3e:	460f      	mov	r7, r1
    if(!ubEnable)
    1e40:	b958      	cbnz	r0, 1e5a <emu_vmon_iovdd_config+0x1e>
    {
        EMU->VMONIO0CTRL &= ~EMU_VMONIO0CTRL_EN;
    1e42:	4b17      	ldr	r3, [pc, #92]	; (1ea0 <emu_vmon_iovdd_config+0x64>)
    1e44:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    1e48:	f022 0201 	bic.w	r2, r2, #1
    1e4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        EMU->IEN &= ~(EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL);
    1e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1e52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
    1e56:	631a      	str	r2, [r3, #48]	; 0x30
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);

    EMU->IFC = EMU_IFC_VMONIO0RISE | EMU_IFC_VMONIO0FALL;
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    1e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
    1e5a:	4b12      	ldr	r3, [pc, #72]	; (1ea4 <emu_vmon_iovdd_config+0x68>)
    1e5c:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
    1e60:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
    1e64:	f3c5 4507 	ubfx	r5, r5, #16, #8
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
    1e68:	0e36      	lsrs	r6, r6, #24
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    1e6a:	4631      	mov	r1, r6
    1e6c:	4628      	mov	r0, r5
    1e6e:	f7ff fe99 	bl	1ba4 <emu_vmon_thresh_calc>
    1e72:	4604      	mov	r4, r0
    if(pfLowThresh)
    1e74:	b137      	cbz	r7, 1e84 <emu_vmon_iovdd_config+0x48>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    1e76:	4602      	mov	r2, r0
    1e78:	4631      	mov	r1, r6
    1e7a:	4628      	mov	r0, r5
    1e7c:	f7ff fe64 	bl	1b48 <emu_vmon_thresh_get>
    1e80:	ed87 0a00 	vstr	s0, [r7]
    EMU->IFC = EMU_IFC_VMONIO0RISE | EMU_IFC_VMONIO0FALL;
    1e84:	4b06      	ldr	r3, [pc, #24]	; (1ea0 <emu_vmon_iovdd_config+0x64>)
    1e86:	22c0      	movs	r2, #192	; 0xc0
    1e88:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    1e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    1e8c:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    1e8e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    1e92:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    1e96:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    1e98:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    1e9c:	e7dc      	b.n	1e58 <emu_vmon_iovdd_config+0x1c>
    1e9e:	bf00      	nop
    1ea0:	400e3000 	.word	0x400e3000
    1ea4:	0fe081b0 	.word	0x0fe081b0

00001ea8 <gpio_init>:
#include "gpio.h"

void gpio_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPIO;
    1ea8:	4a29      	ldr	r2, [pc, #164]	; (1f50 <gpio_init+0xa8>)
    1eaa:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    1eae:	f043 0320 	orr.w	r3, r3, #32
    1eb2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    // Port A
    GPIO->P[0].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1eb6:	4b27      	ldr	r3, [pc, #156]	; (1f54 <gpio_init+0xac>)
    1eb8:	f04f 1150 	mov.w	r1, #5242960	; 0x500050
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[0].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL  // GPIO - LED
    1ebc:	f240 4204 	movw	r2, #1028	; 0x404
    GPIO->P[0].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1ec0:	6019      	str	r1, [r3, #0]
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[0].DOUT   = 0;
    GPIO->P[0].OVTDIS = 0;

    // Port B
    GPIO->P[1].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (7 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1ec2:	f04f 1070 	mov.w	r0, #7340144	; 0x700070
    GPIO->P[0].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL  // GPIO - LED
    1ec6:	605a      	str	r2, [r3, #4]
    GPIO->P[0].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    1ec8:	2200      	movs	r2, #0
    1eca:	609a      	str	r2, [r3, #8]
    GPIO->P[0].DOUT   = 0;
    1ecc:	60da      	str	r2, [r3, #12]
    GPIO->P[0].OVTDIS = 0;
    1ece:	629a      	str	r2, [r3, #40]	; 0x28
    GPIO->P[1].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (7 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1ed0:	6318      	str	r0, [r3, #48]	; 0x30
                      | GPIO_P_MODEL_MODE3_DISABLED
                      | GPIO_P_MODEL_MODE4_DISABLED
                      | GPIO_P_MODEL_MODE5_DISABLED
                      | GPIO_P_MODEL_MODE6_DISABLED
                      | GPIO_P_MODEL_MODE7_DISABLED;
    GPIO->P[1].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    1ed2:	f44f 203b 	mov.w	r0, #765952	; 0xbb000
    GPIO->P[1].MODEL  = GPIO_P_MODEL_MODE0_DISABLED
    1ed6:	635a      	str	r2, [r3, #52]	; 0x34
    GPIO->P[1].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    1ed8:	6398      	str	r0, [r3, #56]	; 0x38
                      | GPIO_P_MODEH_MODE11_WIREDANDPULLUPFILTER // I2C1_SDA - Location 1
                      | GPIO_P_MODEH_MODE12_WIREDANDPULLUPFILTER // I2C1_SCL - Location 1
                      | GPIO_P_MODEH_MODE13_DISABLED
                      | GPIO_P_MODEH_MODE14_DISABLED
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[1].DOUT   = BIT(11) | BIT(12);
    1eda:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    1ede:	63d8      	str	r0, [r3, #60]	; 0x3c
                      | GPIO_P_MODEL_MODE3_DISABLED
                      | GPIO_P_MODEL_MODE4_DISABLED
                      | GPIO_P_MODEL_MODE5_DISABLED
                      | GPIO_P_MODEL_MODE6_DISABLED
                      | GPIO_P_MODEL_MODE7_DISABLED;
    GPIO->P[3].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    1ee0:	481d      	ldr	r0, [pc, #116]	; (1f58 <gpio_init+0xb0>)
    GPIO->P[1].OVTDIS = 0;
    1ee2:	659a      	str	r2, [r3, #88]	; 0x58
    GPIO->P[2].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1ee4:	6619      	str	r1, [r3, #96]	; 0x60
    GPIO->P[2].MODEL  = GPIO_P_MODEL_MODE0_DISABLED
    1ee6:	665a      	str	r2, [r3, #100]	; 0x64
    GPIO->P[2].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    1ee8:	669a      	str	r2, [r3, #104]	; 0x68
    GPIO->P[2].DOUT   = 0;
    1eea:	66da      	str	r2, [r3, #108]	; 0x6c
    GPIO->P[2].OVTDIS = 0;
    1eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    GPIO->P[3].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1ef0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    GPIO->P[3].MODEL  = GPIO_P_MODEL_MODE0_DISABLED
    1ef4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    GPIO->P[3].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    1ef8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
                      | GPIO_P_MODEH_MODE11_PUSHPULL // QSPI0_DQ2 - Location 0
                      | GPIO_P_MODEH_MODE12_PUSHPULL // QSPI0_DQ3 - Location 0
                      | GPIO_P_MODEH_MODE13_DISABLED
                      | GPIO_P_MODEH_MODE14_DISABLED
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[3].DOUT   = 0;
    1efc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    GPIO->P[3].OVTDIS = 0;
    1f00:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    // Port E
    GPIO->P[4].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1f04:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[4].MODEL  = GPIO_P_MODEL_MODE0_DISABLED
    1f08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                      | GPIO_P_MODEL_MODE3_DISABLED
                      | GPIO_P_MODEL_MODE4_DISABLED
                      | GPIO_P_MODEL_MODE5_DISABLED
                      | GPIO_P_MODEL_MODE6_DISABLED
                      | GPIO_P_MODEL_MODE7_DISABLED;
    GPIO->P[4].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    1f0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                      | GPIO_P_MODEH_MODE11_DISABLED
                      | GPIO_P_MODEH_MODE12_DISABLED
                      | GPIO_P_MODEH_MODE13_DISABLED
                      | GPIO_P_MODEH_MODE14_DISABLED
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[4].DOUT   = 0;
    1f10:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    GPIO->P[4].OVTDIS = 0;
    1f14:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    // Port F
    GPIO->P[5].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1f18:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[5].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL  // DBG_SWCLK - Location 0
    1f1c:	490f      	ldr	r1, [pc, #60]	; (1f5c <gpio_init+0xb4>)
    1f1e:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
                      | GPIO_P_MODEH_MODE11_DISABLED
                      | GPIO_P_MODEH_MODE12_DISABLED
                      | GPIO_P_MODEH_MODE13_DISABLED
                      | GPIO_P_MODEH_MODE14_DISABLED
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[5].DOUT   = BIT(7);
    1f22:	2180      	movs	r1, #128	; 0x80
    GPIO->P[5].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    1f24:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    GPIO->P[5].DOUT   = BIT(7);
    1f28:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
    GPIO->P[5].OVTDIS = 0;
    1f2c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    // Debugger Route
    GPIO->ROUTEPEN &= ~(GPIO_ROUTEPEN_TDIPEN | GPIO_ROUTEPEN_TDOPEN); // Disable JTAG
    1f30:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    1f34:	f021 010c 	bic.w	r1, r1, #12
    1f38:	f8c3 1440 	str.w	r1, [r3, #1088]	; 0x440
    GPIO->ROUTEPEN |= GPIO_ROUTEPEN_SWVPEN; // Enable SWO
    1f3c:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    1f40:	f041 0110 	orr.w	r1, r1, #16
    1f44:	f8c3 1440 	str.w	r1, [r3, #1088]	; 0x440
    GPIO->ROUTELOC0 = GPIO_ROUTELOC0_SWVLOC_LOC0; // SWO on PF2
    1f48:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
    1f4c:	4770      	bx	lr
    1f4e:	bf00      	nop
    1f50:	400e4000 	.word	0x400e4000
    1f54:	40088000 	.word	0x40088000
    1f58:	00044440 	.word	0x00044440
    1f5c:	44000444 	.word	0x44000444

00001f60 <get_device_name>:

    return ulFreeRAM;
}

void get_device_name(char *pszDeviceName, uint32_t ulDeviceNameSize)
{
    1f60:	b570      	push	{r4, r5, r6, lr}
    uint8_t ubFamily = (DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK) >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT;
    1f62:	4ca2      	ldr	r4, [pc, #648]	; (21ec <get_device_name+0x28c>)
    1f64:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    1f66:	f3c2 4207 	ubfx	r2, r2, #16, #8
    const char* szFamily = "?";

    if(ubFamily == 0x10)
    1f6a:	2a10      	cmp	r2, #16
{
    1f6c:	b086      	sub	sp, #24
    if(ubFamily == 0x10)
    1f6e:	f000 80cc 	beq.w	210a <get_device_name+0x1aa>
        szFamily = "EFR32MG1P";
    else if(ubFamily == 0x11)
    1f72:	2a11      	cmp	r2, #17
    1f74:	f000 80cb 	beq.w	210e <get_device_name+0x1ae>
        szFamily = "EFR32MG1B";
    else if(ubFamily == 0x12)
    1f78:	2a12      	cmp	r2, #18
    1f7a:	f000 80ca 	beq.w	2112 <get_device_name+0x1b2>
        szFamily = "EFR32MG1V";
    else if(ubFamily == 0x13)
    1f7e:	2a13      	cmp	r2, #19
    1f80:	f000 80c9 	beq.w	2116 <get_device_name+0x1b6>
        szFamily = "EFR32BG1P";
    else if(ubFamily == 0x14)
    1f84:	2a14      	cmp	r2, #20
    1f86:	f000 80c8 	beq.w	211a <get_device_name+0x1ba>
        szFamily = "EFR32BG1B";
    else if(ubFamily == 0x15)
    1f8a:	2a15      	cmp	r2, #21
    1f8c:	f000 80c7 	beq.w	211e <get_device_name+0x1be>
        szFamily = "EFR32BG1V";
    else if(ubFamily == 0x19)
    1f90:	2a19      	cmp	r2, #25
    1f92:	f000 80c6 	beq.w	2122 <get_device_name+0x1c2>
        szFamily = "EFR32FG1P";
    else if(ubFamily == 0x1A)
    1f96:	2a1a      	cmp	r2, #26
    1f98:	f000 80c5 	beq.w	2126 <get_device_name+0x1c6>
        szFamily = "EFR32FG1B";
    else if(ubFamily == 0x1B)
    1f9c:	2a1b      	cmp	r2, #27
    1f9e:	f000 80c4 	beq.w	212a <get_device_name+0x1ca>
        szFamily = "EFR32FG1V";
    else if(ubFamily == 0x1C)
    1fa2:	2a1c      	cmp	r2, #28
    1fa4:	f000 80c3 	beq.w	212e <get_device_name+0x1ce>
        szFamily = "EFR32MG12P";
    else if(ubFamily == 0x1D)
    1fa8:	2a1d      	cmp	r2, #29
    1faa:	f000 80c2 	beq.w	2132 <get_device_name+0x1d2>
        szFamily = "EFR32MG12B";
    else if(ubFamily == 0x1E)
    1fae:	2a1e      	cmp	r2, #30
    1fb0:	f000 80c1 	beq.w	2136 <get_device_name+0x1d6>
        szFamily = "EFR32MG12V";
    else if(ubFamily == 0x1F)
    1fb4:	2a1f      	cmp	r2, #31
    1fb6:	f000 80c0 	beq.w	213a <get_device_name+0x1da>
        szFamily = "EFR32BG12P";
    else if(ubFamily == 0x20)
    1fba:	2a20      	cmp	r2, #32
    1fbc:	f000 80bf 	beq.w	213e <get_device_name+0x1de>
        szFamily = "EFR32BG12B";
    else if(ubFamily == 0x21)
    1fc0:	2a21      	cmp	r2, #33	; 0x21
    1fc2:	f000 80be 	beq.w	2142 <get_device_name+0x1e2>
        szFamily = "EFR32BG12V";
    else if(ubFamily == 0x25)
    1fc6:	2a25      	cmp	r2, #37	; 0x25
    1fc8:	f000 80bd 	beq.w	2146 <get_device_name+0x1e6>
        szFamily = "EFR32FG12P";
    else if(ubFamily == 0x26)
    1fcc:	2a26      	cmp	r2, #38	; 0x26
    1fce:	f000 80bc 	beq.w	214a <get_device_name+0x1ea>
        szFamily = "EFR32FG12B";
    else if(ubFamily == 0x27)
    1fd2:	2a27      	cmp	r2, #39	; 0x27
    1fd4:	f000 80bb 	beq.w	214e <get_device_name+0x1ee>
        szFamily = "EFR32FG12V";
    else if(ubFamily == 0x28)
    1fd8:	2a28      	cmp	r2, #40	; 0x28
    1fda:	f000 80ba 	beq.w	2152 <get_device_name+0x1f2>
        szFamily = "EFR32MG13P";
    else if(ubFamily == 0x29)
    1fde:	2a29      	cmp	r2, #41	; 0x29
    1fe0:	f000 80b9 	beq.w	2156 <get_device_name+0x1f6>
        szFamily = "EFR32MG13B";
    else if(ubFamily == 0x2A)
    1fe4:	2a2a      	cmp	r2, #42	; 0x2a
    1fe6:	f000 80b8 	beq.w	215a <get_device_name+0x1fa>
        szFamily = "EFR32MG13V";
    else if(ubFamily == 0x2B)
    1fea:	2a2b      	cmp	r2, #43	; 0x2b
    1fec:	f000 80b7 	beq.w	215e <get_device_name+0x1fe>
        szFamily = "EFR32BG13P";
    else if(ubFamily == 0x2C)
    1ff0:	2a2c      	cmp	r2, #44	; 0x2c
    1ff2:	f000 80b6 	beq.w	2162 <get_device_name+0x202>
        szFamily = "EFR32BG13B";
    else if(ubFamily == 0x2D)
    1ff6:	2a2d      	cmp	r2, #45	; 0x2d
    1ff8:	f000 80b5 	beq.w	2166 <get_device_name+0x206>
        szFamily = "EFR32BG13V";
    else if(ubFamily == 0x2E)
    1ffc:	2a2e      	cmp	r2, #46	; 0x2e
    1ffe:	f000 80b4 	beq.w	216a <get_device_name+0x20a>
        szFamily = "EFR32ZG13P";
    else if(ubFamily == 0x31)
    2002:	2a31      	cmp	r2, #49	; 0x31
    2004:	f000 80b3 	beq.w	216e <get_device_name+0x20e>
        szFamily = "EFR32FG13P";
    else if(ubFamily == 0x32)
    2008:	2a32      	cmp	r2, #50	; 0x32
    200a:	f000 80b2 	beq.w	2172 <get_device_name+0x212>
        szFamily = "EFR32FG13B";
    else if(ubFamily == 0x33)
    200e:	2a33      	cmp	r2, #51	; 0x33
    2010:	f000 80b1 	beq.w	2176 <get_device_name+0x216>
        szFamily = "EFR32FG13V";
    else if(ubFamily == 0x34)
    2014:	2a34      	cmp	r2, #52	; 0x34
    2016:	f000 80b0 	beq.w	217a <get_device_name+0x21a>
        szFamily = "EFR32MG14P";
    else if(ubFamily == 0x35)
    201a:	2a35      	cmp	r2, #53	; 0x35
    201c:	f000 80af 	beq.w	217e <get_device_name+0x21e>
        szFamily = "EFR32MG14B";
    else if(ubFamily == 0x36)
    2020:	2a36      	cmp	r2, #54	; 0x36
    2022:	f000 80ae 	beq.w	2182 <get_device_name+0x222>
        szFamily = "EFR32MG14V";
    else if(ubFamily == 0x37)
    2026:	2a37      	cmp	r2, #55	; 0x37
    2028:	f000 80ad 	beq.w	2186 <get_device_name+0x226>
        szFamily = "EFR32BG14P";
    else if(ubFamily == 0x38)
    202c:	2a38      	cmp	r2, #56	; 0x38
    202e:	f000 80ac 	beq.w	218a <get_device_name+0x22a>
        szFamily = "EFR32BG14B";
    else if(ubFamily == 0x39)
    2032:	2a39      	cmp	r2, #57	; 0x39
    2034:	f000 80ab 	beq.w	218e <get_device_name+0x22e>
        szFamily = "EFR32BG14V";
    else if(ubFamily == 0x3A)
    2038:	2a3a      	cmp	r2, #58	; 0x3a
    203a:	f000 80aa 	beq.w	2192 <get_device_name+0x232>
        szFamily = "EFR32ZG14P";
    else if(ubFamily == 0x3D)
    203e:	2a3d      	cmp	r2, #61	; 0x3d
    2040:	f000 80a9 	beq.w	2196 <get_device_name+0x236>
        szFamily = "EFR32FG14P";
    else if(ubFamily == 0x3E)
    2044:	2a3e      	cmp	r2, #62	; 0x3e
    2046:	f000 80a8 	beq.w	219a <get_device_name+0x23a>
        szFamily = "EFR32FG14B";
    else if(ubFamily == 0x3F)
    204a:	2a3f      	cmp	r2, #63	; 0x3f
    204c:	f000 80a7 	beq.w	219e <get_device_name+0x23e>
        szFamily = "EFR32FG14V";
    else if(ubFamily == 0x47)
    2050:	2a47      	cmp	r2, #71	; 0x47
    2052:	f000 80a6 	beq.w	21a2 <get_device_name+0x242>
        szFamily = "EFM32G";
    else if(ubFamily == 0x47)
        szFamily = "G";
    else if(ubFamily == 0x48)
    2056:	2a48      	cmp	r2, #72	; 0x48
    2058:	f000 80a5 	beq.w	21a6 <get_device_name+0x246>
        szFamily = "EFM32GG";
    else if(ubFamily == 0x48)
        szFamily = "GG";
    else if(ubFamily == 0x49)
    205c:	2a49      	cmp	r2, #73	; 0x49
    205e:	f000 80a4 	beq.w	21aa <get_device_name+0x24a>
        szFamily = "TG";
    else if(ubFamily == 0x49)
        szFamily = "EFM32TG";
    else if(ubFamily == 0x4A)
    2062:	2a4a      	cmp	r2, #74	; 0x4a
    2064:	f000 80a3 	beq.w	21ae <get_device_name+0x24e>
        szFamily = "EFM32LG";
    else if(ubFamily == 0x4A)
        szFamily = "LG";
    else if(ubFamily == 0x4B)
    2068:	2a4b      	cmp	r2, #75	; 0x4b
    206a:	f000 80a2 	beq.w	21b2 <get_device_name+0x252>
        szFamily = "EFM32WG";
    else if(ubFamily == 0x4B)
        szFamily = "WG";
    else if(ubFamily == 0x4C)
    206e:	2a4c      	cmp	r2, #76	; 0x4c
    2070:	f000 80a1 	beq.w	21b6 <get_device_name+0x256>
        szFamily = "ZG";
    else if(ubFamily == 0x4C)
        szFamily = "EFM32ZG";
    else if(ubFamily == 0x4D)
    2074:	2a4d      	cmp	r2, #77	; 0x4d
    2076:	f000 80a0 	beq.w	21ba <get_device_name+0x25a>
        szFamily = "HG";
    else if(ubFamily == 0x4D)
        szFamily = "EFM32HG";
    else if(ubFamily == 0x51)
    207a:	2a51      	cmp	r2, #81	; 0x51
    207c:	f000 809f 	beq.w	21be <get_device_name+0x25e>
        szFamily = "EFM32PG1B";
    else if(ubFamily == 0x53)
    2080:	2a53      	cmp	r2, #83	; 0x53
    2082:	f000 809e 	beq.w	21c2 <get_device_name+0x262>
        szFamily = "EFM32JG1B";
    else if(ubFamily == 0x55)
    2086:	2a55      	cmp	r2, #85	; 0x55
    2088:	f000 809d 	beq.w	21c6 <get_device_name+0x266>
        szFamily = "EFM32PG12B";
    else if(ubFamily == 0x57)
    208c:	2a57      	cmp	r2, #87	; 0x57
    208e:	f000 809c 	beq.w	21ca <get_device_name+0x26a>
        szFamily = "EFM32JG12B";
    else if(ubFamily == 0x64)
    2092:	2a64      	cmp	r2, #100	; 0x64
    2094:	f000 809b 	beq.w	21ce <get_device_name+0x26e>
        szFamily = "EFM32GG11B";
    else if(ubFamily == 0x67)
    2098:	2a67      	cmp	r2, #103	; 0x67
    209a:	f000 809a 	beq.w	21d2 <get_device_name+0x272>
        szFamily = "EFM32TG11B";
    else if(ubFamily == 0x6A)
    209e:	2a6a      	cmp	r2, #106	; 0x6a
    20a0:	f000 8099 	beq.w	21d6 <get_device_name+0x276>
        szFamily = "EFM32GG12B";
    else if(ubFamily == 0x78)
    20a4:	2a78      	cmp	r2, #120	; 0x78
    20a6:	f000 8098 	beq.w	21da <get_device_name+0x27a>
        szFamily = "EZR32LG";
    else if(ubFamily == 0x79)
    20aa:	2a79      	cmp	r2, #121	; 0x79
    20ac:	f000 8097 	beq.w	21de <get_device_name+0x27e>
        szFamily = "EZR32WG";
    else if(ubFamily == 0x7A)
        szFamily = "EZR32HG";
    20b0:	4d4f      	ldr	r5, [pc, #316]	; (21f0 <get_device_name+0x290>)
    20b2:	4b50      	ldr	r3, [pc, #320]	; (21f4 <get_device_name+0x294>)
    20b4:	2a7a      	cmp	r2, #122	; 0x7a
    20b6:	bf18      	it	ne
    20b8:	462b      	movne	r3, r5
    
    uint8_t ubPackage = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PKGTYPE_MASK) >> _DEVINFO_MEMINFO_PKGTYPE_SHIFT;
    20ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
    20bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
    char cPackage = '?';
    
    if(ubPackage == 74)
    20c0:	2a4a      	cmp	r2, #74	; 0x4a
    20c2:	f000 808e 	beq.w	21e2 <get_device_name+0x282>
        cPackage = '?';
    else if(ubPackage == 76)
    20c6:	2a4c      	cmp	r2, #76	; 0x4c
    20c8:	d005      	beq.n	20d6 <get_device_name+0x176>
        cPackage = 'L';
    else if(ubPackage == 77)
    20ca:	2a4d      	cmp	r2, #77	; 0x4d
    20cc:	d003      	beq.n	20d6 <get_device_name+0x176>
        cPackage = 'M';
    else if(ubPackage == 81)
        cPackage = 'Q';
    20ce:	2a51      	cmp	r2, #81	; 0x51
    20d0:	bf14      	ite	ne
    20d2:	223f      	movne	r2, #63	; 0x3f
    20d4:	2251      	moveq	r2, #81	; 0x51

    uint8_t ubTempGrade = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_TEMPGRADE_MASK) >> _DEVINFO_MEMINFO_TEMPGRADE_SHIFT;
    20d6:	6b65      	ldr	r5, [r4, #52]	; 0x34
    char cTempGrade = '?';

    if(ubTempGrade == 0)
    20d8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    20dc:	f000 8083 	beq.w	21e6 <get_device_name+0x286>
        cTempGrade = 'G';
    else if(ubTempGrade == 1)
        cTempGrade = 'I';
    else if(ubTempGrade == 2)
        cTempGrade = '?';
    20e0:	2d01      	cmp	r5, #1
    20e2:	bf0c      	ite	eq
    20e4:	2649      	moveq	r6, #73	; 0x49
    20e6:	263f      	movne	r6, #63	; 0x3f
    else if(ubTempGrade == 3)
        cTempGrade = '?';

    uint16_t usPartNumber = (DEVINFO->PART & _DEVINFO_PART_DEVICE_NUMBER_MASK) >> _DEVINFO_PART_DEVICE_NUMBER_SHIFT;
    20e8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    uint8_t ubPinCount = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PINCOUNT_MASK) >> _DEVINFO_MEMINFO_PINCOUNT_SHIFT;
    20ea:	6b64      	ldr	r4, [r4, #52]	; 0x34

    snprintf(pszDeviceName, ulDeviceNameSize, "%s%huF%hu%c%c%hhu", szFamily, usPartNumber, FLASH_SIZE >> 10, cTempGrade, cPackage, ubPinCount);
    20ec:	9602      	str	r6, [sp, #8]
    20ee:	f3c4 4407 	ubfx	r4, r4, #16, #8
    20f2:	e9cd 2403 	strd	r2, r4, [sp, #12]
    20f6:	b2ad      	uxth	r5, r5
    20f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    20fc:	9201      	str	r2, [sp, #4]
    20fe:	9500      	str	r5, [sp, #0]
    2100:	4a3d      	ldr	r2, [pc, #244]	; (21f8 <get_device_name+0x298>)
    2102:	f001 fdbb 	bl	3c7c <snprintf>
}
    2106:	b006      	add	sp, #24
    2108:	bd70      	pop	{r4, r5, r6, pc}
        szFamily = "EFR32MG1P";
    210a:	4b3c      	ldr	r3, [pc, #240]	; (21fc <get_device_name+0x29c>)
    210c:	e7d5      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG1B";
    210e:	4b3c      	ldr	r3, [pc, #240]	; (2200 <get_device_name+0x2a0>)
    2110:	e7d3      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG1V";
    2112:	4b3c      	ldr	r3, [pc, #240]	; (2204 <get_device_name+0x2a4>)
    2114:	e7d1      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG1P";
    2116:	4b3c      	ldr	r3, [pc, #240]	; (2208 <get_device_name+0x2a8>)
    2118:	e7cf      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG1B";
    211a:	4b3c      	ldr	r3, [pc, #240]	; (220c <get_device_name+0x2ac>)
    211c:	e7cd      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG1V";
    211e:	4b3c      	ldr	r3, [pc, #240]	; (2210 <get_device_name+0x2b0>)
    2120:	e7cb      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG1P";
    2122:	4b3c      	ldr	r3, [pc, #240]	; (2214 <get_device_name+0x2b4>)
    2124:	e7c9      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG1B";
    2126:	4b3c      	ldr	r3, [pc, #240]	; (2218 <get_device_name+0x2b8>)
    2128:	e7c7      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG1V";
    212a:	4b3c      	ldr	r3, [pc, #240]	; (221c <get_device_name+0x2bc>)
    212c:	e7c5      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG12P";
    212e:	4b3c      	ldr	r3, [pc, #240]	; (2220 <get_device_name+0x2c0>)
    2130:	e7c3      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG12B";
    2132:	4b3c      	ldr	r3, [pc, #240]	; (2224 <get_device_name+0x2c4>)
    2134:	e7c1      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG12V";
    2136:	4b3c      	ldr	r3, [pc, #240]	; (2228 <get_device_name+0x2c8>)
    2138:	e7bf      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG12P";
    213a:	4b3c      	ldr	r3, [pc, #240]	; (222c <get_device_name+0x2cc>)
    213c:	e7bd      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG12B";
    213e:	4b3c      	ldr	r3, [pc, #240]	; (2230 <get_device_name+0x2d0>)
    2140:	e7bb      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG12V";
    2142:	4b3c      	ldr	r3, [pc, #240]	; (2234 <get_device_name+0x2d4>)
    2144:	e7b9      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG12P";
    2146:	4b3c      	ldr	r3, [pc, #240]	; (2238 <get_device_name+0x2d8>)
    2148:	e7b7      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG12B";
    214a:	4b3c      	ldr	r3, [pc, #240]	; (223c <get_device_name+0x2dc>)
    214c:	e7b5      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG12V";
    214e:	4b3c      	ldr	r3, [pc, #240]	; (2240 <get_device_name+0x2e0>)
    2150:	e7b3      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG13P";
    2152:	4b3c      	ldr	r3, [pc, #240]	; (2244 <get_device_name+0x2e4>)
    2154:	e7b1      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG13B";
    2156:	4b3c      	ldr	r3, [pc, #240]	; (2248 <get_device_name+0x2e8>)
    2158:	e7af      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG13V";
    215a:	4b3c      	ldr	r3, [pc, #240]	; (224c <get_device_name+0x2ec>)
    215c:	e7ad      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG13P";
    215e:	4b3c      	ldr	r3, [pc, #240]	; (2250 <get_device_name+0x2f0>)
    2160:	e7ab      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG13B";
    2162:	4b3c      	ldr	r3, [pc, #240]	; (2254 <get_device_name+0x2f4>)
    2164:	e7a9      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG13V";
    2166:	4b3c      	ldr	r3, [pc, #240]	; (2258 <get_device_name+0x2f8>)
    2168:	e7a7      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32ZG13P";
    216a:	4b3c      	ldr	r3, [pc, #240]	; (225c <get_device_name+0x2fc>)
    216c:	e7a5      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG13P";
    216e:	4b3c      	ldr	r3, [pc, #240]	; (2260 <get_device_name+0x300>)
    2170:	e7a3      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG13B";
    2172:	4b3c      	ldr	r3, [pc, #240]	; (2264 <get_device_name+0x304>)
    2174:	e7a1      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG13V";
    2176:	4b3c      	ldr	r3, [pc, #240]	; (2268 <get_device_name+0x308>)
    2178:	e79f      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG14P";
    217a:	4b3c      	ldr	r3, [pc, #240]	; (226c <get_device_name+0x30c>)
    217c:	e79d      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG14B";
    217e:	4b3c      	ldr	r3, [pc, #240]	; (2270 <get_device_name+0x310>)
    2180:	e79b      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32MG14V";
    2182:	4b3c      	ldr	r3, [pc, #240]	; (2274 <get_device_name+0x314>)
    2184:	e799      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG14P";
    2186:	4b3c      	ldr	r3, [pc, #240]	; (2278 <get_device_name+0x318>)
    2188:	e797      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG14B";
    218a:	4b3c      	ldr	r3, [pc, #240]	; (227c <get_device_name+0x31c>)
    218c:	e795      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32BG14V";
    218e:	4b3c      	ldr	r3, [pc, #240]	; (2280 <get_device_name+0x320>)
    2190:	e793      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32ZG14P";
    2192:	4b3c      	ldr	r3, [pc, #240]	; (2284 <get_device_name+0x324>)
    2194:	e791      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG14P";
    2196:	4b3c      	ldr	r3, [pc, #240]	; (2288 <get_device_name+0x328>)
    2198:	e78f      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG14B";
    219a:	4b3c      	ldr	r3, [pc, #240]	; (228c <get_device_name+0x32c>)
    219c:	e78d      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFR32FG14V";
    219e:	4b3c      	ldr	r3, [pc, #240]	; (2290 <get_device_name+0x330>)
    21a0:	e78b      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32G";
    21a2:	4b3c      	ldr	r3, [pc, #240]	; (2294 <get_device_name+0x334>)
    21a4:	e789      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32GG";
    21a6:	4b3c      	ldr	r3, [pc, #240]	; (2298 <get_device_name+0x338>)
    21a8:	e787      	b.n	20ba <get_device_name+0x15a>
        szFamily = "TG";
    21aa:	4b3c      	ldr	r3, [pc, #240]	; (229c <get_device_name+0x33c>)
    21ac:	e785      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32LG";
    21ae:	4b3c      	ldr	r3, [pc, #240]	; (22a0 <get_device_name+0x340>)
    21b0:	e783      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32WG";
    21b2:	4b3c      	ldr	r3, [pc, #240]	; (22a4 <get_device_name+0x344>)
    21b4:	e781      	b.n	20ba <get_device_name+0x15a>
        szFamily = "ZG";
    21b6:	4b3c      	ldr	r3, [pc, #240]	; (22a8 <get_device_name+0x348>)
    21b8:	e77f      	b.n	20ba <get_device_name+0x15a>
        szFamily = "HG";
    21ba:	4b3c      	ldr	r3, [pc, #240]	; (22ac <get_device_name+0x34c>)
    21bc:	e77d      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32PG1B";
    21be:	4b3c      	ldr	r3, [pc, #240]	; (22b0 <get_device_name+0x350>)
    21c0:	e77b      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32JG1B";
    21c2:	4b3c      	ldr	r3, [pc, #240]	; (22b4 <get_device_name+0x354>)
    21c4:	e779      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32PG12B";
    21c6:	4b3c      	ldr	r3, [pc, #240]	; (22b8 <get_device_name+0x358>)
    21c8:	e777      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32JG12B";
    21ca:	4b3c      	ldr	r3, [pc, #240]	; (22bc <get_device_name+0x35c>)
    21cc:	e775      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32GG11B";
    21ce:	4b3c      	ldr	r3, [pc, #240]	; (22c0 <get_device_name+0x360>)
    21d0:	e773      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32TG11B";
    21d2:	4b3c      	ldr	r3, [pc, #240]	; (22c4 <get_device_name+0x364>)
    21d4:	e771      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EFM32GG12B";
    21d6:	4b3c      	ldr	r3, [pc, #240]	; (22c8 <get_device_name+0x368>)
    21d8:	e76f      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EZR32LG";
    21da:	4b3c      	ldr	r3, [pc, #240]	; (22cc <get_device_name+0x36c>)
    21dc:	e76d      	b.n	20ba <get_device_name+0x15a>
        szFamily = "EZR32WG";
    21de:	4b3c      	ldr	r3, [pc, #240]	; (22d0 <get_device_name+0x370>)
    21e0:	e76b      	b.n	20ba <get_device_name+0x15a>
        cPackage = '?';
    21e2:	223f      	movs	r2, #63	; 0x3f
    21e4:	e777      	b.n	20d6 <get_device_name+0x176>
        cTempGrade = 'G';
    21e6:	2647      	movs	r6, #71	; 0x47
    21e8:	e77e      	b.n	20e8 <get_device_name+0x188>
    21ea:	bf00      	nop
    21ec:	0fe081b0 	.word	0x0fe081b0
    21f0:	00004198 	.word	0x00004198
    21f4:	000043a9 	.word	0x000043a9
    21f8:	000043b1 	.word	0x000043b1
    21fc:	0000419a 	.word	0x0000419a
    2200:	000041a4 	.word	0x000041a4
    2204:	000041ae 	.word	0x000041ae
    2208:	000041b8 	.word	0x000041b8
    220c:	000041c2 	.word	0x000041c2
    2210:	000041cc 	.word	0x000041cc
    2214:	000041d6 	.word	0x000041d6
    2218:	000041e0 	.word	0x000041e0
    221c:	000041ea 	.word	0x000041ea
    2220:	000041f4 	.word	0x000041f4
    2224:	000041ff 	.word	0x000041ff
    2228:	0000420a 	.word	0x0000420a
    222c:	00004215 	.word	0x00004215
    2230:	00004220 	.word	0x00004220
    2234:	0000422b 	.word	0x0000422b
    2238:	00004236 	.word	0x00004236
    223c:	00004241 	.word	0x00004241
    2240:	0000424c 	.word	0x0000424c
    2244:	00004257 	.word	0x00004257
    2248:	00004262 	.word	0x00004262
    224c:	0000426d 	.word	0x0000426d
    2250:	00004278 	.word	0x00004278
    2254:	00004283 	.word	0x00004283
    2258:	0000428e 	.word	0x0000428e
    225c:	00004299 	.word	0x00004299
    2260:	000042a4 	.word	0x000042a4
    2264:	000042af 	.word	0x000042af
    2268:	000042ba 	.word	0x000042ba
    226c:	000042c5 	.word	0x000042c5
    2270:	000042d0 	.word	0x000042d0
    2274:	000042db 	.word	0x000042db
    2278:	000042e6 	.word	0x000042e6
    227c:	000042f1 	.word	0x000042f1
    2280:	000042fc 	.word	0x000042fc
    2284:	00004307 	.word	0x00004307
    2288:	00004312 	.word	0x00004312
    228c:	0000431d 	.word	0x0000431d
    2290:	00004330 	.word	0x00004330
    2294:	00004343 	.word	0x00004343
    2298:	00004355 	.word	0x00004355
    229c:	00004368 	.word	0x00004368
    22a0:	00004376 	.word	0x00004376
    22a4:	00004389 	.word	0x00004389
    22a8:	0000439c 	.word	0x0000439c
    22ac:	000043ae 	.word	0x000043ae
    22b0:	0000439f 	.word	0x0000439f
    22b4:	0000418e 	.word	0x0000418e
    22b8:	00004391 	.word	0x00004391
    22bc:	0000437e 	.word	0x0000437e
    22c0:	0000436b 	.word	0x0000436b
    22c4:	0000435d 	.word	0x0000435d
    22c8:	0000434a 	.word	0x0000434a
    22cc:	0000433b 	.word	0x0000433b
    22d0:	00004328 	.word	0x00004328
    22d4:	00000000 	.word	0x00000000

000022d8 <init>:

    return usRevision;
}

int init()
{
    22d8:	b570      	push	{r4, r5, r6, lr}
    22da:	ed2d 8b04 	vpush	{d8-d9}
    22de:	b08c      	sub	sp, #48	; 0x30
    emu_init(); // Init EMU
    22e0:	f7ff fcde 	bl	1ca0 <emu_init>
    cmu_hfxo_startup_calib(0x200, 0x0FE); // Config HFXO Startup for 1280 uA, 30.036 pF
    cmu_hfxo_steady_calib(0x00A, 0x0FE); // Config HFXO Steady state for ?? uA, 30.036 pF

    cmu_init(); // Inic Clocks

    cmu_ushfrco_calib(1, USHFRCO_CALIB_8M, 8000000); // Enable and calibrate USHFRCO for 8 MHz
    22e4:	4cd4      	ldr	r4, [pc, #848]	; (2638 <init+0x360>)
    cmu_hfxo_startup_calib(0x200, 0x0FE); // Config HFXO Startup for 1280 uA, 30.036 pF
    22e6:	21fe      	movs	r1, #254	; 0xfe
    22e8:	f44f 7000 	mov.w	r0, #512	; 0x200
    22ec:	f7ff f844 	bl	1378 <cmu_hfxo_startup_calib>
    cmu_hfxo_steady_calib(0x00A, 0x0FE); // Config HFXO Steady state for ?? uA, 30.036 pF
    22f0:	21fe      	movs	r1, #254	; 0xfe
    22f2:	200a      	movs	r0, #10
    22f4:	f7ff f87e 	bl	13f4 <cmu_hfxo_steady_calib>
    cmu_init(); // Inic Clocks
    22f8:	f7fe ff78 	bl	11ec <cmu_init>
    cmu_ushfrco_calib(1, USHFRCO_CALIB_8M, 8000000); // Enable and calibrate USHFRCO for 8 MHz
    22fc:	f8d4 126c 	ldr.w	r1, [r4, #620]	; 0x26c
    2300:	4ace      	ldr	r2, [pc, #824]	; (263c <init+0x364>)
    2302:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    2306:	2001      	movs	r0, #1
    2308:	f7fe ffec 	bl	12e4 <cmu_ushfrco_calib>
    cmu_auxhfrco_calib(1, AUXHFRCO_CALIB_32M, 32000000); // Enable and calibrate AUXHFRCO for 32 MHz
    230c:	4acc      	ldr	r2, [pc, #816]	; (2640 <init+0x368>)
    230e:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    2312:	2001      	movs	r0, #1
    2314:	f7ff f80c 	bl	1330 <cmu_auxhfrco_calib>

    cmu_update_clocks(); // Update Clocks
    2318:	f7fe fd3a 	bl	d90 <cmu_update_clocks>

    dbg_init(); // Init Debug module
    231c:	f7ff f922 	bl	1564 <dbg_init>
    dbg_swo_config(BIT(0) | BIT(1), 2000000); // Init SWO channels 0 and 1 at 2 MHz
    2320:	49c8      	ldr	r1, [pc, #800]	; (2644 <init+0x36c>)
    2322:	2003      	movs	r0, #3
    2324:	f7ff f926 	bl	1574 <dbg_swo_config>

    msc_init(); // Init Flash, RAM and caches
    2328:	f7ff fb9f 	bl	1a6a <msc_init>

    systick_init(); // Init system tick
    232c:	f000 fd48 	bl	2dc0 <systick_init>

    gpio_init(); // Init GPIOs
    2330:	f7ff fdba 	bl	1ea8 <gpio_init>
    rtcc_init(); // Init RTCC
    2334:	f000 fd00 	bl	2d38 <rtcc_init>
    crypto_init(); // Init Crypto engine
    2338:	f7ff f962 	bl	1600 <crypto_init>
    crc_init(); // Init CRC calculation unit
    233c:	f7ff f8fe 	bl	153c <crc_init>
    adc_init(); // Init ADCs
    2340:	f000 fe50 	bl	2fe4 <adc_init>

    float fAVDDHighThresh, fAVDDLowThresh;
    float fDVDDHighThresh, fDVDDLowThresh;
    float fIOVDDHighThresh, fIOVDDLowThresh;

    emu_vmon_avdd_config(1, 3.1f, &fAVDDLowThresh, 3.22f, &fAVDDHighThresh); // Enable AVDD monitor
    2344:	eddf 0ac0 	vldr	s1, [pc, #768]	; 2648 <init+0x370>
    2348:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 264c <init+0x374>
    234c:	466a      	mov	r2, sp
    234e:	a901      	add	r1, sp, #4
    2350:	2001      	movs	r0, #1
    2352:	f7ff fce9 	bl	1d28 <emu_vmon_avdd_config>
    emu_vmon_dvdd_config(1, 2.5f, &fDVDDLowThresh); // Enable DVDD monitor
    2356:	a902      	add	r1, sp, #8
    2358:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
    235c:	2001      	movs	r0, #1
    235e:	f7ff fd37 	bl	1dd0 <emu_vmon_dvdd_config>
    emu_vmon_iovdd_config(1, 3.15f, &fIOVDDLowThresh); // Enable IOVDD monitor
    2362:	ed9f 0abb 	vldr	s0, [pc, #748]	; 2650 <init+0x378>
    2366:	a903      	add	r1, sp, #12
    2368:	2001      	movs	r0, #1
    236a:	f7ff fd67 	bl	1e3c <emu_vmon_iovdd_config>

    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    236e:	eddf 7ab9 	vldr	s15, [pc, #740]	; 2654 <init+0x37c>
    2372:	eddd 9a02 	vldr	s19, [sp, #8]
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    2376:	ed9d 9a03 	vldr	s18, [sp, #12]

    i2c1_init(I2C_NORMAL, 1, 1); // Init I2C1 at 100 kHz on location 1
    237a:	2201      	movs	r2, #1
    237c:	4611      	mov	r1, r2
    237e:	2000      	movs	r0, #0
    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    2380:	ee79 9aa7 	vadd.f32	s19, s19, s15
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    2384:	ee39 9a27 	vadd.f32	s18, s18, s15
    i2c1_init(I2C_NORMAL, 1, 1); // Init I2C1 at 100 kHz on location 1
    2388:	f000 fd46 	bl	2e18 <i2c1_init>

    char szDeviceName[32];

    get_device_name(szDeviceName, 32);
    238c:	a804      	add	r0, sp, #16
    238e:	2120      	movs	r1, #32
    2390:	f7ff fde6 	bl	1f60 <get_device_name>

    DBGPRINTLN_CTX("Device: %s", szDeviceName);
    2394:	aa04      	add	r2, sp, #16
    2396:	49b0      	ldr	r1, [pc, #704]	; (2658 <init+0x380>)
    2398:	48b0      	ldr	r0, [pc, #704]	; (265c <init+0x384>)
    239a:	f001 fc5b 	bl	3c54 <printf>
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    239e:	49b0      	ldr	r1, [pc, #704]	; (2660 <init+0x388>)
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    23a0:	48b0      	ldr	r0, [pc, #704]	; (2664 <init+0x38c>)
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    23a2:	690b      	ldr	r3, [r1, #16]
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    23a4:	698a      	ldr	r2, [r1, #24]
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    23a6:	69c9      	ldr	r1, [r1, #28]
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    23a8:	021b      	lsls	r3, r3, #8
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    23aa:	f3c1 1103 	ubfx	r1, r1, #4, #4
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    23ae:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    23b2:	430b      	orrs	r3, r1
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    23b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    23b8:	431a      	orrs	r2, r3
    23ba:	49a7      	ldr	r1, [pc, #668]	; (2658 <init+0x380>)
    23bc:	f001 fc4a 	bl	3c54 <printf>
    DBGPRINTLN_CTX("Calibration temperature: %hhu C", (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT);
    23c0:	6822      	ldr	r2, [r4, #0]
    23c2:	49a5      	ldr	r1, [pc, #660]	; (2658 <init+0x380>)
    23c4:	48a8      	ldr	r0, [pc, #672]	; (2668 <init+0x390>)
    23c6:	f3c2 4207 	ubfx	r2, r2, #16, #8
    23ca:	f001 fc43 	bl	3c54 <printf>
    DBGPRINTLN_CTX("Flash Size: %hu kB", FLASH_SIZE >> 10);
    23ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
    23d2:	49a1      	ldr	r1, [pc, #644]	; (2658 <init+0x380>)
    23d4:	48a5      	ldr	r0, [pc, #660]	; (266c <init+0x394>)
    23d6:	f001 fc3d 	bl	3c54 <printf>
    DBGPRINTLN_CTX("RAM Size: %hu kB", SRAM_SIZE >> 10);
    23da:	f44f 7200 	mov.w	r2, #512	; 0x200
    23de:	499e      	ldr	r1, [pc, #632]	; (2658 <init+0x380>)
    23e0:	48a3      	ldr	r0, [pc, #652]	; (2670 <init+0x398>)
    23e2:	f001 fc37 	bl	3c54 <printf>
    void *pCurrentHeap = malloc(1);
    23e6:	2001      	movs	r0, #1
    23e8:	f001 fc8c 	bl	3d04 <malloc>
    23ec:	f3ef 8508 	mrs	r5, MSP
    uint32_t ulFreeRAM = (uint32_t)__get_MSP() - (uint32_t)pCurrentHeap;
    23f0:	1a2d      	subs	r5, r5, r0
    free(pCurrentHeap);
    23f2:	f001 fc8f 	bl	3d14 <free>
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    23f6:	462a      	mov	r2, r5
    23f8:	4997      	ldr	r1, [pc, #604]	; (2658 <init+0x380>)
    23fa:	489e      	ldr	r0, [pc, #632]	; (2674 <init+0x39c>)
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);

    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    23fc:	eddf 8a9e 	vldr	s17, [pc, #632]	; 2678 <init+0x3a0>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    2400:	ed9f 8a9e 	vldr	s16, [pc, #632]	; 267c <init+0x3a4>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);

    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    2404:	4d9e      	ldr	r5, [pc, #632]	; (2680 <init+0x3a8>)
    DBGPRINTLN_CTX("Scanning I2C bus 1...");

    for(uint8_t a = 0x08; a < 0x78; a++)
    {
        if(i2c1_write(a, 0, 0, I2C_STOP))
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    2406:	4e9f      	ldr	r6, [pc, #636]	; (2684 <init+0x3ac>)
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    2408:	f001 fc24 	bl	3c54 <printf>
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    240c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    240e:	4992      	ldr	r1, [pc, #584]	; (2658 <init+0x380>)
    2410:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2412:	489d      	ldr	r0, [pc, #628]	; (2688 <init+0x3b0>)
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    2414:	4c9d      	ldr	r4, [pc, #628]	; (268c <init+0x3b4>)
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    2416:	f001 fc1d 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    241a:	2200      	movs	r2, #0
    241c:	4b9c      	ldr	r3, [pc, #624]	; (2690 <init+0x3b8>)
    241e:	498e      	ldr	r1, [pc, #568]	; (2658 <init+0x380>)
    2420:	489c      	ldr	r0, [pc, #624]	; (2694 <init+0x3bc>)
    2422:	f001 fc17 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    2426:	4b9c      	ldr	r3, [pc, #624]	; (2698 <init+0x3c0>)
    2428:	edd3 7a00 	vldr	s15, [r3]
    242c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2430:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2434:	ee17 0a90 	vmov	r0, s15
    2438:	f7fd ffee 	bl	418 <__aeabi_f2d>
    243c:	4602      	mov	r2, r0
    243e:	460b      	mov	r3, r1
    2440:	4896      	ldr	r0, [pc, #600]	; (269c <init+0x3c4>)
    2442:	4985      	ldr	r1, [pc, #532]	; (2658 <init+0x380>)
    2444:	f001 fc06 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    2448:	4b95      	ldr	r3, [pc, #596]	; (26a0 <init+0x3c8>)
    244a:	edd3 7a00 	vldr	s15, [r3]
    244e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2452:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2456:	ee17 0a90 	vmov	r0, s15
    245a:	f7fd ffdd 	bl	418 <__aeabi_f2d>
    245e:	4602      	mov	r2, r0
    2460:	460b      	mov	r3, r1
    2462:	4890      	ldr	r0, [pc, #576]	; (26a4 <init+0x3cc>)
    2464:	497c      	ldr	r1, [pc, #496]	; (2658 <init+0x380>)
    2466:	f001 fbf5 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    246a:	4b8f      	ldr	r3, [pc, #572]	; (26a8 <init+0x3d0>)
    246c:	edd3 7a00 	vldr	s15, [r3]
    2470:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2474:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2478:	ee17 0a90 	vmov	r0, s15
    247c:	f7fd ffcc 	bl	418 <__aeabi_f2d>
    2480:	4602      	mov	r2, r0
    2482:	460b      	mov	r3, r1
    2484:	4889      	ldr	r0, [pc, #548]	; (26ac <init+0x3d4>)
    2486:	4974      	ldr	r1, [pc, #464]	; (2658 <init+0x380>)
    2488:	f001 fbe4 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    248c:	a368      	add	r3, pc, #416	; (adr r3, 2630 <init+0x358>)
    248e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2492:	4971      	ldr	r1, [pc, #452]	; (2658 <init+0x380>)
    2494:	4886      	ldr	r0, [pc, #536]	; (26b0 <init+0x3d8>)
    2496:	f001 fbdd 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    249a:	4b86      	ldr	r3, [pc, #536]	; (26b4 <init+0x3dc>)
    249c:	edd3 7a00 	vldr	s15, [r3]
    24a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    24a4:	eec7 7a88 	vdiv.f32	s15, s15, s16
    24a8:	ee17 0a90 	vmov	r0, s15
    24ac:	f7fd ffb4 	bl	418 <__aeabi_f2d>
    24b0:	4602      	mov	r2, r0
    24b2:	460b      	mov	r3, r1
    24b4:	4880      	ldr	r0, [pc, #512]	; (26b8 <init+0x3e0>)
    24b6:	4968      	ldr	r1, [pc, #416]	; (2658 <init+0x380>)
    24b8:	f001 fbcc 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - ULFRCO Clock: %.3f kHz!", (float)ULFRCO_VALUE / 1000);
    24bc:	4b7f      	ldr	r3, [pc, #508]	; (26bc <init+0x3e4>)
    24be:	edd3 7a00 	vldr	s15, [r3]
    24c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    24c6:	eec7 7a88 	vdiv.f32	s15, s15, s16
    24ca:	ee17 0a90 	vmov	r0, s15
    24ce:	f7fd ffa3 	bl	418 <__aeabi_f2d>
    24d2:	4602      	mov	r2, r0
    24d4:	460b      	mov	r3, r1
    24d6:	487a      	ldr	r0, [pc, #488]	; (26c0 <init+0x3e8>)
    24d8:	495f      	ldr	r1, [pc, #380]	; (2658 <init+0x380>)
    24da:	f001 fbbb 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFSRC Clock: %.1f MHz!", (float)HFSRC_CLOCK_FREQ / 1000000);
    24de:	4b79      	ldr	r3, [pc, #484]	; (26c4 <init+0x3ec>)
    24e0:	edd3 7a00 	vldr	s15, [r3]
    24e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    24e8:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    24ec:	ee17 0a90 	vmov	r0, s15
    24f0:	f7fd ff92 	bl	418 <__aeabi_f2d>
    24f4:	4602      	mov	r2, r0
    24f6:	460b      	mov	r3, r1
    24f8:	4873      	ldr	r0, [pc, #460]	; (26c8 <init+0x3f0>)
    24fa:	4957      	ldr	r1, [pc, #348]	; (2658 <init+0x380>)
    24fc:	f001 fbaa 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HF Clock: %.1f MHz!", (float)HF_CLOCK_FREQ / 1000000);
    2500:	4b72      	ldr	r3, [pc, #456]	; (26cc <init+0x3f4>)
    2502:	edd3 7a00 	vldr	s15, [r3]
    2506:	eef8 7a67 	vcvt.f32.u32	s15, s15
    250a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    250e:	ee17 0a90 	vmov	r0, s15
    2512:	f7fd ff81 	bl	418 <__aeabi_f2d>
    2516:	4602      	mov	r2, r0
    2518:	460b      	mov	r3, r1
    251a:	486d      	ldr	r0, [pc, #436]	; (26d0 <init+0x3f8>)
    251c:	494e      	ldr	r1, [pc, #312]	; (2658 <init+0x380>)
    251e:	f001 fb99 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFBUS Clock: %.1f MHz!", (float)HFBUS_CLOCK_FREQ / 1000000);
    2522:	4b6c      	ldr	r3, [pc, #432]	; (26d4 <init+0x3fc>)
    2524:	edd3 7a00 	vldr	s15, [r3]
    2528:	eef8 7a67 	vcvt.f32.u32	s15, s15
    252c:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2530:	ee17 0a90 	vmov	r0, s15
    2534:	f7fd ff70 	bl	418 <__aeabi_f2d>
    2538:	4602      	mov	r2, r0
    253a:	460b      	mov	r3, r1
    253c:	4866      	ldr	r0, [pc, #408]	; (26d8 <init+0x400>)
    253e:	4946      	ldr	r1, [pc, #280]	; (2658 <init+0x380>)
    2540:	f001 fb88 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFCORE Clock: %.1f MHz!", (float)HFCORE_CLOCK_FREQ / 1000000);
    2544:	4b65      	ldr	r3, [pc, #404]	; (26dc <init+0x404>)
    2546:	edd3 7a00 	vldr	s15, [r3]
    254a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    254e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2552:	ee17 0a90 	vmov	r0, s15
    2556:	f7fd ff5f 	bl	418 <__aeabi_f2d>
    255a:	4602      	mov	r2, r0
    255c:	460b      	mov	r3, r1
    255e:	4860      	ldr	r0, [pc, #384]	; (26e0 <init+0x408>)
    2560:	493d      	ldr	r1, [pc, #244]	; (2658 <init+0x380>)
    2562:	f001 fb77 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFEXP Clock: %.1f MHz!", (float)HFEXP_CLOCK_FREQ / 1000000);
    2566:	4b5f      	ldr	r3, [pc, #380]	; (26e4 <init+0x40c>)
    2568:	edd3 7a00 	vldr	s15, [r3]
    256c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2570:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2574:	ee17 0a90 	vmov	r0, s15
    2578:	f7fd ff4e 	bl	418 <__aeabi_f2d>
    257c:	4602      	mov	r2, r0
    257e:	460b      	mov	r3, r1
    2580:	4859      	ldr	r0, [pc, #356]	; (26e8 <init+0x410>)
    2582:	4935      	ldr	r1, [pc, #212]	; (2658 <init+0x380>)
    2584:	f001 fb66 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFPER Clock: %.1f MHz!", (float)HFPER_CLOCK_FREQ / 1000000);
    2588:	4b58      	ldr	r3, [pc, #352]	; (26ec <init+0x414>)
    258a:	edd3 7a00 	vldr	s15, [r3]
    258e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2592:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2596:	ee17 0a90 	vmov	r0, s15
    259a:	f7fd ff3d 	bl	418 <__aeabi_f2d>
    259e:	4602      	mov	r2, r0
    25a0:	460b      	mov	r3, r1
    25a2:	4853      	ldr	r0, [pc, #332]	; (26f0 <init+0x418>)
    25a4:	492c      	ldr	r1, [pc, #176]	; (2658 <init+0x380>)
    25a6:	f001 fb55 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFPERB Clock: %.1f MHz!", (float)HFPERB_CLOCK_FREQ / 1000000);
    25aa:	4b52      	ldr	r3, [pc, #328]	; (26f4 <init+0x41c>)
    25ac:	edd3 7a00 	vldr	s15, [r3]
    25b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    25b4:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    25b8:	ee17 0a90 	vmov	r0, s15
    25bc:	f7fd ff2c 	bl	418 <__aeabi_f2d>
    25c0:	4602      	mov	r2, r0
    25c2:	460b      	mov	r3, r1
    25c4:	484c      	ldr	r0, [pc, #304]	; (26f8 <init+0x420>)
    25c6:	4924      	ldr	r1, [pc, #144]	; (2658 <init+0x380>)
    25c8:	f001 fb44 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFPERC Clock: %.1f MHz!", (float)HFPERC_CLOCK_FREQ / 1000000);
    25cc:	4b4b      	ldr	r3, [pc, #300]	; (26fc <init+0x424>)
    25ce:	edd3 7a00 	vldr	s15, [r3]
    25d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    25d6:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    25da:	ee17 0a90 	vmov	r0, s15
    25de:	f7fd ff1b 	bl	418 <__aeabi_f2d>
    25e2:	4602      	mov	r2, r0
    25e4:	460b      	mov	r3, r1
    25e6:	4846      	ldr	r0, [pc, #280]	; (2700 <init+0x428>)
    25e8:	491b      	ldr	r1, [pc, #108]	; (2658 <init+0x380>)
    25ea:	f001 fb33 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - HFLE Clock: %.1f MHz!", (float)HFLE_CLOCK_FREQ / 1000000);
    25ee:	4b45      	ldr	r3, [pc, #276]	; (2704 <init+0x42c>)
    25f0:	edd3 7a00 	vldr	s15, [r3]
    25f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    25f8:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    25fc:	ee17 0a90 	vmov	r0, s15
    2600:	f7fd ff0a 	bl	418 <__aeabi_f2d>
    2604:	4602      	mov	r2, r0
    2606:	460b      	mov	r3, r1
    2608:	483f      	ldr	r0, [pc, #252]	; (2708 <init+0x430>)
    260a:	4913      	ldr	r1, [pc, #76]	; (2658 <init+0x380>)
    260c:	f001 fb22 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - ADC0 Clock: %.1f MHz!", (float)ADC0_CLOCK_FREQ / 1000000);
    2610:	4b3e      	ldr	r3, [pc, #248]	; (270c <init+0x434>)
    2612:	edd3 7a00 	vldr	s15, [r3]
    2616:	eef8 7a67 	vcvt.f32.u32	s15, s15
    261a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    261e:	ee17 0a90 	vmov	r0, s15
    2622:	f7fd fef9 	bl	418 <__aeabi_f2d>
    2626:	4602      	mov	r2, r0
    2628:	460b      	mov	r3, r1
    262a:	e071      	b.n	2710 <init+0x438>
    262c:	f3af 8000 	nop.w
    2630:	e0000000 	.word	0xe0000000
    2634:	4040624d 	.word	0x4040624d
    2638:	0fe081b0 	.word	0x0fe081b0
    263c:	007a1200 	.word	0x007a1200
    2640:	01e84800 	.word	0x01e84800
    2644:	001e8480 	.word	0x001e8480
    2648:	404e147b 	.word	0x404e147b
    264c:	40466666 	.word	0x40466666
    2650:	4049999a 	.word	0x4049999a
    2654:	3cd4fdf4 	.word	0x3cd4fdf4
    2658:	00004184 	.word	0x00004184
    265c:	000043ca 	.word	0x000043ca
    2660:	e00fffd0 	.word	0xe00fffd0
    2664:	000043de 	.word	0x000043de
    2668:	000043ff 	.word	0x000043ff
    266c:	00004428 	.word	0x00004428
    2670:	00004444 	.word	0x00004444
    2674:	0000445e 	.word	0x0000445e
    2678:	49742400 	.word	0x49742400
    267c:	447a0000 	.word	0x447a0000
    2680:	000043c3 	.word	0x000043c3
    2684:	00004bc0 	.word	0x00004bc0
    2688:	00004477 	.word	0x00004477
    268c:	000043c7 	.word	0x000043c7
    2690:	40240000 	.word	0x40240000
    2694:	00004495 	.word	0x00004495
    2698:	20000004 	.word	0x20000004
    269c:	000044ba 	.word	0x000044ba
    26a0:	20000010 	.word	0x20000010
    26a4:	000044e0 	.word	0x000044e0
    26a8:	20000000 	.word	0x20000000
    26ac:	00004508 	.word	0x00004508
    26b0:	00004531 	.word	0x00004531
    26b4:	20000008 	.word	0x20000008
    26b8:	00004556 	.word	0x00004556
    26bc:	2000000c 	.word	0x2000000c
    26c0:	0000457c 	.word	0x0000457c
    26c4:	200000d0 	.word	0x200000d0
    26c8:	000045a3 	.word	0x000045a3
    26cc:	200000f0 	.word	0x200000f0
    26d0:	000045c9 	.word	0x000045c9
    26d4:	200000d4 	.word	0x200000d4
    26d8:	000045ec 	.word	0x000045ec
    26dc:	200000bc 	.word	0x200000bc
    26e0:	00004612 	.word	0x00004612
    26e4:	200000dc 	.word	0x200000dc
    26e8:	00004639 	.word	0x00004639
    26ec:	200000ec 	.word	0x200000ec
    26f0:	0000465f 	.word	0x0000465f
    26f4:	200000e0 	.word	0x200000e0
    26f8:	00004685 	.word	0x00004685
    26fc:	200000d8 	.word	0x200000d8
    2700:	000046ac 	.word	0x000046ac
    2704:	200000a8 	.word	0x200000a8
    2708:	000046d3 	.word	0x000046d3
    270c:	200000b4 	.word	0x200000b4
    2710:	48d3      	ldr	r0, [pc, #844]	; (2a60 <init+0x788>)
    2712:	49d4      	ldr	r1, [pc, #848]	; (2a64 <init+0x78c>)
    2714:	f001 fa9e 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - ADC1 Clock: %.1f MHz!", (float)ADC1_CLOCK_FREQ / 1000000);
    2718:	4bd3      	ldr	r3, [pc, #844]	; (2a68 <init+0x790>)
    271a:	edd3 7a00 	vldr	s15, [r3]
    271e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2722:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2726:	ee17 0a90 	vmov	r0, s15
    272a:	f7fd fe75 	bl	418 <__aeabi_f2d>
    272e:	4602      	mov	r2, r0
    2730:	460b      	mov	r3, r1
    2732:	48ce      	ldr	r0, [pc, #824]	; (2a6c <init+0x794>)
    2734:	49cb      	ldr	r1, [pc, #812]	; (2a64 <init+0x78c>)
    2736:	f001 fa8d 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - DBG Clock: %.1f MHz!", (float)DBG_CLOCK_FREQ / 1000000);
    273a:	4bcd      	ldr	r3, [pc, #820]	; (2a70 <init+0x798>)
    273c:	edd3 7a00 	vldr	s15, [r3]
    2740:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2744:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2748:	ee17 0a90 	vmov	r0, s15
    274c:	f7fd fe64 	bl	418 <__aeabi_f2d>
    2750:	4602      	mov	r2, r0
    2752:	460b      	mov	r3, r1
    2754:	48c7      	ldr	r0, [pc, #796]	; (2a74 <init+0x79c>)
    2756:	49c3      	ldr	r1, [pc, #780]	; (2a64 <init+0x78c>)
    2758:	f001 fa7c 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - AUX Clock: %.1f MHz!", (float)AUX_CLOCK_FREQ / 1000000);
    275c:	4bc6      	ldr	r3, [pc, #792]	; (2a78 <init+0x7a0>)
    275e:	edd3 7a00 	vldr	s15, [r3]
    2762:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2766:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    276a:	ee17 0a90 	vmov	r0, s15
    276e:	f7fd fe53 	bl	418 <__aeabi_f2d>
    2772:	4602      	mov	r2, r0
    2774:	460b      	mov	r3, r1
    2776:	48c1      	ldr	r0, [pc, #772]	; (2a7c <init+0x7a4>)
    2778:	49ba      	ldr	r1, [pc, #744]	; (2a64 <init+0x78c>)
    277a:	f001 fa6b 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LFA Clock: %.3f kHz!", (float)LFA_CLOCK_FREQ / 1000);
    277e:	4bc0      	ldr	r3, [pc, #768]	; (2a80 <init+0x7a8>)
    2780:	edd3 7a00 	vldr	s15, [r3]
    2784:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2788:	eec7 7a88 	vdiv.f32	s15, s15, s16
    278c:	ee17 0a90 	vmov	r0, s15
    2790:	f7fd fe42 	bl	418 <__aeabi_f2d>
    2794:	4602      	mov	r2, r0
    2796:	460b      	mov	r3, r1
    2798:	48ba      	ldr	r0, [pc, #744]	; (2a84 <init+0x7ac>)
    279a:	49b2      	ldr	r1, [pc, #712]	; (2a64 <init+0x78c>)
    279c:	f001 fa5a 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LESENSE Clock: %.3f kHz!", (float)LESENSE_CLOCK_FREQ / 1000);
    27a0:	4bb9      	ldr	r3, [pc, #740]	; (2a88 <init+0x7b0>)
    27a2:	edd3 7a00 	vldr	s15, [r3]
    27a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    27aa:	eec7 7a88 	vdiv.f32	s15, s15, s16
    27ae:	ee17 0a90 	vmov	r0, s15
    27b2:	f7fd fe31 	bl	418 <__aeabi_f2d>
    27b6:	4602      	mov	r2, r0
    27b8:	460b      	mov	r3, r1
    27ba:	48b4      	ldr	r0, [pc, #720]	; (2a8c <init+0x7b4>)
    27bc:	49a9      	ldr	r1, [pc, #676]	; (2a64 <init+0x78c>)
    27be:	f001 fa49 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - RTC Clock: %.3f kHz!", (float)RTC_CLOCK_FREQ / 1000);
    27c2:	4bb3      	ldr	r3, [pc, #716]	; (2a90 <init+0x7b8>)
    27c4:	edd3 7a00 	vldr	s15, [r3]
    27c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    27cc:	eec7 7a88 	vdiv.f32	s15, s15, s16
    27d0:	ee17 0a90 	vmov	r0, s15
    27d4:	f7fd fe20 	bl	418 <__aeabi_f2d>
    27d8:	4602      	mov	r2, r0
    27da:	460b      	mov	r3, r1
    27dc:	48ad      	ldr	r0, [pc, #692]	; (2a94 <init+0x7bc>)
    27de:	49a1      	ldr	r1, [pc, #644]	; (2a64 <init+0x78c>)
    27e0:	f001 fa38 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LCD Clock: %.3f kHz!", (float)LCD_CLOCK_FREQ / 1000);
    27e4:	4bac      	ldr	r3, [pc, #688]	; (2a98 <init+0x7c0>)
    27e6:	edd3 7a00 	vldr	s15, [r3]
    27ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    27ee:	eec7 7a88 	vdiv.f32	s15, s15, s16
    27f2:	ee17 0a90 	vmov	r0, s15
    27f6:	f7fd fe0f 	bl	418 <__aeabi_f2d>
    27fa:	4602      	mov	r2, r0
    27fc:	460b      	mov	r3, r1
    27fe:	48a7      	ldr	r0, [pc, #668]	; (2a9c <init+0x7c4>)
    2800:	4998      	ldr	r1, [pc, #608]	; (2a64 <init+0x78c>)
    2802:	f001 fa27 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LETIMER0 Clock: %.3f kHz!", (float)LETIMER0_CLOCK_FREQ / 1000);
    2806:	4ba6      	ldr	r3, [pc, #664]	; (2aa0 <init+0x7c8>)
    2808:	edd3 7a00 	vldr	s15, [r3]
    280c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2810:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2814:	ee17 0a90 	vmov	r0, s15
    2818:	f7fd fdfe 	bl	418 <__aeabi_f2d>
    281c:	4602      	mov	r2, r0
    281e:	460b      	mov	r3, r1
    2820:	48a0      	ldr	r0, [pc, #640]	; (2aa4 <init+0x7cc>)
    2822:	4990      	ldr	r1, [pc, #576]	; (2a64 <init+0x78c>)
    2824:	f001 fa16 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LETIMER1 Clock: %.3f kHz!", (float)LETIMER1_CLOCK_FREQ / 1000);
    2828:	4b9f      	ldr	r3, [pc, #636]	; (2aa8 <init+0x7d0>)
    282a:	edd3 7a00 	vldr	s15, [r3]
    282e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2832:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2836:	ee17 0a90 	vmov	r0, s15
    283a:	f7fd fded 	bl	418 <__aeabi_f2d>
    283e:	4602      	mov	r2, r0
    2840:	460b      	mov	r3, r1
    2842:	489a      	ldr	r0, [pc, #616]	; (2aac <init+0x7d4>)
    2844:	4987      	ldr	r1, [pc, #540]	; (2a64 <init+0x78c>)
    2846:	f001 fa05 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LFB Clock: %.3f kHz!", (float)LFB_CLOCK_FREQ / 1000);
    284a:	4b99      	ldr	r3, [pc, #612]	; (2ab0 <init+0x7d8>)
    284c:	edd3 7a00 	vldr	s15, [r3]
    2850:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2854:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2858:	ee17 0a90 	vmov	r0, s15
    285c:	f7fd fddc 	bl	418 <__aeabi_f2d>
    2860:	4602      	mov	r2, r0
    2862:	460b      	mov	r3, r1
    2864:	4893      	ldr	r0, [pc, #588]	; (2ab4 <init+0x7dc>)
    2866:	497f      	ldr	r1, [pc, #508]	; (2a64 <init+0x78c>)
    2868:	f001 f9f4 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LEUART0 Clock: %.3f kHz!", (float)LEUART0_CLOCK_FREQ / 1000);
    286c:	4b92      	ldr	r3, [pc, #584]	; (2ab8 <init+0x7e0>)
    286e:	edd3 7a00 	vldr	s15, [r3]
    2872:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2876:	eec7 7a88 	vdiv.f32	s15, s15, s16
    287a:	ee17 0a90 	vmov	r0, s15
    287e:	f7fd fdcb 	bl	418 <__aeabi_f2d>
    2882:	4602      	mov	r2, r0
    2884:	460b      	mov	r3, r1
    2886:	488d      	ldr	r0, [pc, #564]	; (2abc <init+0x7e4>)
    2888:	4976      	ldr	r1, [pc, #472]	; (2a64 <init+0x78c>)
    288a:	f001 f9e3 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LEUART1 Clock: %.3f kHz!", (float)LEUART1_CLOCK_FREQ / 1000);
    288e:	4b8c      	ldr	r3, [pc, #560]	; (2ac0 <init+0x7e8>)
    2890:	edd3 7a00 	vldr	s15, [r3]
    2894:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2898:	eec7 7a88 	vdiv.f32	s15, s15, s16
    289c:	ee17 0a90 	vmov	r0, s15
    28a0:	f7fd fdba 	bl	418 <__aeabi_f2d>
    28a4:	4602      	mov	r2, r0
    28a6:	460b      	mov	r3, r1
    28a8:	4886      	ldr	r0, [pc, #536]	; (2ac4 <init+0x7ec>)
    28aa:	496e      	ldr	r1, [pc, #440]	; (2a64 <init+0x78c>)
    28ac:	f001 f9d2 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - SYSTICK Clock: %.3f kHz!", (float)SYSTICK_CLOCK_FREQ / 1000);
    28b0:	4b85      	ldr	r3, [pc, #532]	; (2ac8 <init+0x7f0>)
    28b2:	edd3 7a00 	vldr	s15, [r3]
    28b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    28ba:	eec7 7a88 	vdiv.f32	s15, s15, s16
    28be:	ee17 0a90 	vmov	r0, s15
    28c2:	f7fd fda9 	bl	418 <__aeabi_f2d>
    28c6:	4602      	mov	r2, r0
    28c8:	460b      	mov	r3, r1
    28ca:	4880      	ldr	r0, [pc, #512]	; (2acc <init+0x7f4>)
    28cc:	4965      	ldr	r1, [pc, #404]	; (2a64 <init+0x78c>)
    28ce:	f001 f9c1 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - CSEN Clock: %.3f kHz!", (float)CSEN_CLOCK_FREQ / 1000);
    28d2:	4b7f      	ldr	r3, [pc, #508]	; (2ad0 <init+0x7f8>)
    28d4:	edd3 7a00 	vldr	s15, [r3]
    28d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    28dc:	eec7 7a88 	vdiv.f32	s15, s15, s16
    28e0:	ee17 0a90 	vmov	r0, s15
    28e4:	f7fd fd98 	bl	418 <__aeabi_f2d>
    28e8:	4602      	mov	r2, r0
    28ea:	460b      	mov	r3, r1
    28ec:	4879      	ldr	r0, [pc, #484]	; (2ad4 <init+0x7fc>)
    28ee:	495d      	ldr	r1, [pc, #372]	; (2a64 <init+0x78c>)
    28f0:	f001 f9b0 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LFC Clock: %.3f kHz!", (float)LFC_CLOCK_FREQ / 1000);
    28f4:	4b78      	ldr	r3, [pc, #480]	; (2ad8 <init+0x800>)
    28f6:	edd3 7a00 	vldr	s15, [r3]
    28fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    28fe:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2902:	ee17 0a90 	vmov	r0, s15
    2906:	f7fd fd87 	bl	418 <__aeabi_f2d>
    290a:	4602      	mov	r2, r0
    290c:	460b      	mov	r3, r1
    290e:	4873      	ldr	r0, [pc, #460]	; (2adc <init+0x804>)
    2910:	4954      	ldr	r1, [pc, #336]	; (2a64 <init+0x78c>)
    2912:	f001 f99f 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - LFE Clock: %.3f kHz!", (float)LFE_CLOCK_FREQ / 1000);
    2916:	4b72      	ldr	r3, [pc, #456]	; (2ae0 <init+0x808>)
    2918:	edd3 7a00 	vldr	s15, [r3]
    291c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2920:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2924:	ee17 0a90 	vmov	r0, s15
    2928:	f7fd fd76 	bl	418 <__aeabi_f2d>
    292c:	4602      	mov	r2, r0
    292e:	460b      	mov	r3, r1
    2930:	486c      	ldr	r0, [pc, #432]	; (2ae4 <init+0x80c>)
    2932:	494c      	ldr	r1, [pc, #304]	; (2a64 <init+0x78c>)
    2934:	f001 f98e 	bl	3c54 <printf>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);
    2938:	4b6b      	ldr	r3, [pc, #428]	; (2ae8 <init+0x810>)
    293a:	edd3 7a00 	vldr	s15, [r3]
    293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2942:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2946:	ee17 0a90 	vmov	r0, s15
    294a:	f7fd fd65 	bl	418 <__aeabi_f2d>
    294e:	4602      	mov	r2, r0
    2950:	460b      	mov	r3, r1
    2952:	4866      	ldr	r0, [pc, #408]	; (2aec <init+0x814>)
    2954:	4943      	ldr	r1, [pc, #268]	; (2a64 <init+0x78c>)
    2956:	f001 f97d 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    295a:	eddd 7a01 	vldr	s15, [sp, #4]
    295e:	ee67 7a88 	vmul.f32	s15, s15, s16
    2962:	ee17 0a90 	vmov	r0, s15
    2966:	f7fd fd57 	bl	418 <__aeabi_f2d>
    296a:	4602      	mov	r2, r0
    296c:	460b      	mov	r3, r1
    296e:	4860      	ldr	r0, [pc, #384]	; (2af0 <init+0x818>)
    2970:	493c      	ldr	r1, [pc, #240]	; (2a64 <init+0x78c>)
    2972:	f001 f96f 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    2976:	eddd 7a00 	vldr	s15, [sp]
    297a:	ee67 7a88 	vmul.f32	s15, s15, s16
    297e:	ee17 0a90 	vmov	r0, s15
    2982:	f7fd fd49 	bl	418 <__aeabi_f2d>
    2986:	4602      	mov	r2, r0
    2988:	460b      	mov	r3, r1
    298a:	485a      	ldr	r0, [pc, #360]	; (2af4 <init+0x81c>)
    298c:	4935      	ldr	r1, [pc, #212]	; (2a64 <init+0x78c>)
    298e:	f001 f961 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    2992:	f000 fb47 	bl	3024 <adc_get_avdd>
    2996:	ee10 0a10 	vmov	r0, s0
    299a:	f7fd fd3d 	bl	418 <__aeabi_f2d>
    299e:	4602      	mov	r2, r0
    29a0:	460b      	mov	r3, r1
    29a2:	4855      	ldr	r0, [pc, #340]	; (2af8 <init+0x820>)
    29a4:	492f      	ldr	r1, [pc, #188]	; (2a64 <init+0x78c>)
    29a6:	f001 f955 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    29aa:	4b54      	ldr	r3, [pc, #336]	; (2afc <init+0x824>)
    29ac:	492d      	ldr	r1, [pc, #180]	; (2a64 <init+0x78c>)
    29ae:	781a      	ldrb	r2, [r3, #0]
    29b0:	4853      	ldr	r0, [pc, #332]	; (2b00 <init+0x828>)
    29b2:	2a00      	cmp	r2, #0
    29b4:	bf14      	ite	ne
    29b6:	462a      	movne	r2, r5
    29b8:	4622      	moveq	r2, r4
    29ba:	f001 f94b 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Fall Threshold: %.2f mV!", fDVDDLowThresh * 1000);
    29be:	eddd 7a02 	vldr	s15, [sp, #8]
    29c2:	ee67 7a88 	vmul.f32	s15, s15, s16
    29c6:	ee17 0a90 	vmov	r0, s15
    29ca:	f7fd fd25 	bl	418 <__aeabi_f2d>
    29ce:	4602      	mov	r2, r0
    29d0:	460b      	mov	r3, r1
    29d2:	484c      	ldr	r0, [pc, #304]	; (2b04 <init+0x82c>)
    29d4:	4923      	ldr	r1, [pc, #140]	; (2a64 <init+0x78c>)
    29d6:	f001 f93d 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Rise Threshold: %.2f mV!", fDVDDHighThresh * 1000);
    29da:	ee69 7a88 	vmul.f32	s15, s19, s16
    29de:	ee17 0a90 	vmov	r0, s15
    29e2:	f7fd fd19 	bl	418 <__aeabi_f2d>
    29e6:	4602      	mov	r2, r0
    29e8:	460b      	mov	r3, r1
    29ea:	4847      	ldr	r0, [pc, #284]	; (2b08 <init+0x830>)
    29ec:	491d      	ldr	r1, [pc, #116]	; (2a64 <init+0x78c>)
    29ee:	f001 f931 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Voltage: %.2f mV", adc_get_dvdd());
    29f2:	f000 fb5b 	bl	30ac <adc_get_dvdd>
    29f6:	ee10 0a10 	vmov	r0, s0
    29fa:	f7fd fd0d 	bl	418 <__aeabi_f2d>
    29fe:	4602      	mov	r2, r0
    2a00:	460b      	mov	r3, r1
    2a02:	4842      	ldr	r0, [pc, #264]	; (2b0c <init+0x834>)
    2a04:	4917      	ldr	r1, [pc, #92]	; (2a64 <init+0x78c>)
    2a06:	f001 f925 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Status: %s", g_ubDVDDLow ? "LOW" : "OK");
    2a0a:	4b41      	ldr	r3, [pc, #260]	; (2b10 <init+0x838>)
    2a0c:	4915      	ldr	r1, [pc, #84]	; (2a64 <init+0x78c>)
    2a0e:	781a      	ldrb	r2, [r3, #0]
    2a10:	4840      	ldr	r0, [pc, #256]	; (2b14 <init+0x83c>)
    2a12:	2a00      	cmp	r2, #0
    2a14:	bf14      	ite	ne
    2a16:	462a      	movne	r2, r5
    2a18:	4622      	moveq	r2, r4
    2a1a:	f001 f91b 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Fall Threshold: %.2f mV!", fIOVDDLowThresh * 1000);
    2a1e:	eddd 7a03 	vldr	s15, [sp, #12]
    2a22:	ee67 7a88 	vmul.f32	s15, s15, s16
    2a26:	ee17 0a90 	vmov	r0, s15
    2a2a:	f7fd fcf5 	bl	418 <__aeabi_f2d>
    2a2e:	4602      	mov	r2, r0
    2a30:	460b      	mov	r3, r1
    2a32:	4839      	ldr	r0, [pc, #228]	; (2b18 <init+0x840>)
    2a34:	490b      	ldr	r1, [pc, #44]	; (2a64 <init+0x78c>)
    2a36:	f001 f90d 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Rise Threshold: %.2f mV!", fIOVDDHighThresh * 1000);
    2a3a:	ee69 7a08 	vmul.f32	s15, s18, s16
    2a3e:	ee17 0a90 	vmov	r0, s15
    2a42:	f7fd fce9 	bl	418 <__aeabi_f2d>
    2a46:	4602      	mov	r2, r0
    2a48:	460b      	mov	r3, r1
    2a4a:	4834      	ldr	r0, [pc, #208]	; (2b1c <init+0x844>)
    2a4c:	4905      	ldr	r1, [pc, #20]	; (2a64 <init+0x78c>)
    2a4e:	f001 f901 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Voltage: %.2f mV", adc_get_iovdd());
    2a52:	f000 fb6f 	bl	3134 <adc_get_iovdd>
    2a56:	ee10 0a10 	vmov	r0, s0
    2a5a:	f7fd fcdd 	bl	418 <__aeabi_f2d>
    2a5e:	e05f      	b.n	2b20 <init+0x848>
    2a60:	000046f8 	.word	0x000046f8
    2a64:	00004184 	.word	0x00004184
    2a68:	200000c0 	.word	0x200000c0
    2a6c:	0000471d 	.word	0x0000471d
    2a70:	20000104 	.word	0x20000104
    2a74:	00004742 	.word	0x00004742
    2a78:	200000e8 	.word	0x200000e8
    2a7c:	00004766 	.word	0x00004766
    2a80:	200000a4 	.word	0x200000a4
    2a84:	0000478a 	.word	0x0000478a
    2a88:	200000f4 	.word	0x200000f4
    2a8c:	000047ae 	.word	0x000047ae
    2a90:	200000f8 	.word	0x200000f8
    2a94:	000047d6 	.word	0x000047d6
    2a98:	200000fc 	.word	0x200000fc
    2a9c:	000047fa 	.word	0x000047fa
    2aa0:	2000009c 	.word	0x2000009c
    2aa4:	0000481e 	.word	0x0000481e
    2aa8:	200000b0 	.word	0x200000b0
    2aac:	00004847 	.word	0x00004847
    2ab0:	200000b8 	.word	0x200000b8
    2ab4:	00004870 	.word	0x00004870
    2ab8:	20000100 	.word	0x20000100
    2abc:	00004894 	.word	0x00004894
    2ac0:	200000c8 	.word	0x200000c8
    2ac4:	000048bc 	.word	0x000048bc
    2ac8:	200000ac 	.word	0x200000ac
    2acc:	000048e4 	.word	0x000048e4
    2ad0:	200000a0 	.word	0x200000a0
    2ad4:	0000490c 	.word	0x0000490c
    2ad8:	200000e4 	.word	0x200000e4
    2adc:	00004931 	.word	0x00004931
    2ae0:	200000cc 	.word	0x200000cc
    2ae4:	00004955 	.word	0x00004955
    2ae8:	200000c4 	.word	0x200000c4
    2aec:	00004979 	.word	0x00004979
    2af0:	0000499e 	.word	0x0000499e
    2af4:	000049cb 	.word	0x000049cb
    2af8:	000049f8 	.word	0x000049f8
    2afc:	20000080 	.word	0x20000080
    2b00:	00004a1d 	.word	0x00004a1d
    2b04:	00004a3c 	.word	0x00004a3c
    2b08:	00004a69 	.word	0x00004a69
    2b0c:	00004a96 	.word	0x00004a96
    2b10:	20000082 	.word	0x20000082
    2b14:	00004abb 	.word	0x00004abb
    2b18:	00004ada 	.word	0x00004ada
    2b1c:	00004b08 	.word	0x00004b08
    2b20:	4602      	mov	r2, r0
    2b22:	460b      	mov	r3, r1
    2b24:	481c      	ldr	r0, [pc, #112]	; (2b98 <init+0x8c0>)
    2b26:	491d      	ldr	r1, [pc, #116]	; (2b9c <init+0x8c4>)
    2b28:	f001 f894 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Status: %s", g_ubIOVDDLow ? "LOW" : "OK");
    2b2c:	4b1c      	ldr	r3, [pc, #112]	; (2ba0 <init+0x8c8>)
    2b2e:	491b      	ldr	r1, [pc, #108]	; (2b9c <init+0x8c4>)
    2b30:	781a      	ldrb	r2, [r3, #0]
    2b32:	481c      	ldr	r0, [pc, #112]	; (2ba4 <init+0x8cc>)
    2b34:	2a00      	cmp	r2, #0
    2b36:	bf14      	ite	ne
    2b38:	462a      	movne	r2, r5
    2b3a:	4622      	moveq	r2, r4
    2b3c:	f001 f88a 	bl	3c54 <printf>
    DBGPRINTLN_CTX("EMU - Core Voltage: %.2f mV", adc_get_corevdd());
    2b40:	f000 fb3c 	bl	31bc <adc_get_corevdd>
    2b44:	ee10 0a10 	vmov	r0, s0
    2b48:	f7fd fc66 	bl	418 <__aeabi_f2d>
    2b4c:	4602      	mov	r2, r0
    2b4e:	460b      	mov	r3, r1
    2b50:	4815      	ldr	r0, [pc, #84]	; (2ba8 <init+0x8d0>)
    2b52:	4912      	ldr	r1, [pc, #72]	; (2b9c <init+0x8c4>)
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    2b54:	4d11      	ldr	r5, [pc, #68]	; (2b9c <init+0x8c4>)
    DBGPRINTLN_CTX("EMU - Core Voltage: %.2f mV", adc_get_corevdd());
    2b56:	f001 f87d 	bl	3c54 <printf>
    delay_ms(100);
    2b5a:	2064      	movs	r0, #100	; 0x64
    2b5c:	2100      	movs	r1, #0
    2b5e:	f000 f947 	bl	2df0 <delay_ms>
    DBGPRINTLN_CTX("Scanning I2C bus 1...");
    2b62:	490e      	ldr	r1, [pc, #56]	; (2b9c <init+0x8c4>)
    2b64:	4811      	ldr	r0, [pc, #68]	; (2bac <init+0x8d4>)
    2b66:	f001 f875 	bl	3c54 <printf>
    2b6a:	2408      	movs	r4, #8

void i2c1_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation);
uint8_t i2c1_transmit(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop);
static inline uint8_t i2c1_write(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop)
{
	return i2c1_transmit((ubAddress << 1) & ~0x01, pubSrc, ulCount, ubStop);
    2b6c:	0060      	lsls	r0, r4, #1
    2b6e:	2200      	movs	r2, #0
    2b70:	2301      	movs	r3, #1
    2b72:	4611      	mov	r1, r2
    2b74:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2b78:	f000 f98a 	bl	2e90 <i2c1_transmit>
        if(i2c1_write(a, 0, 0, I2C_STOP))
    2b7c:	b120      	cbz	r0, 2b88 <init+0x8b0>
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    2b7e:	4622      	mov	r2, r4
    2b80:	4629      	mov	r1, r5
    2b82:	4630      	mov	r0, r6
    2b84:	f001 f866 	bl	3c54 <printf>
    2b88:	3401      	adds	r4, #1
    for(uint8_t a = 0x08; a < 0x78; a++)
    2b8a:	2c78      	cmp	r4, #120	; 0x78
    2b8c:	d1ee      	bne.n	2b6c <init+0x894>
    }

    return 0;
}
    2b8e:	2000      	movs	r0, #0
    2b90:	b00c      	add	sp, #48	; 0x30
    2b92:	ecbd 8b04 	vpop	{d8-d9}
    2b96:	bd70      	pop	{r4, r5, r6, pc}
    2b98:	00004b36 	.word	0x00004b36
    2b9c:	00004184 	.word	0x00004184
    2ba0:	20000083 	.word	0x20000083
    2ba4:	00004b5c 	.word	0x00004b5c
    2ba8:	00004b7c 	.word	0x00004b7c
    2bac:	00004ba1 	.word	0x00004ba1

00002bb0 <main>:
int main()
{
    CMU->ROUTELOC0 = CMU_ROUTELOC0_CLKOUT0LOC_LOC0;
    2bb0:	4b51      	ldr	r3, [pc, #324]	; (2cf8 <main+0x148>)
{
    2bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    CMU->ROUTELOC0 = CMU_ROUTELOC0_CLKOUT0LOC_LOC0;
    2bb4:	2200      	movs	r2, #0
    2bb6:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    CMU->ROUTEPEN |= CMU_ROUTEPEN_CLKOUT0PEN;
    2bba:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170

    //i2c1_write_byte(0x76, 0xD0, I2C_RESTART);
    //DBGPRINTLN_CTX("BME ID %02X", i2c1_read_byte(0x76, I2C_STOP));

    // Internal flash test
    DBGPRINTLN_CTX("Initial calibration dump:");
    2bbe:	494f      	ldr	r1, [pc, #316]	; (2cfc <main+0x14c>)
    2bc0:	484f      	ldr	r0, [pc, #316]	; (2d00 <main+0x150>)

    for(init_calib_t *psCalibTbl = g_psInitCalibrationTable; psCalibTbl->pulRegister; psCalibTbl++)
        DBGPRINTLN_CTX("  0x%08X -> 0x%08X", psCalibTbl->ulInitialCalibration, psCalibTbl->pulRegister);
    2bc2:	4d4e      	ldr	r5, [pc, #312]	; (2cfc <main+0x14c>)
    2bc4:	4e4f      	ldr	r6, [pc, #316]	; (2d04 <main+0x154>)
    CMU->ROUTEPEN |= CMU_ROUTEPEN_CLKOUT0PEN;
    2bc6:	f042 0201 	orr.w	r2, r2, #1
    2bca:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CMU->CTRL |= CMU_CTRL_CLKOUTSEL0_HFRCOQ;
    2bce:	681a      	ldr	r2, [r3, #0]
    2bd0:	f042 020c 	orr.w	r2, r2, #12
    2bd4:	601a      	str	r2, [r3, #0]
    DBGPRINTLN_CTX("Initial calibration dump:");
    2bd6:	f001 f83d 	bl	3c54 <printf>
    for(init_calib_t *psCalibTbl = g_psInitCalibrationTable; psCalibTbl->pulRegister; psCalibTbl++)
    2bda:	4b4b      	ldr	r3, [pc, #300]	; (2d08 <main+0x158>)
    2bdc:	681c      	ldr	r4, [r3, #0]
    2bde:	6823      	ldr	r3, [r4, #0]
    2be0:	2b00      	cmp	r3, #0
    2be2:	f040 8082 	bne.w	2cea <main+0x13a>
    DBGPRINTLN_CTX("0x00100000: %08X", *(volatile uint32_t *)0x00100000);
    */

    while(1)
    {
        GPIO->P[0].DOUT ^= BIT(0);
    2be6:	4d49      	ldr	r5, [pc, #292]	; (2d0c <main+0x15c>)

        delay_ms(500);

        DBGPRINTLN_CTX("ADC Temp: %.2f", adc_get_temperature());
    2be8:	4c44      	ldr	r4, [pc, #272]	; (2cfc <main+0x14c>)
    2bea:	4f49      	ldr	r7, [pc, #292]	; (2d10 <main+0x160>)
        GPIO->P[0].DOUT ^= BIT(0);
    2bec:	68eb      	ldr	r3, [r5, #12]
    2bee:	f083 0301 	eor.w	r3, r3, #1
    2bf2:	60eb      	str	r3, [r5, #12]
        delay_ms(500);
    2bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2bf8:	2100      	movs	r1, #0
    2bfa:	f000 f8f9 	bl	2df0 <delay_ms>
        DBGPRINTLN_CTX("ADC Temp: %.2f", adc_get_temperature());
    2bfe:	f000 fb21 	bl	3244 <adc_get_temperature>
    2c02:	ee10 0a10 	vmov	r0, s0
    2c06:	f7fd fc07 	bl	418 <__aeabi_f2d>
    2c0a:	4602      	mov	r2, r0
    2c0c:	460b      	mov	r3, r1
    2c0e:	4638      	mov	r0, r7
    2c10:	4621      	mov	r1, r4
    2c12:	f001 f81f 	bl	3c54 <printf>
        DBGPRINTLN_CTX("EMU Temp: %.2f", emu_get_temperature());
    2c16:	f7ff f859 	bl	1ccc <emu_get_temperature>
    2c1a:	ee10 0a10 	vmov	r0, s0
    2c1e:	f7fd fbfb 	bl	418 <__aeabi_f2d>
    2c22:	4602      	mov	r2, r0
    2c24:	460b      	mov	r3, r1
    2c26:	483b      	ldr	r0, [pc, #236]	; (2d14 <main+0x164>)
    2c28:	4621      	mov	r1, r4
    2c2a:	f001 f813 	bl	3c54 <printf>

        DBGPRINTLN_CTX("HFXO Startup: %.2f pF", cmu_hfxo_get_startup_cap());
    2c2e:	f7fe fbcb 	bl	13c8 <cmu_hfxo_get_startup_cap>
    2c32:	ee10 0a10 	vmov	r0, s0
    2c36:	f7fd fbef 	bl	418 <__aeabi_f2d>
    2c3a:	4602      	mov	r2, r0
    2c3c:	460b      	mov	r3, r1
    2c3e:	4836      	ldr	r0, [pc, #216]	; (2d18 <main+0x168>)
    2c40:	4621      	mov	r1, r4
    2c42:	f001 f807 	bl	3c54 <printf>
        DBGPRINTLN_CTX("HFXO Startup: %.2f uA", cmu_hfxo_get_startup_current());
    2c46:	f7fe fbad 	bl	13a4 <cmu_hfxo_get_startup_current>
    2c4a:	ee10 0a10 	vmov	r0, s0
    2c4e:	f7fd fbe3 	bl	418 <__aeabi_f2d>
    2c52:	4602      	mov	r2, r0
    2c54:	460b      	mov	r3, r1
    2c56:	4831      	ldr	r0, [pc, #196]	; (2d1c <main+0x16c>)
    2c58:	4621      	mov	r1, r4
    2c5a:	f000 fffb 	bl	3c54 <printf>
        DBGPRINTLN_CTX("HFXO Steady: %.2f pF", cmu_hfxo_get_steady_cap());
    2c5e:	f7fe fbf1 	bl	1444 <cmu_hfxo_get_steady_cap>
    2c62:	ee10 0a10 	vmov	r0, s0
    2c66:	f7fd fbd7 	bl	418 <__aeabi_f2d>
    2c6a:	4602      	mov	r2, r0
    2c6c:	460b      	mov	r3, r1
    2c6e:	482c      	ldr	r0, [pc, #176]	; (2d20 <main+0x170>)
    2c70:	4621      	mov	r1, r4
    2c72:	f000 ffef 	bl	3c54 <printf>
        DBGPRINTLN_CTX("HFXO Steady: %.2f uA", cmu_hfxo_get_steady_current());
    2c76:	f7fe fbd3 	bl	1420 <cmu_hfxo_get_steady_current>
    2c7a:	ee10 0a10 	vmov	r0, s0
    2c7e:	f7fd fbcb 	bl	418 <__aeabi_f2d>
    2c82:	460b      	mov	r3, r1
    2c84:	4602      	mov	r2, r0
    2c86:	4621      	mov	r1, r4
    2c88:	4826      	ldr	r0, [pc, #152]	; (2d24 <main+0x174>)
    2c8a:	f000 ffe3 	bl	3c54 <printf>
        DBGPRINTLN_CTX("HFXO PMA [%03X]: %.2f uA", cmu_hfxo_get_pma_ibtrim(), cmu_hfxo_get_pma_current());
    2c8e:	f7fe fc27 	bl	14e0 <cmu_hfxo_get_pma_ibtrim>
    2c92:	4606      	mov	r6, r0
    2c94:	f7fe fc32 	bl	14fc <cmu_hfxo_get_pma_current>
    2c98:	ee10 0a10 	vmov	r0, s0
    2c9c:	f7fd fbbc 	bl	418 <__aeabi_f2d>
    2ca0:	4632      	mov	r2, r6
    2ca2:	e9cd 0100 	strd	r0, r1, [sp]
    2ca6:	4621      	mov	r1, r4
    2ca8:	481f      	ldr	r0, [pc, #124]	; (2d28 <main+0x178>)
    2caa:	f000 ffd3 	bl	3c54 <printf>
        DBGPRINTLN_CTX("HFXO PDA [%03X]: %.2f uA", cmu_hfxo_get_pda_ibtrim(1), cmu_hfxo_get_pda_current(0));
    2cae:	2001      	movs	r0, #1
    2cb0:	f7fe fbde 	bl	1470 <cmu_hfxo_get_pda_ibtrim>
    2cb4:	4606      	mov	r6, r0
    2cb6:	2000      	movs	r0, #0
    2cb8:	f7fe fbf0 	bl	149c <cmu_hfxo_get_pda_current>
    2cbc:	ee10 0a10 	vmov	r0, s0
    2cc0:	f7fd fbaa 	bl	418 <__aeabi_f2d>
    2cc4:	4632      	mov	r2, r6
    2cc6:	e9cd 0100 	strd	r0, r1, [sp]
    2cca:	4621      	mov	r1, r4
    2ccc:	4817      	ldr	r0, [pc, #92]	; (2d2c <main+0x17c>)
    2cce:	f000 ffc1 	bl	3c54 <printf>

        //sleep();

        DBGPRINTLN_CTX("RTCC Time: %lu", rtcc_get_time());
    2cd2:	f000 f863 	bl	2d9c <rtcc_get_time>
    2cd6:	4621      	mov	r1, r4
    2cd8:	4602      	mov	r2, r0
    2cda:	4815      	ldr	r0, [pc, #84]	; (2d30 <main+0x180>)
    2cdc:	f000 ffba 	bl	3c54 <printf>

        DBGPRINTLN_CTX("Big fag does not need debug uart anymore.");
    2ce0:	4621      	mov	r1, r4
    2ce2:	4814      	ldr	r0, [pc, #80]	; (2d34 <main+0x184>)
    2ce4:	f000 ffb6 	bl	3c54 <printf>
    2ce8:	e780      	b.n	2bec <main+0x3c>
        DBGPRINTLN_CTX("  0x%08X -> 0x%08X", psCalibTbl->ulInitialCalibration, psCalibTbl->pulRegister);
    2cea:	6862      	ldr	r2, [r4, #4]
    2cec:	4629      	mov	r1, r5
    2cee:	4630      	mov	r0, r6
    2cf0:	f000 ffb0 	bl	3c54 <printf>
    for(init_calib_t *psCalibTbl = g_psInitCalibrationTable; psCalibTbl->pulRegister; psCalibTbl++)
    2cf4:	3408      	adds	r4, #8
    2cf6:	e772      	b.n	2bde <main+0x2e>
    2cf8:	400e4000 	.word	0x400e4000
    2cfc:	00004189 	.word	0x00004189
    2d00:	00004be1 	.word	0x00004be1
    2d04:	00004c04 	.word	0x00004c04
    2d08:	20000014 	.word	0x20000014
    2d0c:	40088000 	.word	0x40088000
    2d10:	00004c20 	.word	0x00004c20
    2d14:	00004c38 	.word	0x00004c38
    2d18:	00004c50 	.word	0x00004c50
    2d1c:	00004c6f 	.word	0x00004c6f
    2d20:	00004c8e 	.word	0x00004c8e
    2d24:	00004cac 	.word	0x00004cac
    2d28:	00004cca 	.word	0x00004cca
    2d2c:	00004cec 	.word	0x00004cec
    2d30:	00004d0e 	.word	0x00004d0e
    2d34:	00004d26 	.word	0x00004d26

00002d38 <rtcc_init>:
#include "rtcc.h"

void rtcc_init()
{
    2d38:	b508      	push	{r3, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_LE;
    2d3a:	4b16      	ldr	r3, [pc, #88]	; (2d94 <rtcc_init+0x5c>)
    2d3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    2d40:	f042 0201 	orr.w	r2, r2, #1
    2d44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    CMU->LFEPRESC0 = (CMU->LFEPRESC0 & ~_CMU_LFEPRESC0_RTCC_MASK) | CMU_LFEPRESC0_RTCC_DIV1;
    2d48:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2d4c:	f022 0203 	bic.w	r2, r2, #3
    2d50:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    CMU->LFECLKEN0 |= CMU_LFECLKEN0_RTCC;
    2d54:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    2d58:	f042 0201 	orr.w	r2, r2, #1
    2d5c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    cmu_update_clocks();
    2d60:	f7fe f816 	bl	d90 <cmu_update_clocks>

    RTCC->CTRL = RTCC_CTRL_CNTMODE_NORMAL | RTCC_CTRL_OSCFDETEN | RTCC_CTRL_CNTTICK_CCV0MATCH | RTCC_CTRL_PRECCV0TOP | RTCC_CTRL_DEBUGRUN;
    2d64:	4b0c      	ldr	r3, [pc, #48]	; (2d98 <rtcc_init+0x60>)
    2d66:	f249 0214 	movw	r2, #36884	; 0x9014
    2d6a:	601a      	str	r2, [r3, #0]
    RTCC->PRECNT = 0;
    2d6c:	2200      	movs	r2, #0
    2d6e:	605a      	str	r2, [r3, #4]
    RTCC->CNT = 0;
    2d70:	609a      	str	r2, [r3, #8]

    RTCC->CC[0].CCV = 999; // Prescaler RTCC_CLOCK_FREQ / (X + 1)
    2d72:	f240 32e7 	movw	r2, #999	; 0x3e7
    2d76:	645a      	str	r2, [r3, #68]	; 0x44

    RTCC->CC[1].CTRL = RTCC_CC_CTRL_COMPBASE_CNT | RTCC_CC_CTRL_MODE_OUTPUTCOMPARE;
    2d78:	2202      	movs	r2, #2
    2d7a:	651a      	str	r2, [r3, #80]	; 0x50

    RTCC->IFC = _RTCC_IFC_MASK;
    2d7c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2d80:	621a      	str	r2, [r3, #32]
    RTCC->IEN |= RTCC_IEN_CC1;
    2d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2d84:	f042 0204 	orr.w	r2, r2, #4
    2d88:	625a      	str	r2, [r3, #36]	; 0x24

    RTCC->CTRL |= RTCC_CTRL_ENABLE;
    2d8a:	681a      	ldr	r2, [r3, #0]
    2d8c:	f042 0201 	orr.w	r2, r2, #1
    2d90:	601a      	str	r2, [r3, #0]
}
    2d92:	bd08      	pop	{r3, pc}
    2d94:	400e4000 	.word	0x400e4000
    2d98:	40062000 	.word	0x40062000

00002d9c <rtcc_get_time>:
uint32_t rtcc_get_time()
{
    return RTCC->CNT;
    2d9c:	4b01      	ldr	r3, [pc, #4]	; (2da4 <rtcc_get_time+0x8>)
    2d9e:	6898      	ldr	r0, [r3, #8]
}
    2da0:	4770      	bx	lr
    2da2:	bf00      	nop
    2da4:	40062000 	.word	0x40062000

00002da8 <_systick_isr>:

volatile uint64_t g_ullSystemTick = 0;

void _systick_isr()
{
    g_ullSystemTick++;
    2da8:	4904      	ldr	r1, [pc, #16]	; (2dbc <_systick_isr+0x14>)
{
    2daa:	b530      	push	{r4, r5, lr}
    g_ullSystemTick++;
    2dac:	e9d1 2300 	ldrd	r2, r3, [r1]
    2db0:	1c54      	adds	r4, r2, #1
    2db2:	f143 0500 	adc.w	r5, r3, #0
    2db6:	e9c1 4500 	strd	r4, r5, [r1]
}
    2dba:	bd30      	pop	{r4, r5, pc}
    2dbc:	20000088 	.word	0x20000088

00002dc0 <systick_init>:
void systick_init()
{
    SysTick->LOAD = (HFCORE_CLOCK_FREQ / 1000) - 1; // TODO: Change this
    2dc0:	4b08      	ldr	r3, [pc, #32]	; (2de4 <systick_init+0x24>)
    2dc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2dc6:	681b      	ldr	r3, [r3, #0]
    2dc8:	fbb3 f3f2 	udiv	r3, r3, r2
    2dcc:	4a06      	ldr	r2, [pc, #24]	; (2de8 <systick_init+0x28>)
    2dce:	3b01      	subs	r3, #1
    2dd0:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;
    2dd2:	2300      	movs	r3, #0
    2dd4:	6093      	str	r3, [r2, #8]
    SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
    2dd6:	2307      	movs	r3, #7
    2dd8:	6013      	str	r3, [r2, #0]

    SCB->SHP[11] = 7 << (8 - __NVIC_PRIO_BITS); // Set priority 3,1 (min)
    2dda:	4b04      	ldr	r3, [pc, #16]	; (2dec <systick_init+0x2c>)
    2ddc:	22e0      	movs	r2, #224	; 0xe0
    2dde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
    2de2:	4770      	bx	lr
    2de4:	200000bc 	.word	0x200000bc
    2de8:	e000e010 	.word	0xe000e010
    2dec:	e000ed00 	.word	0xe000ed00

00002df0 <delay_ms>:
void delay_ms(uint64_t ullTicks)
{
    uint64_t ullStartTick = g_ullSystemTick;
    2df0:	4b08      	ldr	r3, [pc, #32]	; (2e14 <delay_ms+0x24>)
{
    2df2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint64_t ullStartTick = g_ullSystemTick;
    2df6:	e9d3 4500 	ldrd	r4, r5, [r3]

    while(g_ullSystemTick - ullStartTick < ullTicks);
    2dfa:	e9d3 8900 	ldrd	r8, r9, [r3]
    2dfe:	ebb8 0604 	subs.w	r6, r8, r4
    2e02:	eb69 0705 	sbc.w	r7, r9, r5
    2e06:	428f      	cmp	r7, r1
    2e08:	bf08      	it	eq
    2e0a:	4286      	cmpeq	r6, r0
    2e0c:	d3f5      	bcc.n	2dfa <delay_ms+0xa>
}
    2e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e12:	bf00      	nop
    2e14:	20000088 	.word	0x20000088

00002e18 <i2c1_init>:
}


void i2c1_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation)
{
    if(ubSCLLocation > AFCHANLOC_MAX)
    2e18:	2908      	cmp	r1, #8
{
    2e1a:	b510      	push	{r4, lr}
    if(ubSCLLocation > AFCHANLOC_MAX)
    2e1c:	d823      	bhi.n	2e66 <i2c1_init+0x4e>
        return;

    if(ubSDALocation > AFCHANLOC_MAX)
    2e1e:	2a08      	cmp	r2, #8
    2e20:	d821      	bhi.n	2e66 <i2c1_init+0x4e>
        return;

	CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_I2C1;
    2e22:	4c16      	ldr	r4, [pc, #88]	; (2e7c <i2c1_init+0x64>)
    2e24:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    2e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2e2c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    I2C1->CTRL = I2C_CTRL_CLHR_STANDARD | I2C_CTRL_TXBIL_EMPTY;
    2e30:	4b13      	ldr	r3, [pc, #76]	; (2e80 <i2c1_init+0x68>)
    2e32:	2400      	movs	r4, #0
    2e34:	601c      	str	r4, [r3, #0]
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    2e36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    2e3a:	2403      	movs	r4, #3
    2e3c:	645c      	str	r4, [r3, #68]	; 0x44
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    2e3e:	649a      	str	r2, [r3, #72]	; 0x48

    if(ubMode == I2C_NORMAL)
    2e40:	b990      	cbnz	r0, 2e68 <i2c1_init+0x50>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 100000) - 8) / 8) - 1;
    2e42:	4a10      	ldr	r2, [pc, #64]	; (2e84 <i2c1_init+0x6c>)
    2e44:	4910      	ldr	r1, [pc, #64]	; (2e88 <i2c1_init+0x70>)
    2e46:	6812      	ldr	r2, [r2, #0]
    2e48:	fbb2 f2f1 	udiv	r2, r2, r1
    2e4c:	3a08      	subs	r2, #8
    2e4e:	40e2      	lsrs	r2, r4
    else if(ubMode == I2C_FAST)
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
    2e50:	3a01      	subs	r2, #1
    2e52:	611a      	str	r2, [r3, #16]

    I2C1->CTRL |= I2C_CTRL_EN;
    2e54:	681a      	ldr	r2, [r3, #0]
    2e56:	f042 0201 	orr.w	r2, r2, #1
    2e5a:	601a      	str	r2, [r3, #0]
    I2C1->CMD = I2C_CMD_ABORT;
    2e5c:	2220      	movs	r2, #32
    2e5e:	605a      	str	r2, [r3, #4]

    while(I2C1->STATE & I2C_STATE_BUSY);
    2e60:	689a      	ldr	r2, [r3, #8]
    2e62:	07d2      	lsls	r2, r2, #31
    2e64:	d4fc      	bmi.n	2e60 <i2c1_init+0x48>
}
    2e66:	bd10      	pop	{r4, pc}
    else if(ubMode == I2C_FAST)
    2e68:	2801      	cmp	r0, #1
    2e6a:	d1f3      	bne.n	2e54 <i2c1_init+0x3c>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
    2e6c:	4a05      	ldr	r2, [pc, #20]	; (2e84 <i2c1_init+0x6c>)
    2e6e:	4907      	ldr	r1, [pc, #28]	; (2e8c <i2c1_init+0x74>)
    2e70:	6812      	ldr	r2, [r2, #0]
    2e72:	fbb2 f2f1 	udiv	r2, r2, r1
    2e76:	3a08      	subs	r2, #8
    2e78:	08d2      	lsrs	r2, r2, #3
    2e7a:	e7e9      	b.n	2e50 <i2c1_init+0x38>
    2e7c:	400e4000 	.word	0x400e4000
    2e80:	40089400 	.word	0x40089400
    2e84:	200000d8 	.word	0x200000d8
    2e88:	000186a0 	.word	0x000186a0
    2e8c:	00061a80 	.word	0x00061a80

00002e90 <i2c1_transmit>:
uint8_t i2c1_transmit(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop)
{
    2e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    while((I2C1->STATE & (I2C_STATE_BUSHOLD | I2C_STATE_BUSY)) == I2C_STATE_BUSY)
    2e94:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2f38 <i2c1_transmit+0xa8>
{
    2e98:	4607      	mov	r7, r0
    2e9a:	460e      	mov	r6, r1
    2e9c:	4615      	mov	r5, r2
    2e9e:	4698      	mov	r8, r3
    2ea0:	464c      	mov	r4, r9
    while((I2C1->STATE & (I2C_STATE_BUSHOLD | I2C_STATE_BUSY)) == I2C_STATE_BUSY)
    2ea2:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2ea6:	f003 0311 	and.w	r3, r3, #17
    2eaa:	2b01      	cmp	r3, #1
    2eac:	d015      	beq.n	2eda <i2c1_transmit+0x4a>
        delay_ms(1);

    I2C1->CMD = I2C_CMD_START;
    2eae:	2301      	movs	r3, #1
    2eb0:	f8c9 3004 	str.w	r3, [r9, #4]

    while((I2C1->STATE & 0xF3) != 0x53);
    2eb4:	68a3      	ldr	r3, [r4, #8]
    2eb6:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
    2eba:	2b53      	cmp	r3, #83	; 0x53
    2ebc:	d1fa      	bne.n	2eb4 <i2c1_transmit+0x24>

    I2C1->TXDATA = ubAddress;
    2ebe:	62e7      	str	r7, [r4, #44]	; 0x2c

    while((I2C1->STATE & 0xD3) != 0x93);
    2ec0:	68a3      	ldr	r3, [r4, #8]
    2ec2:	f003 03d3 	and.w	r3, r3, #211	; 0xd3
    2ec6:	2b93      	cmp	r3, #147	; 0x93
    2ec8:	d1fa      	bne.n	2ec0 <i2c1_transmit+0x30>

    if(I2C1->STATE & I2C_STATE_NACKED)
    2eca:	68a3      	ldr	r3, [r4, #8]
    2ecc:	0719      	lsls	r1, r3, #28
    2ece:	d509      	bpl.n	2ee4 <i2c1_transmit+0x54>

                while((I2C1->STATE & 0xF7) != 0xD7);

                if(I2C1->STATE & I2C_STATE_NACKED)
                {
                    I2C1->CMD = I2C_CMD_STOP;
    2ed0:	2302      	movs	r3, #2
    2ed2:	6063      	str	r3, [r4, #4]

                    return 0;
    2ed4:	2000      	movs	r0, #0

    if(ubStop)
        I2C1->CMD = I2C_CMD_STOP;

	return 1;
}
    2ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        delay_ms(1);
    2eda:	2001      	movs	r0, #1
    2edc:	2100      	movs	r1, #0
    2ede:	f7ff ff87 	bl	2df0 <delay_ms>
    2ee2:	e7de      	b.n	2ea2 <i2c1_transmit+0x12>
	if(ulCount)
    2ee4:	b195      	cbz	r5, 2f0c <i2c1_transmit+0x7c>
			if (!(ubAddress & 1)) // Write
    2ee6:	f007 0701 	and.w	r7, r7, #1
                    I2C1->CMD = I2C_CMD_NACK;
    2eea:	2308      	movs	r3, #8
                    I2C1->CMD = I2C_CMD_ACK;
    2eec:	2104      	movs	r1, #4
			if (!(ubAddress & 1)) // Write
    2eee:	3601      	adds	r6, #1
    2ef0:	b98f      	cbnz	r7, 2f16 <i2c1_transmit+0x86>
				I2C1->TXDATA = *(pubSrc++);
    2ef2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
    2ef6:	62e2      	str	r2, [r4, #44]	; 0x2c
                while((I2C1->STATE & 0xF7) != 0xD7);
    2ef8:	68a2      	ldr	r2, [r4, #8]
    2efa:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    2efe:	2ad7      	cmp	r2, #215	; 0xd7
    2f00:	d1fa      	bne.n	2ef8 <i2c1_transmit+0x68>
                if(I2C1->STATE & I2C_STATE_NACKED)
    2f02:	68a2      	ldr	r2, [r4, #8]
    2f04:	0712      	lsls	r2, r2, #28
    2f06:	d4e3      	bmi.n	2ed0 <i2c1_transmit+0x40>
		} while(--ulCount);
    2f08:	3d01      	subs	r5, #1
    2f0a:	d1f0      	bne.n	2eee <i2c1_transmit+0x5e>
    if(ubStop)
    2f0c:	f1b8 0f00 	cmp.w	r8, #0
    2f10:	d10e      	bne.n	2f30 <i2c1_transmit+0xa0>
	return 1;
    2f12:	2001      	movs	r0, #1
    2f14:	e7df      	b.n	2ed6 <i2c1_transmit+0x46>
                while((I2C1->STATE & 0xF3) != 0xB3);
    2f16:	68a2      	ldr	r2, [r4, #8]
    2f18:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
    2f1c:	2ab3      	cmp	r2, #179	; 0xb3
    2f1e:	d1fa      	bne.n	2f16 <i2c1_transmit+0x86>
				*(pubSrc++) = I2C1->RXDATA;
    2f20:	69e2      	ldr	r2, [r4, #28]
    2f22:	f806 2c01 	strb.w	r2, [r6, #-1]
				if (ulCount > 1)
    2f26:	2d01      	cmp	r5, #1
                    I2C1->CMD = I2C_CMD_ACK;
    2f28:	bf8c      	ite	hi
    2f2a:	6061      	strhi	r1, [r4, #4]
                    I2C1->CMD = I2C_CMD_NACK;
    2f2c:	6063      	strls	r3, [r4, #4]
    2f2e:	e7eb      	b.n	2f08 <i2c1_transmit+0x78>
        I2C1->CMD = I2C_CMD_STOP;
    2f30:	2302      	movs	r3, #2
    2f32:	6063      	str	r3, [r4, #4]
    2f34:	e7ed      	b.n	2f12 <i2c1_transmit+0x82>
    2f36:	bf00      	nop
    2f38:	40089400 	.word	0x40089400

00002f3c <_default_isr>:
extern uint32_t _end;


void _default_isr()
{
    while(1);
    2f3c:	e7fe      	b.n	2f3c <_default_isr>

00002f3e <__libc_init_array>:
}

void __attribute__ ((weak)) __libc_init_array()
{

}
    2f3e:	4770      	bx	lr

00002f40 <_reset_isr>:
extern int main();

#define DEFAULT_ISR "_default_isr"

void _reset_isr()
{
    2f40:	b508      	push	{r3, lr}
    uint32_t *src, *dst;

    src = &_siiram0;
    2f42:	4a1d      	ldr	r2, [pc, #116]	; (2fb8 <_reset_isr+0x78>)
    2f44:	4b1d      	ldr	r3, [pc, #116]	; (2fbc <_reset_isr+0x7c>)
    dst = &_siram0;

    while (dst < &_eiram0) // Copy RAM code
    2f46:	491e      	ldr	r1, [pc, #120]	; (2fc0 <_reset_isr+0x80>)
    2f48:	428b      	cmp	r3, r1
    2f4a:	d327      	bcc.n	2f9c <_reset_isr+0x5c>
    2f4c:	4b1d      	ldr	r3, [pc, #116]	; (2fc4 <_reset_isr+0x84>)
        *(dst++) = *(src++);

    src = &_sidata;
    2f4e:	4a1e      	ldr	r2, [pc, #120]	; (2fc8 <_reset_isr+0x88>)
    dst = &_sdata;

    while (dst < &_edata) // Copy data
    2f50:	491e      	ldr	r1, [pc, #120]	; (2fcc <_reset_isr+0x8c>)
    2f52:	428b      	cmp	r3, r1
    2f54:	d327      	bcc.n	2fa6 <_reset_isr+0x66>
        *(dst++) = *(src++);

    src = 0;
    dst = &_sbss;
    2f56:	4b1e      	ldr	r3, [pc, #120]	; (2fd0 <_reset_isr+0x90>)

    while (dst < &_ebss) // Zero BSS
    2f58:	4a1e      	ldr	r2, [pc, #120]	; (2fd4 <_reset_isr+0x94>)
        *(dst++) = 0;
    2f5a:	2100      	movs	r1, #0
    while (dst < &_ebss) // Zero BSS
    2f5c:	4293      	cmp	r3, r2
    2f5e:	d327      	bcc.n	2fb0 <_reset_isr+0x70>

    __libc_init_array();
    2f60:	f7ff ffed 	bl	2f3e <__libc_init_array>

    SCB->VTOR = (uint32_t)&_svect; // ISR Vectors offset
    2f64:	4b1c      	ldr	r3, [pc, #112]	; (2fd8 <_reset_isr+0x98>)
    2f66:	4a1d      	ldr	r2, [pc, #116]	; (2fdc <_reset_isr+0x9c>)
    2f68:	609a      	str	r2, [r3, #8]
    SCB->AIRCR = 0x05FA0000 | (5 << 8); // Interrupt priority - 2 bits Group, 1 bit Sub-group
    2f6a:	4a1d      	ldr	r2, [pc, #116]	; (2fe0 <_reset_isr+0xa0>)
    2f6c:	60da      	str	r2, [r3, #12]
    SCB->SHCSR = SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk; // Enable separate fault handlers
    2f6e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
    2f72:	625a      	str	r2, [r3, #36]	; 0x24
    SCB->SCR |= SCB_SCR_SEVONPEND_Msk; // Pending disabled interrupt generates event
    2f74:	691a      	ldr	r2, [r3, #16]
    2f76:	f042 0210 	orr.w	r2, r2, #16
    2f7a:	611a      	str	r2, [r3, #16]
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; // Enable division by zero faults
    2f7c:	695a      	ldr	r2, [r3, #20]
    2f7e:	f042 0210 	orr.w	r2, r2, #16
    2f82:	615a      	str	r2, [r3, #20]
    SCB->CPACR |= 0xF << 20; // Enable CP10 & CP11 (FPU) in priv. and non priv. mode
    2f84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2f88:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    2f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    init();
    2f90:	f7ff f9a2 	bl	22d8 <init>
    main();
    2f94:	f7ff fe0c 	bl	2bb0 <main>
  __ASM volatile ("cpsid i" : : : "memory");
    2f98:	b672      	cpsid	i

    __disable_irq();
    while(1);
    2f9a:	e7fe      	b.n	2f9a <_reset_isr+0x5a>
        *(dst++) = *(src++);
    2f9c:	f852 0b04 	ldr.w	r0, [r2], #4
    2fa0:	f843 0b04 	str.w	r0, [r3], #4
    2fa4:	e7d0      	b.n	2f48 <_reset_isr+0x8>
        *(dst++) = *(src++);
    2fa6:	f852 0b04 	ldr.w	r0, [r2], #4
    2faa:	f843 0b04 	str.w	r0, [r3], #4
    2fae:	e7d0      	b.n	2f52 <_reset_isr+0x12>
        *(dst++) = 0;
    2fb0:	f843 1b04 	str.w	r1, [r3], #4
    2fb4:	e7d2      	b.n	2f5c <_reset_isr+0x1c>
    2fb6:	bf00      	nop
    2fb8:	00004db8 	.word	0x00004db8
    2fbc:	10000000 	.word	0x10000000
    2fc0:	10000000 	.word	0x10000000
    2fc4:	20000000 	.word	0x20000000
    2fc8:	00004db8 	.word	0x00004db8
    2fcc:	2000007c 	.word	0x2000007c
    2fd0:	20000080 	.word	0x20000080
    2fd4:	20000118 	.word	0x20000118
    2fd8:	e000ed00 	.word	0xe000ed00
    2fdc:	00000000 	.word	0x00000000
    2fe0:	05fa0500 	.word	0x05fa0500

00002fe4 <adc_init>:
#include "adc.h"

void adc_init()
{
    2fe4:	b508      	push	{r3, lr}
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC0;
    2fe6:	4b0b      	ldr	r3, [pc, #44]	; (3014 <adc_init+0x30>)
    2fe8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    2fec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    2ff0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC1;
    2ff4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    2ff8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    2ffc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

    CMU->ADCCTRL = CMU_ADCCTRL_ADC0CLKINV | CMU_ADCCTRL_ADC0CLKSEL_AUXHFRCO | (3 << _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) | CMU_ADCCTRL_ADC1CLKINV | CMU_ADCCTRL_ADC1CLKSEL_AUXHFRCO | (3 << _CMU_ADCCTRL_ADC1CLKDIV_SHIFT);
    3000:	4a05      	ldr	r2, [pc, #20]	; (3018 <adc_init+0x34>)
    3002:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

    cmu_update_clocks();
    3006:	f7fd fec3 	bl	d90 <cmu_update_clocks>

    // ADC_CLK is 8 MHz
    // adc_sar_clk is 100 kHz (ADC_CLK / (PRESC + 1)) PRESC = 79
    // TIMEBASE period is 1 us (1 MHz) (ADC_CLK / (TIMEBASE + 1)) TIMEBASE = 7
    ADC0->CTRL = ADC_CTRL_CHCONREFWARMIDLE_KEEPPREV | ADC_CTRL_CHCONMODE_MAXSETTLE | ADC_CTRL_OVSRSEL_X16 | (7 << _ADC_CTRL_TIMEBASE_SHIFT) | (79 << _ADC_CTRL_PRESC_SHIFT) | ADC_CTRL_ASYNCCLKEN_ALWAYSON | ADC_CTRL_ADCCLKMODE_ASYNC | ADC_CTRL_WARMUPMODE_NORMAL;
    300a:	4b04      	ldr	r3, [pc, #16]	; (301c <adc_init+0x38>)
    300c:	4a04      	ldr	r2, [pc, #16]	; (3020 <adc_init+0x3c>)
    300e:	601a      	str	r2, [r3, #0]
}
    3010:	bd08      	pop	{r3, pc}
    3012:	bf00      	nop
    3014:	400e4000 	.word	0x400e4000
    3018:	01130113 	.word	0x01130113
    301c:	40082000 	.word	0x40082000
    3020:	83074fc0 	.word	0x83074fc0

00003024 <adc_get_avdd>:
float adc_get_avdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3024:	4b1b      	ldr	r3, [pc, #108]	; (3094 <adc_get_avdd+0x70>)
    3026:	68da      	ldr	r2, [r3, #12]
    3028:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    302c:	d1fb      	bne.n	3026 <adc_get_avdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_AVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    302e:	4a1a      	ldr	r2, [pc, #104]	; (3098 <adc_get_avdd+0x74>)
    3030:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    3032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3036:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    3038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    303a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    303e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3042:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    3044:	4a15      	ldr	r2, [pc, #84]	; (309c <adc_get_avdd+0x78>)
    3046:	6e52      	ldr	r2, [r2, #100]	; 0x64
    3048:	6b59      	ldr	r1, [r3, #52]	; 0x34
    304a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    304e:	430a      	orrs	r2, r1
    3050:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3054:	4912      	ldr	r1, [pc, #72]	; (30a0 <adc_get_avdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3056:	f022 020f 	bic.w	r2, r2, #15
    305a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    305c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    305e:	f022 020f 	bic.w	r2, r2, #15
    3062:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    3064:	689a      	ldr	r2, [r3, #8]
    3066:	f042 0201 	orr.w	r2, r2, #1
    306a:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    306c:	4b09      	ldr	r3, [pc, #36]	; (3094 <adc_get_avdd+0x70>)
    306e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3070:	07d2      	lsls	r2, r2, #31
    3072:	d5fc      	bpl.n	306e <adc_get_avdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fAVDD = fADCCode * 5000.f / 4096.f;
    3076:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 30a4 <adc_get_avdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    307a:	091b      	lsrs	r3, r3, #4
    307c:	ee07 3a90 	vmov	s15, r3
    3080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fAVDD = fADCCode * 5000.f / 4096.f;
    3084:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fAVDD;
}
    3088:	ed9f 0a07 	vldr	s0, [pc, #28]	; 30a8 <adc_get_avdd+0x84>
    308c:	ee27 0a80 	vmul.f32	s0, s15, s0
    3090:	4770      	bx	lr
    3092:	bf00      	nop
    3094:	40082000 	.word	0x40082000
    3098:	07ffe078 	.word	0x07ffe078
    309c:	0fe081b0 	.word	0x0fe081b0
    30a0:	40082400 	.word	0x40082400
    30a4:	459c4000 	.word	0x459c4000
    30a8:	39800000 	.word	0x39800000

000030ac <adc_get_dvdd>:
float adc_get_dvdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    30ac:	4b1b      	ldr	r3, [pc, #108]	; (311c <adc_get_dvdd+0x70>)
    30ae:	68da      	ldr	r2, [r3, #12]
    30b0:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    30b4:	d1fb      	bne.n	30ae <adc_get_dvdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    30b6:	4a1a      	ldr	r2, [pc, #104]	; (3120 <adc_get_dvdd+0x74>)
    30b8:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    30ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    30be:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    30c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    30c2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    30c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    30ca:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    30cc:	4a15      	ldr	r2, [pc, #84]	; (3124 <adc_get_dvdd+0x78>)
    30ce:	6e52      	ldr	r2, [r2, #100]	; 0x64
    30d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    30d2:	f3c2 420e 	ubfx	r2, r2, #16, #15
    30d6:	430a      	orrs	r2, r1
    30d8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    30da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    30dc:	4912      	ldr	r1, [pc, #72]	; (3128 <adc_get_dvdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    30de:	f022 020f 	bic.w	r2, r2, #15
    30e2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    30e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    30e6:	f022 020f 	bic.w	r2, r2, #15
    30ea:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    30ec:	689a      	ldr	r2, [r3, #8]
    30ee:	f042 0201 	orr.w	r2, r2, #1
    30f2:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    30f4:	4b09      	ldr	r3, [pc, #36]	; (311c <adc_get_dvdd+0x70>)
    30f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    30f8:	07d2      	lsls	r2, r2, #31
    30fa:	d5fc      	bpl.n	30f6 <adc_get_dvdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    30fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fDVDD = fADCCode * 5000.f / 4096.f;
    30fe:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 312c <adc_get_dvdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    3102:	091b      	lsrs	r3, r3, #4
    3104:	ee07 3a90 	vmov	s15, r3
    3108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fDVDD = fADCCode * 5000.f / 4096.f;
    310c:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDVDD;
}
    3110:	ed9f 0a07 	vldr	s0, [pc, #28]	; 3130 <adc_get_dvdd+0x84>
    3114:	ee27 0a80 	vmul.f32	s0, s15, s0
    3118:	4770      	bx	lr
    311a:	bf00      	nop
    311c:	40082000 	.word	0x40082000
    3120:	07ffe278 	.word	0x07ffe278
    3124:	0fe081b0 	.word	0x0fe081b0
    3128:	40082400 	.word	0x40082400
    312c:	459c4000 	.word	0x459c4000
    3130:	39800000 	.word	0x39800000

00003134 <adc_get_iovdd>:
float adc_get_iovdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3134:	4b1b      	ldr	r3, [pc, #108]	; (31a4 <adc_get_iovdd+0x70>)
    3136:	68da      	ldr	r2, [r3, #12]
    3138:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    313c:	d1fb      	bne.n	3136 <adc_get_iovdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_IOVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    313e:	4a1a      	ldr	r2, [pc, #104]	; (31a8 <adc_get_iovdd+0x74>)
    3140:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    3142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3146:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    3148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    314a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    314e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3152:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    3154:	4a15      	ldr	r2, [pc, #84]	; (31ac <adc_get_iovdd+0x78>)
    3156:	6e52      	ldr	r2, [r2, #100]	; 0x64
    3158:	6b59      	ldr	r1, [r3, #52]	; 0x34
    315a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    315e:	430a      	orrs	r2, r1
    3160:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3164:	4912      	ldr	r1, [pc, #72]	; (31b0 <adc_get_iovdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3166:	f022 020f 	bic.w	r2, r2, #15
    316a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    316c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    316e:	f022 020f 	bic.w	r2, r2, #15
    3172:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    3174:	689a      	ldr	r2, [r3, #8]
    3176:	f042 0201 	orr.w	r2, r2, #1
    317a:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    317c:	4b09      	ldr	r3, [pc, #36]	; (31a4 <adc_get_iovdd+0x70>)
    317e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3180:	07d2      	lsls	r2, r2, #31
    3182:	d5fc      	bpl.n	317e <adc_get_iovdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fIOVDD = fADCCode * 5000.f / 4096.f;
    3186:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 31b4 <adc_get_iovdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    318a:	091b      	lsrs	r3, r3, #4
    318c:	ee07 3a90 	vmov	s15, r3
    3190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fIOVDD = fADCCode * 5000.f / 4096.f;
    3194:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fIOVDD;
}
    3198:	ed9f 0a07 	vldr	s0, [pc, #28]	; 31b8 <adc_get_iovdd+0x84>
    319c:	ee27 0a80 	vmul.f32	s0, s15, s0
    31a0:	4770      	bx	lr
    31a2:	bf00      	nop
    31a4:	40082000 	.word	0x40082000
    31a8:	07ffe578 	.word	0x07ffe578
    31ac:	0fe081b0 	.word	0x0fe081b0
    31b0:	40082400 	.word	0x40082400
    31b4:	459c4000 	.word	0x459c4000
    31b8:	39800000 	.word	0x39800000

000031bc <adc_get_corevdd>:
float adc_get_corevdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    31bc:	4b1b      	ldr	r3, [pc, #108]	; (322c <adc_get_corevdd+0x70>)
    31be:	68da      	ldr	r2, [r3, #12]
    31c0:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    31c4:	d1fb      	bne.n	31be <adc_get_corevdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DECOUPLE | ADC_SINGLECTRL_REF_2V5 | ADC_SINGLECTRL_RES_OVS;
    31c6:	4a1a      	ldr	r2, [pc, #104]	; (3230 <adc_get_corevdd+0x74>)
    31c8:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    31ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    31ce:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    31d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    31d2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    31d6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    31da:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x7FFF0000) >> 16; // Calibration for 2V5 reference
    31dc:	4a15      	ldr	r2, [pc, #84]	; (3234 <adc_get_corevdd+0x78>)
    31de:	6e12      	ldr	r2, [r2, #96]	; 0x60
    31e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    31e2:	f3c2 420e 	ubfx	r2, r2, #16, #15
    31e6:	430a      	orrs	r2, r1
    31e8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    31ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    31ec:	4912      	ldr	r1, [pc, #72]	; (3238 <adc_get_corevdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    31ee:	f022 020f 	bic.w	r2, r2, #15
    31f2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    31f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    31f6:	f022 020f 	bic.w	r2, r2, #15
    31fa:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    31fc:	689a      	ldr	r2, [r3, #8]
    31fe:	f042 0201 	orr.w	r2, r2, #1
    3202:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    3204:	4b09      	ldr	r3, [pc, #36]	; (322c <adc_get_corevdd+0x70>)
    3206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3208:	07d2      	lsls	r2, r2, #31
    320a:	d5fc      	bpl.n	3206 <adc_get_corevdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fDECOUPLE = fADCCode * 2500.f / 4096.f;
    320e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 323c <adc_get_corevdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    3212:	091b      	lsrs	r3, r3, #4
    3214:	ee07 3a90 	vmov	s15, r3
    3218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fDECOUPLE = fADCCode * 2500.f / 4096.f;
    321c:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDECOUPLE;
}
    3220:	ed9f 0a07 	vldr	s0, [pc, #28]	; 3240 <adc_get_corevdd+0x84>
    3224:	ee27 0a80 	vmul.f32	s0, s15, s0
    3228:	4770      	bx	lr
    322a:	bf00      	nop
    322c:	40082000 	.word	0x40082000
    3230:	07ffe438 	.word	0x07ffe438
    3234:	0fe081b0 	.word	0x0fe081b0
    3238:	40082400 	.word	0x40082400
    323c:	451c4000 	.word	0x451c4000
    3240:	39800000 	.word	0x39800000

00003244 <adc_get_temperature>:
float adc_get_temperature()
{
    3244:	b510      	push	{r4, lr}
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3246:	4b26      	ldr	r3, [pc, #152]	; (32e0 <adc_get_temperature+0x9c>)
    3248:	68da      	ldr	r2, [r3, #12]
    324a:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    324e:	d1fb      	bne.n	3248 <adc_get_temperature+0x4>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_256CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_TEMP | ADC_SINGLECTRL_REF_1V25 | ADC_SINGLECTRL_RES_OVS;
    3250:	4a24      	ldr	r2, [pc, #144]	; (32e4 <adc_get_temperature+0xa0>)
    3252:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    3254:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3258:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    325a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x00007FFF) >> 0; // Calibration for 1V25 reference
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_LOWACC;
    325c:	4c22      	ldr	r4, [pc, #136]	; (32e8 <adc_get_temperature+0xa4>)
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    325e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    3262:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3266:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x00007FFF) >> 0; // Calibration for 1V25 reference
    3268:	4a20      	ldr	r2, [pc, #128]	; (32ec <adc_get_temperature+0xa8>)
    326a:	6e11      	ldr	r1, [r2, #96]	; 0x60
    326c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    326e:	f3c1 010e 	ubfx	r1, r1, #0, #15
    3272:	4301      	orrs	r1, r0
    3274:	6359      	str	r1, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_LOWACC;
    3276:	6b18      	ldr	r0, [r3, #48]	; 0x30
    3278:	4020      	ands	r0, r4
    327a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    327e:	6318      	str	r0, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_LOWACC;
    3280:	6b19      	ldr	r1, [r3, #48]	; 0x30
    3282:	481b      	ldr	r0, [pc, #108]	; (32f0 <adc_get_temperature+0xac>)
    3284:	4021      	ands	r1, r4
    3286:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    328a:	6301      	str	r1, [r0, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    328c:	6899      	ldr	r1, [r3, #8]
    328e:	f041 0101 	orr.w	r1, r1, #1
    3292:	6099      	str	r1, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    3294:	4613      	mov	r3, r2
    3296:	4a12      	ldr	r2, [pc, #72]	; (32e0 <adc_get_temperature+0x9c>)
    3298:	6b91      	ldr	r1, [r2, #56]	; 0x38
    329a:	07c9      	lsls	r1, r1, #31
    329c:	d5fc      	bpl.n	3298 <adc_get_temperature+0x54>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    329e:	6c91      	ldr	r1, [r2, #72]	; 0x48
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    32a0:	681a      	ldr	r2, [r3, #0]
    float fADCCalibrationTemp = (DEVINFO->ADC0CAL3 & _DEVINFO_ADC0CAL3_TEMPREAD1V25_MASK) >> _DEVINFO_ADC0CAL3_TEMPREAD1V25_SHIFT;
    32a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    float fADCTemp = fCalibrationTemp - (fADCCalibrationTemp - fADCCode) * 1250.f / (4096.f * -1.84f);
    32a4:	eddf 6a13 	vldr	s13, [pc, #76]	; 32f4 <adc_get_temperature+0xb0>
    float fADCCalibrationTemp = (DEVINFO->ADC0CAL3 & _DEVINFO_ADC0CAL3_TEMPREAD1V25_MASK) >> _DEVINFO_ADC0CAL3_TEMPREAD1V25_SHIFT;
    32a8:	f3c3 130b 	ubfx	r3, r3, #4, #12
    32ac:	ee07 3a90 	vmov	s15, r3
    float fADCCode = ADC0->SINGLEDATA >> 4;
    32b0:	090b      	lsrs	r3, r1, #4
    float fADCCalibrationTemp = (DEVINFO->ADC0CAL3 & _DEVINFO_ADC0CAL3_TEMPREAD1V25_MASK) >> _DEVINFO_ADC0CAL3_TEMPREAD1V25_SHIFT;
    32b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fADCCode = ADC0->SINGLEDATA >> 4;
    32b6:	ee07 3a90 	vmov	s15, r3
    32ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    32be:	f3c2 4307 	ubfx	r3, r2, #16, #8
    float fADCTemp = fCalibrationTemp - (fADCCalibrationTemp - fADCCode) * 1250.f / (4096.f * -1.84f);
    32c2:	ee77 7a67 	vsub.f32	s15, s14, s15
    32c6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 32f8 <adc_get_temperature+0xb4>
    32ca:	ee67 7a87 	vmul.f32	s15, s15, s14
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    32ce:	ee00 3a10 	vmov	s0, r3
    float fADCTemp = fCalibrationTemp - (fADCCalibrationTemp - fADCCode) * 1250.f / (4096.f * -1.84f);
    32d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    32d6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

    return fADCTemp;
}
    32da:	ee37 0a00 	vadd.f32	s0, s14, s0
    32de:	bd10      	pop	{r4, pc}
    32e0:	40082000 	.word	0x40082000
    32e4:	09fff318 	.word	0x09fff318
    32e8:	fffefff0 	.word	0xfffefff0
    32ec:	0fe081b0 	.word	0x0fe081b0
    32f0:	40082400 	.word	0x40082400
    32f4:	45eb851f 	.word	0x45eb851f
    32f8:	449c4000 	.word	0x449c4000

000032fc <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, char* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
    32fc:	429a      	cmp	r2, r3
    buffer[idx] = character;
    32fe:	bf38      	it	cc
    3300:	5488      	strbcc	r0, [r1, r2]
  }
}
    3302:	4770      	bx	lr

00003304 <_out_null>:

// internal null output
static inline void _out_null(char character, char* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    3304:	4770      	bx	lr

00003306 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3306:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    330a:	469b      	mov	fp, r3
    330c:	e9dd 7311 	ldrd	r7, r3, [sp, #68]	; 0x44
    3310:	4681      	mov	r9, r0
  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3312:	f013 0002 	ands.w	r0, r3, #2
{
    3316:	468a      	mov	sl, r1
    3318:	4616      	mov	r6, r2
    331a:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    331e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3322:	9001      	str	r0, [sp, #4]
{
    3324:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
    buf[len++] = '0';
    3328:	f04f 0e30 	mov.w	lr, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    332c:	d044      	beq.n	33b8 <_ntoa_format+0xb2>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    332e:	f003 0003 	and.w	r0, r3, #3
    3332:	2801      	cmp	r0, #1
    buf[len++] = '0';
    3334:	f04f 0e30 	mov.w	lr, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3338:	d046      	beq.n	33c8 <_ntoa_format+0xc2>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    333a:	f013 0f10 	tst.w	r3, #16
    333e:	d018      	beq.n	3372 <_ntoa_format+0x6c>
    if (((len == prec) || (len == width)) && (len > 0U)) {
    3340:	42a1      	cmp	r1, r4
    3342:	d001      	beq.n	3348 <_ntoa_format+0x42>
    3344:	42a7      	cmp	r7, r4
    3346:	d144      	bne.n	33d2 <_ntoa_format+0xcc>
    3348:	2c00      	cmp	r4, #0
    334a:	d079      	beq.n	3440 <_ntoa_format+0x13a>
      len--;
      if ((base == 16U) && (len > 0U)) {
    334c:	2a10      	cmp	r2, #16
      len--;
    334e:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
      if ((base == 16U) && (len > 0U)) {
    3352:	d147      	bne.n	33e4 <_ntoa_format+0xde>
    3354:	2900      	cmp	r1, #0
    3356:	d041      	beq.n	33dc <_ntoa_format+0xd6>
        len--;
    3358:	3c02      	subs	r4, #2
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    335a:	0699      	lsls	r1, r3, #26
    335c:	d473      	bmi.n	3446 <_ntoa_format+0x140>
    335e:	2c1f      	cmp	r4, #31
    3360:	d873      	bhi.n	344a <_ntoa_format+0x144>
      buf[len++] = 'x';
    3362:	2278      	movs	r2, #120	; 0x78
    }
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    3364:	552a      	strb	r2, [r5, r4]
    3366:	3401      	adds	r4, #1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3368:	2c1f      	cmp	r4, #31
    336a:	d86e      	bhi.n	344a <_ntoa_format+0x144>
      buf[len++] = '0';
    336c:	2230      	movs	r2, #48	; 0x30
    336e:	552a      	strb	r2, [r5, r4]
    3370:	3401      	adds	r4, #1
    }
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3372:	42bc      	cmp	r4, r7
    3374:	d106      	bne.n	3384 <_ntoa_format+0x7e>
    3376:	f1bc 0f00 	cmp.w	ip, #0
    337a:	d102      	bne.n	3382 <_ntoa_format+0x7c>
    337c:	f013 0f0c 	tst.w	r3, #12
    3380:	d057      	beq.n	3432 <_ntoa_format+0x12c>
    len--;
    3382:	1e7c      	subs	r4, r7, #1
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3384:	2c1f      	cmp	r4, #31
    3386:	d805      	bhi.n	3394 <_ntoa_format+0x8e>
    if (negative) {
    3388:	f1bc 0f00 	cmp.w	ip, #0
    338c:	d054      	beq.n	3438 <_ntoa_format+0x132>
      buf[len++] = '-';
    338e:	232d      	movs	r3, #45	; 0x2d
    }
    else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    3390:	552b      	strb	r3, [r5, r4]
    3392:	3401      	adds	r4, #1
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    3394:	b3c0      	cbz	r0, 3408 <_ntoa_format+0x102>
    3396:	4425      	add	r5, r4
    3398:	f04f 0800 	mov.w	r8, #0
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    339c:	4544      	cmp	r4, r8
    339e:	eb06 0208 	add.w	r2, r6, r8
    33a2:	d135      	bne.n	3410 <_ntoa_format+0x10a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    33a4:	9b01      	ldr	r3, [sp, #4]
    33a6:	2b00      	cmp	r3, #0
    33a8:	d140      	bne.n	342c <_ntoa_format+0x126>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
    33aa:	4610      	mov	r0, r2
    33ac:	b003      	add	sp, #12
    33ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    buf[len++] = '0';
    33b2:	f805 e004 	strb.w	lr, [r5, r4]
    33b6:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    33b8:	42a1      	cmp	r1, r4
    33ba:	d9b8      	bls.n	332e <_ntoa_format+0x28>
    33bc:	2c20      	cmp	r4, #32
    33be:	d1f8      	bne.n	33b2 <_ntoa_format+0xac>
    33c0:	e7b5      	b.n	332e <_ntoa_format+0x28>
    buf[len++] = '0';
    33c2:	f805 e004 	strb.w	lr, [r5, r4]
    33c6:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    33c8:	42a7      	cmp	r7, r4
    33ca:	d9b6      	bls.n	333a <_ntoa_format+0x34>
    33cc:	2c20      	cmp	r4, #32
    33ce:	d1f8      	bne.n	33c2 <_ntoa_format+0xbc>
    33d0:	e7b3      	b.n	333a <_ntoa_format+0x34>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    33d2:	2a10      	cmp	r2, #16
    33d4:	d0c1      	beq.n	335a <_ntoa_format+0x54>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    33d6:	2c1f      	cmp	r4, #31
    33d8:	d8dc      	bhi.n	3394 <_ntoa_format+0x8e>
    33da:	e7c7      	b.n	336c <_ntoa_format+0x66>
    33dc:	460c      	mov	r4, r1
    33de:	e7bc      	b.n	335a <_ntoa_format+0x54>
      buf[len++] = 'X';
    33e0:	2258      	movs	r2, #88	; 0x58
    33e2:	e7bf      	b.n	3364 <_ntoa_format+0x5e>
      len--;
    33e4:	460c      	mov	r4, r1
    33e6:	e7c1      	b.n	336c <_ntoa_format+0x66>
    else if (flags & FLAGS_SPACE) {
    33e8:	071b      	lsls	r3, r3, #28
    33ea:	d5d3      	bpl.n	3394 <_ntoa_format+0x8e>
      buf[len++] = ' ';
    33ec:	2320      	movs	r3, #32
    33ee:	e7cf      	b.n	3390 <_ntoa_format+0x8a>
      out(' ', buffer, idx++, maxlen);
    33f0:	1c56      	adds	r6, r2, #1
    33f2:	465b      	mov	r3, fp
    33f4:	4651      	mov	r1, sl
    33f6:	2020      	movs	r0, #32
    33f8:	47c8      	blx	r9
    33fa:	4632      	mov	r2, r6
    for (size_t i = len; i < width; i++) {
    33fc:	eb08 0302 	add.w	r3, r8, r2
    3400:	429f      	cmp	r7, r3
    3402:	d8f5      	bhi.n	33f0 <_ntoa_format+0xea>
    3404:	4616      	mov	r6, r2
    3406:	e7c6      	b.n	3396 <_ntoa_format+0x90>
    3408:	4632      	mov	r2, r6
    340a:	eba4 0806 	sub.w	r8, r4, r6
    340e:	e7f5      	b.n	33fc <_ntoa_format+0xf6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3410:	465b      	mov	r3, fp
    3412:	4651      	mov	r1, sl
    3414:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
    3418:	47c8      	blx	r9
  for (size_t i = 0U; i < len; i++) {
    341a:	f108 0801 	add.w	r8, r8, #1
    341e:	e7bd      	b.n	339c <_ntoa_format+0x96>
      out(' ', buffer, idx++, maxlen);
    3420:	1c54      	adds	r4, r2, #1
    3422:	465b      	mov	r3, fp
    3424:	4651      	mov	r1, sl
    3426:	2020      	movs	r0, #32
    3428:	47c8      	blx	r9
    342a:	4622      	mov	r2, r4
    while (idx < width) {
    342c:	42ba      	cmp	r2, r7
    342e:	d3f7      	bcc.n	3420 <_ntoa_format+0x11a>
    3430:	e7bb      	b.n	33aa <_ntoa_format+0xa4>
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3432:	2f1f      	cmp	r7, #31
    3434:	463c      	mov	r4, r7
    3436:	d8ad      	bhi.n	3394 <_ntoa_format+0x8e>
    else if (flags & FLAGS_PLUS) {
    3438:	075a      	lsls	r2, r3, #29
    343a:	d5d5      	bpl.n	33e8 <_ntoa_format+0xe2>
      buf[len++] = '+';  // ignore the space if the '+' exists
    343c:	232b      	movs	r3, #43	; 0x2b
    343e:	e7a7      	b.n	3390 <_ntoa_format+0x8a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3440:	2a10      	cmp	r2, #16
    3442:	d193      	bne.n	336c <_ntoa_format+0x66>
    3444:	e789      	b.n	335a <_ntoa_format+0x54>
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3446:	2c1f      	cmp	r4, #31
    3448:	d9ca      	bls.n	33e0 <_ntoa_format+0xda>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    344a:	42bc      	cmp	r4, r7
    344c:	d093      	beq.n	3376 <_ntoa_format+0x70>
    344e:	e7a1      	b.n	3394 <_ntoa_format+0x8e>

00003450 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3454:	b091      	sub	sp, #68	; 0x44
    3456:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
    345a:	9d18      	ldr	r5, [sp, #96]	; 0x60
    345c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    345e:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    3462:	d000      	beq.n	3466 <_ntoa_long+0x16>
    3464:	b3a5      	cbz	r5, 34d0 <_ntoa_long+0x80>
    3466:	f01c 0f20 	tst.w	ip, #32
    346a:	f10d 0e20 	add.w	lr, sp, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    346e:	f04f 0600 	mov.w	r6, #0
    3472:	bf14      	ite	ne
    3474:	f04f 0837 	movne.w	r8, #55	; 0x37
    3478:	f04f 0857 	moveq.w	r8, #87	; 0x57
      const char digit = (char)(value % base);
    347c:	fbb5 f9f7 	udiv	r9, r5, r7
    3480:	fb07 5919 	mls	r9, r7, r9, r5
    3484:	fa5f f489 	uxtb.w	r4, r9
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3488:	f1b9 0f09 	cmp.w	r9, #9
    348c:	bf94      	ite	ls
    348e:	3430      	addls	r4, #48	; 0x30
    3490:	4444      	addhi	r4, r8
    3492:	b2e4      	uxtb	r4, r4
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3494:	42bd      	cmp	r5, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3496:	f80e 4b01 	strb.w	r4, [lr], #1
      value /= base;
    349a:	fbb5 f4f7 	udiv	r4, r5, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    349e:	f106 0601 	add.w	r6, r6, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    34a2:	d301      	bcc.n	34a8 <_ntoa_long+0x58>
    34a4:	2e20      	cmp	r6, #32
    34a6:	d111      	bne.n	34cc <_ntoa_long+0x7c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    34a8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    34aa:	9405      	str	r4, [sp, #20]
    34ac:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    34ae:	f8cd c018 	str.w	ip, [sp, #24]
    34b2:	e9cd 7403 	strd	r7, r4, [sp, #12]
    34b6:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
    34ba:	e9cd 6401 	strd	r6, r4, [sp, #4]
    34be:	ac08      	add	r4, sp, #32
    34c0:	9400      	str	r4, [sp, #0]
    34c2:	f7ff ff20 	bl	3306 <_ntoa_format>
}
    34c6:	b011      	add	sp, #68	; 0x44
    34c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      value /= base;
    34cc:	4625      	mov	r5, r4
    34ce:	e7d5      	b.n	347c <_ntoa_long+0x2c>
  size_t len = 0U;
    34d0:	462e      	mov	r6, r5
    34d2:	e7e9      	b.n	34a8 <_ntoa_long+0x58>

000034d4 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    34d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34d8:	b093      	sub	sp, #76	; 0x4c
    34da:	4691      	mov	r9, r2
    34dc:	9d24      	ldr	r5, [sp, #144]	; 0x90
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    34de:	056a      	lsls	r2, r5, #21
{
    34e0:	4607      	mov	r7, r0
    34e2:	4688      	mov	r8, r1
    34e4:	469a      	mov	sl, r3
  if (!(flags & FLAGS_PRECISION) || value) {
    34e6:	d503      	bpl.n	34f0 <_ntoa_long_long+0x1c>
    34e8:	e9dd 341c 	ldrd	r3, r4, [sp, #112]	; 0x70
    34ec:	4323      	orrs	r3, r4
    34ee:	d03b      	beq.n	3568 <_ntoa_long_long+0x94>
    34f0:	f015 0f20 	tst.w	r5, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    34f4:	bf14      	ite	ne
    34f6:	2337      	movne	r3, #55	; 0x37
    34f8:	2357      	moveq	r3, #87	; 0x57
    34fa:	ae0a      	add	r6, sp, #40	; 0x28
    34fc:	2400      	movs	r4, #0
    34fe:	9309      	str	r3, [sp, #36]	; 0x24
      const char digit = (char)(value % base);
    3500:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    3504:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3508:	f7fd fac0 	bl	a8c <__aeabi_uldivmod>
    350c:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    350e:	2a09      	cmp	r2, #9
    3510:	bf8a      	itet	hi
    3512:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
    3514:	3230      	addls	r2, #48	; 0x30
    3516:	18d2      	addhi	r2, r2, r3
    3518:	b2d2      	uxtb	r2, r2
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    351a:	e9dd bc20 	ldrd	fp, ip, [sp, #128]	; 0x80
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    351e:	f806 2b01 	strb.w	r2, [r6], #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3522:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3526:	4563      	cmp	r3, ip
    3528:	bf08      	it	eq
    352a:	455a      	cmpeq	r2, fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    352c:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3530:	d301      	bcc.n	3536 <_ntoa_long_long+0x62>
    3532:	2c20      	cmp	r4, #32
    3534:	d115      	bne.n	3562 <_ntoa_long_long+0x8e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3536:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3538:	9305      	str	r3, [sp, #20]
    353a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    353c:	9304      	str	r3, [sp, #16]
    353e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3540:	9303      	str	r3, [sp, #12]
    3542:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
    3546:	9506      	str	r5, [sp, #24]
    3548:	e9cd 4301 	strd	r4, r3, [sp, #4]
    354c:	ab0a      	add	r3, sp, #40	; 0x28
    354e:	9300      	str	r3, [sp, #0]
    3550:	464a      	mov	r2, r9
    3552:	4653      	mov	r3, sl
    3554:	4641      	mov	r1, r8
    3556:	4638      	mov	r0, r7
    3558:	f7ff fed5 	bl	3306 <_ntoa_format>
}
    355c:	b013      	add	sp, #76	; 0x4c
    355e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      value /= base;
    3562:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3566:	e7cb      	b.n	3500 <_ntoa_long_long+0x2c>
  size_t len = 0U;
    3568:	2400      	movs	r4, #0
    356a:	e7e4      	b.n	3536 <_ntoa_long_long+0x62>

0000356c <_out_char>:
  if (character) {
    356c:	b108      	cbz	r0, 3572 <_out_char+0x6>
    _putchar(character);
    356e:	f7fe b844 	b.w	15fa <_putchar>
}
    3572:	4770      	bx	lr
    3574:	0000      	movs	r0, r0
	...

00003578 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    3578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    357c:	b09f      	sub	sp, #124	; 0x7c
    357e:	469a      	mov	sl, r3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
    3580:	1e0b      	subs	r3, r1, #0
    3582:	930c      	str	r3, [sp, #48]	; 0x30
    3584:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
    3588:	4bb5      	ldr	r3, [pc, #724]	; (3860 <_vsnprintf+0x2e8>)
    358a:	bf18      	it	ne
    358c:	4603      	movne	r3, r0
{
    358e:	4691      	mov	r9, r2
    out = _out_null;
    3590:	930b      	str	r3, [sp, #44]	; 0x2c
    return 0U;
    3592:	2400      	movs	r4, #0
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
        format++;
        break;
    3594:	e34a      	b.n	3c2c <_vsnprintf+0x6b4>
    if (*format != '%') {
    3596:	2825      	cmp	r0, #37	; 0x25
    3598:	f10a 0a01 	add.w	sl, sl, #1
    359c:	d007      	beq.n	35ae <_vsnprintf+0x36>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    359e:	1c65      	adds	r5, r4, #1
    35a0:	4622      	mov	r2, r4
    35a2:	464b      	mov	r3, r9
    35a4:	e9dd 410b 	ldrd	r4, r1, [sp, #44]	; 0x2c
    35a8:	47a0      	blx	r4
    35aa:	462c      	mov	r4, r5
        format++;
        break;
    35ac:	e33e      	b.n	3c2c <_vsnprintf+0x6b4>
    flags = 0U;
    35ae:	2500      	movs	r5, #0
    35b0:	e006      	b.n	35c0 <_vsnprintf+0x48>
      switch (*format) {
    35b2:	2b2d      	cmp	r3, #45	; 0x2d
    35b4:	d016      	beq.n	35e4 <_vsnprintf+0x6c>
    35b6:	2b30      	cmp	r3, #48	; 0x30
    35b8:	d10c      	bne.n	35d4 <_vsnprintf+0x5c>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    35ba:	f045 0501 	orr.w	r5, r5, #1
{
    35be:	4692      	mov	sl, r2
      switch (*format) {
    35c0:	4652      	mov	r2, sl
    35c2:	f812 3b01 	ldrb.w	r3, [r2], #1
    35c6:	2b2b      	cmp	r3, #43	; 0x2b
    35c8:	d00f      	beq.n	35ea <_vsnprintf+0x72>
    35ca:	d8f2      	bhi.n	35b2 <_vsnprintf+0x3a>
    35cc:	2b20      	cmp	r3, #32
    35ce:	d00f      	beq.n	35f0 <_vsnprintf+0x78>
    35d0:	2b23      	cmp	r3, #35	; 0x23
    35d2:	d010      	beq.n	35f6 <_vsnprintf+0x7e>
    if (_is_digit(*format)) {
    35d4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    35d8:	2909      	cmp	r1, #9
    35da:	d82e      	bhi.n	363a <_vsnprintf+0xc2>
  unsigned int i = 0U;
    35dc:	2300      	movs	r3, #0
    35de:	930d      	str	r3, [sp, #52]	; 0x34
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    35e0:	200a      	movs	r0, #10
    35e2:	e011      	b.n	3608 <_vsnprintf+0x90>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    35e4:	f045 0502 	orr.w	r5, r5, #2
    35e8:	e7e9      	b.n	35be <_vsnprintf+0x46>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    35ea:	f045 0504 	orr.w	r5, r5, #4
    35ee:	e7e6      	b.n	35be <_vsnprintf+0x46>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    35f0:	f045 0508 	orr.w	r5, r5, #8
    35f4:	e7e3      	b.n	35be <_vsnprintf+0x46>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    35f6:	f045 0510 	orr.w	r5, r5, #16
    35fa:	e7e0      	b.n	35be <_vsnprintf+0x46>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    35fc:	990d      	ldr	r1, [sp, #52]	; 0x34
    35fe:	fb00 3301 	mla	r3, r0, r1, r3
    3602:	3b30      	subs	r3, #48	; 0x30
    3604:	930d      	str	r3, [sp, #52]	; 0x34
    3606:	4692      	mov	sl, r2
  while (_is_digit(**str)) {
    3608:	4652      	mov	r2, sl
    360a:	f812 3b01 	ldrb.w	r3, [r2], #1
    360e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    3612:	2909      	cmp	r1, #9
    3614:	d9f2      	bls.n	35fc <_vsnprintf+0x84>
    if (*format == '.') {
    3616:	f89a 3000 	ldrb.w	r3, [sl]
    361a:	2b2e      	cmp	r3, #46	; 0x2e
    361c:	d148      	bne.n	36b0 <_vsnprintf+0x138>
      if (_is_digit(*format)) {
    361e:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3622:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    3626:	2909      	cmp	r1, #9
    3628:	f10a 0301 	add.w	r3, sl, #1
      flags |= FLAGS_PRECISION;
    362c:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      if (_is_digit(*format)) {
    3630:	d836      	bhi.n	36a0 <_vsnprintf+0x128>
      format++;
    3632:	469a      	mov	sl, r3
  unsigned int i = 0U;
    3634:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3636:	210a      	movs	r1, #10
    3638:	e013      	b.n	3662 <_vsnprintf+0xea>
    else if (*format == '*') {
    363a:	2b2a      	cmp	r3, #42	; 0x2a
    363c:	d109      	bne.n	3652 <_vsnprintf+0xda>
      const int w = va_arg(va, int);
    363e:	f85b 3b04 	ldr.w	r3, [fp], #4
      if (w < 0) {
    3642:	2b00      	cmp	r3, #0
        width = (unsigned int)-w;
    3644:	bfbc      	itt	lt
    3646:	425b      	neglt	r3, r3
        flags |= FLAGS_LEFT;    // reverse padding
    3648:	f045 0502 	orrlt.w	r5, r5, #2
        width = (unsigned int)w;
    364c:	930d      	str	r3, [sp, #52]	; 0x34
      const int w = va_arg(va, int);
    364e:	4692      	mov	sl, r2
    3650:	e7e1      	b.n	3616 <_vsnprintf+0x9e>
    width = 0U;
    3652:	2300      	movs	r3, #0
    3654:	930d      	str	r3, [sp, #52]	; 0x34
    3656:	e7de      	b.n	3616 <_vsnprintf+0x9e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3658:	fb01 0206 	mla	r2, r1, r6, r0
    365c:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
    3660:	469a      	mov	sl, r3
  while (_is_digit(**str)) {
    3662:	4653      	mov	r3, sl
    3664:	f813 0b01 	ldrb.w	r0, [r3], #1
    3668:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    366c:	2a09      	cmp	r2, #9
    366e:	d9f3      	bls.n	3658 <_vsnprintf+0xe0>
    switch (*format) {
    3670:	4653      	mov	r3, sl
    3672:	f813 2b01 	ldrb.w	r2, [r3], #1
    3676:	2a6c      	cmp	r2, #108	; 0x6c
    3678:	d023      	beq.n	36c2 <_vsnprintf+0x14a>
    367a:	d81b      	bhi.n	36b4 <_vsnprintf+0x13c>
    367c:	2a68      	cmp	r2, #104	; 0x68
    367e:	d029      	beq.n	36d4 <_vsnprintf+0x15c>
    3680:	2a6a      	cmp	r2, #106	; 0x6a
    3682:	d031      	beq.n	36e8 <_vsnprintf+0x170>
    3684:	4653      	mov	r3, sl
    switch (*format) {
    3686:	469a      	mov	sl, r3
    3688:	f81a 0b01 	ldrb.w	r0, [sl], #1
    368c:	2866      	cmp	r0, #102	; 0x66
    368e:	d036      	beq.n	36fe <_vsnprintf+0x186>
    3690:	f200 80c4 	bhi.w	381c <_vsnprintf+0x2a4>
    3694:	2858      	cmp	r0, #88	; 0x58
    3696:	d12a      	bne.n	36ee <_vsnprintf+0x176>
          flags |= FLAGS_UPPERCASE;
    3698:	f045 0520 	orr.w	r5, r5, #32
          base = 16U;
    369c:	2310      	movs	r3, #16
    369e:	e0c7      	b.n	3830 <_vsnprintf+0x2b8>
      else if (*format == '*') {
    36a0:	2a2a      	cmp	r2, #42	; 0x2a
    36a2:	d104      	bne.n	36ae <_vsnprintf+0x136>
        precision = (unsigned int)va_arg(va, int);
    36a4:	f85b 6b04 	ldr.w	r6, [fp], #4
        format++;
    36a8:	f10a 0a02 	add.w	sl, sl, #2
    36ac:	e7e0      	b.n	3670 <_vsnprintf+0xf8>
      format++;
    36ae:	469a      	mov	sl, r3
    precision = 0U;
    36b0:	2600      	movs	r6, #0
    36b2:	e7dd      	b.n	3670 <_vsnprintf+0xf8>
    switch (*format) {
    36b4:	2a74      	cmp	r2, #116	; 0x74
    36b6:	d001      	beq.n	36bc <_vsnprintf+0x144>
    36b8:	2a7a      	cmp	r2, #122	; 0x7a
    36ba:	d1e3      	bne.n	3684 <_vsnprintf+0x10c>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    36bc:	f445 7580 	orr.w	r5, r5, #256	; 0x100
        break;
    36c0:	e7e1      	b.n	3686 <_vsnprintf+0x10e>
        if (*format == 'l') {
    36c2:	f89a 2001 	ldrb.w	r2, [sl, #1]
    36c6:	2a6c      	cmp	r2, #108	; 0x6c
    36c8:	d1f8      	bne.n	36bc <_vsnprintf+0x144>
          flags |= FLAGS_LONG_LONG;
    36ca:	f445 7540 	orr.w	r5, r5, #768	; 0x300
          format++;
    36ce:	f10a 0302 	add.w	r3, sl, #2
    36d2:	e7d8      	b.n	3686 <_vsnprintf+0x10e>
        if (*format == 'h') {
    36d4:	f89a 2001 	ldrb.w	r2, [sl, #1]
    36d8:	2a68      	cmp	r2, #104	; 0x68
    36da:	d002      	beq.n	36e2 <_vsnprintf+0x16a>
        flags |= FLAGS_SHORT;
    36dc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    36e0:	e7d1      	b.n	3686 <_vsnprintf+0x10e>
          flags |= FLAGS_CHAR;
    36e2:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
    36e6:	e7f2      	b.n	36ce <_vsnprintf+0x156>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    36e8:	f445 7500 	orr.w	r5, r5, #512	; 0x200
        break;
    36ec:	e7cb      	b.n	3686 <_vsnprintf+0x10e>
    switch (*format) {
    36ee:	f200 8086 	bhi.w	37fe <_vsnprintf+0x286>
    36f2:	2825      	cmp	r0, #37	; 0x25
    36f4:	f43f af53 	beq.w	359e <_vsnprintf+0x26>
    36f8:	2846      	cmp	r0, #70	; 0x46
    36fa:	f47f af50 	bne.w	359e <_vsnprintf+0x26>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    36fe:	f10b 0b07 	add.w	fp, fp, #7
    3702:	f02b 0b07 	bic.w	fp, fp, #7
    3706:	ecbb 7b02 	vldmia	fp!, {d7}
  if (value < 0) {
    370a:	2200      	movs	r2, #0
    370c:	2300      	movs	r3, #0
    370e:	ec51 0b17 	vmov	r0, r1, d7
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3712:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  if (value < 0) {
    3716:	f7fd f949 	bl	9ac <__aeabi_dcmplt>
    371a:	2800      	cmp	r0, #0
    371c:	f000 810b 	beq.w	3936 <_vsnprintf+0x3be>
    value = 0 - value;
    3720:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3724:	2000      	movs	r0, #0
    3726:	2100      	movs	r1, #0
    3728:	f7fc fd16 	bl	158 <__aeabi_dsub>
    372c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    negative = true;
    3730:	2301      	movs	r3, #1
    3732:	9311      	str	r3, [sp, #68]	; 0x44
  if (!(flags & FLAGS_PRECISION)) {
    3734:	056a      	lsls	r2, r5, #21
    3736:	f140 8100 	bpl.w	393a <_vsnprintf+0x3c2>
  if (prec > 9U) {
    373a:	2e09      	cmp	r6, #9
    373c:	bf28      	it	cs
    373e:	2609      	movcs	r6, #9
    3740:	9610      	str	r6, [sp, #64]	; 0x40
  int whole = (int)value;
    3742:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3746:	f7fd f959 	bl	9fc <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
    374a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    374c:	4b45      	ldr	r3, [pc, #276]	; (3864 <_vsnprintf+0x2ec>)
    374e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3752:	ed93 7b00 	vldr	d7, [r3]
  int whole = (int)value;
    3756:	4606      	mov	r6, r0
  double tmp = (value - whole) * pow10[prec];
    3758:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
    375c:	f7fc fe4a 	bl	3f4 <__aeabi_i2d>
    3760:	4602      	mov	r2, r0
    3762:	460b      	mov	r3, r1
    3764:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3768:	f7fc fcf6 	bl	158 <__aeabi_dsub>
    376c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    3770:	f7fc feaa 	bl	4c8 <__aeabi_dmul>
    3774:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  unsigned long frac = (unsigned long)tmp;
    3778:	f7fd f968 	bl	a4c <__aeabi_d2uiz>
    377c:	4607      	mov	r7, r0
  diff = tmp - frac;
    377e:	f7fc fe29 	bl	3d4 <__aeabi_ui2d>
    3782:	4602      	mov	r2, r0
    3784:	460b      	mov	r3, r1
    3786:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    378a:	f7fc fce5 	bl	158 <__aeabi_dsub>
  if (diff > 0.5) {
    378e:	2200      	movs	r2, #0
    3790:	4b35      	ldr	r3, [pc, #212]	; (3868 <_vsnprintf+0x2f0>)
  diff = tmp - frac;
    3792:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  if (diff > 0.5) {
    3796:	f7fd f927 	bl	9e8 <__aeabi_dcmpgt>
    379a:	2800      	cmp	r0, #0
    379c:	f000 80d0 	beq.w	3940 <_vsnprintf+0x3c8>
    ++frac;
    37a0:	3701      	adds	r7, #1
    if (frac >= pow10[prec]) {
    37a2:	4638      	mov	r0, r7
    37a4:	f7fc fe16 	bl	3d4 <__aeabi_ui2d>
    37a8:	4602      	mov	r2, r0
    37aa:	460b      	mov	r3, r1
    37ac:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    37b0:	f7fd f906 	bl	9c0 <__aeabi_dcmple>
    37b4:	b108      	cbz	r0, 37ba <_vsnprintf+0x242>
      ++whole;
    37b6:	3601      	adds	r6, #1
      frac = 0;
    37b8:	2700      	movs	r7, #0
  if (value > thres_max) {
    37ba:	a327      	add	r3, pc, #156	; (adr r3, 3858 <_vsnprintf+0x2e0>)
    37bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    37c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    37c4:	f7fd f910 	bl	9e8 <__aeabi_dcmpgt>
    37c8:	2800      	cmp	r0, #0
    37ca:	f47f aee2 	bne.w	3592 <_vsnprintf+0x1a>
  if (prec == 0U) {
    37ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    37d0:	2b00      	cmp	r3, #0
    37d2:	f040 80d4 	bne.w	397e <_vsnprintf+0x406>
    diff = value - (double)whole;
    37d6:	4630      	mov	r0, r6
    37d8:	f7fc fe0c 	bl	3f4 <__aeabi_i2d>
    37dc:	4602      	mov	r2, r0
    37de:	460b      	mov	r3, r1
    37e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    37e4:	f7fc fcb8 	bl	158 <__aeabi_dsub>
    if (diff > 0.5) {
    37e8:	2200      	movs	r2, #0
    37ea:	4b1f      	ldr	r3, [pc, #124]	; (3868 <_vsnprintf+0x2f0>)
    diff = value - (double)whole;
    37ec:	4607      	mov	r7, r0
    37ee:	4688      	mov	r8, r1
    if (diff > 0.5) {
    37f0:	f7fd f8fa 	bl	9e8 <__aeabi_dcmpgt>
    37f4:	2800      	cmp	r0, #0
    37f6:	f000 80b2 	beq.w	395e <_vsnprintf+0x3e6>
      ++whole;
    37fa:	3601      	adds	r6, #1
    37fc:	e0b9      	b.n	3972 <_vsnprintf+0x3fa>
    switch (*format) {
    37fe:	2863      	cmp	r0, #99	; 0x63
    3800:	f000 8160 	beq.w	3ac4 <_vsnprintf+0x54c>
    3804:	2864      	cmp	r0, #100	; 0x64
    3806:	d002      	beq.n	380e <_vsnprintf+0x296>
    3808:	2862      	cmp	r0, #98	; 0x62
    380a:	f47f aec8 	bne.w	359e <_vsnprintf+0x26>
        else if (*format == 'b') {
    380e:	2862      	cmp	r0, #98	; 0x62
    3810:	f025 0510 	bic.w	r5, r5, #16
    3814:	f040 81da 	bne.w	3bcc <_vsnprintf+0x654>
          base =  2U;
    3818:	2302      	movs	r3, #2
        if ((*format != 'i') && (*format != 'd')) {
    381a:	e009      	b.n	3830 <_vsnprintf+0x2b8>
    switch (*format) {
    381c:	2870      	cmp	r0, #112	; 0x70
    381e:	f000 81b2 	beq.w	3b86 <_vsnprintf+0x60e>
    3822:	d823      	bhi.n	386c <_vsnprintf+0x2f4>
    3824:	2869      	cmp	r0, #105	; 0x69
    3826:	d0f2      	beq.n	380e <_vsnprintf+0x296>
    3828:	286f      	cmp	r0, #111	; 0x6f
    382a:	f47f aeb8 	bne.w	359e <_vsnprintf+0x26>
          base =  8U;
    382e:	2308      	movs	r3, #8
          if (flags & FLAGS_LONG_LONG) {
    3830:	f415 7200 	ands.w	r2, r5, #512	; 0x200
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3834:	f025 010c 	bic.w	r1, r5, #12
          if (flags & FLAGS_LONG_LONG) {
    3838:	d05d      	beq.n	38f6 <_vsnprintf+0x37e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    383a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    383c:	9108      	str	r1, [sp, #32]
    383e:	e9cd 6206 	strd	r6, r2, [sp, #24]
    3842:	2200      	movs	r2, #0
    3844:	e9cd 3204 	strd	r3, r2, [sp, #16]
    3848:	f10b 0b07 	add.w	fp, fp, #7
    384c:	f02b 0707 	bic.w	r7, fp, #7
    3850:	9202      	str	r2, [sp, #8]
    3852:	e8f7 2302 	ldrd	r2, r3, [r7], #8
    3856:	e1df      	b.n	3c18 <_vsnprintf+0x6a0>
    3858:	ffc00000 	.word	0xffc00000
    385c:	41dfffff 	.word	0x41dfffff
    3860:	00003305 	.word	0x00003305
    3864:	00004d60 	.word	0x00004d60
    3868:	3fe00000 	.word	0x3fe00000
    switch (*format) {
    386c:	2875      	cmp	r0, #117	; 0x75
    386e:	d0ce      	beq.n	380e <_vsnprintf+0x296>
    3870:	2878      	cmp	r0, #120	; 0x78
    3872:	f43f af13 	beq.w	369c <_vsnprintf+0x124>
    3876:	2873      	cmp	r0, #115	; 0x73
    3878:	f47f ae91 	bne.w	359e <_vsnprintf+0x26>
        char* p = va_arg(va, char*);
    387c:	f85b 7b04 	ldr.w	r7, [fp], #4
    3880:	463b      	mov	r3, r7
    3882:	4698      	mov	r8, r3
    3884:	3301      	adds	r3, #1
  for (s = str; *s; ++s);
    3886:	f898 2000 	ldrb.w	r2, [r8]
    388a:	2a00      	cmp	r2, #0
    388c:	d1f9      	bne.n	3882 <_vsnprintf+0x30a>
        if (flags & FLAGS_PRECISION) {
    388e:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
  return (unsigned int)(s - str);
    3892:	eba8 0807 	sub.w	r8, r8, r7
        if (flags & FLAGS_PRECISION) {
    3896:	9310      	str	r3, [sp, #64]	; 0x40
    3898:	d002      	beq.n	38a0 <_vsnprintf+0x328>
          l = (l < precision ? l : precision);
    389a:	45b0      	cmp	r8, r6
    389c:	bf28      	it	cs
    389e:	46b0      	movcs	r8, r6
        if (!(flags & FLAGS_LEFT)) {
    38a0:	f015 0302 	ands.w	r3, r5, #2
    38a4:	930e      	str	r3, [sp, #56]	; 0x38
    38a6:	f000 8147 	beq.w	3b38 <_vsnprintf+0x5c0>
    38aa:	4622      	mov	r2, r4
    38ac:	1bd4      	subs	r4, r2, r7
    38ae:	e14b      	b.n	3b48 <_vsnprintf+0x5d0>
          else if (flags & FLAGS_LONG) {
    38b0:	05e8      	lsls	r0, r5, #23
    38b2:	f10b 0704 	add.w	r7, fp, #4
    38b6:	d513      	bpl.n	38e0 <_vsnprintf+0x368>
            const long value = va_arg(va, long);
    38b8:	f8db 3000 	ldr.w	r3, [fp]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    38bc:	990d      	ldr	r1, [sp, #52]	; 0x34
    38be:	9202      	str	r2, [sp, #8]
    38c0:	e9cd 6103 	strd	r6, r1, [sp, #12]
    38c4:	0fda      	lsrs	r2, r3, #31
    38c6:	2b00      	cmp	r3, #0
    38c8:	9505      	str	r5, [sp, #20]
    38ca:	9201      	str	r2, [sp, #4]
    38cc:	bfb8      	it	lt
    38ce:	425b      	neglt	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    38d0:	9300      	str	r3, [sp, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    38d2:	464b      	mov	r3, r9
    38d4:	4622      	mov	r2, r4
    38d6:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    38da:	f7ff fdb9 	bl	3450 <_ntoa_long>
    38de:	e1a3      	b.n	3c28 <_vsnprintf+0x6b0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    38e0:	f015 0f40 	tst.w	r5, #64	; 0x40
    38e4:	f8db 3000 	ldr.w	r3, [fp]
    38e8:	d001      	beq.n	38ee <_vsnprintf+0x376>
    38ea:	b2db      	uxtb	r3, r3
    38ec:	e7e6      	b.n	38bc <_vsnprintf+0x344>
    38ee:	0629      	lsls	r1, r5, #24
    38f0:	bf48      	it	mi
    38f2:	b21b      	sxthmi	r3, r3
    38f4:	e7e2      	b.n	38bc <_vsnprintf+0x344>
          else if (flags & FLAGS_LONG) {
    38f6:	05e8      	lsls	r0, r5, #23
    38f8:	f10b 0704 	add.w	r7, fp, #4
    38fc:	d508      	bpl.n	3910 <_vsnprintf+0x398>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    38fe:	9105      	str	r1, [sp, #20]
    3900:	990d      	ldr	r1, [sp, #52]	; 0x34
    3902:	e9cd 2301 	strd	r2, r3, [sp, #4]
    3906:	e9cd 6103 	strd	r6, r1, [sp, #12]
    390a:	f8db 3000 	ldr.w	r3, [fp]
    390e:	e7df      	b.n	38d0 <_vsnprintf+0x358>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3910:	f015 0f40 	tst.w	r5, #64	; 0x40
    3914:	f8db 2000 	ldr.w	r2, [fp]
    3918:	d009      	beq.n	392e <_vsnprintf+0x3b6>
    391a:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    391c:	9105      	str	r1, [sp, #20]
    391e:	990d      	ldr	r1, [sp, #52]	; 0x34
    3920:	9302      	str	r3, [sp, #8]
    3922:	2300      	movs	r3, #0
    3924:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3928:	e9cd 2300 	strd	r2, r3, [sp]
    392c:	e7d1      	b.n	38d2 <_vsnprintf+0x35a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    392e:	0628      	lsls	r0, r5, #24
    3930:	bf48      	it	mi
    3932:	b292      	uxthmi	r2, r2
    3934:	e7f2      	b.n	391c <_vsnprintf+0x3a4>
  bool negative = false;
    3936:	9011      	str	r0, [sp, #68]	; 0x44
    3938:	e6fc      	b.n	3734 <_vsnprintf+0x1bc>
    prec = 6U;  // by default, precesion is 6
    393a:	2306      	movs	r3, #6
    393c:	9310      	str	r3, [sp, #64]	; 0x40
    393e:	e700      	b.n	3742 <_vsnprintf+0x1ca>
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    3940:	2200      	movs	r2, #0
    3942:	4ba1      	ldr	r3, [pc, #644]	; (3bc8 <_vsnprintf+0x650>)
    3944:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3948:	f7fd f826 	bl	998 <__aeabi_dcmpeq>
    394c:	2800      	cmp	r0, #0
    394e:	f43f af34 	beq.w	37ba <_vsnprintf+0x242>
    3952:	b117      	cbz	r7, 395a <_vsnprintf+0x3e2>
    3954:	07fb      	lsls	r3, r7, #31
    3956:	f57f af30 	bpl.w	37ba <_vsnprintf+0x242>
    ++frac;
    395a:	3701      	adds	r7, #1
    395c:	e72d      	b.n	37ba <_vsnprintf+0x242>
    else if ((diff == 0.5) && (whole & 1)) {
    395e:	2200      	movs	r2, #0
    3960:	4b99      	ldr	r3, [pc, #612]	; (3bc8 <_vsnprintf+0x650>)
    3962:	4638      	mov	r0, r7
    3964:	4641      	mov	r1, r8
    3966:	f7fd f817 	bl	998 <__aeabi_dcmpeq>
    396a:	b110      	cbz	r0, 3972 <_vsnprintf+0x3fa>
    396c:	07f7      	lsls	r7, r6, #31
    396e:	f53f af44 	bmi.w	37fa <_vsnprintf+0x282>
    3972:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3974:	ab16      	add	r3, sp, #88	; 0x58
    3976:	4413      	add	r3, r2
      buf[len++] = '.';
    3978:	4690      	mov	r8, r2
    buf[len++] = (char)(48 + (whole % 10));
    397a:	220a      	movs	r2, #10
    397c:	e05c      	b.n	3a38 <_vsnprintf+0x4c0>
    397e:	aa16      	add	r2, sp, #88	; 0x58
  if (prec == 0U) {
    3980:	f04f 0801 	mov.w	r8, #1
      buf[len++] = (char)(48U + (frac % 10U));
    3984:	200a      	movs	r0, #10
    3986:	fbb7 f1f0 	udiv	r1, r7, r0
    398a:	fb00 7311 	mls	r3, r0, r1, r7
    398e:	3330      	adds	r3, #48	; 0x30
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3990:	f1b8 0f20 	cmp.w	r8, #32
      buf[len++] = (char)(48U + (frac % 10U));
    3994:	f802 3b01 	strb.w	r3, [r2], #1
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3998:	d01d      	beq.n	39d6 <_vsnprintf+0x45e>
    399a:	2f09      	cmp	r7, #9
    399c:	f108 0301 	add.w	r3, r8, #1
    39a0:	d811      	bhi.n	39c6 <_vsnprintf+0x44e>
    39a2:	4643      	mov	r3, r8
      buf[len++] = '0';
    39a4:	aa16      	add	r2, sp, #88	; 0x58
    39a6:	2130      	movs	r1, #48	; 0x30
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    39a8:	9810      	ldr	r0, [sp, #64]	; 0x40
    39aa:	4283      	cmp	r3, r0
    39ac:	f108 0801 	add.w	r8, r8, #1
    39b0:	d10c      	bne.n	39cc <_vsnprintf+0x454>
      buf[len++] = '.';
    39b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    39b4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    39b8:	aa1e      	add	r2, sp, #120	; 0x78
    39ba:	4413      	add	r3, r2
    39bc:	461a      	mov	r2, r3
    39be:	232e      	movs	r3, #46	; 0x2e
    39c0:	f802 3c20 	strb.w	r3, [r2, #-32]
    39c4:	e7d5      	b.n	3972 <_vsnprintf+0x3fa>
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    39c6:	4698      	mov	r8, r3
    39c8:	460f      	mov	r7, r1
    39ca:	e7dc      	b.n	3986 <_vsnprintf+0x40e>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    39cc:	f1b8 0f1f 	cmp.w	r8, #31
      buf[len++] = '0';
    39d0:	5499      	strb	r1, [r3, r2]
    39d2:	4643      	mov	r3, r8
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    39d4:	d9e8      	bls.n	39a8 <_vsnprintf+0x430>
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    39d6:	f005 0303 	and.w	r3, r5, #3
    39da:	2b01      	cmp	r3, #1
    buf[len++] = '0';
    39dc:	aa16      	add	r2, sp, #88	; 0x58
    39de:	f04f 0130 	mov.w	r1, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    39e2:	d031      	beq.n	3a48 <_vsnprintf+0x4d0>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    39e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    39e6:	4590      	cmp	r8, r2
    39e8:	d107      	bne.n	39fa <_vsnprintf+0x482>
    39ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
    39ec:	b91a      	cbnz	r2, 39f6 <_vsnprintf+0x47e>
    39ee:	f015 0f0c 	tst.w	r5, #12
    39f2:	f000 80dd 	beq.w	3bb0 <_vsnprintf+0x638>
    len--;
    39f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    39fa:	f1b8 0f1f 	cmp.w	r8, #31
    39fe:	d80a      	bhi.n	3a16 <_vsnprintf+0x49e>
    if (negative) {
    3a00:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3a02:	2a00      	cmp	r2, #0
    3a04:	f000 80d8 	beq.w	3bb8 <_vsnprintf+0x640>
      buf[len++] = '-';
    3a08:	aa1e      	add	r2, sp, #120	; 0x78
    3a0a:	4442      	add	r2, r8
    3a0c:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
    3a0e:	f802 1c20 	strb.w	r1, [r2, #-32]
    3a12:	f108 0801 	add.w	r8, r8, #1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    3a16:	b9eb      	cbnz	r3, 3a54 <_vsnprintf+0x4dc>
    3a18:	4622      	mov	r2, r4
    for (size_t i = len; i < width; i++) {
    3a1a:	eba8 0604 	sub.w	r6, r8, r4
    3a1e:	e02b      	b.n	3a78 <_vsnprintf+0x500>
    buf[len++] = (char)(48 + (whole % 10));
    3a20:	fb96 f1f2 	sdiv	r1, r6, r2
    3a24:	fb02 6611 	mls	r6, r2, r1, r6
    3a28:	3630      	adds	r6, #48	; 0x30
    3a2a:	f803 6b01 	strb.w	r6, [r3], #1
    3a2e:	f108 0801 	add.w	r8, r8, #1
    if (!(whole /= 10)) {
    3a32:	460e      	mov	r6, r1
    3a34:	2900      	cmp	r1, #0
    3a36:	d0ce      	beq.n	39d6 <_vsnprintf+0x45e>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3a38:	f1b8 0f20 	cmp.w	r8, #32
    3a3c:	d1f0      	bne.n	3a20 <_vsnprintf+0x4a8>
    3a3e:	e7ca      	b.n	39d6 <_vsnprintf+0x45e>
    buf[len++] = '0';
    3a40:	f808 1002 	strb.w	r1, [r8, r2]
    3a44:	f108 0801 	add.w	r8, r8, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3a48:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a4a:	4580      	cmp	r8, r0
    3a4c:	d2ca      	bcs.n	39e4 <_vsnprintf+0x46c>
    3a4e:	f1b8 0f1f 	cmp.w	r8, #31
    3a52:	d9f5      	bls.n	3a40 <_vsnprintf+0x4c8>
    3a54:	ab16      	add	r3, sp, #88	; 0x58
    3a56:	4443      	add	r3, r8
    3a58:	9310      	str	r3, [sp, #64]	; 0x40
    for (size_t i = len; i < width; i++) {
    3a5a:	2700      	movs	r7, #0
    3a5c:	e019      	b.n	3a92 <_vsnprintf+0x51a>
    else if (flags & FLAGS_SPACE) {
    3a5e:	0728      	lsls	r0, r5, #28
    3a60:	d5d9      	bpl.n	3a16 <_vsnprintf+0x49e>
      buf[len++] = ' ';
    3a62:	aa1e      	add	r2, sp, #120	; 0x78
    3a64:	4442      	add	r2, r8
    3a66:	2120      	movs	r1, #32
    3a68:	e7d1      	b.n	3a0e <_vsnprintf+0x496>
      out(' ', buffer, idx++, maxlen);
    3a6a:	1c57      	adds	r7, r2, #1
    3a6c:	464b      	mov	r3, r9
    3a6e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3a72:	2020      	movs	r0, #32
    3a74:	47a0      	blx	r4
    3a76:	463a      	mov	r2, r7
    for (size_t i = len; i < width; i++) {
    3a78:	990d      	ldr	r1, [sp, #52]	; 0x34
    3a7a:	18b3      	adds	r3, r6, r2
    3a7c:	4299      	cmp	r1, r3
    3a7e:	d8f4      	bhi.n	3a6a <_vsnprintf+0x4f2>
    3a80:	4614      	mov	r4, r2
    3a82:	e7e7      	b.n	3a54 <_vsnprintf+0x4dc>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3a84:	9810      	ldr	r0, [sp, #64]	; 0x40
    3a86:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a88:	7800      	ldrb	r0, [r0, #0]
    3a8a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3a8c:	464b      	mov	r3, r9
    3a8e:	47b0      	blx	r6
  for (size_t i = 0U; i < len; i++) {
    3a90:	3701      	adds	r7, #1
    3a92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3a94:	4547      	cmp	r7, r8
    3a96:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    3a9a:	eb07 0204 	add.w	r2, r7, r4
    3a9e:	9310      	str	r3, [sp, #64]	; 0x40
    3aa0:	d1f0      	bne.n	3a84 <_vsnprintf+0x50c>
  if (flags & FLAGS_LEFT) {
    3aa2:	07a9      	lsls	r1, r5, #30
    3aa4:	4614      	mov	r4, r2
    3aa6:	f140 80c1 	bpl.w	3c2c <_vsnprintf+0x6b4>
    while (idx < width) {
    3aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3aac:	42a3      	cmp	r3, r4
    3aae:	f240 80bd 	bls.w	3c2c <_vsnprintf+0x6b4>
      out(' ', buffer, idx++, maxlen);
    3ab2:	1c65      	adds	r5, r4, #1
    3ab4:	4622      	mov	r2, r4
    3ab6:	464b      	mov	r3, r9
    3ab8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3aba:	990c      	ldr	r1, [sp, #48]	; 0x30
    3abc:	2020      	movs	r0, #32
    3abe:	47a0      	blx	r4
    3ac0:	462c      	mov	r4, r5
    3ac2:	e7f2      	b.n	3aaa <_vsnprintf+0x532>
        if (!(flags & FLAGS_LEFT)) {
    3ac4:	f015 0502 	ands.w	r5, r5, #2
    3ac8:	d026      	beq.n	3b18 <_vsnprintf+0x5a0>
    3aca:	4622      	mov	r2, r4
        unsigned int l = 1U;
    3acc:	2701      	movs	r7, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3ace:	f85b 0b04 	ldr.w	r0, [fp], #4
    3ad2:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ad4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3ad6:	464b      	mov	r3, r9
    3ad8:	b2c0      	uxtb	r0, r0
    3ada:	1c54      	adds	r4, r2, #1
    3adc:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
    3ade:	2d00      	cmp	r5, #0
    3ae0:	f000 80a4 	beq.w	3c2c <_vsnprintf+0x6b4>
          while (l++ < width) {
    3ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3ae6:	42bb      	cmp	r3, r7
    3ae8:	f240 80a0 	bls.w	3c2c <_vsnprintf+0x6b4>
            out(' ', buffer, idx++, maxlen);
    3aec:	1c65      	adds	r5, r4, #1
    3aee:	4622      	mov	r2, r4
    3af0:	464b      	mov	r3, r9
    3af2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3af4:	990c      	ldr	r1, [sp, #48]	; 0x30
    3af6:	2020      	movs	r0, #32
    3af8:	47a0      	blx	r4
    3afa:	3701      	adds	r7, #1
    3afc:	462c      	mov	r4, r5
    3afe:	e7f1      	b.n	3ae4 <_vsnprintf+0x56c>
            out(' ', buffer, idx++, maxlen);
    3b00:	464b      	mov	r3, r9
    3b02:	990c      	ldr	r1, [sp, #48]	; 0x30
    3b04:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3b06:	2020      	movs	r0, #32
    3b08:	47b8      	blx	r7
          while (l++ < width) {
    3b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3b0c:	1932      	adds	r2, r6, r4
    3b0e:	1cb7      	adds	r7, r6, #2
    3b10:	3601      	adds	r6, #1
    3b12:	42b3      	cmp	r3, r6
    3b14:	d8f4      	bhi.n	3b00 <_vsnprintf+0x588>
    3b16:	e7da      	b.n	3ace <_vsnprintf+0x556>
    3b18:	462e      	mov	r6, r5
    3b1a:	e7f6      	b.n	3b0a <_vsnprintf+0x592>
            out(' ', buffer, idx++, maxlen);
    3b1c:	464b      	mov	r3, r9
    3b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3b20:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3b22:	2020      	movs	r0, #32
    3b24:	47a8      	blx	r5
          while (l++ < width) {
    3b26:	4643      	mov	r3, r8
    3b28:	990d      	ldr	r1, [sp, #52]	; 0x34
    3b2a:	4299      	cmp	r1, r3
    3b2c:	eb04 0203 	add.w	r2, r4, r3
    3b30:	f103 0801 	add.w	r8, r3, #1
    3b34:	d8f2      	bhi.n	3b1c <_vsnprintf+0x5a4>
    3b36:	e6b9      	b.n	38ac <_vsnprintf+0x334>
    3b38:	4643      	mov	r3, r8
    3b3a:	1ae4      	subs	r4, r4, r3
    3b3c:	e7f4      	b.n	3b28 <_vsnprintf+0x5b0>
    3b3e:	461e      	mov	r6, r3
          out(*(p++), buffer, idx++, maxlen);
    3b40:	464b      	mov	r3, r9
    3b42:	e9dd 510b 	ldrd	r5, r1, [sp, #44]	; 0x2c
    3b46:	47a8      	blx	r5
    3b48:	19e2      	adds	r2, r4, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3b4a:	f817 0b01 	ldrb.w	r0, [r7], #1
    3b4e:	b128      	cbz	r0, 3b5c <_vsnprintf+0x5e4>
    3b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b52:	2b00      	cmp	r3, #0
    3b54:	d0f4      	beq.n	3b40 <_vsnprintf+0x5c8>
    3b56:	1e73      	subs	r3, r6, #1
    3b58:	2e00      	cmp	r6, #0
    3b5a:	d1f0      	bne.n	3b3e <_vsnprintf+0x5c6>
        if (flags & FLAGS_LEFT) {
    3b5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3b5e:	4614      	mov	r4, r2
    3b60:	2b00      	cmp	r3, #0
    3b62:	d063      	beq.n	3c2c <_vsnprintf+0x6b4>
    3b64:	eba8 0802 	sub.w	r8, r8, r2
    3b68:	e007      	b.n	3b7a <_vsnprintf+0x602>
            out(' ', buffer, idx++, maxlen);
    3b6a:	1c65      	adds	r5, r4, #1
    3b6c:	4622      	mov	r2, r4
    3b6e:	464b      	mov	r3, r9
    3b70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3b72:	990c      	ldr	r1, [sp, #48]	; 0x30
    3b74:	2020      	movs	r0, #32
    3b76:	47a0      	blx	r4
    3b78:	462c      	mov	r4, r5
          while (l++ < width) {
    3b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3b7c:	eb08 0304 	add.w	r3, r8, r4
    3b80:	4293      	cmp	r3, r2
    3b82:	d3f2      	bcc.n	3b6a <_vsnprintf+0x5f2>
    3b84:	e052      	b.n	3c2c <_vsnprintf+0x6b4>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3b86:	2308      	movs	r3, #8
    3b88:	e9cd 6303 	strd	r6, r3, [sp, #12]
    3b8c:	2210      	movs	r2, #16
    3b8e:	2300      	movs	r3, #0
    3b90:	e9cd 3201 	strd	r3, r2, [sp, #4]
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    3b94:	f045 0521 	orr.w	r5, r5, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3b98:	9505      	str	r5, [sp, #20]
    3b9a:	f85b 3b04 	ldr.w	r3, [fp], #4
    3b9e:	9300      	str	r3, [sp, #0]
    3ba0:	4622      	mov	r2, r4
    3ba2:	464b      	mov	r3, r9
    3ba4:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    3ba8:	f7ff fc52 	bl	3450 <_ntoa_long>
    3bac:	4604      	mov	r4, r0
        break;
    3bae:	e03d      	b.n	3c2c <_vsnprintf+0x6b4>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3bb0:	f1b8 0f1f 	cmp.w	r8, #31
    3bb4:	f63f af2f 	bhi.w	3a16 <_vsnprintf+0x49e>
    else if (flags & FLAGS_PLUS) {
    3bb8:	076e      	lsls	r6, r5, #29
    3bba:	f57f af50 	bpl.w	3a5e <_vsnprintf+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3bbe:	aa1e      	add	r2, sp, #120	; 0x78
    3bc0:	4442      	add	r2, r8
    3bc2:	212b      	movs	r1, #43	; 0x2b
    3bc4:	e723      	b.n	3a0e <_vsnprintf+0x496>
    3bc6:	bf00      	nop
    3bc8:	3fe00000 	.word	0x3fe00000
        if ((*format != 'i') && (*format != 'd')) {
    3bcc:	2869      	cmp	r0, #105	; 0x69
    3bce:	f04f 020a 	mov.w	r2, #10
    3bd2:	d003      	beq.n	3bdc <_vsnprintf+0x664>
    3bd4:	2864      	cmp	r0, #100	; 0x64
          base = 10U;
    3bd6:	4613      	mov	r3, r2
        if ((*format != 'i') && (*format != 'd')) {
    3bd8:	f47f ae2a 	bne.w	3830 <_vsnprintf+0x2b8>
          if (flags & FLAGS_LONG_LONG) {
    3bdc:	05af      	lsls	r7, r5, #22
    3bde:	f57f ae67 	bpl.w	38b0 <_vsnprintf+0x338>
            const long long value = va_arg(va, long long);
    3be2:	f10b 0b07 	add.w	fp, fp, #7
    3be6:	f02b 0b07 	bic.w	fp, fp, #7
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            const long long value = va_arg(va, long long);
    3bec:	f8db 1004 	ldr.w	r1, [fp, #4]
    3bf0:	465f      	mov	r7, fp
    3bf2:	f857 0b08 	ldr.w	r0, [r7], #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3bf6:	9204      	str	r2, [sp, #16]
    3bf8:	e9cd 6306 	strd	r6, r3, [sp, #24]
    3bfc:	2300      	movs	r3, #0
    3bfe:	9305      	str	r3, [sp, #20]
    3c00:	0fcb      	lsrs	r3, r1, #31
    3c02:	9302      	str	r3, [sp, #8]
    3c04:	2800      	cmp	r0, #0
    3c06:	460b      	mov	r3, r1
    3c08:	f173 0100 	sbcs.w	r1, r3, #0
    3c0c:	9508      	str	r5, [sp, #32]
    3c0e:	4602      	mov	r2, r0
    3c10:	da02      	bge.n	3c18 <_vsnprintf+0x6a0>
    3c12:	4242      	negs	r2, r0
    3c14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3c18:	e9cd 2300 	strd	r2, r3, [sp]
    3c1c:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    3c20:	464b      	mov	r3, r9
    3c22:	4622      	mov	r2, r4
    3c24:	f7ff fc56 	bl	34d4 <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3c28:	4604      	mov	r4, r0
        break;
    3c2a:	46bb      	mov	fp, r7
  while (*format)
    3c2c:	f89a 0000 	ldrb.w	r0, [sl]
    3c30:	2800      	cmp	r0, #0
    3c32:	f47f acb0 	bne.w	3596 <_vsnprintf+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    3c36:	454c      	cmp	r4, r9
    3c38:	bf2c      	ite	cs
    3c3a:	f109 32ff 	addcs.w	r2, r9, #4294967295	; 0xffffffff
    3c3e:	4622      	movcc	r2, r4
    3c40:	464b      	mov	r3, r9
    3c42:	990c      	ldr	r1, [sp, #48]	; 0x30
    3c44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3c46:	2000      	movs	r0, #0
    3c48:	47a8      	blx	r5

  // return written chars without terminating \0
  return (int)idx;
}
    3c4a:	4620      	mov	r0, r4
    3c4c:	b01f      	add	sp, #124	; 0x7c
    3c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c52:	bf00      	nop

00003c54 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    3c54:	b40f      	push	{r0, r1, r2, r3}
    3c56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c58:	aa06      	add	r2, sp, #24
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3c5a:	a902      	add	r1, sp, #8
{
    3c5c:	f852 3b04 	ldr.w	r3, [r2], #4
  va_start(va, format);
    3c60:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3c62:	9200      	str	r2, [sp, #0]
    3c64:	4804      	ldr	r0, [pc, #16]	; (3c78 <printf+0x24>)
    3c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3c6a:	f7ff fc85 	bl	3578 <_vsnprintf>
  va_end(va);
  return ret;
}
    3c6e:	b005      	add	sp, #20
    3c70:	f85d eb04 	ldr.w	lr, [sp], #4
    3c74:	b004      	add	sp, #16
    3c76:	4770      	bx	lr
    3c78:	0000356d 	.word	0x0000356d

00003c7c <snprintf>:
  return ret;
}


int snprintf(char* buffer, size_t count, const char* format, ...)
{
    3c7c:	b40c      	push	{r2, r3}
    3c7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c80:	aa06      	add	r2, sp, #24
    3c82:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
    3c86:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    3c88:	9200      	str	r2, [sp, #0]
    3c8a:	460a      	mov	r2, r1
    3c8c:	4601      	mov	r1, r0
    3c8e:	4804      	ldr	r0, [pc, #16]	; (3ca0 <snprintf+0x24>)
    3c90:	f7ff fc72 	bl	3578 <_vsnprintf>
  va_end(va);
  return ret;
}
    3c94:	b005      	add	sp, #20
    3c96:	f85d eb04 	ldr.w	lr, [sp], #4
    3c9a:	b002      	add	sp, #8
    3c9c:	4770      	bx	lr
    3c9e:	bf00      	nop
    3ca0:	000032fd 	.word	0x000032fd

00003ca4 <roundf>:
    3ca4:	b082      	sub	sp, #8
    3ca6:	ed8d 0a01 	vstr	s0, [sp, #4]
    3caa:	9901      	ldr	r1, [sp, #4]
    3cac:	f3c1 53c7 	ubfx	r3, r1, #23, #8
    3cb0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
    3cb4:	2a16      	cmp	r2, #22
    3cb6:	dc16      	bgt.n	3ce6 <roundf+0x42>
    3cb8:	2a00      	cmp	r2, #0
    3cba:	db0d      	blt.n	3cd8 <roundf+0x34>
    3cbc:	4810      	ldr	r0, [pc, #64]	; (3d00 <roundf+0x5c>)
    3cbe:	4110      	asrs	r0, r2
    3cc0:	4208      	tst	r0, r1
    3cc2:	d012      	beq.n	3cea <roundf+0x46>
    3cc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    3cc8:	4113      	asrs	r3, r2
    3cca:	440b      	add	r3, r1
    3ccc:	ea23 0300 	bic.w	r3, r3, r0
    3cd0:	ee00 3a10 	vmov	s0, r3
    3cd4:	b002      	add	sp, #8
    3cd6:	4770      	bx	lr
    3cd8:	3201      	adds	r2, #1
    3cda:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    3cde:	d1f7      	bne.n	3cd0 <roundf+0x2c>
    3ce0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
    3ce4:	e7f4      	b.n	3cd0 <roundf+0x2c>
    3ce6:	2a80      	cmp	r2, #128	; 0x80
    3ce8:	d003      	beq.n	3cf2 <roundf+0x4e>
    3cea:	ed9d 0a01 	vldr	s0, [sp, #4]
    3cee:	b002      	add	sp, #8
    3cf0:	4770      	bx	lr
    3cf2:	eddd 7a01 	vldr	s15, [sp, #4]
    3cf6:	ee37 0aa7 	vadd.f32	s0, s15, s15
    3cfa:	b002      	add	sp, #8
    3cfc:	4770      	bx	lr
    3cfe:	bf00      	nop
    3d00:	007fffff 	.word	0x007fffff

00003d04 <malloc>:
    3d04:	4b02      	ldr	r3, [pc, #8]	; (3d10 <malloc+0xc>)
    3d06:	4601      	mov	r1, r0
    3d08:	6818      	ldr	r0, [r3, #0]
    3d0a:	f000 b859 	b.w	3dc0 <_malloc_r>
    3d0e:	bf00      	nop
    3d10:	20000018 	.word	0x20000018

00003d14 <free>:
    3d14:	4b02      	ldr	r3, [pc, #8]	; (3d20 <free+0xc>)
    3d16:	4601      	mov	r1, r0
    3d18:	6818      	ldr	r0, [r3, #0]
    3d1a:	f000 b803 	b.w	3d24 <_free_r>
    3d1e:	bf00      	nop
    3d20:	20000018 	.word	0x20000018

00003d24 <_free_r>:
    3d24:	b538      	push	{r3, r4, r5, lr}
    3d26:	4605      	mov	r5, r0
    3d28:	2900      	cmp	r1, #0
    3d2a:	d045      	beq.n	3db8 <_free_r+0x94>
    3d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3d30:	1f0c      	subs	r4, r1, #4
    3d32:	2b00      	cmp	r3, #0
    3d34:	bfb8      	it	lt
    3d36:	18e4      	addlt	r4, r4, r3
    3d38:	f000 f8ac 	bl	3e94 <__malloc_lock>
    3d3c:	4a1f      	ldr	r2, [pc, #124]	; (3dbc <_free_r+0x98>)
    3d3e:	6813      	ldr	r3, [r2, #0]
    3d40:	4610      	mov	r0, r2
    3d42:	b933      	cbnz	r3, 3d52 <_free_r+0x2e>
    3d44:	6063      	str	r3, [r4, #4]
    3d46:	6014      	str	r4, [r2, #0]
    3d48:	4628      	mov	r0, r5
    3d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3d4e:	f000 b8a7 	b.w	3ea0 <__malloc_unlock>
    3d52:	42a3      	cmp	r3, r4
    3d54:	d90c      	bls.n	3d70 <_free_r+0x4c>
    3d56:	6821      	ldr	r1, [r4, #0]
    3d58:	1862      	adds	r2, r4, r1
    3d5a:	4293      	cmp	r3, r2
    3d5c:	bf04      	itt	eq
    3d5e:	681a      	ldreq	r2, [r3, #0]
    3d60:	685b      	ldreq	r3, [r3, #4]
    3d62:	6063      	str	r3, [r4, #4]
    3d64:	bf04      	itt	eq
    3d66:	1852      	addeq	r2, r2, r1
    3d68:	6022      	streq	r2, [r4, #0]
    3d6a:	6004      	str	r4, [r0, #0]
    3d6c:	e7ec      	b.n	3d48 <_free_r+0x24>
    3d6e:	4613      	mov	r3, r2
    3d70:	685a      	ldr	r2, [r3, #4]
    3d72:	b10a      	cbz	r2, 3d78 <_free_r+0x54>
    3d74:	42a2      	cmp	r2, r4
    3d76:	d9fa      	bls.n	3d6e <_free_r+0x4a>
    3d78:	6819      	ldr	r1, [r3, #0]
    3d7a:	1858      	adds	r0, r3, r1
    3d7c:	42a0      	cmp	r0, r4
    3d7e:	d10b      	bne.n	3d98 <_free_r+0x74>
    3d80:	6820      	ldr	r0, [r4, #0]
    3d82:	4401      	add	r1, r0
    3d84:	1858      	adds	r0, r3, r1
    3d86:	4282      	cmp	r2, r0
    3d88:	6019      	str	r1, [r3, #0]
    3d8a:	d1dd      	bne.n	3d48 <_free_r+0x24>
    3d8c:	6810      	ldr	r0, [r2, #0]
    3d8e:	6852      	ldr	r2, [r2, #4]
    3d90:	605a      	str	r2, [r3, #4]
    3d92:	4401      	add	r1, r0
    3d94:	6019      	str	r1, [r3, #0]
    3d96:	e7d7      	b.n	3d48 <_free_r+0x24>
    3d98:	d902      	bls.n	3da0 <_free_r+0x7c>
    3d9a:	230c      	movs	r3, #12
    3d9c:	602b      	str	r3, [r5, #0]
    3d9e:	e7d3      	b.n	3d48 <_free_r+0x24>
    3da0:	6820      	ldr	r0, [r4, #0]
    3da2:	1821      	adds	r1, r4, r0
    3da4:	428a      	cmp	r2, r1
    3da6:	bf04      	itt	eq
    3da8:	6811      	ldreq	r1, [r2, #0]
    3daa:	6852      	ldreq	r2, [r2, #4]
    3dac:	6062      	str	r2, [r4, #4]
    3dae:	bf04      	itt	eq
    3db0:	1809      	addeq	r1, r1, r0
    3db2:	6021      	streq	r1, [r4, #0]
    3db4:	605c      	str	r4, [r3, #4]
    3db6:	e7c7      	b.n	3d48 <_free_r+0x24>
    3db8:	bd38      	pop	{r3, r4, r5, pc}
    3dba:	bf00      	nop
    3dbc:	20000090 	.word	0x20000090

00003dc0 <_malloc_r>:
    3dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dc2:	1ccd      	adds	r5, r1, #3
    3dc4:	f025 0503 	bic.w	r5, r5, #3
    3dc8:	3508      	adds	r5, #8
    3dca:	2d0c      	cmp	r5, #12
    3dcc:	bf38      	it	cc
    3dce:	250c      	movcc	r5, #12
    3dd0:	2d00      	cmp	r5, #0
    3dd2:	4606      	mov	r6, r0
    3dd4:	db01      	blt.n	3dda <_malloc_r+0x1a>
    3dd6:	42a9      	cmp	r1, r5
    3dd8:	d903      	bls.n	3de2 <_malloc_r+0x22>
    3dda:	230c      	movs	r3, #12
    3ddc:	6033      	str	r3, [r6, #0]
    3dde:	2000      	movs	r0, #0
    3de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3de2:	f000 f857 	bl	3e94 <__malloc_lock>
    3de6:	4921      	ldr	r1, [pc, #132]	; (3e6c <_malloc_r+0xac>)
    3de8:	680a      	ldr	r2, [r1, #0]
    3dea:	4614      	mov	r4, r2
    3dec:	b99c      	cbnz	r4, 3e16 <_malloc_r+0x56>
    3dee:	4f20      	ldr	r7, [pc, #128]	; (3e70 <_malloc_r+0xb0>)
    3df0:	683b      	ldr	r3, [r7, #0]
    3df2:	b923      	cbnz	r3, 3dfe <_malloc_r+0x3e>
    3df4:	4621      	mov	r1, r4
    3df6:	4630      	mov	r0, r6
    3df8:	f000 f83c 	bl	3e74 <_sbrk_r>
    3dfc:	6038      	str	r0, [r7, #0]
    3dfe:	4629      	mov	r1, r5
    3e00:	4630      	mov	r0, r6
    3e02:	f000 f837 	bl	3e74 <_sbrk_r>
    3e06:	1c43      	adds	r3, r0, #1
    3e08:	d123      	bne.n	3e52 <_malloc_r+0x92>
    3e0a:	230c      	movs	r3, #12
    3e0c:	6033      	str	r3, [r6, #0]
    3e0e:	4630      	mov	r0, r6
    3e10:	f000 f846 	bl	3ea0 <__malloc_unlock>
    3e14:	e7e3      	b.n	3dde <_malloc_r+0x1e>
    3e16:	6823      	ldr	r3, [r4, #0]
    3e18:	1b5b      	subs	r3, r3, r5
    3e1a:	d417      	bmi.n	3e4c <_malloc_r+0x8c>
    3e1c:	2b0b      	cmp	r3, #11
    3e1e:	d903      	bls.n	3e28 <_malloc_r+0x68>
    3e20:	6023      	str	r3, [r4, #0]
    3e22:	441c      	add	r4, r3
    3e24:	6025      	str	r5, [r4, #0]
    3e26:	e004      	b.n	3e32 <_malloc_r+0x72>
    3e28:	6863      	ldr	r3, [r4, #4]
    3e2a:	42a2      	cmp	r2, r4
    3e2c:	bf0c      	ite	eq
    3e2e:	600b      	streq	r3, [r1, #0]
    3e30:	6053      	strne	r3, [r2, #4]
    3e32:	4630      	mov	r0, r6
    3e34:	f000 f834 	bl	3ea0 <__malloc_unlock>
    3e38:	f104 000b 	add.w	r0, r4, #11
    3e3c:	1d23      	adds	r3, r4, #4
    3e3e:	f020 0007 	bic.w	r0, r0, #7
    3e42:	1ac2      	subs	r2, r0, r3
    3e44:	d0cc      	beq.n	3de0 <_malloc_r+0x20>
    3e46:	1a1b      	subs	r3, r3, r0
    3e48:	50a3      	str	r3, [r4, r2]
    3e4a:	e7c9      	b.n	3de0 <_malloc_r+0x20>
    3e4c:	4622      	mov	r2, r4
    3e4e:	6864      	ldr	r4, [r4, #4]
    3e50:	e7cc      	b.n	3dec <_malloc_r+0x2c>
    3e52:	1cc4      	adds	r4, r0, #3
    3e54:	f024 0403 	bic.w	r4, r4, #3
    3e58:	42a0      	cmp	r0, r4
    3e5a:	d0e3      	beq.n	3e24 <_malloc_r+0x64>
    3e5c:	1a21      	subs	r1, r4, r0
    3e5e:	4630      	mov	r0, r6
    3e60:	f000 f808 	bl	3e74 <_sbrk_r>
    3e64:	3001      	adds	r0, #1
    3e66:	d1dd      	bne.n	3e24 <_malloc_r+0x64>
    3e68:	e7cf      	b.n	3e0a <_malloc_r+0x4a>
    3e6a:	bf00      	nop
    3e6c:	20000090 	.word	0x20000090
    3e70:	20000094 	.word	0x20000094

00003e74 <_sbrk_r>:
    3e74:	b538      	push	{r3, r4, r5, lr}
    3e76:	4c06      	ldr	r4, [pc, #24]	; (3e90 <_sbrk_r+0x1c>)
    3e78:	2300      	movs	r3, #0
    3e7a:	4605      	mov	r5, r0
    3e7c:	4608      	mov	r0, r1
    3e7e:	6023      	str	r3, [r4, #0]
    3e80:	f000 f816 	bl	3eb0 <_sbrk>
    3e84:	1c43      	adds	r3, r0, #1
    3e86:	d102      	bne.n	3e8e <_sbrk_r+0x1a>
    3e88:	6823      	ldr	r3, [r4, #0]
    3e8a:	b103      	cbz	r3, 3e8e <_sbrk_r+0x1a>
    3e8c:	602b      	str	r3, [r5, #0]
    3e8e:	bd38      	pop	{r3, r4, r5, pc}
    3e90:	20000108 	.word	0x20000108

00003e94 <__malloc_lock>:
    3e94:	4801      	ldr	r0, [pc, #4]	; (3e9c <__malloc_lock+0x8>)
    3e96:	f000 b809 	b.w	3eac <__retarget_lock_acquire_recursive>
    3e9a:	bf00      	nop
    3e9c:	20000110 	.word	0x20000110

00003ea0 <__malloc_unlock>:
    3ea0:	4801      	ldr	r0, [pc, #4]	; (3ea8 <__malloc_unlock+0x8>)
    3ea2:	f000 b804 	b.w	3eae <__retarget_lock_release_recursive>
    3ea6:	bf00      	nop
    3ea8:	20000110 	.word	0x20000110

00003eac <__retarget_lock_acquire_recursive>:
    3eac:	4770      	bx	lr

00003eae <__retarget_lock_release_recursive>:
    3eae:	4770      	bx	lr

00003eb0 <_sbrk>:
    3eb0:	4a04      	ldr	r2, [pc, #16]	; (3ec4 <_sbrk+0x14>)
    3eb2:	4905      	ldr	r1, [pc, #20]	; (3ec8 <_sbrk+0x18>)
    3eb4:	6813      	ldr	r3, [r2, #0]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	bf08      	it	eq
    3eba:	460b      	moveq	r3, r1
    3ebc:	4418      	add	r0, r3
    3ebe:	6010      	str	r0, [r2, #0]
    3ec0:	4618      	mov	r0, r3
    3ec2:	4770      	bx	lr
    3ec4:	20000098 	.word	0x20000098
    3ec8:	20000118 	.word	0x20000118

00003ecc <__FUNCTION__.7200>:
    3ecc:	64726168 6c756166 72745f74 5f656361     hardfault_trace_
    3edc:	63617473                                 stack.

00003ee2 <__FUNCTION__.7213>:
    3ee2:	6d6d656d 67616e61 72745f65 5f656361     memmanage_trace_
    3ef2:	63617473                                 stack.

00003ef8 <__FUNCTION__.7226>:
    3ef8:	66737562 746c7561 6172745f 735f6563     busfault_trace_s
    3f08:	6b636174                                 tack.

00003f0d <__FUNCTION__.7239>:
    3f0d:	67617375 75616665 745f746c 65636172     usagefault_trace
    3f1d:	6174735f 5b006b63 205d7325 7542202d     _stack.[%s] - Bu
    3f2d:	61662073 21746c75 61745320 74206b63     s fault! Stack t
    3f3d:	65636172 000a0d3a 5d73255b 42202d20     race:...[%s] - B
    3f4d:	20525346 2578305b 5d583230 5b000a0d     FSR [0x%02X]...[
    3f5d:	205d7325 4642202d 5b205241 30257830     %s] - BFAR [0x%0
    3f6d:	0d5d5838 255b000a 2d205d73 72614820     8X]...[%s] - Har
    3f7d:	61662064 21746c75 61745320 74206b63     d fault! Stack t
    3f8d:	65636172 000a0d3a 5d73255b 52202d20     race:...[%s] - R
    3f9d:	305b2030 38302578 0a0d5d58 73255b00     0 [0x%08X]...[%s
    3fad:	202d205d 5b203152 30257830 0d5d5838     ] - R1 [0x%08X].
    3fbd:	255b000a 2d205d73 20325220 2578305b     ..[%s] - R2 [0x%
    3fcd:	5d583830 5b000a0d 205d7325 3352202d     08X]...[%s] - R3
    3fdd:	78305b20 58383025 000a0d5d 5d73255b      [0x%08X]...[%s]
    3fed:	52202d20 5b203231 30257830 0d5d5838      - R12 [0x%08X].
    3ffd:	255b000a 2d205d73 20524c20 3431525b     ..[%s] - LR [R14
    400d:	305b205d 38302578 63205d58 206c6c61     ] [0x%08X] call 
    401d:	75746572 0a0d6e72 73255b00 202d205d     return...[%s] - 
    402d:	5b204350 5d353152 78305b20 58383025     PC [R15] [0x%08X
    403d:	7270205d 6172676f 6f63206d 65746e75     ] program counte
    404d:	000a0d72 5d73255b 50202d20 5b205253     r...[%s] - PSR [
    405d:	30257830 205d5838 676f7270 206d6172     0x%08X] program 
    406d:	74617473 72207375 73696765 0d726574     status register.
    407d:	255b000a 2d205d73 2d2d2d20 2d2d2d2d     ..[%s] - -------
    408d:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
    409d:	2d2d2d2d 0d2d2d2d 255b000a 2d205d73     -------...[%s] -
    40ad:	53464820 305b2052 38302578 0a0d5d58      HFSR [0x%08X]..
    40bd:	73255b00 202d205d 52534349 78305b20     .[%s] - ICSR [0x
    40cd:	58383025 000a0d5d 5d73255b 4d202d20     %08X]...[%s] - M
    40dd:	5b205053 30257830 0d5d5838 255b000a     SP [0x%08X]...[%
    40ed:	2d205d73 6d654d20 2079726f 616e616d     s] - Memory mana
    40fd:	656d6567 6620746e 746c7561 74532021     gement fault! St
    410d:	206b6361 63617274 0a0d3a65 73255b00     ack trace:...[%s
    411d:	202d205d 53464d4d 305b2052 32302578     ] - MMFSR [0x%02
    412d:	0a0d5d58 73255b00 202d205d 41464d4d     X]...[%s] - MMFA
    413d:	305b2052 38302578 0a0d5d58 73255b00     R [0x%08X]...[%s
    414d:	202d205d 67617355 61662065 21746c75     ] - Usage fault!
    415d:	61745320 74206b63 65636172 000a0d3a      Stack trace:...
    416d:	5d73255b 55202d20 20525346 2578305b     [%s] - UFSR [0x%
    417d:	5d583430                                 04X]...

00004184 <__FUNCTION__.8630>:
    4184:	74696e69                                 init.

00004189 <__FUNCTION__.8637>:
    4189:	6e69616d 4d464500 474a3233 3f004231     main.EFM32JG1B.?
    4199:	52464500 474d3233 45005031 32335246     .EFR32MG1P.EFR32
    41a9:	4231474d 52464500 474d3233 45005631     MG1B.EFR32MG1V.E
    41b9:	32335246 50314742 52464500 47423233     FR32BG1P.EFR32BG
    41c9:	45004231 32335246 56314742 52464500     1B.EFR32BG1V.EFR
    41d9:	47463233 45005031 32335246 42314746     32FG1P.EFR32FG1B
    41e9:	52464500 47463233 45005631 32335246     .EFR32FG1V.EFR32
    41f9:	3231474d 46450050 4d323352 42323147     MG12P.EFR32MG12B
    4209:	52464500 474d3233 00563231 33524645     .EFR32MG12V.EFR3
    4219:	31474232 45005032 32335246 32314742     2BG12P.EFR32BG12
    4229:	46450042 42323352 56323147 52464500     B.EFR32BG12V.EFR
    4239:	47463233 00503231 33524645 31474632     32FG12P.EFR32FG1
    4249:	45004232 32335246 32314746 46450056     2B.EFR32FG12V.EF
    4259:	4d323352 50333147 52464500 474d3233     R32MG13P.EFR32MG
    4269:	00423331 33524645 31474d32 45005633     13B.EFR32MG13V.E
    4279:	32335246 33314742 46450050 42323352     FR32BG13P.EFR32B
    4289:	42333147 52464500 47423233 00563331     G13B.EFR32BG13V.
    4299:	33524645 31475a32 45005033 32335246     EFR32ZG13P.EFR32
    42a9:	33314746 46450050 46323352 42333147     FG13P.EFR32FG13B
    42b9:	52464500 47463233 00563331 33524645     .EFR32FG13V.EFR3
    42c9:	31474d32 45005034 32335246 3431474d     2MG14P.EFR32MG14
    42d9:	46450042 4d323352 56343147 52464500     B.EFR32MG14V.EFR
    42e9:	47423233 00503431 33524645 31474232     32BG14P.EFR32BG1
    42f9:	45004234 32335246 34314742 46450056     4B.EFR32BG14V.EF
    4309:	5a323352 50343147 52464500 47463233     R32ZG14P.EFR32FG
    4319:	00503431 33524645 31474632 45004234     14P.EFR32FG14B.E
    4329:	3233525a 45004757 32335246 34314746     ZR32WG.EFR32FG14
    4339:	5a450056 4c323352 46450047 4732334d     V.EZR32LG.EFM32G
    4349:	4d464500 47473233 00423231 334d4645     .EFM32GG12B.EFM3
    4359:	00474732 334d4645 31475432 54004231     2GG.EFM32TG11B.T
    4369:	46450047 4732334d 42313147 4d464500     G.EFM32GG11B.EFM
    4379:	474c3233 4d464500 474a3233 00423231     32LG.EFM32JG12B.
    4389:	334d4645 00475732 334d4645 31475032     EFM32WG.EFM32PG1
    4399:	5a004232 46450047 5032334d 00423147     2B.ZG.EFM32PG1B.
    43a9:	33525a45 00474832 68257325 68254675     EZR32HG.%s%huF%h
    43b9:	25632575 68682563 4f4c0075 4b4f0057     u%c%c%hhu.LOW.OK
    43c9:	73255b00 202d205d 69766544 203a6563     .[%s] - Device: 
    43d9:	0a0d7325 73255b00 202d205d 69766544     %s...[%s] - Devi
    43e9:	52206563 73697665 3a6e6f69 25783020     ce Revision: 0x%
    43f9:	0d583430 255b000a 2d205d73 6c614320     04X...[%s] - Cal
    4409:	61726269 6e6f6974 6d657420 61726570     ibration tempera
    4419:	65727574 6825203a 43207568 5b000a0d     ture: %hhu C...[
    4429:	205d7325 6c46202d 20687361 657a6953     %s] - Flash Size
    4439:	6825203a 426b2075 5b000a0d 205d7325     : %hu kB...[%s] 
    4449:	4152202d 6953204d 203a657a 20756825     - RAM Size: %hu 
    4459:	0a0d426b 73255b00 202d205d 65657246     kB...[%s] - Free
    4469:	4d415220 6c25203a 0d422075 255b000a      RAM: %lu B...[%
    4479:	2d205d73 696e5520 20657571 203a4449     s] - Unique ID: 
    4489:	58383025 3830252d 000a0d58 5d73255b     %08X-%08X...[%s]
    4499:	43202d20 2d20554d 58464820 6c43204f      - CMU - HFXO Cl
    44a9:	3a6b636f 312e2520 484d2066 0a0d217a     ock: %.1f MHz!..
    44b9:	73255b00 202d205d 20554d43 4648202d     .[%s] - CMU - HF
    44c9:	204f4352 636f6c43 25203a6b 2066312e     RCO Clock: %.1f 
    44d9:	217a484d 5b000a0d 205d7325 4d43202d     MHz!...[%s] - CM
    44e9:	202d2055 46485355 204f4352 636f6c43     U - USHFRCO Cloc
    44f9:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    4509:	205d7325 4d43202d 202d2055 48585541     %s] - CMU - AUXH
    4519:	4f435246 6f6c4320 203a6b63 66312e25     FRCO Clock: %.1f
    4529:	7a484d20 000a0d21 5d73255b 43202d20      MHz!...[%s] - C
    4539:	2d20554d 58464c20 6c43204f 3a6b636f     MU - LFXO Clock:
    4549:	332e2520 486b2066 0a0d217a 73255b00      %.3f kHz!...[%s
    4559:	202d205d 20554d43 464c202d 204f4352     ] - CMU - LFRCO 
    4569:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    4579:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4589:	52464c55 43204f43 6b636f6c 2e25203a     ULFRCO Clock: %.
    4599:	6b206633 0d217a48 255b000a 2d205d73     3f kHz!...[%s] -
    45a9:	554d4320 48202d20 43525346 6f6c4320      CMU - HFSRC Clo
    45b9:	203a6b63 66312e25 7a484d20 000a0d21     ck: %.1f MHz!...
    45c9:	5d73255b 43202d20 2d20554d 20464820     [%s] - CMU - HF 
    45d9:	636f6c43 25203a6b 2066312e 217a484d     Clock: %.1f MHz!
    45e9:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    45f9:	55424648 6c432053 3a6b636f 312e2520     HFBUS Clock: %.1
    4609:	484d2066 0a0d217a 73255b00 202d205d     f MHz!...[%s] - 
    4619:	20554d43 4648202d 45524f43 6f6c4320     CMU - HFCORE Clo
    4629:	203a6b63 66312e25 7a484d20 000a0d21     ck: %.1f MHz!...
    4639:	5d73255b 43202d20 2d20554d 45464820     [%s] - CMU - HFE
    4649:	43205058 6b636f6c 2e25203a 4d206631     XP Clock: %.1f M
    4659:	0d217a48 255b000a 2d205d73 554d4320     Hz!...[%s] - CMU
    4669:	48202d20 52455046 6f6c4320 203a6b63      - HFPER Clock: 
    4679:	66312e25 7a484d20 000a0d21 5d73255b     %.1f MHz!...[%s]
    4689:	43202d20 2d20554d 50464820 20425245      - CMU - HFPERB 
    4699:	636f6c43 25203a6b 2066312e 217a484d     Clock: %.1f MHz!
    46a9:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    46b9:	45504648 43204352 6b636f6c 2e25203a     HFPERC Clock: %.
    46c9:	4d206631 0d217a48 255b000a 2d205d73     1f MHz!...[%s] -
    46d9:	554d4320 48202d20 20454c46 636f6c43      CMU - HFLE Cloc
    46e9:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    46f9:	205d7325 4d43202d 202d2055 30434441     %s] - CMU - ADC0
    4709:	6f6c4320 203a6b63 66312e25 7a484d20      Clock: %.1f MHz
    4719:	000a0d21 5d73255b 43202d20 2d20554d     !...[%s] - CMU -
    4729:	43444120 6c432031 3a6b636f 312e2520      ADC1 Clock: %.1
    4739:	484d2066 0a0d217a 73255b00 202d205d     f MHz!...[%s] - 
    4749:	20554d43 4244202d 6c432047 3a6b636f     CMU - DBG Clock:
    4759:	312e2520 484d2066 0a0d217a 73255b00      %.1f MHz!...[%s
    4769:	202d205d 20554d43 5541202d 6c432058     ] - CMU - AUX Cl
    4779:	3a6b636f 312e2520 484d2066 0a0d217a     ock: %.1f MHz!..
    4789:	73255b00 202d205d 20554d43 464c202d     .[%s] - CMU - LF
    4799:	6c432041 3a6b636f 332e2520 486b2066     A Clock: %.3f kH
    47a9:	0a0d217a 73255b00 202d205d 20554d43     z!...[%s] - CMU 
    47b9:	454c202d 534e4553 6c432045 3a6b636f     - LESENSE Clock:
    47c9:	332e2520 486b2066 0a0d217a 73255b00      %.3f kHz!...[%s
    47d9:	202d205d 20554d43 5452202d 6c432043     ] - CMU - RTC Cl
    47e9:	3a6b636f 332e2520 486b2066 0a0d217a     ock: %.3f kHz!..
    47f9:	73255b00 202d205d 20554d43 434c202d     .[%s] - CMU - LC
    4809:	6c432044 3a6b636f 332e2520 486b2066     D Clock: %.3f kH
    4819:	0a0d217a 73255b00 202d205d 20554d43     z!...[%s] - CMU 
    4829:	454c202d 454d4954 43203052 6b636f6c     - LETIMER0 Clock
    4839:	2e25203a 6b206633 0d217a48 255b000a     : %.3f kHz!...[%
    4849:	2d205d73 554d4320 4c202d20 4d495445     s] - CMU - LETIM
    4859:	20315245 636f6c43 25203a6b 2066332e     ER1 Clock: %.3f 
    4869:	217a486b 5b000a0d 205d7325 4d43202d     kHz!...[%s] - CM
    4879:	202d2055 2042464c 636f6c43 25203a6b     U - LFB Clock: %
    4889:	2066332e 217a486b 5b000a0d 205d7325     .3f kHz!...[%s] 
    4899:	4d43202d 202d2055 4155454c 20305452     - CMU - LEUART0 
    48a9:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    48b9:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    48c9:	4155454c 20315452 636f6c43 25203a6b     LEUART1 Clock: %
    48d9:	2066332e 217a486b 5b000a0d 205d7325     .3f kHz!...[%s] 
    48e9:	4d43202d 202d2055 54535953 204b4349     - CMU - SYSTICK 
    48f9:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    4909:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4919:	4e455343 6f6c4320 203a6b63 66332e25     CSEN Clock: %.3f
    4929:	7a486b20 000a0d21 5d73255b 43202d20      kHz!...[%s] - C
    4939:	2d20554d 43464c20 6f6c4320 203a6b63     MU - LFC Clock: 
    4949:	66332e25 7a486b20 000a0d21 5d73255b     %.3f kHz!...[%s]
    4959:	43202d20 2d20554d 45464c20 6f6c4320      - CMU - LFE Clo
    4969:	203a6b63 66332e25 7a486b20 000a0d21     ck: %.3f kHz!...
    4979:	5d73255b 43202d20 2d20554d 43545220     [%s] - CMU - RTC
    4989:	6c432043 3a6b636f 332e2520 486b2066     C Clock: %.3f kH
    4999:	0a0d217a 73255b00 202d205d 20554d45     z!...[%s] - EMU 
    49a9:	5641202d 46204444 206c6c61 65726854     - AVDD Fall Thre
    49b9:	6c6f6873 25203a64 2066322e 0d21566d     shold: %.2f mV!.
    49c9:	255b000a 2d205d73 554d4520 41202d20     ..[%s] - EMU - A
    49d9:	20444456 65736952 72685420 6f687365     VDD Rise Thresho
    49e9:	203a646c 66322e25 21566d20 5b000a0d     ld: %.2f mV!...[
    49f9:	205d7325 4d45202d 202d2055 44445641     %s] - EMU - AVDD
    4a09:	6c6f5620 65676174 2e25203a 6d206632      Voltage: %.2f m
    4a19:	000a0d56 5d73255b 45202d20 2d20554d     V...[%s] - EMU -
    4a29:	44564120 74532044 73757461 7325203a      AVDD Status: %s
    4a39:	5b000a0d 205d7325 4d45202d 202d2055     ...[%s] - EMU - 
    4a49:	44445644 6c614620 6854206c 68736572     DVDD Fall Thresh
    4a59:	3a646c6f 322e2520 566d2066 000a0d21     old: %.2f mV!...
    4a69:	5d73255b 45202d20 2d20554d 44564420     [%s] - EMU - DVD
    4a79:	69522044 54206573 73657268 646c6f68     D Rise Threshold
    4a89:	2e25203a 6d206632 0a0d2156 73255b00     : %.2f mV!...[%s
    4a99:	202d205d 20554d45 5644202d 56204444     ] - EMU - DVDD V
    4aa9:	61746c6f 203a6567 66322e25 0d566d20     oltage: %.2f mV.
    4ab9:	255b000a 2d205d73 554d4520 44202d20     ..[%s] - EMU - D
    4ac9:	20444456 74617453 203a7375 0a0d7325     VDD Status: %s..
    4ad9:	73255b00 202d205d 20554d45 4f49202d     .[%s] - EMU - IO
    4ae9:	20444456 6c6c6146 72685420 6f687365     VDD Fall Thresho
    4af9:	203a646c 66322e25 21566d20 5b000a0d     ld: %.2f mV!...[
    4b09:	205d7325 4d45202d 202d2055 44564f49     %s] - EMU - IOVD
    4b19:	69522044 54206573 73657268 646c6f68     D Rise Threshold
    4b29:	2e25203a 6d206632 0a0d2156 73255b00     : %.2f mV!...[%s
    4b39:	202d205d 20554d45 4f49202d 20444456     ] - EMU - IOVDD 
    4b49:	746c6f56 3a656761 322e2520 566d2066     Voltage: %.2f mV
    4b59:	5b000a0d 205d7325 4d45202d 202d2055     ...[%s] - EMU - 
    4b69:	44564f49 74532044 73757461 7325203a     IOVDD Status: %s
    4b79:	5b000a0d 205d7325 4d45202d 202d2055     ...[%s] - EMU - 
    4b89:	65726f43 6c6f5620 65676174 2e25203a     Core Voltage: %.
    4b99:	6d206632 000a0d56 5d73255b 53202d20     2f mV...[%s] - S
    4ba9:	6e6e6163 20676e69 20433249 20737562     canning I2C bus 
    4bb9:	2e2e2e31 5b000a0d 205d7325 2020202d     1......[%s] -   
    4bc9:	72646441 20737365 30257830 41205832     Address 0x%02X A
    4bd9:	64654b43 000a0d21 5d73255b 49202d20     CKed!...[%s] - I
    4be9:	6974696e 63206c61 62696c61 69746172     nitial calibrati
    4bf9:	64206e6f 3a706d75 5b000a0d 205d7325     on dump:...[%s] 
    4c09:	2020202d 30257830 2d205838 7830203e     -   0x%08X -> 0x
    4c19:	58383025 5b000a0d 205d7325 4441202d     %08X...[%s] - AD
    4c29:	65542043 203a706d 66322e25 5b000a0d     C Temp: %.2f...[
    4c39:	205d7325 4d45202d 65542055 203a706d     %s] - EMU Temp: 
    4c49:	66322e25 5b000a0d 205d7325 4648202d     %.2f...[%s] - HF
    4c59:	53204f58 74726174 203a7075 66322e25     XO Startup: %.2f
    4c69:	0d467020 255b000a 2d205d73 58464820      pF...[%s] - HFX
    4c79:	7453204f 75747261 25203a70 2066322e     O Startup: %.2f 
    4c89:	0a0d4175 73255b00 202d205d 4f584648     uA...[%s] - HFXO
    4c99:	65745320 3a796461 322e2520 46702066      Steady: %.2f pF
    4ca9:	5b000a0d 205d7325 4648202d 53204f58     ...[%s] - HFXO S
    4cb9:	64616574 25203a79 2066322e 0a0d4175     teady: %.2f uA..
    4cc9:	73255b00 202d205d 4f584648 414d5020     .[%s] - HFXO PMA
    4cd9:	30255b20 3a5d5833 322e2520 41752066      [%03X]: %.2f uA
    4ce9:	5b000a0d 205d7325 4648202d 50204f58     ...[%s] - HFXO P
    4cf9:	5b204144 58333025 25203a5d 2066322e     DA [%03X]: %.2f 
    4d09:	0a0d4175 73255b00 202d205d 43435452     uA...[%s] - RTCC
    4d19:	6d695420 25203a65 0a0d756c 73255b00      Time: %lu...[%s
    4d29:	202d205d 20676942 20676166 73656f64     ] - Big fag does
    4d39:	746f6e20 65656e20 65642064 20677562      not need debug 
    4d49:	74726175 796e6120 65726f6d 000a0d2e     uart anymore....
    4d59:	00000000                                 .......

00004d60 <pow10.5152>:
    4d60:	00000000 3ff00000 00000000 40240000     .......?......$@
    4d70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    4d80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    4d90:	00000000 412e8480 00000000 416312d0     .......A......cA
    4da0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
