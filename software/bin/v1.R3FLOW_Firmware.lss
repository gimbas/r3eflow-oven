
bin/v1.R3FLOW_Firmware.elf:     file format elf32-littlearm


Disassembly of section .text:

00000150 <strlen>:
     150:	4603      	mov	r3, r0
     152:	f813 2b01 	ldrb.w	r2, [r3], #1
     156:	2a00      	cmp	r2, #0
     158:	d1fb      	bne.n	152 <strlen+0x2>
     15a:	1a18      	subs	r0, r3, r0
     15c:	3801      	subs	r0, #1
     15e:	4770      	bx	lr

00000160 <__aeabi_drsub>:
     160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     164:	e002      	b.n	16c <__adddf3>
     166:	bf00      	nop

00000168 <__aeabi_dsub>:
     168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000016c <__adddf3>:
     16c:	b530      	push	{r4, r5, lr}
     16e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     172:	ea4f 0543 	mov.w	r5, r3, lsl #1
     176:	ea94 0f05 	teq	r4, r5
     17a:	bf08      	it	eq
     17c:	ea90 0f02 	teqeq	r0, r2
     180:	bf1f      	itttt	ne
     182:	ea54 0c00 	orrsne.w	ip, r4, r0
     186:	ea55 0c02 	orrsne.w	ip, r5, r2
     18a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     18e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     192:	f000 80e2 	beq.w	35a <__adddf3+0x1ee>
     196:	ea4f 5454 	mov.w	r4, r4, lsr #21
     19a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     19e:	bfb8      	it	lt
     1a0:	426d      	neglt	r5, r5
     1a2:	dd0c      	ble.n	1be <__adddf3+0x52>
     1a4:	442c      	add	r4, r5
     1a6:	ea80 0202 	eor.w	r2, r0, r2
     1aa:	ea81 0303 	eor.w	r3, r1, r3
     1ae:	ea82 0000 	eor.w	r0, r2, r0
     1b2:	ea83 0101 	eor.w	r1, r3, r1
     1b6:	ea80 0202 	eor.w	r2, r0, r2
     1ba:	ea81 0303 	eor.w	r3, r1, r3
     1be:	2d36      	cmp	r5, #54	; 0x36
     1c0:	bf88      	it	hi
     1c2:	bd30      	pophi	{r4, r5, pc}
     1c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1d4:	d002      	beq.n	1dc <__adddf3+0x70>
     1d6:	4240      	negs	r0, r0
     1d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1e8:	d002      	beq.n	1f0 <__adddf3+0x84>
     1ea:	4252      	negs	r2, r2
     1ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1f0:	ea94 0f05 	teq	r4, r5
     1f4:	f000 80a7 	beq.w	346 <__adddf3+0x1da>
     1f8:	f1a4 0401 	sub.w	r4, r4, #1
     1fc:	f1d5 0e20 	rsbs	lr, r5, #32
     200:	db0d      	blt.n	21e <__adddf3+0xb2>
     202:	fa02 fc0e 	lsl.w	ip, r2, lr
     206:	fa22 f205 	lsr.w	r2, r2, r5
     20a:	1880      	adds	r0, r0, r2
     20c:	f141 0100 	adc.w	r1, r1, #0
     210:	fa03 f20e 	lsl.w	r2, r3, lr
     214:	1880      	adds	r0, r0, r2
     216:	fa43 f305 	asr.w	r3, r3, r5
     21a:	4159      	adcs	r1, r3
     21c:	e00e      	b.n	23c <__adddf3+0xd0>
     21e:	f1a5 0520 	sub.w	r5, r5, #32
     222:	f10e 0e20 	add.w	lr, lr, #32
     226:	2a01      	cmp	r2, #1
     228:	fa03 fc0e 	lsl.w	ip, r3, lr
     22c:	bf28      	it	cs
     22e:	f04c 0c02 	orrcs.w	ip, ip, #2
     232:	fa43 f305 	asr.w	r3, r3, r5
     236:	18c0      	adds	r0, r0, r3
     238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     23c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     240:	d507      	bpl.n	252 <__adddf3+0xe6>
     242:	f04f 0e00 	mov.w	lr, #0
     246:	f1dc 0c00 	rsbs	ip, ip, #0
     24a:	eb7e 0000 	sbcs.w	r0, lr, r0
     24e:	eb6e 0101 	sbc.w	r1, lr, r1
     252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     256:	d31b      	bcc.n	290 <__adddf3+0x124>
     258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     25c:	d30c      	bcc.n	278 <__adddf3+0x10c>
     25e:	0849      	lsrs	r1, r1, #1
     260:	ea5f 0030 	movs.w	r0, r0, rrx
     264:	ea4f 0c3c 	mov.w	ip, ip, rrx
     268:	f104 0401 	add.w	r4, r4, #1
     26c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     274:	f080 809a 	bcs.w	3ac <__adddf3+0x240>
     278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     27c:	bf08      	it	eq
     27e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     282:	f150 0000 	adcs.w	r0, r0, #0
     286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     28a:	ea41 0105 	orr.w	r1, r1, r5
     28e:	bd30      	pop	{r4, r5, pc}
     290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     294:	4140      	adcs	r0, r0
     296:	eb41 0101 	adc.w	r1, r1, r1
     29a:	3c01      	subs	r4, #1
     29c:	bf28      	it	cs
     29e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2a2:	d2e9      	bcs.n	278 <__adddf3+0x10c>
     2a4:	f091 0f00 	teq	r1, #0
     2a8:	bf04      	itt	eq
     2aa:	4601      	moveq	r1, r0
     2ac:	2000      	moveq	r0, #0
     2ae:	fab1 f381 	clz	r3, r1
     2b2:	bf08      	it	eq
     2b4:	3320      	addeq	r3, #32
     2b6:	f1a3 030b 	sub.w	r3, r3, #11
     2ba:	f1b3 0220 	subs.w	r2, r3, #32
     2be:	da0c      	bge.n	2da <__adddf3+0x16e>
     2c0:	320c      	adds	r2, #12
     2c2:	dd08      	ble.n	2d6 <__adddf3+0x16a>
     2c4:	f102 0c14 	add.w	ip, r2, #20
     2c8:	f1c2 020c 	rsb	r2, r2, #12
     2cc:	fa01 f00c 	lsl.w	r0, r1, ip
     2d0:	fa21 f102 	lsr.w	r1, r1, r2
     2d4:	e00c      	b.n	2f0 <__adddf3+0x184>
     2d6:	f102 0214 	add.w	r2, r2, #20
     2da:	bfd8      	it	le
     2dc:	f1c2 0c20 	rsble	ip, r2, #32
     2e0:	fa01 f102 	lsl.w	r1, r1, r2
     2e4:	fa20 fc0c 	lsr.w	ip, r0, ip
     2e8:	bfdc      	itt	le
     2ea:	ea41 010c 	orrle.w	r1, r1, ip
     2ee:	4090      	lslle	r0, r2
     2f0:	1ae4      	subs	r4, r4, r3
     2f2:	bfa2      	ittt	ge
     2f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2f8:	4329      	orrge	r1, r5
     2fa:	bd30      	popge	{r4, r5, pc}
     2fc:	ea6f 0404 	mvn.w	r4, r4
     300:	3c1f      	subs	r4, #31
     302:	da1c      	bge.n	33e <__adddf3+0x1d2>
     304:	340c      	adds	r4, #12
     306:	dc0e      	bgt.n	326 <__adddf3+0x1ba>
     308:	f104 0414 	add.w	r4, r4, #20
     30c:	f1c4 0220 	rsb	r2, r4, #32
     310:	fa20 f004 	lsr.w	r0, r0, r4
     314:	fa01 f302 	lsl.w	r3, r1, r2
     318:	ea40 0003 	orr.w	r0, r0, r3
     31c:	fa21 f304 	lsr.w	r3, r1, r4
     320:	ea45 0103 	orr.w	r1, r5, r3
     324:	bd30      	pop	{r4, r5, pc}
     326:	f1c4 040c 	rsb	r4, r4, #12
     32a:	f1c4 0220 	rsb	r2, r4, #32
     32e:	fa20 f002 	lsr.w	r0, r0, r2
     332:	fa01 f304 	lsl.w	r3, r1, r4
     336:	ea40 0003 	orr.w	r0, r0, r3
     33a:	4629      	mov	r1, r5
     33c:	bd30      	pop	{r4, r5, pc}
     33e:	fa21 f004 	lsr.w	r0, r1, r4
     342:	4629      	mov	r1, r5
     344:	bd30      	pop	{r4, r5, pc}
     346:	f094 0f00 	teq	r4, #0
     34a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     34e:	bf06      	itte	eq
     350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     354:	3401      	addeq	r4, #1
     356:	3d01      	subne	r5, #1
     358:	e74e      	b.n	1f8 <__adddf3+0x8c>
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf18      	it	ne
     360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     364:	d029      	beq.n	3ba <__adddf3+0x24e>
     366:	ea94 0f05 	teq	r4, r5
     36a:	bf08      	it	eq
     36c:	ea90 0f02 	teqeq	r0, r2
     370:	d005      	beq.n	37e <__adddf3+0x212>
     372:	ea54 0c00 	orrs.w	ip, r4, r0
     376:	bf04      	itt	eq
     378:	4619      	moveq	r1, r3
     37a:	4610      	moveq	r0, r2
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	ea91 0f03 	teq	r1, r3
     382:	bf1e      	ittt	ne
     384:	2100      	movne	r1, #0
     386:	2000      	movne	r0, #0
     388:	bd30      	popne	{r4, r5, pc}
     38a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     38e:	d105      	bne.n	39c <__adddf3+0x230>
     390:	0040      	lsls	r0, r0, #1
     392:	4149      	adcs	r1, r1
     394:	bf28      	it	cs
     396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     39a:	bd30      	pop	{r4, r5, pc}
     39c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3a0:	bf3c      	itt	cc
     3a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3a6:	bd30      	popcc	{r4, r5, pc}
     3a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3b4:	f04f 0000 	mov.w	r0, #0
     3b8:	bd30      	pop	{r4, r5, pc}
     3ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3be:	bf1a      	itte	ne
     3c0:	4619      	movne	r1, r3
     3c2:	4610      	movne	r0, r2
     3c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3c8:	bf1c      	itt	ne
     3ca:	460b      	movne	r3, r1
     3cc:	4602      	movne	r2, r0
     3ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3d2:	bf06      	itte	eq
     3d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3d8:	ea91 0f03 	teqeq	r1, r3
     3dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3e0:	bd30      	pop	{r4, r5, pc}
     3e2:	bf00      	nop

000003e4 <__aeabi_ui2d>:
     3e4:	f090 0f00 	teq	r0, #0
     3e8:	bf04      	itt	eq
     3ea:	2100      	moveq	r1, #0
     3ec:	4770      	bxeq	lr
     3ee:	b530      	push	{r4, r5, lr}
     3f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f8:	f04f 0500 	mov.w	r5, #0
     3fc:	f04f 0100 	mov.w	r1, #0
     400:	e750      	b.n	2a4 <__adddf3+0x138>
     402:	bf00      	nop

00000404 <__aeabi_i2d>:
     404:	f090 0f00 	teq	r0, #0
     408:	bf04      	itt	eq
     40a:	2100      	moveq	r1, #0
     40c:	4770      	bxeq	lr
     40e:	b530      	push	{r4, r5, lr}
     410:	f44f 6480 	mov.w	r4, #1024	; 0x400
     414:	f104 0432 	add.w	r4, r4, #50	; 0x32
     418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     41c:	bf48      	it	mi
     41e:	4240      	negmi	r0, r0
     420:	f04f 0100 	mov.w	r1, #0
     424:	e73e      	b.n	2a4 <__adddf3+0x138>
     426:	bf00      	nop

00000428 <__aeabi_f2d>:
     428:	0042      	lsls	r2, r0, #1
     42a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     42e:	ea4f 0131 	mov.w	r1, r1, rrx
     432:	ea4f 7002 	mov.w	r0, r2, lsl #28
     436:	bf1f      	itttt	ne
     438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     43c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     444:	4770      	bxne	lr
     446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     44a:	bf08      	it	eq
     44c:	4770      	bxeq	lr
     44e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     452:	bf04      	itt	eq
     454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     458:	4770      	bxeq	lr
     45a:	b530      	push	{r4, r5, lr}
     45c:	f44f 7460 	mov.w	r4, #896	; 0x380
     460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     468:	e71c      	b.n	2a4 <__adddf3+0x138>
     46a:	bf00      	nop

0000046c <__aeabi_ul2d>:
     46c:	ea50 0201 	orrs.w	r2, r0, r1
     470:	bf08      	it	eq
     472:	4770      	bxeq	lr
     474:	b530      	push	{r4, r5, lr}
     476:	f04f 0500 	mov.w	r5, #0
     47a:	e00a      	b.n	492 <__aeabi_l2d+0x16>

0000047c <__aeabi_l2d>:
     47c:	ea50 0201 	orrs.w	r2, r0, r1
     480:	bf08      	it	eq
     482:	4770      	bxeq	lr
     484:	b530      	push	{r4, r5, lr}
     486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     48a:	d502      	bpl.n	492 <__aeabi_l2d+0x16>
     48c:	4240      	negs	r0, r0
     48e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     492:	f44f 6480 	mov.w	r4, #1024	; 0x400
     496:	f104 0432 	add.w	r4, r4, #50	; 0x32
     49a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     49e:	f43f aed8 	beq.w	252 <__adddf3+0xe6>
     4a2:	f04f 0203 	mov.w	r2, #3
     4a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4aa:	bf18      	it	ne
     4ac:	3203      	addne	r2, #3
     4ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4b2:	bf18      	it	ne
     4b4:	3203      	addne	r2, #3
     4b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4ba:	f1c2 0320 	rsb	r3, r2, #32
     4be:	fa00 fc03 	lsl.w	ip, r0, r3
     4c2:	fa20 f002 	lsr.w	r0, r0, r2
     4c6:	fa01 fe03 	lsl.w	lr, r1, r3
     4ca:	ea40 000e 	orr.w	r0, r0, lr
     4ce:	fa21 f102 	lsr.w	r1, r1, r2
     4d2:	4414      	add	r4, r2
     4d4:	e6bd      	b.n	252 <__adddf3+0xe6>
     4d6:	bf00      	nop

000004d8 <__aeabi_dmul>:
     4d8:	b570      	push	{r4, r5, r6, lr}
     4da:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4e6:	bf1d      	ittte	ne
     4e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4ec:	ea94 0f0c 	teqne	r4, ip
     4f0:	ea95 0f0c 	teqne	r5, ip
     4f4:	f000 f8de 	bleq	6b4 <__aeabi_dmul+0x1dc>
     4f8:	442c      	add	r4, r5
     4fa:	ea81 0603 	eor.w	r6, r1, r3
     4fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     50a:	bf18      	it	ne
     50c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     518:	d038      	beq.n	58c <__aeabi_dmul+0xb4>
     51a:	fba0 ce02 	umull	ip, lr, r0, r2
     51e:	f04f 0500 	mov.w	r5, #0
     522:	fbe1 e502 	umlal	lr, r5, r1, r2
     526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     52a:	fbe0 e503 	umlal	lr, r5, r0, r3
     52e:	f04f 0600 	mov.w	r6, #0
     532:	fbe1 5603 	umlal	r5, r6, r1, r3
     536:	f09c 0f00 	teq	ip, #0
     53a:	bf18      	it	ne
     53c:	f04e 0e01 	orrne.w	lr, lr, #1
     540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     54c:	d204      	bcs.n	558 <__aeabi_dmul+0x80>
     54e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     552:	416d      	adcs	r5, r5
     554:	eb46 0606 	adc.w	r6, r6, r6
     558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     55c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     56c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     570:	bf88      	it	hi
     572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     576:	d81e      	bhi.n	5b6 <__aeabi_dmul+0xde>
     578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     57c:	bf08      	it	eq
     57e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     582:	f150 0000 	adcs.w	r0, r0, #0
     586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     590:	ea46 0101 	orr.w	r1, r6, r1
     594:	ea40 0002 	orr.w	r0, r0, r2
     598:	ea81 0103 	eor.w	r1, r1, r3
     59c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5a0:	bfc2      	ittt	gt
     5a2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5aa:	bd70      	popgt	{r4, r5, r6, pc}
     5ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5b0:	f04f 0e00 	mov.w	lr, #0
     5b4:	3c01      	subs	r4, #1
     5b6:	f300 80ab 	bgt.w	710 <__aeabi_dmul+0x238>
     5ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5be:	bfde      	ittt	le
     5c0:	2000      	movle	r0, #0
     5c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5c6:	bd70      	pople	{r4, r5, r6, pc}
     5c8:	f1c4 0400 	rsb	r4, r4, #0
     5cc:	3c20      	subs	r4, #32
     5ce:	da35      	bge.n	63c <__aeabi_dmul+0x164>
     5d0:	340c      	adds	r4, #12
     5d2:	dc1b      	bgt.n	60c <__aeabi_dmul+0x134>
     5d4:	f104 0414 	add.w	r4, r4, #20
     5d8:	f1c4 0520 	rsb	r5, r4, #32
     5dc:	fa00 f305 	lsl.w	r3, r0, r5
     5e0:	fa20 f004 	lsr.w	r0, r0, r4
     5e4:	fa01 f205 	lsl.w	r2, r1, r5
     5e8:	ea40 0002 	orr.w	r0, r0, r2
     5ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f8:	fa21 f604 	lsr.w	r6, r1, r4
     5fc:	eb42 0106 	adc.w	r1, r2, r6
     600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     604:	bf08      	it	eq
     606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     60a:	bd70      	pop	{r4, r5, r6, pc}
     60c:	f1c4 040c 	rsb	r4, r4, #12
     610:	f1c4 0520 	rsb	r5, r4, #32
     614:	fa00 f304 	lsl.w	r3, r0, r4
     618:	fa20 f005 	lsr.w	r0, r0, r5
     61c:	fa01 f204 	lsl.w	r2, r1, r4
     620:	ea40 0002 	orr.w	r0, r0, r2
     624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     62c:	f141 0100 	adc.w	r1, r1, #0
     630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     634:	bf08      	it	eq
     636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     63a:	bd70      	pop	{r4, r5, r6, pc}
     63c:	f1c4 0520 	rsb	r5, r4, #32
     640:	fa00 f205 	lsl.w	r2, r0, r5
     644:	ea4e 0e02 	orr.w	lr, lr, r2
     648:	fa20 f304 	lsr.w	r3, r0, r4
     64c:	fa01 f205 	lsl.w	r2, r1, r5
     650:	ea43 0302 	orr.w	r3, r3, r2
     654:	fa21 f004 	lsr.w	r0, r1, r4
     658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     65c:	fa21 f204 	lsr.w	r2, r1, r4
     660:	ea20 0002 	bic.w	r0, r0, r2
     664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     66c:	bf08      	it	eq
     66e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     672:	bd70      	pop	{r4, r5, r6, pc}
     674:	f094 0f00 	teq	r4, #0
     678:	d10f      	bne.n	69a <__aeabi_dmul+0x1c2>
     67a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     67e:	0040      	lsls	r0, r0, #1
     680:	eb41 0101 	adc.w	r1, r1, r1
     684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     688:	bf08      	it	eq
     68a:	3c01      	subeq	r4, #1
     68c:	d0f7      	beq.n	67e <__aeabi_dmul+0x1a6>
     68e:	ea41 0106 	orr.w	r1, r1, r6
     692:	f095 0f00 	teq	r5, #0
     696:	bf18      	it	ne
     698:	4770      	bxne	lr
     69a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     69e:	0052      	lsls	r2, r2, #1
     6a0:	eb43 0303 	adc.w	r3, r3, r3
     6a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6a8:	bf08      	it	eq
     6aa:	3d01      	subeq	r5, #1
     6ac:	d0f7      	beq.n	69e <__aeabi_dmul+0x1c6>
     6ae:	ea43 0306 	orr.w	r3, r3, r6
     6b2:	4770      	bx	lr
     6b4:	ea94 0f0c 	teq	r4, ip
     6b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6bc:	bf18      	it	ne
     6be:	ea95 0f0c 	teqne	r5, ip
     6c2:	d00c      	beq.n	6de <__aeabi_dmul+0x206>
     6c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6c8:	bf18      	it	ne
     6ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6ce:	d1d1      	bne.n	674 <__aeabi_dmul+0x19c>
     6d0:	ea81 0103 	eor.w	r1, r1, r3
     6d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6d8:	f04f 0000 	mov.w	r0, #0
     6dc:	bd70      	pop	{r4, r5, r6, pc}
     6de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6e2:	bf06      	itte	eq
     6e4:	4610      	moveq	r0, r2
     6e6:	4619      	moveq	r1, r3
     6e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6ec:	d019      	beq.n	722 <__aeabi_dmul+0x24a>
     6ee:	ea94 0f0c 	teq	r4, ip
     6f2:	d102      	bne.n	6fa <__aeabi_dmul+0x222>
     6f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6f8:	d113      	bne.n	722 <__aeabi_dmul+0x24a>
     6fa:	ea95 0f0c 	teq	r5, ip
     6fe:	d105      	bne.n	70c <__aeabi_dmul+0x234>
     700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     704:	bf1c      	itt	ne
     706:	4610      	movne	r0, r2
     708:	4619      	movne	r1, r3
     70a:	d10a      	bne.n	722 <__aeabi_dmul+0x24a>
     70c:	ea81 0103 	eor.w	r1, r1, r3
     710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     71c:	f04f 0000 	mov.w	r0, #0
     720:	bd70      	pop	{r4, r5, r6, pc}
     722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     72a:	bd70      	pop	{r4, r5, r6, pc}

0000072c <__aeabi_ddiv>:
     72c:	b570      	push	{r4, r5, r6, lr}
     72e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     73a:	bf1d      	ittte	ne
     73c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     740:	ea94 0f0c 	teqne	r4, ip
     744:	ea95 0f0c 	teqne	r5, ip
     748:	f000 f8a7 	bleq	89a <_min_heap_size+0x9a>
     74c:	eba4 0405 	sub.w	r4, r4, r5
     750:	ea81 0e03 	eor.w	lr, r1, r3
     754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     758:	ea4f 3101 	mov.w	r1, r1, lsl #12
     75c:	f000 8088 	beq.w	870 <_min_heap_size+0x70>
     760:	ea4f 3303 	mov.w	r3, r3, lsl #12
     764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     76c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     770:	ea4f 2202 	mov.w	r2, r2, lsl #8
     774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     77c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     784:	429d      	cmp	r5, r3
     786:	bf08      	it	eq
     788:	4296      	cmpeq	r6, r2
     78a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     78e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     792:	d202      	bcs.n	79a <__aeabi_ddiv+0x6e>
     794:	085b      	lsrs	r3, r3, #1
     796:	ea4f 0232 	mov.w	r2, r2, rrx
     79a:	1ab6      	subs	r6, r6, r2
     79c:	eb65 0503 	sbc.w	r5, r5, r3
     7a0:	085b      	lsrs	r3, r3, #1
     7a2:	ea4f 0232 	mov.w	r2, r2, rrx
     7a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ae:	ebb6 0e02 	subs.w	lr, r6, r2
     7b2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7b6:	bf22      	ittt	cs
     7b8:	1ab6      	subcs	r6, r6, r2
     7ba:	4675      	movcs	r5, lr
     7bc:	ea40 000c 	orrcs.w	r0, r0, ip
     7c0:	085b      	lsrs	r3, r3, #1
     7c2:	ea4f 0232 	mov.w	r2, r2, rrx
     7c6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ca:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ce:	bf22      	ittt	cs
     7d0:	1ab6      	subcs	r6, r6, r2
     7d2:	4675      	movcs	r5, lr
     7d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7d8:	085b      	lsrs	r3, r3, #1
     7da:	ea4f 0232 	mov.w	r2, r2, rrx
     7de:	ebb6 0e02 	subs.w	lr, r6, r2
     7e2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7e6:	bf22      	ittt	cs
     7e8:	1ab6      	subcs	r6, r6, r2
     7ea:	4675      	movcs	r5, lr
     7ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7f0:	085b      	lsrs	r3, r3, #1
     7f2:	ea4f 0232 	mov.w	r2, r2, rrx
     7f6:	ebb6 0e02 	subs.w	lr, r6, r2
     7fa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7fe:	bf22      	ittt	cs
     800:	1ab6      	subcs	r6, r6, r2
     802:	4675      	movcs	r5, lr
     804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     808:	ea55 0e06 	orrs.w	lr, r5, r6
     80c:	d018      	beq.n	840 <_min_heap_size+0x40>
     80e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     816:	ea4f 1606 	mov.w	r6, r6, lsl #4
     81a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     81e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     82a:	d1c0      	bne.n	7ae <__aeabi_ddiv+0x82>
     82c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     830:	d10b      	bne.n	84a <_min_heap_size+0x4a>
     832:	ea41 0100 	orr.w	r1, r1, r0
     836:	f04f 0000 	mov.w	r0, #0
     83a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     83e:	e7b6      	b.n	7ae <__aeabi_ddiv+0x82>
     840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     844:	bf04      	itt	eq
     846:	4301      	orreq	r1, r0
     848:	2000      	moveq	r0, #0
     84a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     84e:	bf88      	it	hi
     850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     854:	f63f aeaf 	bhi.w	5b6 <__aeabi_dmul+0xde>
     858:	ebb5 0c03 	subs.w	ip, r5, r3
     85c:	bf04      	itt	eq
     85e:	ebb6 0c02 	subseq.w	ip, r6, r2
     862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     866:	f150 0000 	adcs.w	r0, r0, #0
     86a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     86e:	bd70      	pop	{r4, r5, r6, pc}
     870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     87c:	bfc2      	ittt	gt
     87e:	ebd4 050c 	rsbsgt	r5, r4, ip
     882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     886:	bd70      	popgt	{r4, r5, r6, pc}
     888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     88c:	f04f 0e00 	mov.w	lr, #0
     890:	3c01      	subs	r4, #1
     892:	e690      	b.n	5b6 <__aeabi_dmul+0xde>
     894:	ea45 0e06 	orr.w	lr, r5, r6
     898:	e68d      	b.n	5b6 <__aeabi_dmul+0xde>
     89a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     89e:	ea94 0f0c 	teq	r4, ip
     8a2:	bf08      	it	eq
     8a4:	ea95 0f0c 	teqeq	r5, ip
     8a8:	f43f af3b 	beq.w	722 <__aeabi_dmul+0x24a>
     8ac:	ea94 0f0c 	teq	r4, ip
     8b0:	d10a      	bne.n	8c8 <_min_heap_size+0xc8>
     8b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8b6:	f47f af34 	bne.w	722 <__aeabi_dmul+0x24a>
     8ba:	ea95 0f0c 	teq	r5, ip
     8be:	f47f af25 	bne.w	70c <__aeabi_dmul+0x234>
     8c2:	4610      	mov	r0, r2
     8c4:	4619      	mov	r1, r3
     8c6:	e72c      	b.n	722 <__aeabi_dmul+0x24a>
     8c8:	ea95 0f0c 	teq	r5, ip
     8cc:	d106      	bne.n	8dc <_min_heap_size+0xdc>
     8ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8d2:	f43f aefd 	beq.w	6d0 <__aeabi_dmul+0x1f8>
     8d6:	4610      	mov	r0, r2
     8d8:	4619      	mov	r1, r3
     8da:	e722      	b.n	722 <__aeabi_dmul+0x24a>
     8dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8e0:	bf18      	it	ne
     8e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8e6:	f47f aec5 	bne.w	674 <__aeabi_dmul+0x19c>
     8ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8ee:	f47f af0d 	bne.w	70c <__aeabi_dmul+0x234>
     8f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8f6:	f47f aeeb 	bne.w	6d0 <__aeabi_dmul+0x1f8>
     8fa:	e712      	b.n	722 <__aeabi_dmul+0x24a>

000008fc <__gedf2>:
     8fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     900:	e006      	b.n	910 <__cmpdf2+0x4>
     902:	bf00      	nop

00000904 <__ledf2>:
     904:	f04f 0c01 	mov.w	ip, #1
     908:	e002      	b.n	910 <__cmpdf2+0x4>
     90a:	bf00      	nop

0000090c <__cmpdf2>:
     90c:	f04f 0c01 	mov.w	ip, #1
     910:	f84d cd04 	str.w	ip, [sp, #-4]!
     914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     91c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     920:	bf18      	it	ne
     922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     926:	d01b      	beq.n	960 <__cmpdf2+0x54>
     928:	b001      	add	sp, #4
     92a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     92e:	bf0c      	ite	eq
     930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     934:	ea91 0f03 	teqne	r1, r3
     938:	bf02      	ittt	eq
     93a:	ea90 0f02 	teqeq	r0, r2
     93e:	2000      	moveq	r0, #0
     940:	4770      	bxeq	lr
     942:	f110 0f00 	cmn.w	r0, #0
     946:	ea91 0f03 	teq	r1, r3
     94a:	bf58      	it	pl
     94c:	4299      	cmppl	r1, r3
     94e:	bf08      	it	eq
     950:	4290      	cmpeq	r0, r2
     952:	bf2c      	ite	cs
     954:	17d8      	asrcs	r0, r3, #31
     956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     95a:	f040 0001 	orr.w	r0, r0, #1
     95e:	4770      	bx	lr
     960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     968:	d102      	bne.n	970 <__cmpdf2+0x64>
     96a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     96e:	d107      	bne.n	980 <__cmpdf2+0x74>
     970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     978:	d1d6      	bne.n	928 <__cmpdf2+0x1c>
     97a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     97e:	d0d3      	beq.n	928 <__cmpdf2+0x1c>
     980:	f85d 0b04 	ldr.w	r0, [sp], #4
     984:	4770      	bx	lr
     986:	bf00      	nop

00000988 <__aeabi_cdrcmple>:
     988:	4684      	mov	ip, r0
     98a:	4610      	mov	r0, r2
     98c:	4662      	mov	r2, ip
     98e:	468c      	mov	ip, r1
     990:	4619      	mov	r1, r3
     992:	4663      	mov	r3, ip
     994:	e000      	b.n	998 <__aeabi_cdcmpeq>
     996:	bf00      	nop

00000998 <__aeabi_cdcmpeq>:
     998:	b501      	push	{r0, lr}
     99a:	f7ff ffb7 	bl	90c <__cmpdf2>
     99e:	2800      	cmp	r0, #0
     9a0:	bf48      	it	mi
     9a2:	f110 0f00 	cmnmi.w	r0, #0
     9a6:	bd01      	pop	{r0, pc}

000009a8 <__aeabi_dcmpeq>:
     9a8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ac:	f7ff fff4 	bl	998 <__aeabi_cdcmpeq>
     9b0:	bf0c      	ite	eq
     9b2:	2001      	moveq	r0, #1
     9b4:	2000      	movne	r0, #0
     9b6:	f85d fb08 	ldr.w	pc, [sp], #8
     9ba:	bf00      	nop

000009bc <__aeabi_dcmplt>:
     9bc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9c0:	f7ff ffea 	bl	998 <__aeabi_cdcmpeq>
     9c4:	bf34      	ite	cc
     9c6:	2001      	movcc	r0, #1
     9c8:	2000      	movcs	r0, #0
     9ca:	f85d fb08 	ldr.w	pc, [sp], #8
     9ce:	bf00      	nop

000009d0 <__aeabi_dcmple>:
     9d0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9d4:	f7ff ffe0 	bl	998 <__aeabi_cdcmpeq>
     9d8:	bf94      	ite	ls
     9da:	2001      	movls	r0, #1
     9dc:	2000      	movhi	r0, #0
     9de:	f85d fb08 	ldr.w	pc, [sp], #8
     9e2:	bf00      	nop

000009e4 <__aeabi_dcmpge>:
     9e4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e8:	f7ff ffce 	bl	988 <__aeabi_cdrcmple>
     9ec:	bf94      	ite	ls
     9ee:	2001      	movls	r0, #1
     9f0:	2000      	movhi	r0, #0
     9f2:	f85d fb08 	ldr.w	pc, [sp], #8
     9f6:	bf00      	nop

000009f8 <__aeabi_dcmpgt>:
     9f8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9fc:	f7ff ffc4 	bl	988 <__aeabi_cdrcmple>
     a00:	bf34      	ite	cc
     a02:	2001      	movcc	r0, #1
     a04:	2000      	movcs	r0, #0
     a06:	f85d fb08 	ldr.w	pc, [sp], #8
     a0a:	bf00      	nop

00000a0c <__aeabi_d2iz>:
     a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a14:	d215      	bcs.n	a42 <__aeabi_d2iz+0x36>
     a16:	d511      	bpl.n	a3c <__aeabi_d2iz+0x30>
     a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a20:	d912      	bls.n	a48 <__aeabi_d2iz+0x3c>
     a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a32:	fa23 f002 	lsr.w	r0, r3, r2
     a36:	bf18      	it	ne
     a38:	4240      	negne	r0, r0
     a3a:	4770      	bx	lr
     a3c:	f04f 0000 	mov.w	r0, #0
     a40:	4770      	bx	lr
     a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a46:	d105      	bne.n	a54 <__aeabi_d2iz+0x48>
     a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a4c:	bf08      	it	eq
     a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a52:	4770      	bx	lr
     a54:	f04f 0000 	mov.w	r0, #0
     a58:	4770      	bx	lr
     a5a:	bf00      	nop

00000a5c <__aeabi_d2uiz>:
     a5c:	004a      	lsls	r2, r1, #1
     a5e:	d211      	bcs.n	a84 <__aeabi_d2uiz+0x28>
     a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a64:	d211      	bcs.n	a8a <__aeabi_d2uiz+0x2e>
     a66:	d50d      	bpl.n	a84 <__aeabi_d2uiz+0x28>
     a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a70:	d40e      	bmi.n	a90 <__aeabi_d2uiz+0x34>
     a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a7e:	fa23 f002 	lsr.w	r0, r3, r2
     a82:	4770      	bx	lr
     a84:	f04f 0000 	mov.w	r0, #0
     a88:	4770      	bx	lr
     a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a8e:	d102      	bne.n	a96 <__aeabi_d2uiz+0x3a>
     a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a94:	4770      	bx	lr
     a96:	f04f 0000 	mov.w	r0, #0
     a9a:	4770      	bx	lr

00000a9c <__aeabi_frsub>:
     a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     aa0:	e002      	b.n	aa8 <__addsf3>
     aa2:	bf00      	nop

00000aa4 <__aeabi_fsub>:
     aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000aa8 <__addsf3>:
     aa8:	0042      	lsls	r2, r0, #1
     aaa:	bf1f      	itttt	ne
     aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     ab0:	ea92 0f03 	teqne	r2, r3
     ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     abc:	d06a      	beq.n	b94 <__addsf3+0xec>
     abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
     ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     ac6:	bfc1      	itttt	gt
     ac8:	18d2      	addgt	r2, r2, r3
     aca:	4041      	eorgt	r1, r0
     acc:	4048      	eorgt	r0, r1
     ace:	4041      	eorgt	r1, r0
     ad0:	bfb8      	it	lt
     ad2:	425b      	neglt	r3, r3
     ad4:	2b19      	cmp	r3, #25
     ad6:	bf88      	it	hi
     ad8:	4770      	bxhi	lr
     ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ae6:	bf18      	it	ne
     ae8:	4240      	negne	r0, r0
     aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     af6:	bf18      	it	ne
     af8:	4249      	negne	r1, r1
     afa:	ea92 0f03 	teq	r2, r3
     afe:	d03f      	beq.n	b80 <__addsf3+0xd8>
     b00:	f1a2 0201 	sub.w	r2, r2, #1
     b04:	fa41 fc03 	asr.w	ip, r1, r3
     b08:	eb10 000c 	adds.w	r0, r0, ip
     b0c:	f1c3 0320 	rsb	r3, r3, #32
     b10:	fa01 f103 	lsl.w	r1, r1, r3
     b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b18:	d502      	bpl.n	b20 <__addsf3+0x78>
     b1a:	4249      	negs	r1, r1
     b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b24:	d313      	bcc.n	b4e <__addsf3+0xa6>
     b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b2a:	d306      	bcc.n	b3a <__addsf3+0x92>
     b2c:	0840      	lsrs	r0, r0, #1
     b2e:	ea4f 0131 	mov.w	r1, r1, rrx
     b32:	f102 0201 	add.w	r2, r2, #1
     b36:	2afe      	cmp	r2, #254	; 0xfe
     b38:	d251      	bcs.n	bde <__addsf3+0x136>
     b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b42:	bf08      	it	eq
     b44:	f020 0001 	biceq.w	r0, r0, #1
     b48:	ea40 0003 	orr.w	r0, r0, r3
     b4c:	4770      	bx	lr
     b4e:	0049      	lsls	r1, r1, #1
     b50:	eb40 0000 	adc.w	r0, r0, r0
     b54:	3a01      	subs	r2, #1
     b56:	bf28      	it	cs
     b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     b5c:	d2ed      	bcs.n	b3a <__addsf3+0x92>
     b5e:	fab0 fc80 	clz	ip, r0
     b62:	f1ac 0c08 	sub.w	ip, ip, #8
     b66:	ebb2 020c 	subs.w	r2, r2, ip
     b6a:	fa00 f00c 	lsl.w	r0, r0, ip
     b6e:	bfaa      	itet	ge
     b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     b74:	4252      	neglt	r2, r2
     b76:	4318      	orrge	r0, r3
     b78:	bfbc      	itt	lt
     b7a:	40d0      	lsrlt	r0, r2
     b7c:	4318      	orrlt	r0, r3
     b7e:	4770      	bx	lr
     b80:	f092 0f00 	teq	r2, #0
     b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     b88:	bf06      	itte	eq
     b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     b8e:	3201      	addeq	r2, #1
     b90:	3b01      	subne	r3, #1
     b92:	e7b5      	b.n	b00 <__addsf3+0x58>
     b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
     b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     b9c:	bf18      	it	ne
     b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     ba2:	d021      	beq.n	be8 <__addsf3+0x140>
     ba4:	ea92 0f03 	teq	r2, r3
     ba8:	d004      	beq.n	bb4 <__addsf3+0x10c>
     baa:	f092 0f00 	teq	r2, #0
     bae:	bf08      	it	eq
     bb0:	4608      	moveq	r0, r1
     bb2:	4770      	bx	lr
     bb4:	ea90 0f01 	teq	r0, r1
     bb8:	bf1c      	itt	ne
     bba:	2000      	movne	r0, #0
     bbc:	4770      	bxne	lr
     bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     bc2:	d104      	bne.n	bce <__addsf3+0x126>
     bc4:	0040      	lsls	r0, r0, #1
     bc6:	bf28      	it	cs
     bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     bcc:	4770      	bx	lr
     bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     bd2:	bf3c      	itt	cc
     bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     bd8:	4770      	bxcc	lr
     bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     be6:	4770      	bx	lr
     be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
     bec:	bf16      	itet	ne
     bee:	4608      	movne	r0, r1
     bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     bf4:	4601      	movne	r1, r0
     bf6:	0242      	lsls	r2, r0, #9
     bf8:	bf06      	itte	eq
     bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     bfe:	ea90 0f01 	teqeq	r0, r1
     c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c06:	4770      	bx	lr

00000c08 <__aeabi_ui2f>:
     c08:	f04f 0300 	mov.w	r3, #0
     c0c:	e004      	b.n	c18 <__aeabi_i2f+0x8>
     c0e:	bf00      	nop

00000c10 <__aeabi_i2f>:
     c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c14:	bf48      	it	mi
     c16:	4240      	negmi	r0, r0
     c18:	ea5f 0c00 	movs.w	ip, r0
     c1c:	bf08      	it	eq
     c1e:	4770      	bxeq	lr
     c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c24:	4601      	mov	r1, r0
     c26:	f04f 0000 	mov.w	r0, #0
     c2a:	e01c      	b.n	c66 <__aeabi_l2f+0x2a>

00000c2c <__aeabi_ul2f>:
     c2c:	ea50 0201 	orrs.w	r2, r0, r1
     c30:	bf08      	it	eq
     c32:	4770      	bxeq	lr
     c34:	f04f 0300 	mov.w	r3, #0
     c38:	e00a      	b.n	c50 <__aeabi_l2f+0x14>
     c3a:	bf00      	nop

00000c3c <__aeabi_l2f>:
     c3c:	ea50 0201 	orrs.w	r2, r0, r1
     c40:	bf08      	it	eq
     c42:	4770      	bxeq	lr
     c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     c48:	d502      	bpl.n	c50 <__aeabi_l2f+0x14>
     c4a:	4240      	negs	r0, r0
     c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c50:	ea5f 0c01 	movs.w	ip, r1
     c54:	bf02      	ittt	eq
     c56:	4684      	moveq	ip, r0
     c58:	4601      	moveq	r1, r0
     c5a:	2000      	moveq	r0, #0
     c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     c60:	bf08      	it	eq
     c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     c6a:	fabc f28c 	clz	r2, ip
     c6e:	3a08      	subs	r2, #8
     c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     c74:	db10      	blt.n	c98 <__aeabi_l2f+0x5c>
     c76:	fa01 fc02 	lsl.w	ip, r1, r2
     c7a:	4463      	add	r3, ip
     c7c:	fa00 fc02 	lsl.w	ip, r0, r2
     c80:	f1c2 0220 	rsb	r2, r2, #32
     c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     c88:	fa20 f202 	lsr.w	r2, r0, r2
     c8c:	eb43 0002 	adc.w	r0, r3, r2
     c90:	bf08      	it	eq
     c92:	f020 0001 	biceq.w	r0, r0, #1
     c96:	4770      	bx	lr
     c98:	f102 0220 	add.w	r2, r2, #32
     c9c:	fa01 fc02 	lsl.w	ip, r1, r2
     ca0:	f1c2 0220 	rsb	r2, r2, #32
     ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     ca8:	fa21 f202 	lsr.w	r2, r1, r2
     cac:	eb43 0002 	adc.w	r0, r3, r2
     cb0:	bf08      	it	eq
     cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     cb6:	4770      	bx	lr

00000cb8 <__aeabi_uldivmod>:
     cb8:	b953      	cbnz	r3, cd0 <__aeabi_uldivmod+0x18>
     cba:	b94a      	cbnz	r2, cd0 <__aeabi_uldivmod+0x18>
     cbc:	2900      	cmp	r1, #0
     cbe:	bf08      	it	eq
     cc0:	2800      	cmpeq	r0, #0
     cc2:	bf1c      	itt	ne
     cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     ccc:	f000 b80c 	b.w	ce8 <__aeabi_idiv0>
     cd0:	f1ad 0c08 	sub.w	ip, sp, #8
     cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     cd8:	f013 fbe6 	bl	144a8 <__udivmoddi4>
     cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
     ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ce4:	b004      	add	sp, #16
     ce6:	4770      	bx	lr

00000ce8 <__aeabi_idiv0>:
     ce8:	4770      	bx	lr
     cea:	bf00      	nop

00000cec <sk9822_update>:

    if(ubUpdate)
        sk9822_update();
}
void sk9822_update()
{
     cec:	b508      	push	{r3, lr}
    while(!(USART0->STATUS & USART_STATUS_TXBL));
     cee:	4a06      	ldr	r2, [pc, #24]	; (d08 <sk9822_update+0x1c>)
     cf0:	6913      	ldr	r3, [r2, #16]
     cf2:	065b      	lsls	r3, r3, #25
     cf4:	d5fc      	bpl.n	cf0 <sk9822_update+0x4>

    ldma_ch_req_clear(SK9822_DMA_CHANNEL);
     cf6:	200d      	movs	r0, #13
     cf8:	f010 ff2e 	bl	11b58 <ldma_ch_req_clear>
    ldma_ch_load(SK9822_DMA_CHANNEL, pDMADescriptor);
     cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ldma_ch_load(SK9822_DMA_CHANNEL, pDMADescriptor);
     d00:	4902      	ldr	r1, [pc, #8]	; (d0c <sk9822_update+0x20>)
     d02:	200d      	movs	r0, #13
     d04:	f010 bee8 	b.w	11ad8 <ldma_ch_load>
     d08:	40010000 	.word	0x40010000
     d0c:	200000c0 	.word	0x200000c0

00000d10 <sk9822_set_color>:
{
     d10:	b4f0      	push	{r4, r5, r6, r7}
    if(usLED >= SK9822_NUM_LEDS)
     d12:	2807      	cmp	r0, #7
{
     d14:	f89d 7010 	ldrb.w	r7, [sp, #16]
     d18:	f89d 6014 	ldrb.w	r6, [sp, #20]
    if(usLED >= SK9822_NUM_LEDS)
     d1c:	d810      	bhi.n	d40 <sk9822_set_color+0x30>
    ubLEDBuff[4 + (usLED * 4)] = 0xE0 + (ubBrightness & 0x1F);
     d1e:	4d09      	ldr	r5, [pc, #36]	; (d44 <sk9822_set_color+0x34>)
     d20:	3001      	adds	r0, #1
     d22:	0084      	lsls	r4, r0, #2
     d24:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
     d28:	f805 1020 	strb.w	r1, [r5, r0, lsl #2]
    ubLEDBuff[5 + (usLED * 4)] = ubBlue;
     d2c:	1c61      	adds	r1, r4, #1
     d2e:	546f      	strb	r7, [r5, r1]
    ubLEDBuff[6 + (usLED * 4)] = ubGreen;
     d30:	1ca1      	adds	r1, r4, #2
    ubLEDBuff[7 + (usLED * 4)] = ubRed;
     d32:	3403      	adds	r4, #3
    ubLEDBuff[6 + (usLED * 4)] = ubGreen;
     d34:	546b      	strb	r3, [r5, r1]
    ubLEDBuff[7 + (usLED * 4)] = ubRed;
     d36:	552a      	strb	r2, [r5, r4]
    if(ubUpdate)
     d38:	b116      	cbz	r6, d40 <sk9822_set_color+0x30>
}
     d3a:	bcf0      	pop	{r4, r5, r6, r7}
        sk9822_update();
     d3c:	f7ff bfd6 	b.w	cec <sk9822_update>
}
     d40:	bcf0      	pop	{r4, r5, r6, r7}
     d42:	4770      	bx	lr
     d44:	20000100 	.word	0x20000100

00000d48 <sk9822_init>:
{
     d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    memset((void *)ubLEDBuff, 0x00, SK9822_BUFF_LEN);
     d4a:	481c      	ldr	r0, [pc, #112]	; (dbc <sk9822_init+0x74>)
     d4c:	2229      	movs	r2, #41	; 0x29
     d4e:	2100      	movs	r1, #0
     d50:	f013 fabe 	bl	142d0 <memset>
     d54:	2400      	movs	r4, #0
        sk9822_set_color(i, 0x00, 0x00, 0x00, 0x00, 0);
     d56:	4625      	mov	r5, r4
     d58:	2300      	movs	r3, #0
     d5a:	b2a0      	uxth	r0, r4
     d5c:	e9cd 5500 	strd	r5, r5, [sp]
     d60:	461a      	mov	r2, r3
     d62:	4619      	mov	r1, r3
     d64:	3401      	adds	r4, #1
     d66:	f7ff ffd3 	bl	d10 <sk9822_set_color>
    for(uint8_t i = 0; i < SK9822_NUM_LEDS; i++)
     d6a:	2c08      	cmp	r4, #8
     d6c:	d1f4      	bne.n	d58 <sk9822_init+0x10>
    ldma_ch_disable(SK9822_DMA_CHANNEL);
     d6e:	200d      	movs	r0, #13
     d70:	f010 fed4 	bl	11b1c <ldma_ch_disable>
    ldma_ch_peri_req_disable(SK9822_DMA_CHANNEL);
     d74:	200d      	movs	r0, #13
     d76:	f010 fee5 	bl	11b44 <ldma_ch_peri_req_disable>
    ldma_ch_req_clear(SK9822_DMA_CHANNEL);
     d7a:	200d      	movs	r0, #13
     d7c:	f010 feec 	bl	11b58 <ldma_ch_req_clear>
    ldma_ch_config(SK9822_DMA_CHANNEL, LDMA_CH_REQSEL_SOURCESEL_USART0 | LDMA_CH_REQSEL_SIGSEL_USART0TXEMPTY, LDMA_CH_CFG_SRCINCSIGN_POSITIVE, LDMA_CH_CFG_DSTINCSIGN_DEFAULT, LDMA_CH_CFG_ARBSLOTS_DEFAULT, 0);
     d80:	2300      	movs	r3, #0
    pDMADescriptor[0].CTRL = LDMA_CH_CTRL_DSTMODE_ABSOLUTE | LDMA_CH_CTRL_SRCMODE_ABSOLUTE | LDMA_CH_CTRL_DSTINC_NONE | LDMA_CH_CTRL_SIZE_BYTE | LDMA_CH_CTRL_SRCINC_ONE | LDMA_CH_CTRL_REQMODE_BLOCK | LDMA_CH_CTRL_BLOCKSIZE_UNIT1 | ((SK9822_BUFF_LEN << _LDMA_CH_CTRL_XFERCNT_SHIFT) & _LDMA_CH_CTRL_XFERCNT_MASK) | LDMA_CH_CTRL_STRUCTREQ | LDMA_CH_CTRL_STRUCTTYPE_TRANSFER;
     d82:	4c0f      	ldr	r4, [pc, #60]	; (dc0 <sk9822_init+0x78>)
    ldma_ch_config(SK9822_DMA_CHANNEL, LDMA_CH_REQSEL_SOURCESEL_USART0 | LDMA_CH_REQSEL_SIGSEL_USART0TXEMPTY, LDMA_CH_CFG_SRCINCSIGN_POSITIVE, LDMA_CH_CFG_DSTINCSIGN_DEFAULT, LDMA_CH_CFG_ARBSLOTS_DEFAULT, 0);
     d84:	490f      	ldr	r1, [pc, #60]	; (dc4 <sk9822_init+0x7c>)
     d86:	461a      	mov	r2, r3
     d88:	e9cd 5500 	strd	r5, r5, [sp]
     d8c:	200d      	movs	r0, #13
     d8e:	f010 fe8d 	bl	11aac <ldma_ch_config>
    pDMADescriptor[0].CTRL = LDMA_CH_CTRL_DSTMODE_ABSOLUTE | LDMA_CH_CTRL_SRCMODE_ABSOLUTE | LDMA_CH_CTRL_DSTINC_NONE | LDMA_CH_CTRL_SIZE_BYTE | LDMA_CH_CTRL_SRCINC_ONE | LDMA_CH_CTRL_REQMODE_BLOCK | LDMA_CH_CTRL_BLOCKSIZE_UNIT1 | ((SK9822_BUFF_LEN << _LDMA_CH_CTRL_XFERCNT_SHIFT) & _LDMA_CH_CTRL_XFERCNT_MASK) | LDMA_CH_CTRL_STRUCTREQ | LDMA_CH_CTRL_STRUCTTYPE_TRANSFER;
     d92:	4b0d      	ldr	r3, [pc, #52]	; (dc8 <sk9822_init+0x80>)
     d94:	6023      	str	r3, [r4, #0]
    pDMADescriptor[0].SRC = ubLEDBuff;
     d96:	4b09      	ldr	r3, [pc, #36]	; (dbc <sk9822_init+0x74>)
     d98:	6063      	str	r3, [r4, #4]
    pDMADescriptor[0].DST = &(USART0->TXDATA);
     d9a:	4b0c      	ldr	r3, [pc, #48]	; (dcc <sk9822_init+0x84>)
     d9c:	60a3      	str	r3, [r4, #8]
    ldma_ch_peri_req_enable(SK9822_DMA_CHANNEL);
     d9e:	200d      	movs	r0, #13
    pDMADescriptor[0].LINK = 0x00000000;
     da0:	60e5      	str	r5, [r4, #12]
    ldma_ch_peri_req_enable(SK9822_DMA_CHANNEL);
     da2:	f010 fec5 	bl	11b30 <ldma_ch_peri_req_enable>
    ldma_ch_enable(SK9822_DMA_CHANNEL);
     da6:	200d      	movs	r0, #13
     da8:	f010 feae 	bl	11b08 <ldma_ch_enable>
    ldma_ch_load(SK9822_DMA_CHANNEL, pDMADescriptor);
     dac:	4621      	mov	r1, r4
     dae:	200d      	movs	r0, #13
}
     db0:	b003      	add	sp, #12
     db2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ldma_ch_load(SK9822_DMA_CHANNEL, pDMADescriptor);
     db6:	f010 be8f 	b.w	11ad8 <ldma_ch_load>
     dba:	bf00      	nop
     dbc:	20000100 	.word	0x20000100
     dc0:	200000c0 	.word	0x200000c0
     dc4:	000c0002 	.word	0x000c0002
     dc8:	30000298 	.word	0x30000298
     dcc:	40010034 	.word	0x40010034

00000dd0 <pid_init>:
#include "pid.h"

pid_struct_t* pid_init(float fMax, float fMin, float fRange, float fKiCap, float fKp, float fKi, float fKd)
{
     dd0:	b508      	push	{r3, lr}
    pid_struct_t *pPID = (pid_struct_t *)malloc(sizeof(pid_struct_t));
     dd2:	2034      	movs	r0, #52	; 0x34
{
     dd4:	ed2d 8b08 	vpush	{d8-d11}
     dd8:	eeb0 ba40 	vmov.f32	s22, s0
     ddc:	eeb0 8a60 	vmov.f32	s16, s1
     de0:	eef0 aa41 	vmov.f32	s21, s2
     de4:	eeb0 aa61 	vmov.f32	s20, s3
     de8:	eef0 9a42 	vmov.f32	s19, s4
     dec:	eeb0 9a62 	vmov.f32	s18, s5
     df0:	eef0 8a43 	vmov.f32	s17, s6
    pid_struct_t *pPID = (pid_struct_t *)malloc(sizeof(pid_struct_t));
     df4:	f013 fa4e 	bl	14294 <malloc>

    if(!pPID)
     df8:	b1a8      	cbz	r0, e26 <pid_init+0x56>
        return NULL;

    pPID->fDeltaTime = 0;
     dfa:	2300      	movs	r3, #0
    pPID->fKp = fKp;
    pPID->fKi = fKi;
    pPID->fKd = fKd;
    pPID->fPreviousError = 0.f;
    pPID->fIntegral = 0.f;
    pPID->fSetpoint = 0.f;
     dfc:	6283      	str	r3, [r0, #40]	; 0x28
    pPID->fDeltaTime = 0;
     dfe:	6003      	str	r3, [r0, #0]
    pPID->fValue = 0.f;
     e00:	62c3      	str	r3, [r0, #44]	; 0x2c
    pPID->fMax = fMax;
     e02:	ed80 ba01 	vstr	s22, [r0, #4]
    pPID->fMin = fMin;
     e06:	ed80 8a02 	vstr	s16, [r0, #8]
    pPID->fRange = fRange;
     e0a:	edc0 aa09 	vstr	s21, [r0, #36]	; 0x24
    pPID->fKiCap = fKiCap;
     e0e:	ed80 aa03 	vstr	s20, [r0, #12]
    pPID->fKp = fKp;
     e12:	edc0 9a04 	vstr	s19, [r0, #16]
    pPID->fKi = fKi;
     e16:	ed80 9a05 	vstr	s18, [r0, #20]
    pPID->fKd = fKd;
     e1a:	edc0 8a06 	vstr	s17, [r0, #24]
    pPID->fPreviousError = 0.f;
     e1e:	61c3      	str	r3, [r0, #28]
    pPID->fIntegral = 0.f;
     e20:	6203      	str	r3, [r0, #32]
    pPID->fOutput = fMin;
     e22:	ed80 8a0c 	vstr	s16, [r0, #48]	; 0x30

    return pPID;
}
     e26:	ecbd 8b08 	vpop	{d8-d11}
     e2a:	bd08      	pop	{r3, pc}

00000e2c <pid_calc>:

    free(pPID);
}

void pid_calc(pid_struct_t *pPID)
{
     e2c:	b082      	sub	sp, #8
    if(!pPID)
     e2e:	2800      	cmp	r0, #0
     e30:	d062      	beq.n	ef8 <pid_calc+0xcc>
        return;

    if(!pPID->fDeltaTime)
     e32:	edd0 5a00 	vldr	s11, [r0]
     e36:	eef5 5a40 	vcmp.f32	s11, #0.0
     e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e3e:	d05b      	beq.n	ef8 <pid_calc+0xcc>
        return;

    // Calculate error
    float fError = pPID->fSetpoint - pPID->fValue;
     e40:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
     e44:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
     e48:	ed9f 6a32 	vldr	s12, [pc, #200]	; f14 <pid_calc+0xe8>
     e4c:	ee37 7a67 	vsub.f32	s14, s14, s15

    if(fError < pPID->fRange && fError > -pPID->fRange)
     e50:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
     e54:	eef4 7ac7 	vcmpe.f32	s15, s14
     e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e5c:	dd4e      	ble.n	efc <pid_calc+0xd0>
     e5e:	eef1 6a67 	vneg.f32	s13, s15
     e62:	eef4 6ac7 	vcmpe.f32	s13, s14
     e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e6a:	d547      	bpl.n	efc <pid_calc+0xd0>
    {
        // Proportional term
        float fProportional = pPID->fKp * fError;
     e6c:	edd0 7a04 	vldr	s15, [r0, #16]

        // Integral term
        pPID->fIntegral += fError * pPID->fDeltaTime;
        if(pPID->fIntegral > pPID->fKiCap)
     e70:	ed90 5a03 	vldr	s10, [r0, #12]
        float fProportional = pPID->fKp * fError;
     e74:	ee67 6a27 	vmul.f32	s13, s14, s15
        pPID->fIntegral += fError * pPID->fDeltaTime;
     e78:	edd0 7a08 	vldr	s15, [r0, #32]
     e7c:	eee5 7a87 	vfma.f32	s15, s11, s14
            pPID->fIntegral = pPID->fKiCap;
     e80:	eef4 7a45 	vcmp.f32	s15, s10
     e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e88:	bfc8      	it	gt
     e8a:	eef0 7a45 	vmovgt.f32	s15, s10
        if(pPID->fIntegral < 0)
            pPID->fIntegral = 0;
     e8e:	eef4 7a46 	vcmp.f32	s15, s12
     e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e96:	bf48      	it	mi
     e98:	eef0 7a46 	vmovmi.f32	s15, s12
        float fIntegral = pPID->fKi * pPID->fIntegral;

        // Derivative term
        float fDeriv = (fError - pPID->fPreviousError) / pPID->fDeltaTime;
     e9c:	ed90 6a07 	vldr	s12, [r0, #28]
            pPID->fIntegral = 0;
     ea0:	edc0 7a08 	vstr	s15, [r0, #32]
        float fDeriv = (fError - pPID->fPreviousError) / pPID->fDeltaTime;
     ea4:	ee37 6a46 	vsub.f32	s12, s14, s12
     ea8:	ee86 5a25 	vdiv.f32	s10, s12, s11
        float fDerivative = pPID->fKd * fDeriv;

        // Calculate total output
        pPID->fOutput = fProportional + fIntegral + fDerivative;
     eac:	ed90 6a05 	vldr	s12, [r0, #20]
     eb0:	eee6 6a27 	vfma.f32	s13, s12, s15
     eb4:	eef0 7a66 	vmov.f32	s15, s13
     eb8:	edd0 6a06 	vldr	s13, [r0, #24]
     ebc:	eee6 7a85 	vfma.f32	s15, s13, s10

        // Clamp
        pPID->fOutput = CLIP(pPID->fOutput, pPID->fMin, pPID->fMax);
     ec0:	edd0 6a02 	vldr	s13, [r0, #8]
        pPID->fOutput = fProportional + fIntegral + fDerivative;
     ec4:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
        pPID->fOutput = CLIP(pPID->fOutput, pPID->fMin, pPID->fMax);
     ec8:	edd0 7a01 	vldr	s15, [r0, #4]
     ecc:	6b03      	ldr	r3, [r0, #48]	; 0x30
     ece:	9301      	str	r3, [sp, #4]
     ed0:	eef4 7ae6 	vcmpe.f32	s15, s13
     ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ed8:	bf58      	it	pl
     eda:	eef0 7a66 	vmovpl.f32	s15, s13
     ede:	eddd 6a01 	vldr	s13, [sp, #4]
     ee2:	eef4 6ae7 	vcmpe.f32	s13, s15
     ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     eea:	bf58      	it	pl
     eec:	eddd 7a01 	vldrpl	s15, [sp, #4]
     ef0:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
        pPID->fOutput = pPID->fMin;
        pPID->fIntegral = 0;
    }

    // Save error to differentiate
    pPID->fPreviousError = fError;
     ef4:	ed80 7a07 	vstr	s14, [r0, #28]
     ef8:	b002      	add	sp, #8
     efa:	4770      	bx	lr
    else if(fError > pPID->fRange)
     efc:	eef4 7ac7 	vcmpe.f32	s15, s14
     f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        pPID->fOutput = pPID->fMax;
     f04:	bf4c      	ite	mi
     f06:	6843      	ldrmi	r3, [r0, #4]
        pPID->fOutput = pPID->fMin;
     f08:	6883      	ldrpl	r3, [r0, #8]
     f0a:	6303      	str	r3, [r0, #48]	; 0x30
        pPID->fIntegral = 0;
     f0c:	ed80 6a08 	vstr	s12, [r0, #32]
     f10:	e7f0      	b.n	ef4 <pid_calc+0xc8>
     f12:	bf00      	nop
     f14:	00000000 	.word	0x00000000

00000f18 <_hardfault_isr>:

void trace_stack(uint32_t *pulFaultStackAddress);

void __attribute__ ((naked)) _hardfault_isr()
{
    __asm__ volatile
     f18:	f01e 0f04 	tst.w	lr, #4
     f1c:	bf0c      	ite	eq
     f1e:	f3ef 8008 	mrseq	r0, MSP
     f22:	f3ef 8009 	mrsne	r0, PSP
     f26:	6981      	ldr	r1, [r0, #24]
     f28:	4a00      	ldr	r2, [pc, #0]	; (f2c <hardfault_trace_stack_addr>)
     f2a:	4710      	bx	r2

00000f2c <hardfault_trace_stack_addr>:
     f2c:	00000f79 	.word	0x00000f79

00000f30 <_memmanage_isr>:
    );
}

void __attribute__ ((naked)) _memmanage_isr()
{
    __asm__ volatile
     f30:	f01e 0f04 	tst.w	lr, #4
     f34:	bf0c      	ite	eq
     f36:	f3ef 8008 	mrseq	r0, MSP
     f3a:	f3ef 8009 	mrsne	r0, PSP
     f3e:	6981      	ldr	r1, [r0, #24]
     f40:	4a00      	ldr	r2, [pc, #0]	; (f44 <memmanage_trace_stack_addr>)
     f42:	4710      	bx	r2

00000f44 <memmanage_trace_stack_addr>:
     f44:	0000105d 	.word	0x0000105d

00000f48 <_busfault_isr>:
    );
}

void __attribute__ ((naked)) _busfault_isr()
{
    __asm__ volatile
     f48:	f01e 0f04 	tst.w	lr, #4
     f4c:	bf0c      	ite	eq
     f4e:	f3ef 8008 	mrseq	r0, MSP
     f52:	f3ef 8009 	mrsne	r0, PSP
     f56:	6981      	ldr	r1, [r0, #24]
     f58:	4a00      	ldr	r2, [pc, #0]	; (f5c <busfault_trace_stack_addr>)
     f5a:	4710      	bx	r2

00000f5c <busfault_trace_stack_addr>:
     f5c:	00001151 	.word	0x00001151

00000f60 <_usagefault_isr>:
    );
}

void __attribute__ ((naked)) _usagefault_isr()
{
    __asm__ volatile
     f60:	f01e 0f04 	tst.w	lr, #4
     f64:	bf0c      	ite	eq
     f66:	f3ef 8008 	mrseq	r0, MSP
     f6a:	f3ef 8009 	mrsne	r0, PSP
     f6e:	6981      	ldr	r1, [r0, #24]
     f70:	4a00      	ldr	r2, [pc, #0]	; (f74 <usagefault_trace_stack_addr>)
     f72:	4710      	bx	r2

00000f74 <usagefault_trace_stack_addr>:
     f74:	00001251 	.word	0x00001251

00000f78 <hardfault_trace_stack>:
        " usagefault_trace_stack_addr: .word usagefault_trace_stack \n"
    );
}

void hardfault_trace_stack(uint32_t *pulFaultStackAddress)
{
     f78:	b500      	push	{lr}
     f7a:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
     f7c:	6803      	ldr	r3, [r0, #0]
     f7e:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
     f80:	6843      	ldr	r3, [r0, #4]
     f82:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
     f84:	6883      	ldr	r3, [r0, #8]
     f86:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
     f88:	68c3      	ldr	r3, [r0, #12]
     f8a:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
     f8c:	6903      	ldr	r3, [r0, #16]
     f8e:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
     f90:	6943      	ldr	r3, [r0, #20]
     f92:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
     f94:	6983      	ldr	r3, [r0, #24]
     f96:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Hard fault! Stack trace:");
     f98:	4921      	ldr	r1, [pc, #132]	; (1020 <hardfault_trace_stack+0xa8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
     f9a:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
     f9c:	4821      	ldr	r0, [pc, #132]	; (1024 <hardfault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
     f9e:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
     fa0:	f013 f92a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
     fa4:	9a00      	ldr	r2, [sp, #0]
     fa6:	491e      	ldr	r1, [pc, #120]	; (1020 <hardfault_trace_stack+0xa8>)
     fa8:	481f      	ldr	r0, [pc, #124]	; (1028 <hardfault_trace_stack+0xb0>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
     faa:	4c20      	ldr	r4, [pc, #128]	; (102c <hardfault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
     fac:	f013 f924 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
     fb0:	9a01      	ldr	r2, [sp, #4]
     fb2:	491b      	ldr	r1, [pc, #108]	; (1020 <hardfault_trace_stack+0xa8>)
     fb4:	481e      	ldr	r0, [pc, #120]	; (1030 <hardfault_trace_stack+0xb8>)
     fb6:	f013 f91f 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
     fba:	9a02      	ldr	r2, [sp, #8]
     fbc:	4918      	ldr	r1, [pc, #96]	; (1020 <hardfault_trace_stack+0xa8>)
     fbe:	481d      	ldr	r0, [pc, #116]	; (1034 <hardfault_trace_stack+0xbc>)
     fc0:	f013 f91a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
     fc4:	9a03      	ldr	r2, [sp, #12]
     fc6:	4916      	ldr	r1, [pc, #88]	; (1020 <hardfault_trace_stack+0xa8>)
     fc8:	481b      	ldr	r0, [pc, #108]	; (1038 <hardfault_trace_stack+0xc0>)
     fca:	f013 f915 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
     fce:	9a04      	ldr	r2, [sp, #16]
     fd0:	4913      	ldr	r1, [pc, #76]	; (1020 <hardfault_trace_stack+0xa8>)
     fd2:	481a      	ldr	r0, [pc, #104]	; (103c <hardfault_trace_stack+0xc4>)
     fd4:	f013 f910 	bl	141f8 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
     fd8:	9a05      	ldr	r2, [sp, #20]
     fda:	4911      	ldr	r1, [pc, #68]	; (1020 <hardfault_trace_stack+0xa8>)
     fdc:	4818      	ldr	r0, [pc, #96]	; (1040 <hardfault_trace_stack+0xc8>)
     fde:	f013 f90b 	bl	141f8 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
     fe2:	9a06      	ldr	r2, [sp, #24]
     fe4:	490e      	ldr	r1, [pc, #56]	; (1020 <hardfault_trace_stack+0xa8>)
     fe6:	4817      	ldr	r0, [pc, #92]	; (1044 <hardfault_trace_stack+0xcc>)
     fe8:	f013 f906 	bl	141f8 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
     fec:	9a07      	ldr	r2, [sp, #28]
     fee:	490c      	ldr	r1, [pc, #48]	; (1020 <hardfault_trace_stack+0xa8>)
     ff0:	4815      	ldr	r0, [pc, #84]	; (1048 <hardfault_trace_stack+0xd0>)
     ff2:	f013 f901 	bl	141f8 <printf>
    DBGPRINTLN_CTX("------------------------------");
     ff6:	490a      	ldr	r1, [pc, #40]	; (1020 <hardfault_trace_stack+0xa8>)
     ff8:	4814      	ldr	r0, [pc, #80]	; (104c <hardfault_trace_stack+0xd4>)
     ffa:	f013 f8fd 	bl	141f8 <printf>
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
     ffe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1000:	4907      	ldr	r1, [pc, #28]	; (1020 <hardfault_trace_stack+0xa8>)
    1002:	4813      	ldr	r0, [pc, #76]	; (1050 <hardfault_trace_stack+0xd8>)
    1004:	f013 f8f8 	bl	141f8 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1008:	6862      	ldr	r2, [r4, #4]
    100a:	4905      	ldr	r1, [pc, #20]	; (1020 <hardfault_trace_stack+0xa8>)
    100c:	4811      	ldr	r0, [pc, #68]	; (1054 <hardfault_trace_stack+0xdc>)
    100e:	f013 f8f3 	bl	141f8 <printf>
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    1012:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1016:	4902      	ldr	r1, [pc, #8]	; (1020 <hardfault_trace_stack+0xa8>)
    1018:	480f      	ldr	r0, [pc, #60]	; (1058 <hardfault_trace_stack+0xe0>)
    101a:	f013 f8ed 	bl	141f8 <printf>

    while(1);
    101e:	e7fe      	b.n	101e <hardfault_trace_stack+0xa6>
    1020:	000149eb 	.word	0x000149eb
    1024:	0001478b 	.word	0x0001478b
    1028:	000147ad 	.word	0x000147ad
    102c:	e000ed00 	.word	0xe000ed00
    1030:	000147c2 	.word	0x000147c2
    1034:	000147d7 	.word	0x000147d7
    1038:	000147ec 	.word	0x000147ec
    103c:	00014801 	.word	0x00014801
    1040:	00014817 	.word	0x00014817
    1044:	0001483e 	.word	0x0001483e
    1048:	00014869 	.word	0x00014869
    104c:	00014897 	.word	0x00014897
    1050:	000148bf 	.word	0x000148bf
    1054:	000148d6 	.word	0x000148d6
    1058:	000148ed 	.word	0x000148ed

0000105c <memmanage_trace_stack>:
}

void memmanage_trace_stack(uint32_t *pulFaultStackAddress)
{
    105c:	b500      	push	{lr}
    105e:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1060:	6803      	ldr	r3, [r0, #0]
    1062:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1064:	6843      	ldr	r3, [r0, #4]
    1066:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1068:	6883      	ldr	r3, [r0, #8]
    106a:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    106c:	68c3      	ldr	r3, [r0, #12]
    106e:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1070:	6903      	ldr	r3, [r0, #16]
    1072:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1074:	6943      	ldr	r3, [r0, #20]
    1076:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1078:	6983      	ldr	r3, [r0, #24]
    107a:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    107c:	4924      	ldr	r1, [pc, #144]	; (1110 <memmanage_trace_stack+0xb4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    107e:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    1080:	4824      	ldr	r0, [pc, #144]	; (1114 <memmanage_trace_stack+0xb8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1082:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    1084:	f013 f8b8 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1088:	9a00      	ldr	r2, [sp, #0]
    108a:	4921      	ldr	r1, [pc, #132]	; (1110 <memmanage_trace_stack+0xb4>)
    108c:	4822      	ldr	r0, [pc, #136]	; (1118 <memmanage_trace_stack+0xbc>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    108e:	4c23      	ldr	r4, [pc, #140]	; (111c <memmanage_trace_stack+0xc0>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1090:	f013 f8b2 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1094:	9a01      	ldr	r2, [sp, #4]
    1096:	491e      	ldr	r1, [pc, #120]	; (1110 <memmanage_trace_stack+0xb4>)
    1098:	4821      	ldr	r0, [pc, #132]	; (1120 <memmanage_trace_stack+0xc4>)
    109a:	f013 f8ad 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    109e:	9a02      	ldr	r2, [sp, #8]
    10a0:	491b      	ldr	r1, [pc, #108]	; (1110 <memmanage_trace_stack+0xb4>)
    10a2:	4820      	ldr	r0, [pc, #128]	; (1124 <memmanage_trace_stack+0xc8>)
    10a4:	f013 f8a8 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    10a8:	9a03      	ldr	r2, [sp, #12]
    10aa:	4919      	ldr	r1, [pc, #100]	; (1110 <memmanage_trace_stack+0xb4>)
    10ac:	481e      	ldr	r0, [pc, #120]	; (1128 <memmanage_trace_stack+0xcc>)
    10ae:	f013 f8a3 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    10b2:	9a04      	ldr	r2, [sp, #16]
    10b4:	4916      	ldr	r1, [pc, #88]	; (1110 <memmanage_trace_stack+0xb4>)
    10b6:	481d      	ldr	r0, [pc, #116]	; (112c <memmanage_trace_stack+0xd0>)
    10b8:	f013 f89e 	bl	141f8 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    10bc:	9a05      	ldr	r2, [sp, #20]
    10be:	4914      	ldr	r1, [pc, #80]	; (1110 <memmanage_trace_stack+0xb4>)
    10c0:	481b      	ldr	r0, [pc, #108]	; (1130 <memmanage_trace_stack+0xd4>)
    10c2:	f013 f899 	bl	141f8 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    10c6:	9a06      	ldr	r2, [sp, #24]
    10c8:	4911      	ldr	r1, [pc, #68]	; (1110 <memmanage_trace_stack+0xb4>)
    10ca:	481a      	ldr	r0, [pc, #104]	; (1134 <memmanage_trace_stack+0xd8>)
    10cc:	f013 f894 	bl	141f8 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    10d0:	9a07      	ldr	r2, [sp, #28]
    10d2:	490f      	ldr	r1, [pc, #60]	; (1110 <memmanage_trace_stack+0xb4>)
    10d4:	4818      	ldr	r0, [pc, #96]	; (1138 <memmanage_trace_stack+0xdc>)
    10d6:	f013 f88f 	bl	141f8 <printf>
    DBGPRINTLN_CTX("------------------------------");
    10da:	490d      	ldr	r1, [pc, #52]	; (1110 <memmanage_trace_stack+0xb4>)
    10dc:	4817      	ldr	r0, [pc, #92]	; (113c <memmanage_trace_stack+0xe0>)
    10de:	f013 f88b 	bl	141f8 <printf>
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    10e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    10e4:	490a      	ldr	r1, [pc, #40]	; (1110 <memmanage_trace_stack+0xb4>)
    10e6:	4816      	ldr	r0, [pc, #88]	; (1140 <memmanage_trace_stack+0xe4>)
    10e8:	b2d2      	uxtb	r2, r2
    10ea:	f013 f885 	bl	141f8 <printf>
    DBGPRINTLN_CTX("MMFAR [0x%08X]", SCB->MMFAR);
    10ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
    10f0:	4907      	ldr	r1, [pc, #28]	; (1110 <memmanage_trace_stack+0xb4>)
    10f2:	4814      	ldr	r0, [pc, #80]	; (1144 <memmanage_trace_stack+0xe8>)
    10f4:	f013 f880 	bl	141f8 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    10f8:	6862      	ldr	r2, [r4, #4]
    10fa:	4905      	ldr	r1, [pc, #20]	; (1110 <memmanage_trace_stack+0xb4>)
    10fc:	4812      	ldr	r0, [pc, #72]	; (1148 <memmanage_trace_stack+0xec>)
    10fe:	f013 f87b 	bl	141f8 <printf>
    1102:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1106:	4902      	ldr	r1, [pc, #8]	; (1110 <memmanage_trace_stack+0xb4>)
    1108:	4810      	ldr	r0, [pc, #64]	; (114c <memmanage_trace_stack+0xf0>)
    110a:	f013 f875 	bl	141f8 <printf>

    while(1);
    110e:	e7fe      	b.n	110e <memmanage_trace_stack+0xb2>
    1110:	00014a01 	.word	0x00014a01
    1114:	00014903 	.word	0x00014903
    1118:	000147ad 	.word	0x000147ad
    111c:	e000ed00 	.word	0xe000ed00
    1120:	000147c2 	.word	0x000147c2
    1124:	000147d7 	.word	0x000147d7
    1128:	000147ec 	.word	0x000147ec
    112c:	00014801 	.word	0x00014801
    1130:	00014817 	.word	0x00014817
    1134:	0001483e 	.word	0x0001483e
    1138:	00014869 	.word	0x00014869
    113c:	00014897 	.word	0x00014897
    1140:	00014932 	.word	0x00014932
    1144:	0001494a 	.word	0x0001494a
    1148:	000148d6 	.word	0x000148d6
    114c:	000148ed 	.word	0x000148ed

00001150 <busfault_trace_stack>:
}

void busfault_trace_stack(uint32_t *pulFaultStackAddress)
{
    1150:	b500      	push	{lr}
    1152:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1154:	6803      	ldr	r3, [r0, #0]
    1156:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1158:	6843      	ldr	r3, [r0, #4]
    115a:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    115c:	6883      	ldr	r3, [r0, #8]
    115e:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1160:	68c3      	ldr	r3, [r0, #12]
    1162:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1164:	6903      	ldr	r3, [r0, #16]
    1166:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1168:	6943      	ldr	r3, [r0, #20]
    116a:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    116c:	6983      	ldr	r3, [r0, #24]
    116e:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1170:	4927      	ldr	r1, [pc, #156]	; (1210 <busfault_trace_stack+0xc0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1172:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1174:	4827      	ldr	r0, [pc, #156]	; (1214 <busfault_trace_stack+0xc4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1176:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1178:	f013 f83e 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    117c:	9a00      	ldr	r2, [sp, #0]
    117e:	4924      	ldr	r1, [pc, #144]	; (1210 <busfault_trace_stack+0xc0>)
    1180:	4825      	ldr	r0, [pc, #148]	; (1218 <busfault_trace_stack+0xc8>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    1182:	4c26      	ldr	r4, [pc, #152]	; (121c <busfault_trace_stack+0xcc>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1184:	f013 f838 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1188:	9a01      	ldr	r2, [sp, #4]
    118a:	4921      	ldr	r1, [pc, #132]	; (1210 <busfault_trace_stack+0xc0>)
    118c:	4824      	ldr	r0, [pc, #144]	; (1220 <busfault_trace_stack+0xd0>)
    118e:	f013 f833 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    1192:	9a02      	ldr	r2, [sp, #8]
    1194:	491e      	ldr	r1, [pc, #120]	; (1210 <busfault_trace_stack+0xc0>)
    1196:	4823      	ldr	r0, [pc, #140]	; (1224 <busfault_trace_stack+0xd4>)
    1198:	f013 f82e 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    119c:	9a03      	ldr	r2, [sp, #12]
    119e:	491c      	ldr	r1, [pc, #112]	; (1210 <busfault_trace_stack+0xc0>)
    11a0:	4821      	ldr	r0, [pc, #132]	; (1228 <busfault_trace_stack+0xd8>)
    11a2:	f013 f829 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    11a6:	9a04      	ldr	r2, [sp, #16]
    11a8:	4919      	ldr	r1, [pc, #100]	; (1210 <busfault_trace_stack+0xc0>)
    11aa:	4820      	ldr	r0, [pc, #128]	; (122c <busfault_trace_stack+0xdc>)
    11ac:	f013 f824 	bl	141f8 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    11b0:	9a05      	ldr	r2, [sp, #20]
    11b2:	4917      	ldr	r1, [pc, #92]	; (1210 <busfault_trace_stack+0xc0>)
    11b4:	481e      	ldr	r0, [pc, #120]	; (1230 <busfault_trace_stack+0xe0>)
    11b6:	f013 f81f 	bl	141f8 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    11ba:	9a06      	ldr	r2, [sp, #24]
    11bc:	4914      	ldr	r1, [pc, #80]	; (1210 <busfault_trace_stack+0xc0>)
    11be:	481d      	ldr	r0, [pc, #116]	; (1234 <busfault_trace_stack+0xe4>)
    11c0:	f013 f81a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    11c4:	9a07      	ldr	r2, [sp, #28]
    11c6:	4912      	ldr	r1, [pc, #72]	; (1210 <busfault_trace_stack+0xc0>)
    11c8:	481b      	ldr	r0, [pc, #108]	; (1238 <busfault_trace_stack+0xe8>)
    11ca:	f013 f815 	bl	141f8 <printf>
    DBGPRINTLN_CTX("------------------------------");
    11ce:	4910      	ldr	r1, [pc, #64]	; (1210 <busfault_trace_stack+0xc0>)
    11d0:	481a      	ldr	r0, [pc, #104]	; (123c <busfault_trace_stack+0xec>)
    11d2:	f013 f811 	bl	141f8 <printf>
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    11d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    11d8:	490d      	ldr	r1, [pc, #52]	; (1210 <busfault_trace_stack+0xc0>)
    11da:	4819      	ldr	r0, [pc, #100]	; (1240 <busfault_trace_stack+0xf0>)
    11dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
    11e0:	f013 f80a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("BFAR [0x%08X]", SCB->BFAR);
    11e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    11e6:	490a      	ldr	r1, [pc, #40]	; (1210 <busfault_trace_stack+0xc0>)
    11e8:	4816      	ldr	r0, [pc, #88]	; (1244 <busfault_trace_stack+0xf4>)
    11ea:	f013 f805 	bl	141f8 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    11ee:	6862      	ldr	r2, [r4, #4]
    11f0:	4907      	ldr	r1, [pc, #28]	; (1210 <busfault_trace_stack+0xc0>)
    11f2:	4815      	ldr	r0, [pc, #84]	; (1248 <busfault_trace_stack+0xf8>)
    11f4:	f013 f800 	bl	141f8 <printf>
    11f8:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    11fc:	4904      	ldr	r1, [pc, #16]	; (1210 <busfault_trace_stack+0xc0>)
    11fe:	4813      	ldr	r0, [pc, #76]	; (124c <busfault_trace_stack+0xfc>)
    1200:	f012 fffa 	bl	141f8 <printf>

    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
    1204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1208:	2201      	movs	r2, #1
    120a:	645a      	str	r2, [r3, #68]	; 0x44

    while(1);
    120c:	e7fe      	b.n	120c <busfault_trace_stack+0xbc>
    120e:	bf00      	nop
    1210:	00014a17 	.word	0x00014a17
    1214:	00014962 	.word	0x00014962
    1218:	000147ad 	.word	0x000147ad
    121c:	e000ed00 	.word	0xe000ed00
    1220:	000147c2 	.word	0x000147c2
    1224:	000147d7 	.word	0x000147d7
    1228:	000147ec 	.word	0x000147ec
    122c:	00014801 	.word	0x00014801
    1230:	00014817 	.word	0x00014817
    1234:	0001483e 	.word	0x0001483e
    1238:	00014869 	.word	0x00014869
    123c:	00014897 	.word	0x00014897
    1240:	00014983 	.word	0x00014983
    1244:	0001499a 	.word	0x0001499a
    1248:	000148d6 	.word	0x000148d6
    124c:	000148ed 	.word	0x000148ed

00001250 <usagefault_trace_stack>:
}

void usagefault_trace_stack(uint32_t *pulFaultStackAddress)
{
    1250:	b500      	push	{lr}
    1252:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1254:	6803      	ldr	r3, [r0, #0]
    1256:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1258:	6843      	ldr	r3, [r0, #4]
    125a:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    125c:	6883      	ldr	r3, [r0, #8]
    125e:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1260:	68c3      	ldr	r3, [r0, #12]
    1262:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1264:	6903      	ldr	r3, [r0, #16]
    1266:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1268:	6943      	ldr	r3, [r0, #20]
    126a:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    126c:	6983      	ldr	r3, [r0, #24]
    126e:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1270:	4922      	ldr	r1, [pc, #136]	; (12fc <usagefault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1272:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1274:	4822      	ldr	r0, [pc, #136]	; (1300 <usagefault_trace_stack+0xb0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1276:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1278:	f012 ffbe 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    127c:	9a00      	ldr	r2, [sp, #0]
    127e:	491f      	ldr	r1, [pc, #124]	; (12fc <usagefault_trace_stack+0xac>)
    1280:	4820      	ldr	r0, [pc, #128]	; (1304 <usagefault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    1282:	4c21      	ldr	r4, [pc, #132]	; (1308 <usagefault_trace_stack+0xb8>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1284:	f012 ffb8 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1288:	9a01      	ldr	r2, [sp, #4]
    128a:	491c      	ldr	r1, [pc, #112]	; (12fc <usagefault_trace_stack+0xac>)
    128c:	481f      	ldr	r0, [pc, #124]	; (130c <usagefault_trace_stack+0xbc>)
    128e:	f012 ffb3 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    1292:	9a02      	ldr	r2, [sp, #8]
    1294:	4919      	ldr	r1, [pc, #100]	; (12fc <usagefault_trace_stack+0xac>)
    1296:	481e      	ldr	r0, [pc, #120]	; (1310 <usagefault_trace_stack+0xc0>)
    1298:	f012 ffae 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    129c:	9a03      	ldr	r2, [sp, #12]
    129e:	4917      	ldr	r1, [pc, #92]	; (12fc <usagefault_trace_stack+0xac>)
    12a0:	481c      	ldr	r0, [pc, #112]	; (1314 <usagefault_trace_stack+0xc4>)
    12a2:	f012 ffa9 	bl	141f8 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    12a6:	9a04      	ldr	r2, [sp, #16]
    12a8:	4914      	ldr	r1, [pc, #80]	; (12fc <usagefault_trace_stack+0xac>)
    12aa:	481b      	ldr	r0, [pc, #108]	; (1318 <usagefault_trace_stack+0xc8>)
    12ac:	f012 ffa4 	bl	141f8 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    12b0:	9a05      	ldr	r2, [sp, #20]
    12b2:	4912      	ldr	r1, [pc, #72]	; (12fc <usagefault_trace_stack+0xac>)
    12b4:	4819      	ldr	r0, [pc, #100]	; (131c <usagefault_trace_stack+0xcc>)
    12b6:	f012 ff9f 	bl	141f8 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    12ba:	9a06      	ldr	r2, [sp, #24]
    12bc:	490f      	ldr	r1, [pc, #60]	; (12fc <usagefault_trace_stack+0xac>)
    12be:	4818      	ldr	r0, [pc, #96]	; (1320 <usagefault_trace_stack+0xd0>)
    12c0:	f012 ff9a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    12c4:	9a07      	ldr	r2, [sp, #28]
    12c6:	490d      	ldr	r1, [pc, #52]	; (12fc <usagefault_trace_stack+0xac>)
    12c8:	4816      	ldr	r0, [pc, #88]	; (1324 <usagefault_trace_stack+0xd4>)
    12ca:	f012 ff95 	bl	141f8 <printf>
    DBGPRINTLN_CTX("------------------------------");
    12ce:	490b      	ldr	r1, [pc, #44]	; (12fc <usagefault_trace_stack+0xac>)
    12d0:	4815      	ldr	r0, [pc, #84]	; (1328 <usagefault_trace_stack+0xd8>)
    12d2:	f012 ff91 	bl	141f8 <printf>
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    12d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    12d8:	4908      	ldr	r1, [pc, #32]	; (12fc <usagefault_trace_stack+0xac>)
    12da:	4814      	ldr	r0, [pc, #80]	; (132c <usagefault_trace_stack+0xdc>)
    12dc:	f3c2 32cf 	ubfx	r2, r2, #15, #16
    12e0:	f012 ff8a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    12e4:	6862      	ldr	r2, [r4, #4]
    12e6:	4905      	ldr	r1, [pc, #20]	; (12fc <usagefault_trace_stack+0xac>)
    12e8:	4811      	ldr	r0, [pc, #68]	; (1330 <usagefault_trace_stack+0xe0>)
    12ea:	f012 ff85 	bl	141f8 <printf>
    12ee:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    12f2:	4902      	ldr	r1, [pc, #8]	; (12fc <usagefault_trace_stack+0xac>)
    12f4:	480f      	ldr	r0, [pc, #60]	; (1334 <usagefault_trace_stack+0xe4>)
    12f6:	f012 ff7f 	bl	141f8 <printf>

    while(1);
    12fa:	e7fe      	b.n	12fa <usagefault_trace_stack+0xaa>
    12fc:	00014a2c 	.word	0x00014a2c
    1300:	000149b1 	.word	0x000149b1
    1304:	000147ad 	.word	0x000147ad
    1308:	e000ed00 	.word	0xe000ed00
    130c:	000147c2 	.word	0x000147c2
    1310:	000147d7 	.word	0x000147d7
    1314:	000147ec 	.word	0x000147ec
    1318:	00014801 	.word	0x00014801
    131c:	00014817 	.word	0x00014817
    1320:	0001483e 	.word	0x0001483e
    1324:	00014869 	.word	0x00014869
    1328:	00014897 	.word	0x00014897
    132c:	000149d4 	.word	0x000149d4
    1330:	000148d6 	.word	0x000148d6
    1334:	000148ed 	.word	0x000148ed

00001338 <_wtimer0_isr>:

static pid_struct_t *pOvenPID = NULL;

void _wtimer0_isr()
{
    uint32_t ulFlags = WTIMER0->IFC;
    1338:	4b17      	ldr	r3, [pc, #92]	; (1398 <_wtimer0_isr+0x60>)
    133a:	695b      	ldr	r3, [r3, #20]

    if(ulFlags & WTIMER_IF_OF)
    133c:	07db      	lsls	r3, r3, #31
    133e:	d52a      	bpl.n	1396 <_wtimer0_isr+0x5e>
    {
        WTIMER1->CC[1].CCV = (PHASE_ANGLE_WIDTH - CLIP(g_usPacLookup[(uint16_t)pOvenPID->fOutput], MIN_PHASE_ANGLE, MAX_PHASE_ANGLE)) / 0.028f;
    1340:	4b16      	ldr	r3, [pc, #88]	; (139c <_wtimer0_isr+0x64>)
    1342:	4a17      	ldr	r2, [pc, #92]	; (13a0 <_wtimer0_isr+0x68>)
    1344:	681b      	ldr	r3, [r3, #0]
    1346:	eddf 6a17 	vldr	s13, [pc, #92]	; 13a4 <_wtimer0_isr+0x6c>
    134a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    134e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1352:	ee17 3a90 	vmov	r3, s15
    1356:	b29b      	uxth	r3, r3
    1358:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    135c:	f242 7310 	movw	r3, #10000	; 0x2710
    1360:	2a14      	cmp	r2, #20
    1362:	bfac      	ite	ge
    1364:	1a9b      	subge	r3, r3, r2
    1366:	3b14      	sublt	r3, #20
    1368:	ee07 3a90 	vmov	s15, r3
    136c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1370:	4b0d      	ldr	r3, [pc, #52]	; (13a8 <_wtimer0_isr+0x70>)
    1372:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    1376:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    137a:	ed83 7a1d 	vstr	s14, [r3, #116]	; 0x74
        WTIMER1->CC[2].CCV = WTIMER1->CC[1].CCV + ((float)SSR_LATCH_OFFSET / 0.028f);
    137e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
    1382:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 13ac <_wtimer0_isr+0x74>
    1386:	eef8 7a67 	vcvt.f32.u32	s15, s15
    138a:	ee77 7a87 	vadd.f32	s15, s15, s14
    138e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1392:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    }
}
    1396:	4770      	bx	lr
    1398:	4001a000 	.word	0x4001a000
    139c:	2000012c 	.word	0x2000012c
    13a0:	00015b8e 	.word	0x00015b8e
    13a4:	3ce56042 	.word	0x3ce56042
    13a8:	4001a400 	.word	0x4001a400
    13ac:	43b29249 	.word	0x43b29249

000013b0 <oven_init>:

void oven_init()
{
    13b0:	b538      	push	{r3, r4, r5, lr}
    pOvenPID = pid_init(PHASE_ANGLE_WIDTH, 0, PID_OPERATING_RANGE, PID_KI_CAP, PID_KP, PID_KI, PID_KD);
    13b2:	ed9f 2a39 	vldr	s4, [pc, #228]	; 1498 <oven_init+0xe8>
    13b6:	eddf 1a39 	vldr	s3, [pc, #228]	; 149c <oven_init+0xec>
    13ba:	eddf 0a39 	vldr	s1, [pc, #228]	; 14a0 <oven_init+0xf0>
    13be:	ed9f 0a39 	vldr	s0, [pc, #228]	; 14a4 <oven_init+0xf4>
    13c2:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
    13c6:	eef3 2a04 	vmov.f32	s5, #52	; 0x41a00000  20.0
    13ca:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    13ce:	f7ff fcff 	bl	dd0 <pid_init>
    13d2:	4b35      	ldr	r3, [pc, #212]	; (14a8 <oven_init+0xf8>)

    if(pOvenPID)
        DBGPRINTLN_CTX("Oven PID init OK!");
    13d4:	4935      	ldr	r1, [pc, #212]	; (14ac <oven_init+0xfc>)
    pOvenPID = pid_init(PHASE_ANGLE_WIDTH, 0, PID_OPERATING_RANGE, PID_KI_CAP, PID_KP, PID_KI, PID_KD);
    13d6:	6018      	str	r0, [r3, #0]
    if(pOvenPID)
    13d8:	2800      	cmp	r0, #0
    13da:	d05b      	beq.n	1494 <oven_init+0xe4>
        DBGPRINTLN_CTX("Oven PID init OK!");
    13dc:	4834      	ldr	r0, [pc, #208]	; (14b0 <oven_init+0x100>)
    */

    // Wide Timer 0 - Delay zero cross
    CMU->HFPERCLKEN1 |= CMU_HFPERCLKEN1_WTIMER0;

    WTIMER0->CTRL = WTIMER_CTRL_RSSCOIST | WTIMER_CTRL_PRESC_DIV1 | WTIMER_CTRL_CLKSEL_PRESCHFPERCLK | WTIMER_CTRL_FALLA_NONE | WTIMER_CTRL_RISEA_RELOADSTART | WTIMER_CTRL_OSMEN | WTIMER_CTRL_MODE_UP;
    13de:	4c35      	ldr	r4, [pc, #212]	; (14b4 <oven_init+0x104>)
        DBGPRINTLN_CTX("Oven PID init NOK!");
    13e0:	f012 ff0a 	bl	141f8 <printf>
    CMU->HFPERCLKEN1 |= CMU_HFPERCLKEN1_WTIMER0;
    13e4:	4a34      	ldr	r2, [pc, #208]	; (14b8 <oven_init+0x108>)
    13e6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    13ea:	f043 0301 	orr.w	r3, r3, #1
    13ee:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    WTIMER0->CTRL = WTIMER_CTRL_RSSCOIST | WTIMER_CTRL_PRESC_DIV1 | WTIMER_CTRL_CLKSEL_PRESCHFPERCLK | WTIMER_CTRL_FALLA_NONE | WTIMER_CTRL_RISEA_RELOADSTART | WTIMER_CTRL_OSMEN | WTIMER_CTRL_MODE_UP;
    13f2:	4b32      	ldr	r3, [pc, #200]	; (14bc <oven_init+0x10c>)
    WTIMER0->TOP = (float)ZEROCROSS_DELAY / 0.028f;
    13f4:	f240 1165 	movw	r1, #357	; 0x165
    WTIMER0->CTRL = WTIMER_CTRL_RSSCOIST | WTIMER_CTRL_PRESC_DIV1 | WTIMER_CTRL_CLKSEL_PRESCHFPERCLK | WTIMER_CTRL_FALLA_NONE | WTIMER_CTRL_RISEA_RELOADSTART | WTIMER_CTRL_OSMEN | WTIMER_CTRL_MODE_UP;
    13f8:	601c      	str	r4, [r3, #0]
    WTIMER0->TOP = (float)ZEROCROSS_DELAY / 0.028f;
    13fa:	61d9      	str	r1, [r3, #28]
    WTIMER0->CNT = 0x00000000;
    13fc:	2100      	movs	r1, #0
    13fe:	6259      	str	r1, [r3, #36]	; 0x24
    WTIMER0->ROUTELOC0 = ((uint32_t)0 << _WTIMER_ROUTELOC0_CC0LOC_SHIFT);
    1400:	6359      	str	r1, [r3, #52]	; 0x34
    WTIMER0->ROUTEPEN |= WTIMER_ROUTEPEN_CC0PEN;
    1402:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1404:	f040 0001 	orr.w	r0, r0, #1
    1408:	6318      	str	r0, [r3, #48]	; 0x30

    WTIMER0->CC[0].CTRL = WTIMER_CC_CTRL_FILT_ENABLE | WTIMER_CC_CTRL_INSEL_PIN | WTIMER_CC_CTRL_CUFOA_NONE | WTIMER_CC_CTRL_COFOA_NONE | WTIMER_CC_CTRL_CMOA_NONE | WTIMER_CC_CTRL_MODE_OFF;
    140a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    140e:	6618      	str	r0, [r3, #96]	; 0x60

    WTIMER0->IFC = _WTIMER_IFC_MASK; // Clear all flags
    1410:	f640 70f7 	movw	r0, #4087	; 0xff7
    1414:	6158      	str	r0, [r3, #20]
    IRQ_CLEAR(WTIMER0_IRQn); // Clear pending vector
    1416:	482a      	ldr	r0, [pc, #168]	; (14c0 <oven_init+0x110>)
    1418:	f44f 7500 	mov.w	r5, #512	; 0x200
    141c:	f8c0 5184 	str.w	r5, [r0, #388]	; 0x184
    IRQ_SET_PRIO(WTIMER0_IRQn, 0, 0); // Set priority 0,0 (max)
    1420:	f880 1329 	strb.w	r1, [r0, #809]	; 0x329
    IRQ_ENABLE(WTIMER0_IRQn); // Enable vector
    1424:	6045      	str	r5, [r0, #4]
    WTIMER0->IEN = WTIMER_IEN_OF; // Enable OF flag
    1426:	2001      	movs	r0, #1
    1428:	6198      	str	r0, [r3, #24]

    // Wide Timer 1 - Output phase angle control
    CMU->HFPERCLKEN1 |= CMU_HFPERCLKEN1_WTIMER1;
    142a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    142e:	f043 0302 	orr.w	r3, r3, #2
    1432:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

    WTIMER1->CTRL = WTIMER_CTRL_RSSCOIST | WTIMER_CTRL_PRESC_DIV1 | WTIMER_CTRL_CLKSEL_PRESCHFPERCLK | WTIMER_CTRL_FALLA_NONE | WTIMER_CTRL_RISEA_RELOADSTART | WTIMER_CTRL_OSMEN | WTIMER_CTRL_MODE_UP;
    1436:	4b23      	ldr	r3, [pc, #140]	; (14c4 <oven_init+0x114>)
    WTIMER1->TOP = 0xFFFFFFFF;
    1438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    WTIMER1->CTRL = WTIMER_CTRL_RSSCOIST | WTIMER_CTRL_PRESC_DIV1 | WTIMER_CTRL_CLKSEL_PRESCHFPERCLK | WTIMER_CTRL_FALLA_NONE | WTIMER_CTRL_RISEA_RELOADSTART | WTIMER_CTRL_OSMEN | WTIMER_CTRL_MODE_UP;
    143c:	601c      	str	r4, [r3, #0]
    WTIMER1->TOP = 0xFFFFFFFF;
    143e:	61d8      	str	r0, [r3, #28]
    WTIMER1->CNT = 0x00000000;
    1440:	6259      	str	r1, [r3, #36]	; 0x24

    WTIMER1->CC[0].CTRL = WTIMER_CC_CTRL_INSEL_PRS | WTIMER_CC_CTRL_PRSSEL_PRSCH0 | WTIMER_CC_CTRL_CUFOA_NONE | WTIMER_CC_CTRL_COFOA_NONE | WTIMER_CC_CTRL_CMOA_NONE | WTIMER_CC_CTRL_MODE_OFF;
    1442:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1446:	6619      	str	r1, [r3, #96]	; 0x60

    WTIMER1->CC[1].CTRL = WTIMER_CC_CTRL_PRSCONF_LEVEL | WTIMER_CC_CTRL_CUFOA_NONE | WTIMER_CC_CTRL_COFOA_NONE | WTIMER_CC_CTRL_CMOA_SET | WTIMER_CC_CTRL_MODE_OUTPUTCOMPARE;
    WTIMER1->CC[1].CCV = (float)7500 / 0.028f;
    1448:	481f      	ldr	r0, [pc, #124]	; (14c8 <oven_init+0x118>)
    WTIMER1->CC[1].CTRL = WTIMER_CC_CTRL_PRSCONF_LEVEL | WTIMER_CC_CTRL_CUFOA_NONE | WTIMER_CC_CTRL_COFOA_NONE | WTIMER_CC_CTRL_CMOA_SET | WTIMER_CC_CTRL_MODE_OUTPUTCOMPARE;
    144a:	4920      	ldr	r1, [pc, #128]	; (14cc <oven_init+0x11c>)
    144c:	6719      	str	r1, [r3, #112]	; 0x70
    WTIMER1->CC[1].CCV = (float)7500 / 0.028f;
    144e:	6758      	str	r0, [r3, #116]	; 0x74

    WTIMER1->CC[2].CTRL = WTIMER_CC_CTRL_PRSCONF_LEVEL | WTIMER_CC_CTRL_CUFOA_NONE | WTIMER_CC_CTRL_COFOA_NONE | WTIMER_CC_CTRL_CMOA_SET | WTIMER_CC_CTRL_MODE_OUTPUTCOMPARE;
    1450:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    WTIMER1->CC[2].CCV = (float)(7500 + SSR_LATCH_OFFSET) / 0.028f;
    1454:	491e      	ldr	r1, [pc, #120]	; (14d0 <oven_init+0x120>)
    1456:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

    // PRS
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_PRS;
    145a:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    145e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1462:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    PRS->CH[0].CTRL = PRS_CH_CTRL_SOURCESEL_WTIMER0 | PRS_CH_CTRL_SIGSEL_WTIMER0OF;
    1466:	4b1b      	ldr	r3, [pc, #108]	; (14d4 <oven_init+0x124>)
    1468:	f245 2201 	movw	r2, #20993	; 0x5201
    146c:	651a      	str	r2, [r3, #80]	; 0x50

    PRS->CH[11].CTRL = PRS_CH_CTRL_ANDNEXT | PRS_CH_CTRL_SOURCESEL_WTIMER1 | PRS_CH_CTRL_SIGSEL_WTIMER1CC1;
    146e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
    1472:	f502 7281 	add.w	r2, r2, #258	; 0x102
    1476:	67da      	str	r2, [r3, #124]	; 0x7c
    PRS->CH[12].CTRL = PRS_CH_CTRL_INV | PRS_CH_CTRL_SOURCESEL_WTIMER1 | PRS_CH_CTRL_SIGSEL_WTIMER1CC2;
    1478:	f102 4274 	add.w	r2, r2, #4093640704	; 0xf4000000
    147c:	3201      	adds	r2, #1
    147e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    PRS->ROUTELOC2 |= ((uint32_t)2 << _PRS_ROUTELOC2_CH11LOC_SHIFT); // Output for the SSR
    1482:	699a      	ldr	r2, [r3, #24]
    1484:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    1488:	619a      	str	r2, [r3, #24]
    PRS->ROUTEPEN |= PRS_ROUTEPEN_CH11PEN;
    148a:	689a      	ldr	r2, [r3, #8]
    148c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    1490:	609a      	str	r2, [r3, #8]

    //PRS->ROUTELOC0 |= PRS_ROUTELOC0_CH0LOC_LOC2; // Output Zero Cross for debug purposes
    //PRS->ROUTEPEN |= PRS_ROUTEPEN_CH0PEN;
}
    1492:	bd38      	pop	{r3, r4, r5, pc}
        DBGPRINTLN_CTX("Oven PID init NOK!");
    1494:	4810      	ldr	r0, [pc, #64]	; (14d8 <oven_init+0x128>)
    1496:	e7a2      	b.n	13de <oven_init+0x2e>
    1498:	43af0000 	.word	0x43af0000
    149c:	43960000 	.word	0x43960000
    14a0:	00000000 	.word	0x00000000
    14a4:	461c4000 	.word	0x461c4000
    14a8:	2000012c 	.word	0x2000012c
    14ac:	00014c15 	.word	0x00014c15
    14b0:	00014a43 	.word	0x00014a43
    14b4:	20000310 	.word	0x20000310
    14b8:	400e4000 	.word	0x400e4000
    14bc:	4001a000 	.word	0x4001a000
    14c0:	e000e100 	.word	0xe000e100
    14c4:	4001a400 	.word	0x4001a400
    14c8:	00041651 	.word	0x00041651
    14cc:	10000302 	.word	0x10000302
    14d0:	000417b6 	.word	0x000417b6
    14d4:	400e6000 	.word	0x400e6000
    14d8:	00014a5e 	.word	0x00014a5e

000014dc <oven_task>:

void oven_task()
{
    14dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    static uint64_t ullLastStateUpdate = 0;
    static uint64_t ullLastPIDUpdate = 0;

    float fTemp;

    if(g_ullSystemTick > (ullLastTempCheck + 100))
    14e0:	4d8f      	ldr	r5, [pc, #572]	; (1720 <oven_task+0x244>)
    14e2:	4c90      	ldr	r4, [pc, #576]	; (1724 <oven_task+0x248>)
    14e4:	e9d5 3200 	ldrd	r3, r2, [r5]
{
    14e8:	ed2d 8b02 	vpush	{d8}
    if(g_ullSystemTick > (ullLastTempCheck + 100))
    14ec:	e9d4 6700 	ldrd	r6, r7, [r4]
    14f0:	f113 0064 	adds.w	r0, r3, #100	; 0x64
    14f4:	f142 0100 	adc.w	r1, r2, #0
{
    14f8:	b085      	sub	sp, #20
    if(g_ullSystemTick > (ullLastTempCheck + 100))
    14fa:	42b9      	cmp	r1, r7
    14fc:	bf08      	it	eq
    14fe:	42b0      	cmpeq	r0, r6
    1500:	9503      	str	r5, [sp, #12]
    1502:	d265      	bcs.n	15d0 <oven_task+0xf4>
        {
            uint8_t ubStatus = mcp9600_get_status(0);
    1504:	2000      	movs	r0, #0
    1506:	f000 fb32 	bl	1b6e <mcp9600_get_status>

            if(ubStatus & MCP9600_TH_UPDT)
    150a:	0643      	lsls	r3, r0, #25
    150c:	d55b      	bpl.n	15c6 <oven_task+0xea>
            {
                fTemp = mcp9600_get_hj_temp(0);
    150e:	2000      	movs	r0, #0
    1510:	f000 fb04 	bl	1b1c <mcp9600_get_hj_temp>
                //float fDelta = mcp9600_get_temp_delta(MCP9600_0);

                mcp9600_set_status(0, 0x00);
                //mcp9600_set_config(MCP9600_BURST_TS_1 | MCP9600_MODE_NORMAL);

                pOvenPID->fDeltaTime = (float)(g_ullSystemTick - ullLastPIDUpdate) * 0.001f;
    1514:	4d84      	ldr	r5, [pc, #528]	; (1728 <oven_task+0x24c>)
    1516:	4e85      	ldr	r6, [pc, #532]	; (172c <oven_task+0x250>)
                mcp9600_set_status(0, 0x00);
    1518:	2100      	movs	r1, #0
    151a:	4608      	mov	r0, r1
                fTemp = mcp9600_get_hj_temp(0);
    151c:	eeb0 8a40 	vmov.f32	s16, s0
                mcp9600_set_status(0, 0x00);
    1520:	f000 fb21 	bl	1b66 <mcp9600_set_status>
                pOvenPID->fDeltaTime = (float)(g_ullSystemTick - ullLastPIDUpdate) * 0.001f;
    1524:	e9d4 2300 	ldrd	r2, r3, [r4]
    1528:	e9d5 0100 	ldrd	r0, r1, [r5]
    152c:	1a10      	subs	r0, r2, r0
    152e:	eb63 0101 	sbc.w	r1, r3, r1
    1532:	f7ff fb7b 	bl	c2c <__aeabi_ul2f>
    1536:	eddf 7a7e 	vldr	s15, [pc, #504]	; 1730 <oven_task+0x254>
    153a:	6837      	ldr	r7, [r6, #0]
    153c:	ee07 0a10 	vmov	s14, r0
    1540:	ee67 7a27 	vmul.f32	s15, s14, s15
                pOvenPID->fValue = fTemp;

                pid_calc(pOvenPID);
    1544:	4638      	mov	r0, r7
                pOvenPID->fDeltaTime = (float)(g_ullSystemTick - ullLastPIDUpdate) * 0.001f;
    1546:	edc7 7a00 	vstr	s15, [r7]
                pOvenPID->fValue = fTemp;
    154a:	ed87 8a0b 	vstr	s16, [r7, #44]	; 0x2c
                pid_calc(pOvenPID);
    154e:	f7ff fc6d 	bl	e2c <pid_calc>

                DBGPRINTLN_CTX("PID - Last update: %llu ms ago", g_ullSystemTick - ullLastPIDUpdate);
    1552:	e9d4 0100 	ldrd	r0, r1, [r4]
    1556:	e9d5 2300 	ldrd	r2, r3, [r5]
    155a:	1a82      	subs	r2, r0, r2
    155c:	eb61 0303 	sbc.w	r3, r1, r3
    1560:	4874      	ldr	r0, [pc, #464]	; (1734 <oven_task+0x258>)
    1562:	4975      	ldr	r1, [pc, #468]	; (1738 <oven_task+0x25c>)
    1564:	f012 fe48 	bl	141f8 <printf>
                DBGPRINTLN_CTX("PID - MCP9600 temp %.3f C", fTemp);
    1568:	ee18 0a10 	vmov	r0, s16
    156c:	f7fe ff5c 	bl	428 <__aeabi_f2d>
    1570:	4602      	mov	r2, r0
    1572:	460b      	mov	r3, r1
    1574:	4871      	ldr	r0, [pc, #452]	; (173c <oven_task+0x260>)
    1576:	4970      	ldr	r1, [pc, #448]	; (1738 <oven_task+0x25c>)
    1578:	f012 fe3e 	bl	141f8 <printf>
                //DBGPRINTLN_CTX("PID - MCP9600 cold %.3f C", fCold);
                //DBGPRINTLN_CTX("PID - MCP9600 delta %.3f C", fDelta);
                DBGPRINTLN_CTX("PID - temp target %.3f C", pOvenPID->fSetpoint);
    157c:	6833      	ldr	r3, [r6, #0]
    157e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1580:	f7fe ff52 	bl	428 <__aeabi_f2d>
    1584:	4602      	mov	r2, r0
    1586:	460b      	mov	r3, r1
    1588:	486d      	ldr	r0, [pc, #436]	; (1740 <oven_task+0x264>)
    158a:	496b      	ldr	r1, [pc, #428]	; (1738 <oven_task+0x25c>)
    158c:	f012 fe34 	bl	141f8 <printf>
                DBGPRINTLN_CTX("PID - integral %.3f", pOvenPID->fIntegral);
    1590:	6833      	ldr	r3, [r6, #0]
    1592:	6a18      	ldr	r0, [r3, #32]
    1594:	f7fe ff48 	bl	428 <__aeabi_f2d>
    1598:	4602      	mov	r2, r0
    159a:	460b      	mov	r3, r1
    159c:	4869      	ldr	r0, [pc, #420]	; (1744 <oven_task+0x268>)
    159e:	4966      	ldr	r1, [pc, #408]	; (1738 <oven_task+0x25c>)
    15a0:	f012 fe2a 	bl	141f8 <printf>
                DBGPRINTLN_CTX("PID - output %.2f / %d", pOvenPID->fOutput, PHASE_ANGLE_WIDTH);
    15a4:	6833      	ldr	r3, [r6, #0]
    15a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
    15a8:	f7fe ff3e 	bl	428 <__aeabi_f2d>
    15ac:	460b      	mov	r3, r1
    15ae:	f242 7110 	movw	r1, #10000	; 0x2710
    15b2:	4602      	mov	r2, r0
    15b4:	9100      	str	r1, [sp, #0]
    15b6:	4864      	ldr	r0, [pc, #400]	; (1748 <oven_task+0x26c>)
    15b8:	495f      	ldr	r1, [pc, #380]	; (1738 <oven_task+0x25c>)
    15ba:	f012 fe1d 	bl	141f8 <printf>
                //DBGPRINTLN_CTX("PID - output linear compensated %d / %d", g_usPacLookup[(uint16_t)pOvenPID->fOutput], PHASE_ANGLE_WIDTH);

                ullLastPIDUpdate = g_ullSystemTick;
    15be:	e9d4 2300 	ldrd	r2, r3, [r4]
    15c2:	e9c5 2300 	strd	r2, r3, [r5]
            }

            ullLastTempCheck = g_ullSystemTick;
    15c6:	e9d4 2300 	ldrd	r2, r3, [r4]
    15ca:	9903      	ldr	r1, [sp, #12]
    15cc:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if(g_ullSystemTick > (ullLastStateUpdate + 500))
    15d0:	4e5e      	ldr	r6, [pc, #376]	; (174c <oven_task+0x270>)
    15d2:	e9d6 3200 	ldrd	r3, r2, [r6]
    15d6:	e9d4 0100 	ldrd	r0, r1, [r4]
    15da:	f513 78fa 	adds.w	r8, r3, #500	; 0x1f4
    15de:	f142 0900 	adc.w	r9, r2, #0
    15e2:	4589      	cmp	r9, r1
    15e4:	bf08      	it	eq
    15e6:	4580      	cmpeq	r8, r0
    15e8:	d25e      	bcs.n	16a8 <oven_task+0x1cc>
        {
            static uint64_t ullTimer = 0;
            static ovenMode_t xOvenMode = 4;

            switch(xOvenMode)
    15ea:	4d59      	ldr	r5, [pc, #356]	; (1750 <oven_task+0x274>)
    15ec:	782b      	ldrb	r3, [r5, #0]
    15ee:	2b08      	cmp	r3, #8
    15f0:	f200 8090 	bhi.w	1714 <oven_task+0x238>
    15f4:	e8df f003 	tbb	[pc, r3]
    15f8:	058e8e89 	.word	0x058e8e89
    15fc:	5d8e268e 	.word	0x5d8e268e
    1600:	78          	.byte	0x78
    1601:	00          	.byte	0x00
            {
                case PREHEAT:     // preheat
                    DBGPRINTLN_CTX("State - preheat");
    1602:	494d      	ldr	r1, [pc, #308]	; (1738 <oven_task+0x25c>)
    1604:	4853      	ldr	r0, [pc, #332]	; (1754 <oven_task+0x278>)
    1606:	f012 fdf7 	bl	141f8 <printf>
                    DBGPRINTLN_CTX("State - progress - %.3f C / 160 C", fTemp);
    160a:	ee18 0a10 	vmov	r0, s16
    160e:	f7fe ff0b 	bl	428 <__aeabi_f2d>
    1612:	460b      	mov	r3, r1
    1614:	4602      	mov	r2, r0
    1616:	4948      	ldr	r1, [pc, #288]	; (1738 <oven_task+0x25c>)
    1618:	484f      	ldr	r0, [pc, #316]	; (1758 <oven_task+0x27c>)
    161a:	f012 fded 	bl	141f8 <printf>
                    pOvenPID->fSetpoint = 145;
    161e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 175c <oven_task+0x280>
    1622:	4b42      	ldr	r3, [pc, #264]	; (172c <oven_task+0x250>)
                    if(fTemp > 145)
    1624:	eeb4 8ae7 	vcmpe.f32	s16, s15
                    pOvenPID->fSetpoint = 145;
    1628:	681b      	ldr	r3, [r3, #0]
                    if(fTemp > 145)
    162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    pOvenPID->fSetpoint = 145;
    162e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
                    if(fTemp > 145)
    1632:	dd35      	ble.n	16a0 <oven_task+0x1c4>
                    {
                        xOvenMode = SOAK;
    1634:	2305      	movs	r3, #5
                    DBGPRINTLN_CTX("State - progress - %.3f C / 220 C", fTemp);
                    pOvenPID->fSetpoint = 240;
                    if(fTemp > 220)
                    {
                        xOvenMode = COOLDOWN;
                        ullTimer = g_ullSystemTick;
    1636:	e9d4 0100 	ldrd	r0, r1, [r4]
                        xOvenMode = COOLDOWN;
    163a:	702b      	strb	r3, [r5, #0]
                        ullTimer = g_ullSystemTick;
    163c:	4b48      	ldr	r3, [pc, #288]	; (1760 <oven_task+0x284>)
    163e:	e9c3 0100 	strd	r0, r1, [r3]
    1642:	e02d      	b.n	16a0 <oven_task+0x1c4>
                    DBGPRINTLN_CTX("State - progress - %lu ms left", (ullTimer + 70000) - g_ullSystemTick);
    1644:	4f46      	ldr	r7, [pc, #280]	; (1760 <oven_task+0x284>)
                    DBGPRINTLN_CTX("State - soak");
    1646:	493c      	ldr	r1, [pc, #240]	; (1738 <oven_task+0x25c>)
    1648:	4846      	ldr	r0, [pc, #280]	; (1764 <oven_task+0x288>)
                    DBGPRINTLN_CTX("State - progress - %lu ms left", (ullTimer + 70000) - g_ullSystemTick);
    164a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 178c <oven_task+0x2b0>
                    DBGPRINTLN_CTX("State - soak");
    164e:	f012 fdd3 	bl	141f8 <printf>
                    DBGPRINTLN_CTX("State - progress - %lu ms left", (ullTimer + 70000) - g_ullSystemTick);
    1652:	e9d7 2300 	ldrd	r2, r3, [r7]
    1656:	e9d4 0100 	ldrd	r0, r1, [r4]
    165a:	f04f 0900 	mov.w	r9, #0
    165e:	eb12 0208 	adds.w	r2, r2, r8
    1662:	eb43 0309 	adc.w	r3, r3, r9
    1666:	1a12      	subs	r2, r2, r0
    1668:	eb63 0301 	sbc.w	r3, r3, r1
    166c:	483e      	ldr	r0, [pc, #248]	; (1768 <oven_task+0x28c>)
    166e:	4932      	ldr	r1, [pc, #200]	; (1738 <oven_task+0x25c>)
    1670:	f012 fdc2 	bl	141f8 <printf>
                    pOvenPID->fSetpoint = 160;
    1674:	4b2d      	ldr	r3, [pc, #180]	; (172c <oven_task+0x250>)
    1676:	4a3d      	ldr	r2, [pc, #244]	; (176c <oven_task+0x290>)
    1678:	681b      	ldr	r3, [r3, #0]
    167a:	629a      	str	r2, [r3, #40]	; 0x28
                    if(g_ullSystemTick > (ullTimer + 70000))
    167c:	e9d7 3200 	ldrd	r3, r2, [r7]
    1680:	e9d4 0100 	ldrd	r0, r1, [r4]
    1684:	eb13 0a08 	adds.w	sl, r3, r8
    1688:	eb42 0b09 	adc.w	fp, r2, r9
    168c:	458b      	cmp	fp, r1
    168e:	bf08      	it	eq
    1690:	4582      	cmpeq	sl, r0
    1692:	d205      	bcs.n	16a0 <oven_task+0x1c4>
                        xOvenMode = REFLOW;
    1694:	2307      	movs	r3, #7
    1696:	702b      	strb	r3, [r5, #0]
                        ullTimer = g_ullSystemTick;
    1698:	e9d4 2300 	ldrd	r2, r3, [r4]
    169c:	e9c7 2300 	strd	r2, r3, [r7]
                    oven_abort(ERRONEOUS_STATE);
                    pOvenPID->fSetpoint = 0;
                    break;
            }

            ullLastStateUpdate = g_ullSystemTick;
    16a0:	e9d4 2300 	ldrd	r2, r3, [r4]
    16a4:	e9c6 2300 	strd	r2, r3, [r6]
        }
}
    16a8:	b005      	add	sp, #20
    16aa:	ecbd 8b02 	vpop	{d8}
    16ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    DBGPRINTLN_CTX("State - reflow");
    16b2:	4921      	ldr	r1, [pc, #132]	; (1738 <oven_task+0x25c>)
    16b4:	482e      	ldr	r0, [pc, #184]	; (1770 <oven_task+0x294>)
    16b6:	f012 fd9f 	bl	141f8 <printf>
                    DBGPRINTLN_CTX("State - progress - %.3f C / 220 C", fTemp);
    16ba:	ee18 0a10 	vmov	r0, s16
    16be:	f7fe feb3 	bl	428 <__aeabi_f2d>
    16c2:	4602      	mov	r2, r0
    16c4:	460b      	mov	r3, r1
    16c6:	482b      	ldr	r0, [pc, #172]	; (1774 <oven_task+0x298>)
    16c8:	491b      	ldr	r1, [pc, #108]	; (1738 <oven_task+0x25c>)
    16ca:	f012 fd95 	bl	141f8 <printf>
                    pOvenPID->fSetpoint = 240;
    16ce:	4b17      	ldr	r3, [pc, #92]	; (172c <oven_task+0x250>)
                    if(fTemp > 220)
    16d0:	eddf 7a29 	vldr	s15, [pc, #164]	; 1778 <oven_task+0x29c>
                    pOvenPID->fSetpoint = 240;
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	4a29      	ldr	r2, [pc, #164]	; (177c <oven_task+0x2a0>)
    16d8:	629a      	str	r2, [r3, #40]	; 0x28
                    if(fTemp > 220)
    16da:	eeb4 8ae7 	vcmpe.f32	s16, s15
    16de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    16e2:	dddd      	ble.n	16a0 <oven_task+0x1c4>
                        xOvenMode = COOLDOWN;
    16e4:	2308      	movs	r3, #8
    16e6:	e7a6      	b.n	1636 <oven_task+0x15a>
                    DBGPRINTLN_CTX("State - cool");
    16e8:	4913      	ldr	r1, [pc, #76]	; (1738 <oven_task+0x25c>)
    16ea:	4825      	ldr	r0, [pc, #148]	; (1780 <oven_task+0x2a4>)
    16ec:	f012 fd84 	bl	141f8 <printf>
                    pOvenPID->fSetpoint = 0;
    16f0:	4b0e      	ldr	r3, [pc, #56]	; (172c <oven_task+0x250>)
                    if(fTemp < 60)
    16f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 1784 <oven_task+0x2a8>
                    pOvenPID->fSetpoint = 0;
    16f6:	681b      	ldr	r3, [r3, #0]
                    if(fTemp < 60)
    16f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
                    pOvenPID->fSetpoint = 0;
    16fc:	2200      	movs	r2, #0
                    if(fTemp < 60)
    16fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    pOvenPID->fSetpoint = 0;
    1702:	629a      	str	r2, [r3, #40]	; 0x28
                    if(fTemp < 60)
    1704:	d5cc      	bpl.n	16a0 <oven_task+0x1c4>
                        xOvenMode = IDLE;
    1706:	2300      	movs	r3, #0
    1708:	e795      	b.n	1636 <oven_task+0x15a>
                    DBGPRINTLN_CTX("State - idle");
    170a:	490b      	ldr	r1, [pc, #44]	; (1738 <oven_task+0x25c>)
    170c:	481e      	ldr	r0, [pc, #120]	; (1788 <oven_task+0x2ac>)
    170e:	f012 fd73 	bl	141f8 <printf>
                    break;
    1712:	e7c5      	b.n	16a0 <oven_task+0x1c4>
                    pOvenPID->fSetpoint = 0;
    1714:	4b05      	ldr	r3, [pc, #20]	; (172c <oven_task+0x250>)
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	2200      	movs	r2, #0
    171a:	629a      	str	r2, [r3, #40]	; 0x28
                    break;
    171c:	e7c0      	b.n	16a0 <oven_task+0x1c4>
    171e:	bf00      	nop
    1720:	20000140 	.word	0x20000140
    1724:	20005ef8 	.word	0x20005ef8
    1728:	20000130 	.word	0x20000130
    172c:	2000012c 	.word	0x2000012c
    1730:	3a83126f 	.word	0x3a83126f
    1734:	00014a7a 	.word	0x00014a7a
    1738:	00014c1f 	.word	0x00014c1f
    173c:	00014aa2 	.word	0x00014aa2
    1740:	00014ac5 	.word	0x00014ac5
    1744:	00014ae7 	.word	0x00014ae7
    1748:	00014b04 	.word	0x00014b04
    174c:	20000138 	.word	0x20000138
    1750:	20000000 	.word	0x20000000
    1754:	00014b24 	.word	0x00014b24
    1758:	00014b3d 	.word	0x00014b3d
    175c:	43110000 	.word	0x43110000
    1760:	20000148 	.word	0x20000148
    1764:	00014b68 	.word	0x00014b68
    1768:	00014b7e 	.word	0x00014b7e
    176c:	43200000 	.word	0x43200000
    1770:	00014ba6 	.word	0x00014ba6
    1774:	00014bbe 	.word	0x00014bbe
    1778:	435c0000 	.word	0x435c0000
    177c:	43700000 	.word	0x43700000
    1780:	00014be9 	.word	0x00014be9
    1784:	42700000 	.word	0x42700000
    1788:	00014bff 	.word	0x00014bff
    178c:	00011170 	.word	0x00011170

00001790 <btn_event_cb>:
    }
}

static void btn_event_cb(lv_obj_t * btn, lv_event_t event)
{
    if(event == LV_EVENT_RELEASED) {
    1790:	2907      	cmp	r1, #7
{
    1792:	b510      	push	{r4, lr}
    1794:	4604      	mov	r4, r0
    if(event == LV_EVENT_RELEASED) {
    1796:	d108      	bne.n	17aa <btn_event_cb+0x1a>
        /*Increase the button width*/
        lv_coord_t width = lv_obj_get_width(btn);
    1798:	f009 fa10 	bl	abbc <lv_obj_get_width>
        lv_obj_set_width(btn, width + 20);
    179c:	3014      	adds	r0, #20
    179e:	b201      	sxth	r1, r0
    17a0:	4620      	mov	r0, r4
    }
}
    17a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_set_width(btn, width + 20);
    17a6:	f00a b839 	b.w	b81c <lv_obj_set_width>
}
    17aa:	bd10      	pop	{r4, pc}

000017ac <ddlist_event_cb>:

static  void ddlist_event_cb(lv_obj_t * ddlist, lv_event_t event)
{
    if(event == LV_EVENT_VALUE_CHANGED) {
    17ac:	290e      	cmp	r1, #14
{
    17ae:	b508      	push	{r3, lr}
    if(event == LV_EVENT_VALUE_CHANGED) {
    17b0:	d10d      	bne.n	17ce <ddlist_event_cb+0x22>
        uint16_t opt = lv_ddlist_get_selected(ddlist);            /*Get the id of selected option*/
    17b2:	f00a fc61 	bl	c078 <lv_ddlist_get_selected>
 * @param value new value
 * @param anim LV_ANIM_ON: set the value with an animation; LV_ANIM_OFF: change the value immediately
 */
static inline void lv_slider_set_value(lv_obj_t * slider, int16_t value, lv_anim_enable_t anim)
{
    lv_bar_set_value(slider, value, anim);
    17b6:	4b06      	ldr	r3, [pc, #24]	; (17d0 <ddlist_event_cb+0x24>)

        lv_slider_set_value(slider, (opt * 100) / 4, true);       /*Modify the slider value according to the selection*/
    17b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    17bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    17c0:	b201      	sxth	r1, r0
    17c2:	2201      	movs	r2, #1
    17c4:	6818      	ldr	r0, [r3, #0]
    }

    17c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    17ca:	f00f bc89 	b.w	110e0 <lv_bar_set_value>
    17ce:	bd08      	pop	{r3, pc}
    17d0:	20000150 	.word	0x20000150

000017d4 <ui_init>:
{
    17d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    lv_theme_t * th = lv_theme_material_init(0, NULL);
    17d8:	2100      	movs	r1, #0
{
    17da:	b085      	sub	sp, #20
    lv_theme_t * th = lv_theme_material_init(0, NULL);
    17dc:	4608      	mov	r0, r1
    17de:	f006 fd8f 	bl	8300 <lv_theme_material_init>
    lv_theme_set_current(th);
    17e2:	f007 fbb3 	bl	8f4c <lv_theme_set_current>
    lv_obj_t * scr = lv_page_create(NULL, NULL);
    17e6:	2100      	movs	r1, #0
    17e8:	4608      	mov	r0, r1
    17ea:	f00b f9e3 	bl	cbb4 <lv_page_create>
    17ee:	4605      	mov	r5, r0
    lv_disp_load_scr(scr);
    17f0:	f007 fe81 	bl	94f6 <lv_disp_load_scr>
    lv_obj_t * label = lv_label_create(scr, NULL); /*First parameters (scr) is the parent*/
    17f4:	2100      	movs	r1, #0
    17f6:	4628      	mov	r0, r5
    17f8:	f00f fa5e 	bl	10cb8 <lv_label_create>
    lv_label_set_text(label, "Object usage demo");  /*Set the text*/
    17fc:	4968      	ldr	r1, [pc, #416]	; (19a0 <ui_init+0x1cc>)
    lv_obj_t * label = lv_label_create(scr, NULL); /*First parameters (scr) is the parent*/
    17fe:	4604      	mov	r4, r0
    lv_label_set_text(label, "Object usage demo");  /*Set the text*/
    1800:	f00f f958 	bl	10ab4 <lv_label_set_text>
    lv_obj_set_x(label, 50);                        /*Set the x coordinate*/
    1804:	2132      	movs	r1, #50	; 0x32
    1806:	4620      	mov	r0, r4
    1808:	f009 fb20 	bl	ae4c <lv_obj_set_x>
    lv_obj_t * btn1 = lv_btn_create(lv_disp_get_scr_act(NULL), NULL);         /*Create a button on the currently loaded screen*/
    180c:	2000      	movs	r0, #0
    180e:	f007 fe6b 	bl	94e8 <lv_disp_get_scr_act>
    1812:	2100      	movs	r1, #0
    1814:	f00c f816 	bl	d844 <lv_btn_create>
    lv_obj_align(btn1, label, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 20);               /*Align below the label*/
    1818:	f04f 0914 	mov.w	r9, #20
    lv_obj_t * btn1 = lv_btn_create(lv_disp_get_scr_act(NULL), NULL);         /*Create a button on the currently loaded screen*/
    181c:	4607      	mov	r7, r0
    lv_obj_set_event_cb(btn1, btn_event_cb);                                  /*Set function to be called when the button is released*/
    181e:	4961      	ldr	r1, [pc, #388]	; (19a4 <ui_init+0x1d0>)
    1820:	f009 f872 	bl	a908 <lv_obj_set_event_cb>
    lv_obj_align(btn1, label, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 20);               /*Align below the label*/
    1824:	2300      	movs	r3, #0
    1826:	220c      	movs	r2, #12
    1828:	4621      	mov	r1, r4
    182a:	4638      	mov	r0, r7
    182c:	f8cd 9000 	str.w	r9, [sp]
    1830:	f009 fb3c 	bl	aeac <lv_obj_align>
    label = lv_label_create(btn1, NULL);
    1834:	2100      	movs	r1, #0
    1836:	4638      	mov	r0, r7
    1838:	f00f fa3e 	bl	10cb8 <lv_label_create>
    lv_label_set_text(label, "Button 1");
    183c:	495a      	ldr	r1, [pc, #360]	; (19a8 <ui_init+0x1d4>)
    183e:	f00f f939 	bl	10ab4 <lv_label_set_text>
    lv_obj_t * btn2 = lv_btn_create(scr, btn1);                 /*Second parameter is an object to copy*/
    1842:	4639      	mov	r1, r7
    1844:	4628      	mov	r0, r5
    1846:	f00b fffd 	bl	d844 <lv_btn_create>
    lv_obj_align(btn2, btn1, LV_ALIGN_OUT_RIGHT_MID, 50, 0);    /*Align next to the prev. button.*/
    184a:	2400      	movs	r4, #0
    184c:	2332      	movs	r3, #50	; 0x32
    184e:	2213      	movs	r2, #19
    lv_obj_t * btn2 = lv_btn_create(scr, btn1);                 /*Second parameter is an object to copy*/
    1850:	4606      	mov	r6, r0
    lv_obj_align(btn2, btn1, LV_ALIGN_OUT_RIGHT_MID, 50, 0);    /*Align next to the prev. button.*/
    1852:	9400      	str	r4, [sp, #0]
    1854:	4639      	mov	r1, r7
    1856:	f009 fb29 	bl	aeac <lv_obj_align>
    label = lv_label_create(btn2, NULL);
    185a:	4621      	mov	r1, r4
    185c:	4630      	mov	r0, r6
    185e:	f00f fa2b 	bl	10cb8 <lv_label_create>
    lv_label_set_text(label, "Button 2");
    1862:	4952      	ldr	r1, [pc, #328]	; (19ac <ui_init+0x1d8>)
    slider = lv_slider_create(scr, NULL);                            /*Create a slider*/
    1864:	4e52      	ldr	r6, [pc, #328]	; (19b0 <ui_init+0x1dc>)
    lv_label_set_text(label, "Button 2");
    1866:	f00f f925 	bl	10ab4 <lv_label_set_text>
    slider = lv_slider_create(scr, NULL);                            /*Create a slider*/
    186a:	4621      	mov	r1, r4
    186c:	4628      	mov	r0, r5
    186e:	f00c f967 	bl	db40 <lv_slider_create>
    1872:	4680      	mov	r8, r0
    1874:	6030      	str	r0, [r6, #0]
    lv_obj_set_size(slider, lv_obj_get_width(scr)  / 3, LV_DPI / 3);            /*Set the size*/
    1876:	4628      	mov	r0, r5
    1878:	f009 f9a0 	bl	abbc <lv_obj_get_width>
    187c:	2237      	movs	r2, #55	; 0x37
    187e:	2103      	movs	r1, #3
    1880:	fb90 f1f1 	sdiv	r1, r0, r1
    1884:	4640      	mov	r0, r8
    1886:	b209      	sxth	r1, r1
    1888:	f009 ff74 	bl	b774 <lv_obj_set_size>
    lv_obj_align(slider, btn1, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 20);                /*Align below the first button*/
    188c:	f8cd 9000 	str.w	r9, [sp]
    1890:	4623      	mov	r3, r4
    1892:	6830      	ldr	r0, [r6, #0]
    1894:	4639      	mov	r1, r7
    1896:	220c      	movs	r2, #12
    1898:	f009 fb08 	bl	aeac <lv_obj_align>
    189c:	4622      	mov	r2, r4
    189e:	6830      	ldr	r0, [r6, #0]
    18a0:	211e      	movs	r1, #30
    18a2:	f00f fc1d 	bl	110e0 <lv_bar_set_value>
    lv_obj_t * ddlist = lv_ddlist_create(scr, NULL);                     /*Create a drop down list*/
    18a6:	4621      	mov	r1, r4
    18a8:	4628      	mov	r0, r5
    18aa:	f00a fc19 	bl	c0e0 <lv_ddlist_create>
    lv_obj_align(ddlist, slider, LV_ALIGN_OUT_RIGHT_TOP, 50, 0);         /*Align next to the slider*/
    18ae:	9400      	str	r4, [sp, #0]
    18b0:	2332      	movs	r3, #50	; 0x32
    18b2:	2212      	movs	r2, #18
    lv_obj_t * ddlist = lv_ddlist_create(scr, NULL);                     /*Create a drop down list*/
    18b4:	4607      	mov	r7, r0
    lv_obj_align(ddlist, slider, LV_ALIGN_OUT_RIGHT_TOP, 50, 0);         /*Align next to the slider*/
    18b6:	6831      	ldr	r1, [r6, #0]
    18b8:	f009 faf8 	bl	aeac <lv_obj_align>
    lv_obj_set_top(ddlist, true);                                        /*Enable to be on the top when clicked*/
    18bc:	4638      	mov	r0, r7
    18be:	2101      	movs	r1, #1
    18c0:	f008 ffb6 	bl	a830 <lv_obj_set_top>
    lv_ddlist_set_options(ddlist, "None\nLittle\nHalf\nA lot\nAll");     /*Set the options*/
    18c4:	4638      	mov	r0, r7
    18c6:	493b      	ldr	r1, [pc, #236]	; (19b4 <ui_init+0x1e0>)
    18c8:	f00a fb4e 	bl	bf68 <lv_ddlist_set_options>
    lv_obj_set_event_cb(ddlist, ddlist_event_cb);                        /*Set function to call on new option is chosen*/
    18cc:	4638      	mov	r0, r7
    18ce:	493a      	ldr	r1, [pc, #232]	; (19b8 <ui_init+0x1e4>)
    18d0:	f009 f81a 	bl	a908 <lv_obj_set_event_cb>
    lv_obj_t * chart = lv_chart_create(scr, NULL);                         /*Create the chart*/
    18d4:	4621      	mov	r1, r4
    18d6:	4628      	mov	r0, r5
    18d8:	f00d fcd4 	bl	f284 <lv_chart_create>
    18dc:	4604      	mov	r4, r0
    lv_obj_set_size(chart, lv_obj_get_width(scr) / 2, lv_obj_get_width(scr) / 4);   /*Set the size*/
    18de:	4628      	mov	r0, r5
    18e0:	f009 f96c 	bl	abbc <lv_obj_get_width>
    18e4:	4607      	mov	r7, r0
    18e6:	4628      	mov	r0, r5
    18e8:	f009 f968 	bl	abbc <lv_obj_get_width>
    18ec:	2800      	cmp	r0, #0
    18ee:	bfb8      	it	lt
    18f0:	3003      	addlt	r0, #3
    18f2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    18f6:	f340 028f 	sbfx	r2, r0, #2, #16
    18fa:	f347 014f 	sbfx	r1, r7, #1, #16
    18fe:	4620      	mov	r0, r4
    1900:	f009 ff38 	bl	b774 <lv_obj_set_size>
    lv_obj_align(chart, slider, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 50);                   /*Align below the slider*/
    1904:	2332      	movs	r3, #50	; 0x32
    1906:	9300      	str	r3, [sp, #0]
    1908:	220c      	movs	r2, #12
    190a:	2300      	movs	r3, #0
    190c:	6831      	ldr	r1, [r6, #0]
    190e:	4620      	mov	r0, r4
    1910:	f009 facc 	bl	aeac <lv_obj_align>
    lv_chart_set_series_width(chart, 3);                                            /*Set the line width*/
    1914:	4620      	mov	r0, r4
    1916:	2103      	movs	r1, #3
    1918:	f00d fdc6 	bl	f4a8 <lv_chart_set_series_width>
    lv_chart_series_t * dl1 = lv_chart_add_series(chart, LV_COLOR_RED);
    191c:	f64f 0100 	movw	r1, #63488	; 0xf800
    1920:	4620      	mov	r0, r4
    1922:	f00d fd71 	bl	f408 <lv_chart_add_series>
    lv_chart_set_next(chart, dl1, 10);
    1926:	220a      	movs	r2, #10
    lv_chart_series_t * dl1 = lv_chart_add_series(chart, LV_COLOR_RED);
    1928:	4601      	mov	r1, r0
    lv_chart_set_next(chart, dl1, 10);
    192a:	9003      	str	r0, [sp, #12]
    192c:	4620      	mov	r0, r4
    192e:	f00d fdeb 	bl	f508 <lv_chart_set_next>
    lv_chart_set_next(chart, dl1, 25);
    1932:	9903      	ldr	r1, [sp, #12]
    1934:	4620      	mov	r0, r4
    1936:	2219      	movs	r2, #25
    1938:	f00d fde6 	bl	f508 <lv_chart_set_next>
    lv_chart_set_next(chart, dl1, 45);
    193c:	9903      	ldr	r1, [sp, #12]
    193e:	4620      	mov	r0, r4
    1940:	222d      	movs	r2, #45	; 0x2d
    1942:	f00d fde1 	bl	f508 <lv_chart_set_next>
    lv_chart_set_next(chart, dl1, 80);
    1946:	9903      	ldr	r1, [sp, #12]
    1948:	2250      	movs	r2, #80	; 0x50
    194a:	4620      	mov	r0, r4
    194c:	f00d fddc 	bl	f508 <lv_chart_set_next>
    lv_chart_series_t * dl2 = lv_chart_add_series(chart, lv_color_make(0x40, 0x70, 0xC0));
    1950:	f244 3198 	movw	r1, #17304	; 0x4398
    1954:	4620      	mov	r0, r4
    1956:	f00d fd57 	bl	f408 <lv_chart_add_series>
    lv_chart_set_next(chart, dl2, 10);
    195a:	220a      	movs	r2, #10
    lv_chart_series_t * dl2 = lv_chart_add_series(chart, lv_color_make(0x40, 0x70, 0xC0));
    195c:	4601      	mov	r1, r0
    lv_chart_set_next(chart, dl2, 10);
    195e:	9003      	str	r0, [sp, #12]
    1960:	4620      	mov	r0, r4
    1962:	f00d fdd1 	bl	f508 <lv_chart_set_next>
    lv_chart_set_next(chart, dl2, 25);
    1966:	9903      	ldr	r1, [sp, #12]
    1968:	4620      	mov	r0, r4
    196a:	2219      	movs	r2, #25
    196c:	f00d fdcc 	bl	f508 <lv_chart_set_next>
    lv_chart_set_next(chart, dl2, 45);
    1970:	9903      	ldr	r1, [sp, #12]
    1972:	4620      	mov	r0, r4
    1974:	222d      	movs	r2, #45	; 0x2d
    1976:	f00d fdc7 	bl	f508 <lv_chart_set_next>
    lv_chart_set_next(chart, dl2, 80);
    197a:	9903      	ldr	r1, [sp, #12]
    197c:	4620      	mov	r0, r4
    197e:	2250      	movs	r2, #80	; 0x50
    1980:	f00d fdc2 	bl	f508 <lv_chart_set_next>
    lv_chart_set_next(chart, dl2, 75);
    1984:	9903      	ldr	r1, [sp, #12]
    1986:	4620      	mov	r0, r4
    1988:	224b      	movs	r2, #75	; 0x4b
    198a:	f00d fdbd 	bl	f508 <lv_chart_set_next>
    lv_chart_set_next(chart, dl2, 505);
    198e:	9903      	ldr	r1, [sp, #12]
    1990:	f240 12f9 	movw	r2, #505	; 0x1f9
    1994:	4620      	mov	r0, r4
}
    1996:	b005      	add	sp, #20
    1998:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    lv_chart_set_next(chart, dl2, 505);
    199c:	f00d bdb4 	b.w	f508 <lv_chart_set_next>
    19a0:	00014c29 	.word	0x00014c29
    19a4:	00001791 	.word	0x00001791
    19a8:	00014c3b 	.word	0x00014c3b
    19ac:	00014c44 	.word	0x00014c44
    19b0:	20000150 	.word	0x20000150
    19b4:	00014c4d 	.word	0x00014c4d
    19b8:	000017ad 	.word	0x000017ad

000019bc <ui_task>:
{
    19bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(g_ullSystemTick > (ullLastBlink + 50))
    19be:	4e18      	ldr	r6, [pc, #96]	; (1a20 <ui_task+0x64>)
    19c0:	4f18      	ldr	r7, [pc, #96]	; (1a24 <ui_task+0x68>)
    19c2:	e9d6 3200 	ldrd	r3, r2, [r6]
    19c6:	e9d7 4500 	ldrd	r4, r5, [r7]
    19ca:	f113 0032 	adds.w	r0, r3, #50	; 0x32
    19ce:	f142 0100 	adc.w	r1, r2, #0
    19d2:	42a9      	cmp	r1, r5
    19d4:	bf08      	it	eq
    19d6:	42a0      	cmpeq	r0, r4
    19d8:	d220      	bcs.n	1a1c <ui_task+0x60>
        sk9822_set_color(ubLastLED, 0x00, 0x00, 0x00, 0x00, 0);
    19da:	2400      	movs	r4, #0
    19dc:	e9cd 4400 	strd	r4, r4, [sp]
    19e0:	4d11      	ldr	r5, [pc, #68]	; (1a28 <ui_task+0x6c>)
    19e2:	4623      	mov	r3, r4
    19e4:	4622      	mov	r2, r4
    19e6:	4621      	mov	r1, r4
    19e8:	7828      	ldrb	r0, [r5, #0]
    19ea:	f7ff f991 	bl	d10 <sk9822_set_color>
        if(ubLastLED == 7)
    19ee:	7829      	ldrb	r1, [r5, #0]
    19f0:	2907      	cmp	r1, #7
            ubLastLED += 1;
    19f2:	bf1c      	itt	ne
    19f4:	1c4c      	addne	r4, r1, #1
    19f6:	b2e4      	uxtbne	r4, r4
    19f8:	702c      	strb	r4, [r5, #0]
        uint32_t ulColor = trng_pop_random();
    19fa:	f010 fd77 	bl	124ec <trng_pop_random>
        sk9822_set_color(ubLastLED, 1, (uint8_t)((ulColor >> 16) & 0xFF), (uint8_t)((ulColor >> 8) & 0xFF), (uint8_t)(ulColor & 0xFF), 1);
    19fe:	2101      	movs	r1, #1
    1a00:	b2c3      	uxtb	r3, r0
    1a02:	9300      	str	r3, [sp, #0]
    1a04:	9101      	str	r1, [sp, #4]
    1a06:	f3c0 2307 	ubfx	r3, r0, #8, #8
    1a0a:	f3c0 4207 	ubfx	r2, r0, #16, #8
    1a0e:	7828      	ldrb	r0, [r5, #0]
    1a10:	f7ff f97e 	bl	d10 <sk9822_set_color>
        ullLastBlink = g_ullSystemTick;
    1a14:	e9d7 2300 	ldrd	r2, r3, [r7]
    1a18:	e9c6 2300 	strd	r2, r3, [r6]
}
    1a1c:	b003      	add	sp, #12
    1a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a20:	20000158 	.word	0x20000158
    1a24:	20005ef8 	.word	0x20005ef8
    1a28:	20000001 	.word	0x20000001

00001a2c <__iRestore.isra.0>:
    __asm__ volatile ("cpsid i" ::: "memory");
    (void)__s;
}
static inline void __iRestore(const uint32_t *__s)
{
    if(!*__s)
    1a2c:	b900      	cbnz	r0, 1a30 <__iRestore.isra.0+0x4>
        __asm__ volatile ("cpsie i" ::: "memory");
    1a2e:	b662      	cpsie	i
}
    1a30:	4770      	bx	lr

00001a32 <mcp9600_write_register>:
    //delay_ms(1);

    return (((uint32_t)ubBuf[0] << 16) | ((uint32_t)ubBuf[1] << 8) | ubBuf[2]);
}
static void mcp9600_write_register(uint8_t ubAddr, uint8_t ubReg, uint8_t ubVal)
{
    1a32:	b513      	push	{r0, r1, r4, lr}
    uint8_t ubBuf[2];

    ubBuf[0] = ubReg;
    1a34:	f88d 1004 	strb.w	r1, [sp, #4]
    ubBuf[1] = ubVal;
    1a38:	f88d 2005 	strb.w	r2, [sp, #5]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1a3c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile ("cpsid i" ::: "memory");
    1a40:	b672      	cpsid	i

void i2c0_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation);
uint8_t i2c0_transmit(uint8_t ubAddress, uint8_t *pubSrc, uint32_t ulCount, uint8_t ubStop);
static inline uint8_t i2c0_write(uint8_t ubAddress, uint8_t *pubSrc, uint32_t ulCount, uint8_t ubStop)
{
    return i2c0_transmit((ubAddress << 1) & ~0x01, pubSrc, ulCount, ubStop);
    1a42:	0040      	lsls	r0, r0, #1
    1a44:	f000 000e 	and.w	r0, r0, #14
    1a48:	2301      	movs	r3, #1
    1a4a:	2202      	movs	r2, #2
    1a4c:	a901      	add	r1, sp, #4
    1a4e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    1a52:	f010 fdcd 	bl	125f0 <i2c0_transmit>

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1a56:	4620      	mov	r0, r4
    1a58:	f7ff ffe8 	bl	1a2c <__iRestore.isra.0>
    {
        i2c0_write(MCP9600_I2C_ADDR | (ubAddr & 0x07), ubBuf, 2, I2C_STOP);
    }

    //delay_ms(1);
}
    1a5c:	b002      	add	sp, #8
    1a5e:	bd10      	pop	{r4, pc}

00001a60 <mcp9600_read_register>:
{
    1a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1a62:	f3ef 8410 	mrs	r4, PRIMASK
    1a66:	b672      	cpsid	i
        i2c0_write_byte(MCP9600_I2C_ADDR | (ubAddr & 0x07), ubReg, I2C_STOP);
    1a68:	f000 0007 	and.w	r0, r0, #7
    1a6c:	f040 0060 	orr.w	r0, r0, #96	; 0x60
{
    return i2c0_transmit((ubAddress << 1) | 0x01, pubDst, ulCount, ubStop);
}
static inline uint8_t i2c0_write_byte(uint8_t ubAddress, uint8_t ubData, uint8_t ubStop)
{
    return i2c0_transmit((ubAddress << 1) & ~0x01, &ubData, 1, ubStop);
    1a70:	0045      	lsls	r5, r0, #1
    1a72:	2301      	movs	r3, #1
    1a74:	f88d 1007 	strb.w	r1, [sp, #7]
    1a78:	461a      	mov	r2, r3
    1a7a:	f10d 0107 	add.w	r1, sp, #7
    1a7e:	4628      	mov	r0, r5
    1a80:	f010 fdb6 	bl	125f0 <i2c0_transmit>
}
static inline uint8_t i2c0_read_byte(uint8_t ubAddress, uint8_t ubStop)
{
    uint8_t ubData;

    i2c0_transmit((ubAddress << 1) | 0x01, &ubData, 1, ubStop);
    1a84:	2301      	movs	r3, #1
    1a86:	461a      	mov	r2, r3
    1a88:	f10d 0107 	add.w	r1, sp, #7
    1a8c:	ea45 0003 	orr.w	r0, r5, r3
    1a90:	f010 fdae 	bl	125f0 <i2c0_transmit>
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1a94:	4620      	mov	r0, r4

    return ubData;
    1a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1a9a:	f7ff ffc7 	bl	1a2c <__iRestore.isra.0>
}
    1a9e:	4618      	mov	r0, r3
    1aa0:	b003      	add	sp, #12
    1aa2:	bd30      	pop	{r4, r5, pc}

00001aa4 <mcp9600_read_register16>:
{
    1aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1aa6:	f3ef 8410 	mrs	r4, PRIMASK
    1aaa:	b672      	cpsid	i
        i2c0_write_byte(MCP9600_I2C_ADDR | (ubAddr & 0x07), ubReg, I2C_STOP);
    1aac:	f000 0007 	and.w	r0, r0, #7
    1ab0:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    return i2c0_transmit((ubAddress << 1) & ~0x01, &ubData, 1, ubStop);
    1ab4:	0045      	lsls	r5, r0, #1
    1ab6:	2301      	movs	r3, #1
    1ab8:	f88d 1004 	strb.w	r1, [sp, #4]
    1abc:	461a      	mov	r2, r3
    1abe:	a901      	add	r1, sp, #4
    1ac0:	4628      	mov	r0, r5
    1ac2:	f010 fd95 	bl	125f0 <i2c0_transmit>
    return i2c0_transmit((ubAddress << 1) | 0x01, pubDst, ulCount, ubStop);
    1ac6:	2301      	movs	r3, #1
    1ac8:	ea45 0003 	orr.w	r0, r5, r3
    1acc:	2202      	movs	r2, #2
    1ace:	a901      	add	r1, sp, #4
    1ad0:	f010 fd8e 	bl	125f0 <i2c0_transmit>
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1ad4:	4620      	mov	r0, r4
    1ad6:	f7ff ffa9 	bl	1a2c <__iRestore.isra.0>
    return ((uint16_t)ubBuf[0] << 8) | ubBuf[1];
    1ada:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1ade:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
    1ae2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    1ae6:	b003      	add	sp, #12
    1ae8:	bd30      	pop	{r4, r5, pc}

00001aea <mcp9600_init>:

    //delay_ms(1);
}

uint8_t mcp9600_init(uint8_t ubAddr)
{
    1aea:	b510      	push	{r4, lr}
    1aec:	f3ef 8410 	mrs	r4, PRIMASK
    1af0:	b672      	cpsid	i
    return i2c0_transmit((ubAddress << 1) & ~0x01, pubSrc, ulCount, ubStop);
    1af2:	0040      	lsls	r0, r0, #1
    1af4:	2200      	movs	r2, #0
    1af6:	f000 000e 	and.w	r0, r0, #14
    1afa:	2301      	movs	r3, #1
    1afc:	4611      	mov	r1, r2
    1afe:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    1b02:	f010 fd75 	bl	125f0 <i2c0_transmit>
    //delay_ms(1);

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    {
        if(!i2c0_write(MCP9600_I2C_ADDR | (ubAddr & 0x07), 0, 0, I2C_STOP)) // Check ACK from the expected address
    1b06:	4603      	mov	r3, r0
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1b08:	4620      	mov	r0, r4
        if(!i2c0_write(MCP9600_I2C_ADDR | (ubAddr & 0x07), 0, 0, I2C_STOP)) // Check ACK from the expected address
    1b0a:	b91b      	cbnz	r3, 1b14 <mcp9600_init+0x2a>
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1b0c:	f7ff ff8e 	bl	1a2c <__iRestore.isra.0>
    }

    //delay_ms(1);

    return 1;
}
    1b10:	4618      	mov	r0, r3
    1b12:	bd10      	pop	{r4, pc}
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1b14:	f7ff ff8a 	bl	1a2c <__iRestore.isra.0>
    return 1;
    1b18:	2301      	movs	r3, #1
    1b1a:	e7f9      	b.n	1b10 <mcp9600_init+0x26>

00001b1c <mcp9600_get_hj_temp>:

float mcp9600_get_hj_temp(uint8_t ubAddr)
{
    1b1c:	b508      	push	{r3, lr}
    uint16_t usTemp = mcp9600_read_register16(ubAddr, MCP9600_REG_HJT);
    1b1e:	2100      	movs	r1, #0
    1b20:	f7ff ffc0 	bl	1aa4 <mcp9600_read_register16>

    if(usTemp & 0x8000)
    1b24:	0403      	lsls	r3, r0, #16
    {
        usTemp = ~usTemp + 1;
    1b26:	bf41      	itttt	mi
    1b28:	4240      	negmi	r0, r0

        return -0.0625f * usTemp;
    1b2a:	b283      	uxthmi	r3, r0
    1b2c:	ee00 3a10 	vmovmi	s0, r3
    1b30:	eddf 7a05 	vldrmi	s15, [pc, #20]	; 1b48 <mcp9600_get_hj_temp+0x2c>
    1b34:	bf4b      	itete	mi
    1b36:	eeb8 0ac0 	vcvtmi.f32.s32	s0, s0
    }
    else
    {
        return 0.0625f * usTemp;
    1b3a:	ee00 0a10 	vmovpl	s0, r0
        return -0.0625f * usTemp;
    1b3e:	ee20 0a27 	vmulmi.f32	s0, s0, s15
        return 0.0625f * usTemp;
    1b42:	eeba 0ace 	vcvtpl.f32.s32	s0, s0, #4
    }
}
    1b46:	bd08      	pop	{r3, pc}
    1b48:	bd800000 	.word	0xbd800000

00001b4c <mcp9600_get_id>:
{
    return mcp9600_read_register24(ubAddr, MCP9600_REG_ADC);
}

uint8_t mcp9600_get_id(uint8_t ubAddr)
{
    1b4c:	b508      	push	{r3, lr}
    return mcp9600_read_register16(ubAddr, MCP9600_REG_ID) >> 8;
    1b4e:	2120      	movs	r1, #32
    1b50:	f7ff ffa8 	bl	1aa4 <mcp9600_read_register16>
}
    1b54:	f3c0 2007 	ubfx	r0, r0, #8, #8
    1b58:	bd08      	pop	{r3, pc}

00001b5a <mcp9600_get_revision>:
uint8_t mcp9600_get_revision(uint8_t ubAddr)
{
    1b5a:	b508      	push	{r3, lr}
    return mcp9600_read_register16(ubAddr, MCP9600_REG_ID) & 0xFF;
    1b5c:	2120      	movs	r1, #32
    1b5e:	f7ff ffa1 	bl	1aa4 <mcp9600_read_register16>
}
    1b62:	b2c0      	uxtb	r0, r0
    1b64:	bd08      	pop	{r3, pc}

00001b66 <mcp9600_set_status>:

void mcp9600_set_status(uint8_t ubAddr, uint8_t ubStatus)
{
    1b66:	460a      	mov	r2, r1
    mcp9600_write_register(ubAddr, MCP9600_REG_STAT, ubStatus);
    1b68:	2104      	movs	r1, #4
    1b6a:	f7ff bf62 	b.w	1a32 <mcp9600_write_register>

00001b6e <mcp9600_get_status>:
}
uint8_t mcp9600_get_status(uint8_t ubAddr)
{
    return mcp9600_read_register(ubAddr, MCP9600_REG_STAT);
    1b6e:	2104      	movs	r1, #4
    1b70:	f7ff bf76 	b.w	1a60 <mcp9600_read_register>

00001b74 <mcp9600_set_sensor_config>:
}

void mcp9600_set_sensor_config(uint8_t ubAddr, uint8_t ubConfig)
{
    1b74:	460a      	mov	r2, r1
    mcp9600_write_register(ubAddr, MCP9600_REG_TCFG, ubConfig);
    1b76:	2105      	movs	r1, #5
    1b78:	f7ff bf5b 	b.w	1a32 <mcp9600_write_register>

00001b7c <mcp9600_set_config>:
{
    return mcp9600_read_register(ubAddr, MCP9600_REG_TCFG);
}

void mcp9600_set_config(uint8_t ubAddr, uint8_t ubConfig)
{
    1b7c:	460a      	mov	r2, r1
    mcp9600_write_register(ubAddr, MCP9600_REG_CFG, ubConfig);
    1b7e:	2106      	movs	r1, #6
    1b80:	f7ff bf57 	b.w	1a32 <mcp9600_write_register>

00001b84 <get_device_name>:

    return ulFreeRAM;
}

void get_device_name(char *pszDeviceName, uint32_t ulDeviceNameSize)
{
    1b84:	b570      	push	{r4, r5, r6, lr}
    uint8_t ubFamily = (DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK) >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT;
    1b86:	4c1a      	ldr	r4, [pc, #104]	; (1bf0 <get_device_name+0x6c>)
    1b88:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    const char* szFamily = "?";

    switch(ubFamily)
    1b8a:	f3c3 4307 	ubfx	r3, r3, #16, #8
    1b8e:	3b10      	subs	r3, #16
    1b90:	2b6a      	cmp	r3, #106	; 0x6a
    1b92:	bf96      	itet	ls
    1b94:	4a17      	ldrls	r2, [pc, #92]	; (1bf4 <get_device_name+0x70>)
    uint8_t ubFamily = (DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK) >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT;
    1b96:	4b18      	ldrhi	r3, [pc, #96]	; (1bf8 <get_device_name+0x74>)
    1b98:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
        case 0x78: szFamily = "EZR32LG";    break;
        case 0x79: szFamily = "EZR32WG";    break;
        case 0x7A: szFamily = "EZR32HG";    break;
    }

    uint8_t ubPackage = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PKGTYPE_MASK) >> _DEVINFO_MEMINFO_PKGTYPE_SHIFT;
    1b9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1b9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    char cPackage = '?';

    if(ubPackage == 74)
    1ba2:	2a4a      	cmp	r2, #74	; 0x4a
{
    1ba4:	b086      	sub	sp, #24
    if(ubPackage == 74)
    1ba6:	d01f      	beq.n	1be8 <get_device_name+0x64>
        cPackage = '?';
    else if(ubPackage == 76)
    1ba8:	2a4c      	cmp	r2, #76	; 0x4c
    1baa:	d004      	beq.n	1bb6 <get_device_name+0x32>
        cPackage = 'L';
    else if(ubPackage == 77)
    1bac:	2a4d      	cmp	r2, #77	; 0x4d
    1bae:	d002      	beq.n	1bb6 <get_device_name+0x32>
        cPackage = '?';
    1bb0:	2a51      	cmp	r2, #81	; 0x51
    1bb2:	bf18      	it	ne
    1bb4:	223f      	movne	r2, #63	; 0x3f
        cPackage = 'M';
    else if(ubPackage == 81)
        cPackage = 'Q';

    uint8_t ubTempGrade = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_TEMPGRADE_MASK) >> _DEVINFO_MEMINFO_TEMPGRADE_SHIFT;
    1bb6:	6b65      	ldr	r5, [r4, #52]	; 0x34
    char cTempGrade = '?';

    if(ubTempGrade == 0)
    1bb8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    1bbc:	d016      	beq.n	1bec <get_device_name+0x68>
        cTempGrade = 'G';
    else if(ubTempGrade == 1)
        cTempGrade = 'I';
    else if(ubTempGrade == 2)
        cTempGrade = '?';
    1bbe:	2d01      	cmp	r5, #1
    1bc0:	bf0c      	ite	eq
    1bc2:	2649      	moveq	r6, #73	; 0x49
    1bc4:	263f      	movne	r6, #63	; 0x3f
    else if(ubTempGrade == 3)
        cTempGrade = '?';

    uint16_t usPartNumber = (DEVINFO->PART & _DEVINFO_PART_DEVICE_NUMBER_MASK) >> _DEVINFO_PART_DEVICE_NUMBER_SHIFT;
    1bc6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    uint8_t ubPinCount = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PINCOUNT_MASK) >> _DEVINFO_MEMINFO_PINCOUNT_SHIFT;
    1bc8:	6b64      	ldr	r4, [r4, #52]	; 0x34

    snprintf(pszDeviceName, ulDeviceNameSize, "%s%huF%hu%c%c%hhu", szFamily, usPartNumber, FLASH_SIZE >> 10, cTempGrade, cPackage, ubPinCount);
    1bca:	9602      	str	r6, [sp, #8]
    1bcc:	f3c4 4407 	ubfx	r4, r4, #16, #8
    1bd0:	e9cd 2403 	strd	r2, r4, [sp, #12]
    1bd4:	b2ad      	uxth	r5, r5
    1bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1bda:	9201      	str	r2, [sp, #4]
    1bdc:	9500      	str	r5, [sp, #0]
    1bde:	4a07      	ldr	r2, [pc, #28]	; (1bfc <get_device_name+0x78>)
    1be0:	f012 fb1e 	bl	14220 <snprintf>
}
    1be4:	b006      	add	sp, #24
    1be6:	bd70      	pop	{r4, r5, r6, pc}
        cPackage = '?';
    1be8:	223f      	movs	r2, #63	; 0x3f
    1bea:	e7e4      	b.n	1bb6 <get_device_name+0x32>
        cTempGrade = 'G';
    1bec:	2647      	movs	r6, #71	; 0x47
    1bee:	e7ea      	b.n	1bc6 <get_device_name+0x42>
    1bf0:	0fe081b0 	.word	0x0fe081b0
    1bf4:	000159d8 	.word	0x000159d8
    1bf8:	00014c68 	.word	0x00014c68
    1bfc:	00014c6a 	.word	0x00014c6a

00001c00 <init>:

    return usRevision;
}

int init()
{
    1c00:	b570      	push	{r4, r5, r6, lr}
    1c02:	ed2d 8b04 	vpush	{d8-d9}
    rmu_init(RMU_CTRL_PINRMODE_FULL, RMU_CTRL_SYSRMODE_EXTENDED, RMU_CTRL_LOCKUPRMODE_EXTENDED, RMU_CTRL_WDOGRMODE_EXTENDED); // Init RMU and set reset modes
    1c06:	2302      	movs	r3, #2
{
    1c08:	b090      	sub	sp, #64	; 0x40
    rmu_init(RMU_CTRL_PINRMODE_FULL, RMU_CTRL_SYSRMODE_EXTENDED, RMU_CTRL_LOCKUPRMODE_EXTENDED, RMU_CTRL_WDOGRMODE_EXTENDED); // Init RMU and set reset modes
    1c0a:	2220      	movs	r2, #32
    1c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
    1c10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1c14:	f00f ffaa 	bl	11b6c <rmu_init>

    emu_init(1); // Init EMU
    1c18:	2001      	movs	r0, #1
    1c1a:	f00f fda5 	bl	11768 <emu_init>
    emu_r5v_vin_config(EMU_R5VCTRL_INPUTMODE_AUTO); // Set 5V regulator automatic input selection
    1c1e:	2000      	movs	r0, #0
    1c20:	f00f feb6 	bl	11990 <emu_r5v_vin_config>
    emu_r5v_vout_config(3.3f); // Set 5V regulator output voltage to 3.3V
    1c24:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 1f78 <init+0x378>
    cmu_hfxo_startup_calib(0x200, 0x087); // Config HFXO Startup for 1280 uA, 20.04 pF
    cmu_hfxo_steady_calib(0x006, 0x087); // Config HFXO Steady state for 12 uA, 20.04 pF

    cmu_init(); // Init Clocks

    cmu_ushfrco_calib(1, USHFRCO_CALIB_8M, 8000000); // Enable and calibrate USHFRCO for 8 MHz
    1c28:	4cd4      	ldr	r4, [pc, #848]	; (1f7c <init+0x37c>)
    emu_r5v_vout_config(3.3f); // Set 5V regulator output voltage to 3.3V
    1c2a:	f00f fe75 	bl	11918 <emu_r5v_vout_config>
    cmu_hfxo_startup_calib(0x200, 0x087); // Config HFXO Startup for 1280 uA, 20.04 pF
    1c2e:	2187      	movs	r1, #135	; 0x87
    1c30:	f44f 7000 	mov.w	r0, #512	; 0x200
    1c34:	f011 f9ac 	bl	12f90 <cmu_hfxo_startup_calib>
    cmu_hfxo_steady_calib(0x006, 0x087); // Config HFXO Steady state for 12 uA, 20.04 pF
    1c38:	2187      	movs	r1, #135	; 0x87
    1c3a:	2006      	movs	r0, #6
    1c3c:	f011 f9be 	bl	12fbc <cmu_hfxo_steady_calib>
    cmu_init(); // Init Clocks
    1c40:	f011 f888 	bl	12d54 <cmu_init>
    cmu_ushfrco_calib(1, USHFRCO_CALIB_8M, 8000000); // Enable and calibrate USHFRCO for 8 MHz
    1c44:	f8d4 126c 	ldr.w	r1, [r4, #620]	; 0x26c
    1c48:	4acd      	ldr	r2, [pc, #820]	; (1f80 <init+0x380>)
    1c4a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    1c4e:	2001      	movs	r0, #1
    1c50:	f011 f94e 	bl	12ef0 <cmu_ushfrco_calib>
    cmu_auxhfrco_calib(1, AUXHFRCO_CALIB_32M, 32000000); // Enable and calibrate AUXHFRCO for 32 MHz
    1c54:	4acb      	ldr	r2, [pc, #812]	; (1f84 <init+0x384>)
    1c56:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    1c5a:	2001      	movs	r0, #1
    1c5c:	f011 f974 	bl	12f48 <cmu_auxhfrco_calib>

    cmu_update_clocks(); // Update Clocks
    1c60:	f010 fdfa 	bl	12858 <cmu_update_clocks>

    dbg_init(); // Init Debug module
    1c64:	f00f fffa 	bl	11c5c <dbg_init>
    dbg_swo_config(BIT(0) | BIT(1), 6000000); // Init SWO channels 0 and 1 at 6 MHz
    1c68:	49c7      	ldr	r1, [pc, #796]	; (1f88 <init+0x388>)
    1c6a:	2003      	movs	r0, #3
    1c6c:	f00f fffe 	bl	11c6c <dbg_swo_config>

    msc_init(); // Init Flash, RAM and caches
    1c70:	f010 f86b 	bl	11d4a <msc_init>

    systick_init(); // Init system tick
    1c74:	f010 fc50 	bl	12518 <systick_init>

    gpio_init(); // Init GPIOs
    1c78:	f010 faf8 	bl	1226c <gpio_init>
    ldma_init(); // Init LDMA
    1c7c:	f00f fefa 	bl	11a74 <ldma_init>
    rtcc_init(); // Init RTCC
    1c80:	f010 fbd6 	bl	12430 <rtcc_init>
    trng_init(); // Init TRNG
    1c84:	f010 fc0a 	bl	1249c <trng_init>
    crypto_init(); // Init Crypto engine
    1c88:	f010 f83a 	bl	11d00 <crypto_init>
    crc_init(); // Init CRC calculation unit
    1c8c:	f00f febe 	bl	11a0c <crc_init>
    adc_init(); // Init ADCs
    1c90:	f011 fa9a 	bl	131c8 <adc_init>
    qspi_init(); // Init QSPI memory
    1c94:	f010 fa84 	bl	121a0 <qspi_init>

    float fAVDDHighThresh, fAVDDLowThresh;
    float fDVDDHighThresh, fDVDDLowThresh;
    float fIOVDDHighThresh, fIOVDDLowThresh;

    emu_vmon_avdd_config(1, 3.1f, &fAVDDLowThresh, 3.22f, &fAVDDHighThresh); // Enable AVDD monitor
    1c98:	eddf 0abc 	vldr	s1, [pc, #752]	; 1f8c <init+0x38c>
    1c9c:	ed9f 0abc 	vldr	s0, [pc, #752]	; 1f90 <init+0x390>
    1ca0:	aa04      	add	r2, sp, #16
    1ca2:	a905      	add	r1, sp, #20
    1ca4:	2001      	movs	r0, #1
    1ca6:	f00f fd79 	bl	1179c <emu_vmon_avdd_config>
    emu_vmon_dvdd_config(1, 2.5f, &fDVDDLowThresh); // Enable DVDD monitor
    1caa:	a906      	add	r1, sp, #24
    1cac:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
    1cb0:	2001      	movs	r0, #1
    1cb2:	f00f fdc5 	bl	11840 <emu_vmon_dvdd_config>
    emu_vmon_iovdd_config(1, 3.15f, &fIOVDDLowThresh); // Enable IOVDD monitor
    1cb6:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 1f94 <init+0x394>
    1cba:	a907      	add	r1, sp, #28
    1cbc:	2001      	movs	r0, #1
    1cbe:	f00f fdf5 	bl	118ac <emu_vmon_iovdd_config>

    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    1cc2:	eddf 7ab5 	vldr	s15, [pc, #724]	; 1f98 <init+0x398>
    1cc6:	eddd 9a06 	vldr	s19, [sp, #24]
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    1cca:	ed9d 9a07 	vldr	s18, [sp, #28]

    i2c0_init(I2C_NORMAL, 1, 1); // Init I2C0 at 100 kHz on location 1 Temp Sensors
    1cce:	2201      	movs	r2, #1
    1cd0:	4611      	mov	r1, r2
    1cd2:	2000      	movs	r0, #0
    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    1cd4:	ee79 9aa7 	vadd.f32	s19, s19, s15
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    1cd8:	ee39 9a27 	vadd.f32	s18, s18, s15
    i2c0_init(I2C_NORMAL, 1, 1); // Init I2C0 at 100 kHz on location 1 Temp Sensors
    1cdc:	f010 fc4e 	bl	1257c <i2c0_init>
    i2c1_init(I2C_NORMAL, 1, 1); // Init I2C1 at 400 kHz on location 1 Touch TFT
    1ce0:	2201      	movs	r2, #1
    usart0_init(18000000, 0, USART_SPI_MSB_FIRST, -1, 1, 1); // Init Usart 0 Mode SPI at 1MHz SK9822 LED
    1ce2:	2501      	movs	r5, #1
    i2c1_init(I2C_NORMAL, 1, 1); // Init I2C1 at 400 kHz on location 1 Touch TFT
    1ce4:	4611      	mov	r1, r2
    1ce6:	2000      	movs	r0, #0
    1ce8:	f010 fd02 	bl	126f0 <i2c1_init>
    usart0_init(18000000, 0, USART_SPI_MSB_FIRST, -1, 1, 1); // Init Usart 0 Mode SPI at 1MHz SK9822 LED
    1cec:	462a      	mov	r2, r5
    1cee:	e9cd 5500 	strd	r5, r5, [sp]
    1cf2:	48aa      	ldr	r0, [pc, #680]	; (1f9c <init+0x39c>)
    1cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1cf8:	2100      	movs	r1, #0
    1cfa:	f011 f975 	bl	12fe8 <usart0_init>
    usart2_init(36000000, 0, USART_SPI_MSB_FIRST, 0, 0, 0); // Init Usart 2 Mode SPI at 36MHz ILI9488 Display
    1cfe:	2300      	movs	r3, #0
    1d00:	e9cd 3300 	strd	r3, r3, [sp]
    1d04:	4619      	mov	r1, r3
    1d06:	462a      	mov	r2, r5
    1d08:	48a5      	ldr	r0, [pc, #660]	; (1fa0 <init+0x3a0>)
    1d0a:	f011 f9d5 	bl	130b8 <usart2_init>
    //usart0_init(1000000, 1, USART_SPI_MSB_FIRST, 0, 0, 0);
    //i2c0_init(I2C_NORMAL, 1, 1); // Init I2C0 at 100 kHz on location 1

    char szDeviceName[32];

    get_device_name(szDeviceName, 32);
    1d0e:	2120      	movs	r1, #32
    1d10:	eb0d 0001 	add.w	r0, sp, r1
    1d14:	f7ff ff36 	bl	1b84 <get_device_name>

    DBGPRINTLN_CTX("Device: %s", szDeviceName);
    1d18:	aa08      	add	r2, sp, #32
    1d1a:	49a2      	ldr	r1, [pc, #648]	; (1fa4 <init+0x3a4>)
    1d1c:	48a2      	ldr	r0, [pc, #648]	; (1fa8 <init+0x3a8>)
    1d1e:	f012 fa6b 	bl	141f8 <printf>
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    1d22:	49a2      	ldr	r1, [pc, #648]	; (1fac <init+0x3ac>)
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    1d24:	48a2      	ldr	r0, [pc, #648]	; (1fb0 <init+0x3b0>)
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    1d26:	690b      	ldr	r3, [r1, #16]
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    1d28:	698a      	ldr	r2, [r1, #24]
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    1d2a:	69c9      	ldr	r1, [r1, #28]
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    1d2c:	021b      	lsls	r3, r3, #8
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    1d2e:	f3c1 1103 	ubfx	r1, r1, #4, #4
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    1d32:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    1d36:	430b      	orrs	r3, r1
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    1d38:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    1d3c:	431a      	orrs	r2, r3
    1d3e:	4999      	ldr	r1, [pc, #612]	; (1fa4 <init+0x3a4>)
    1d40:	f012 fa5a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("Calibration temperature: %hhu C", (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT);
    1d44:	6822      	ldr	r2, [r4, #0]
    1d46:	4997      	ldr	r1, [pc, #604]	; (1fa4 <init+0x3a4>)
    1d48:	489a      	ldr	r0, [pc, #616]	; (1fb4 <init+0x3b4>)
    1d4a:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1d4e:	f012 fa53 	bl	141f8 <printf>
    DBGPRINTLN_CTX("Flash Size: %hu kB", FLASH_SIZE >> 10);
    1d52:	4994      	ldr	r1, [pc, #592]	; (1fa4 <init+0x3a4>)
    1d54:	4898      	ldr	r0, [pc, #608]	; (1fb8 <init+0x3b8>)
    1d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1d5a:	f012 fa4d 	bl	141f8 <printf>
    DBGPRINTLN_CTX("RAM Size: %hu kB", SRAM_SIZE >> 10);
    1d5e:	4991      	ldr	r1, [pc, #580]	; (1fa4 <init+0x3a4>)
    1d60:	4896      	ldr	r0, [pc, #600]	; (1fbc <init+0x3bc>)
    1d62:	f44f 7200 	mov.w	r2, #512	; 0x200
    1d66:	f012 fa47 	bl	141f8 <printf>
    void *pCurrentHeap = malloc(1);
    1d6a:	4628      	mov	r0, r5
    1d6c:	f012 fa92 	bl	14294 <malloc>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    1d70:	f3ef 8308 	mrs	r3, MSP
    uint32_t ulFreeRAM = (uint32_t)__get_MSP() - (uint32_t)pCurrentHeap;
    1d74:	1a1a      	subs	r2, r3, r0
    1d76:	9203      	str	r2, [sp, #12]
    free(pCurrentHeap);
    1d78:	f012 fa94 	bl	142a4 <free>
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    1d7c:	9a03      	ldr	r2, [sp, #12]
    1d7e:	4989      	ldr	r1, [pc, #548]	; (1fa4 <init+0x3a4>)
    1d80:	488f      	ldr	r0, [pc, #572]	; (1fc0 <init+0x3c0>)
    DBGPRINTLN_CTX("RMU - Reset state: %hhu", rmu_get_reset_state());

    rmu_clear_reset_reason();

    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    1d82:	eddf 8a90 	vldr	s17, [pc, #576]	; 1fc4 <init+0x3c4>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    1d86:	ed9f 8a90 	vldr	s16, [pc, #576]	; 1fc8 <init+0x3c8>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);

    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    1d8a:	4d90      	ldr	r5, [pc, #576]	; (1fcc <init+0x3cc>)
    DBGPRINTLN_CTX("Scanning I2C bus 0...");

    for(uint8_t a = 0x08; a < 0x78; a++)
    {
        if(i2c0_write(a, 0, 0, I2C_STOP))
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    1d8c:	4e90      	ldr	r6, [pc, #576]	; (1fd0 <init+0x3d0>)
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    1d8e:	f012 fa33 	bl	141f8 <printf>
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    1d92:	6c62      	ldr	r2, [r4, #68]	; 0x44
    1d94:	4983      	ldr	r1, [pc, #524]	; (1fa4 <init+0x3a4>)
    1d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1d98:	488e      	ldr	r0, [pc, #568]	; (1fd4 <init+0x3d4>)
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    1d9a:	4c8f      	ldr	r4, [pc, #572]	; (1fd8 <init+0x3d8>)
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    1d9c:	f012 fa2c 	bl	141f8 <printf>
    DBGPRINTLN_CTX("RMU - Reset cause: %hhu", rmu_get_reset_reason());
    1da0:	f00f fefc 	bl	11b9c <rmu_get_reset_reason>
    1da4:	497f      	ldr	r1, [pc, #508]	; (1fa4 <init+0x3a4>)
    1da6:	4602      	mov	r2, r0
    1da8:	488c      	ldr	r0, [pc, #560]	; (1fdc <init+0x3dc>)
    1daa:	f012 fa25 	bl	141f8 <printf>
    DBGPRINTLN_CTX("RMU - Reset state: %hhu", rmu_get_reset_state());
    1dae:	f00f ff4d 	bl	11c4c <rmu_get_reset_state>
    1db2:	497c      	ldr	r1, [pc, #496]	; (1fa4 <init+0x3a4>)
    1db4:	4602      	mov	r2, r0
    1db6:	488a      	ldr	r0, [pc, #552]	; (1fe0 <init+0x3e0>)
    1db8:	f012 fa1e 	bl	141f8 <printf>
    rmu_clear_reset_reason();
    1dbc:	f00f ff40 	bl	11c40 <rmu_clear_reset_reason>
    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    1dc0:	2200      	movs	r2, #0
    1dc2:	4b88      	ldr	r3, [pc, #544]	; (1fe4 <init+0x3e4>)
    1dc4:	4977      	ldr	r1, [pc, #476]	; (1fa4 <init+0x3a4>)
    1dc6:	4888      	ldr	r0, [pc, #544]	; (1fe8 <init+0x3e8>)
    1dc8:	f012 fa16 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    1dcc:	4b87      	ldr	r3, [pc, #540]	; (1fec <init+0x3ec>)
    1dce:	edd3 7a00 	vldr	s15, [r3]
    1dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1dd6:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1dda:	ee17 0a90 	vmov	r0, s15
    1dde:	f7fe fb23 	bl	428 <__aeabi_f2d>
    1de2:	4602      	mov	r2, r0
    1de4:	460b      	mov	r3, r1
    1de6:	4882      	ldr	r0, [pc, #520]	; (1ff0 <init+0x3f0>)
    1de8:	496e      	ldr	r1, [pc, #440]	; (1fa4 <init+0x3a4>)
    1dea:	f012 fa05 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    1dee:	4b81      	ldr	r3, [pc, #516]	; (1ff4 <init+0x3f4>)
    1df0:	edd3 7a00 	vldr	s15, [r3]
    1df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1df8:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1dfc:	ee17 0a90 	vmov	r0, s15
    1e00:	f7fe fb12 	bl	428 <__aeabi_f2d>
    1e04:	4602      	mov	r2, r0
    1e06:	460b      	mov	r3, r1
    1e08:	487b      	ldr	r0, [pc, #492]	; (1ff8 <init+0x3f8>)
    1e0a:	4966      	ldr	r1, [pc, #408]	; (1fa4 <init+0x3a4>)
    1e0c:	f012 f9f4 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    1e10:	4b7a      	ldr	r3, [pc, #488]	; (1ffc <init+0x3fc>)
    1e12:	edd3 7a00 	vldr	s15, [r3]
    1e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e1a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1e1e:	ee17 0a90 	vmov	r0, s15
    1e22:	f7fe fb01 	bl	428 <__aeabi_f2d>
    1e26:	4602      	mov	r2, r0
    1e28:	460b      	mov	r3, r1
    1e2a:	4875      	ldr	r0, [pc, #468]	; (2000 <init+0x400>)
    1e2c:	495d      	ldr	r1, [pc, #372]	; (1fa4 <init+0x3a4>)
    1e2e:	f012 f9e3 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    1e32:	a34f      	add	r3, pc, #316	; (adr r3, 1f70 <init+0x370>)
    1e34:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e38:	495a      	ldr	r1, [pc, #360]	; (1fa4 <init+0x3a4>)
    1e3a:	4872      	ldr	r0, [pc, #456]	; (2004 <init+0x404>)
    1e3c:	f012 f9dc 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    1e40:	4b71      	ldr	r3, [pc, #452]	; (2008 <init+0x408>)
    1e42:	edd3 7a00 	vldr	s15, [r3]
    1e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e4a:	eec7 7a88 	vdiv.f32	s15, s15, s16
    1e4e:	ee17 0a90 	vmov	r0, s15
    1e52:	f7fe fae9 	bl	428 <__aeabi_f2d>
    1e56:	4602      	mov	r2, r0
    1e58:	460b      	mov	r3, r1
    1e5a:	486c      	ldr	r0, [pc, #432]	; (200c <init+0x40c>)
    1e5c:	4951      	ldr	r1, [pc, #324]	; (1fa4 <init+0x3a4>)
    1e5e:	f012 f9cb 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - ULFRCO Clock: %.3f kHz!", (float)ULFRCO_VALUE / 1000);
    1e62:	4b6b      	ldr	r3, [pc, #428]	; (2010 <init+0x410>)
    1e64:	edd3 7a00 	vldr	s15, [r3]
    1e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e6c:	eec7 7a88 	vdiv.f32	s15, s15, s16
    1e70:	ee17 0a90 	vmov	r0, s15
    1e74:	f7fe fad8 	bl	428 <__aeabi_f2d>
    1e78:	4602      	mov	r2, r0
    1e7a:	460b      	mov	r3, r1
    1e7c:	4865      	ldr	r0, [pc, #404]	; (2014 <init+0x414>)
    1e7e:	4949      	ldr	r1, [pc, #292]	; (1fa4 <init+0x3a4>)
    1e80:	f012 f9ba 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HFSRC Clock: %.1f MHz!", (float)HFSRC_CLOCK_FREQ / 1000000);
    1e84:	4b64      	ldr	r3, [pc, #400]	; (2018 <init+0x418>)
    1e86:	edd3 7a00 	vldr	s15, [r3]
    1e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e8e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1e92:	ee17 0a90 	vmov	r0, s15
    1e96:	f7fe fac7 	bl	428 <__aeabi_f2d>
    1e9a:	4602      	mov	r2, r0
    1e9c:	460b      	mov	r3, r1
    1e9e:	485f      	ldr	r0, [pc, #380]	; (201c <init+0x41c>)
    1ea0:	4940      	ldr	r1, [pc, #256]	; (1fa4 <init+0x3a4>)
    1ea2:	f012 f9a9 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HF Clock: %.1f MHz!", (float)HF_CLOCK_FREQ / 1000000);
    1ea6:	4b5e      	ldr	r3, [pc, #376]	; (2020 <init+0x420>)
    1ea8:	edd3 7a00 	vldr	s15, [r3]
    1eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1eb0:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1eb4:	ee17 0a90 	vmov	r0, s15
    1eb8:	f7fe fab6 	bl	428 <__aeabi_f2d>
    1ebc:	4602      	mov	r2, r0
    1ebe:	460b      	mov	r3, r1
    1ec0:	4858      	ldr	r0, [pc, #352]	; (2024 <init+0x424>)
    1ec2:	4938      	ldr	r1, [pc, #224]	; (1fa4 <init+0x3a4>)
    1ec4:	f012 f998 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HFBUS Clock: %.1f MHz!", (float)HFBUS_CLOCK_FREQ / 1000000);
    1ec8:	4b57      	ldr	r3, [pc, #348]	; (2028 <init+0x428>)
    1eca:	edd3 7a00 	vldr	s15, [r3]
    1ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1ed2:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1ed6:	ee17 0a90 	vmov	r0, s15
    1eda:	f7fe faa5 	bl	428 <__aeabi_f2d>
    1ede:	4602      	mov	r2, r0
    1ee0:	460b      	mov	r3, r1
    1ee2:	4852      	ldr	r0, [pc, #328]	; (202c <init+0x42c>)
    1ee4:	492f      	ldr	r1, [pc, #188]	; (1fa4 <init+0x3a4>)
    1ee6:	f012 f987 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HFCORE Clock: %.1f MHz!", (float)HFCORE_CLOCK_FREQ / 1000000);
    1eea:	4b51      	ldr	r3, [pc, #324]	; (2030 <init+0x430>)
    1eec:	edd3 7a00 	vldr	s15, [r3]
    1ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1ef4:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1ef8:	ee17 0a90 	vmov	r0, s15
    1efc:	f7fe fa94 	bl	428 <__aeabi_f2d>
    1f00:	4602      	mov	r2, r0
    1f02:	460b      	mov	r3, r1
    1f04:	484b      	ldr	r0, [pc, #300]	; (2034 <init+0x434>)
    1f06:	4927      	ldr	r1, [pc, #156]	; (1fa4 <init+0x3a4>)
    1f08:	f012 f976 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HFEXP Clock: %.1f MHz!", (float)HFEXP_CLOCK_FREQ / 1000000);
    1f0c:	4b4a      	ldr	r3, [pc, #296]	; (2038 <init+0x438>)
    1f0e:	edd3 7a00 	vldr	s15, [r3]
    1f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1f16:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1f1a:	ee17 0a90 	vmov	r0, s15
    1f1e:	f7fe fa83 	bl	428 <__aeabi_f2d>
    1f22:	4602      	mov	r2, r0
    1f24:	460b      	mov	r3, r1
    1f26:	4845      	ldr	r0, [pc, #276]	; (203c <init+0x43c>)
    1f28:	491e      	ldr	r1, [pc, #120]	; (1fa4 <init+0x3a4>)
    1f2a:	f012 f965 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HFPER Clock: %.1f MHz!", (float)HFPER_CLOCK_FREQ / 1000000);
    1f2e:	4b44      	ldr	r3, [pc, #272]	; (2040 <init+0x440>)
    1f30:	edd3 7a00 	vldr	s15, [r3]
    1f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1f38:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1f3c:	ee17 0a90 	vmov	r0, s15
    1f40:	f7fe fa72 	bl	428 <__aeabi_f2d>
    1f44:	4602      	mov	r2, r0
    1f46:	460b      	mov	r3, r1
    1f48:	483e      	ldr	r0, [pc, #248]	; (2044 <init+0x444>)
    1f4a:	4916      	ldr	r1, [pc, #88]	; (1fa4 <init+0x3a4>)
    1f4c:	f012 f954 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HFPERB Clock: %.1f MHz!", (float)HFPERB_CLOCK_FREQ / 1000000);
    1f50:	4b3d      	ldr	r3, [pc, #244]	; (2048 <init+0x448>)
    1f52:	edd3 7a00 	vldr	s15, [r3]
    1f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1f5a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1f5e:	ee17 0a90 	vmov	r0, s15
    1f62:	f7fe fa61 	bl	428 <__aeabi_f2d>
    1f66:	4602      	mov	r2, r0
    1f68:	460b      	mov	r3, r1
    1f6a:	e06f      	b.n	204c <init+0x44c>
    1f6c:	f3af 8000 	nop.w
    1f70:	e0000000 	.word	0xe0000000
    1f74:	4040624d 	.word	0x4040624d
    1f78:	40533333 	.word	0x40533333
    1f7c:	0fe081b0 	.word	0x0fe081b0
    1f80:	007a1200 	.word	0x007a1200
    1f84:	01e84800 	.word	0x01e84800
    1f88:	005b8d80 	.word	0x005b8d80
    1f8c:	404e147b 	.word	0x404e147b
    1f90:	40466666 	.word	0x40466666
    1f94:	4049999a 	.word	0x4049999a
    1f98:	3cd4fdf4 	.word	0x3cd4fdf4
    1f9c:	0112a880 	.word	0x0112a880
    1fa0:	02255100 	.word	0x02255100
    1fa4:	00015b84 	.word	0x00015b84
    1fa8:	00014c83 	.word	0x00014c83
    1fac:	e00fffd0 	.word	0xe00fffd0
    1fb0:	00014c97 	.word	0x00014c97
    1fb4:	00014cb8 	.word	0x00014cb8
    1fb8:	00014ce1 	.word	0x00014ce1
    1fbc:	00014cfd 	.word	0x00014cfd
    1fc0:	00014d17 	.word	0x00014d17
    1fc4:	49742400 	.word	0x49742400
    1fc8:	447a0000 	.word	0x447a0000
    1fcc:	00014c7c 	.word	0x00014c7c
    1fd0:	000155f9 	.word	0x000155f9
    1fd4:	00014d30 	.word	0x00014d30
    1fd8:	00014c80 	.word	0x00014c80
    1fdc:	00014d4e 	.word	0x00014d4e
    1fe0:	00014d6f 	.word	0x00014d6f
    1fe4:	40200000 	.word	0x40200000
    1fe8:	00014d90 	.word	0x00014d90
    1fec:	2000004c 	.word	0x2000004c
    1ff0:	00014db5 	.word	0x00014db5
    1ff4:	20000058 	.word	0x20000058
    1ff8:	00014ddb 	.word	0x00014ddb
    1ffc:	20000048 	.word	0x20000048
    2000:	00014e03 	.word	0x00014e03
    2004:	00014e2c 	.word	0x00014e2c
    2008:	20000050 	.word	0x20000050
    200c:	00014e51 	.word	0x00014e51
    2010:	20000054 	.word	0x20000054
    2014:	00014e77 	.word	0x00014e77
    2018:	200062f4 	.word	0x200062f4
    201c:	00014e9e 	.word	0x00014e9e
    2020:	2000631c 	.word	0x2000631c
    2024:	00014ec4 	.word	0x00014ec4
    2028:	200062f8 	.word	0x200062f8
    202c:	00014ee7 	.word	0x00014ee7
    2030:	200062e0 	.word	0x200062e0
    2034:	00014f0d 	.word	0x00014f0d
    2038:	20006304 	.word	0x20006304
    203c:	00014f34 	.word	0x00014f34
    2040:	20006314 	.word	0x20006314
    2044:	00014f5a 	.word	0x00014f5a
    2048:	20006308 	.word	0x20006308
    204c:	48d7      	ldr	r0, [pc, #860]	; (23ac <init+0x7ac>)
    204e:	49d8      	ldr	r1, [pc, #864]	; (23b0 <init+0x7b0>)
    2050:	f012 f8d2 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HFPERC Clock: %.1f MHz!", (float)HFPERC_CLOCK_FREQ / 1000000);
    2054:	4bd7      	ldr	r3, [pc, #860]	; (23b4 <init+0x7b4>)
    2056:	edd3 7a00 	vldr	s15, [r3]
    205a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    205e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2062:	ee17 0a90 	vmov	r0, s15
    2066:	f7fe f9df 	bl	428 <__aeabi_f2d>
    206a:	4602      	mov	r2, r0
    206c:	460b      	mov	r3, r1
    206e:	48d2      	ldr	r0, [pc, #840]	; (23b8 <init+0x7b8>)
    2070:	49cf      	ldr	r1, [pc, #828]	; (23b0 <init+0x7b0>)
    2072:	f012 f8c1 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - HFLE Clock: %.1f MHz!", (float)HFLE_CLOCK_FREQ / 1000000);
    2076:	4bd1      	ldr	r3, [pc, #836]	; (23bc <init+0x7bc>)
    2078:	edd3 7a00 	vldr	s15, [r3]
    207c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2080:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2084:	ee17 0a90 	vmov	r0, s15
    2088:	f7fe f9ce 	bl	428 <__aeabi_f2d>
    208c:	4602      	mov	r2, r0
    208e:	460b      	mov	r3, r1
    2090:	48cb      	ldr	r0, [pc, #812]	; (23c0 <init+0x7c0>)
    2092:	49c7      	ldr	r1, [pc, #796]	; (23b0 <init+0x7b0>)
    2094:	f012 f8b0 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - QSPI Clock: %.1f MHz!", (float)QSPI_CLOCK_FREQ / 1000000);
    2098:	4bca      	ldr	r3, [pc, #808]	; (23c4 <init+0x7c4>)
    209a:	edd3 7a00 	vldr	s15, [r3]
    209e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    20a2:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    20a6:	ee17 0a90 	vmov	r0, s15
    20aa:	f7fe f9bd 	bl	428 <__aeabi_f2d>
    20ae:	4602      	mov	r2, r0
    20b0:	460b      	mov	r3, r1
    20b2:	48c5      	ldr	r0, [pc, #788]	; (23c8 <init+0x7c8>)
    20b4:	49be      	ldr	r1, [pc, #760]	; (23b0 <init+0x7b0>)
    20b6:	f012 f89f 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - SDIO Clock: %.1f MHz!", (float)SDIO_CLOCK_FREQ / 1000000);
    20ba:	4bc4      	ldr	r3, [pc, #784]	; (23cc <init+0x7cc>)
    20bc:	edd3 7a00 	vldr	s15, [r3]
    20c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    20c4:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    20c8:	ee17 0a90 	vmov	r0, s15
    20cc:	f7fe f9ac 	bl	428 <__aeabi_f2d>
    20d0:	4602      	mov	r2, r0
    20d2:	460b      	mov	r3, r1
    20d4:	48be      	ldr	r0, [pc, #760]	; (23d0 <init+0x7d0>)
    20d6:	49b6      	ldr	r1, [pc, #728]	; (23b0 <init+0x7b0>)
    20d8:	f012 f88e 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - USB Clock: %.1f MHz!", (float)USB_CLOCK_FREQ / 1000000);
    20dc:	4bbd      	ldr	r3, [pc, #756]	; (23d4 <init+0x7d4>)
    20de:	edd3 7a00 	vldr	s15, [r3]
    20e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    20e6:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    20ea:	ee17 0a90 	vmov	r0, s15
    20ee:	f7fe f99b 	bl	428 <__aeabi_f2d>
    20f2:	4602      	mov	r2, r0
    20f4:	460b      	mov	r3, r1
    20f6:	48b8      	ldr	r0, [pc, #736]	; (23d8 <init+0x7d8>)
    20f8:	49ad      	ldr	r1, [pc, #692]	; (23b0 <init+0x7b0>)
    20fa:	f012 f87d 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - ADC0 Clock: %.1f MHz!", (float)ADC0_CLOCK_FREQ / 1000000);
    20fe:	4bb7      	ldr	r3, [pc, #732]	; (23dc <init+0x7dc>)
    2100:	edd3 7a00 	vldr	s15, [r3]
    2104:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2108:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    210c:	ee17 0a90 	vmov	r0, s15
    2110:	f7fe f98a 	bl	428 <__aeabi_f2d>
    2114:	4602      	mov	r2, r0
    2116:	460b      	mov	r3, r1
    2118:	48b1      	ldr	r0, [pc, #708]	; (23e0 <init+0x7e0>)
    211a:	49a5      	ldr	r1, [pc, #660]	; (23b0 <init+0x7b0>)
    211c:	f012 f86c 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - ADC1 Clock: %.1f MHz!", (float)ADC1_CLOCK_FREQ / 1000000);
    2120:	4bb0      	ldr	r3, [pc, #704]	; (23e4 <init+0x7e4>)
    2122:	edd3 7a00 	vldr	s15, [r3]
    2126:	eef8 7a67 	vcvt.f32.u32	s15, s15
    212a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    212e:	ee17 0a90 	vmov	r0, s15
    2132:	f7fe f979 	bl	428 <__aeabi_f2d>
    2136:	4602      	mov	r2, r0
    2138:	460b      	mov	r3, r1
    213a:	48ab      	ldr	r0, [pc, #684]	; (23e8 <init+0x7e8>)
    213c:	499c      	ldr	r1, [pc, #624]	; (23b0 <init+0x7b0>)
    213e:	f012 f85b 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - DBG Clock: %.1f MHz!", (float)DBG_CLOCK_FREQ / 1000000);
    2142:	4baa      	ldr	r3, [pc, #680]	; (23ec <init+0x7ec>)
    2144:	edd3 7a00 	vldr	s15, [r3]
    2148:	eef8 7a67 	vcvt.f32.u32	s15, s15
    214c:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2150:	ee17 0a90 	vmov	r0, s15
    2154:	f7fe f968 	bl	428 <__aeabi_f2d>
    2158:	4602      	mov	r2, r0
    215a:	460b      	mov	r3, r1
    215c:	48a4      	ldr	r0, [pc, #656]	; (23f0 <init+0x7f0>)
    215e:	4994      	ldr	r1, [pc, #592]	; (23b0 <init+0x7b0>)
    2160:	f012 f84a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - AUX Clock: %.1f MHz!", (float)AUX_CLOCK_FREQ / 1000000);
    2164:	4ba3      	ldr	r3, [pc, #652]	; (23f4 <init+0x7f4>)
    2166:	edd3 7a00 	vldr	s15, [r3]
    216a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    216e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2172:	ee17 0a90 	vmov	r0, s15
    2176:	f7fe f957 	bl	428 <__aeabi_f2d>
    217a:	4602      	mov	r2, r0
    217c:	460b      	mov	r3, r1
    217e:	489e      	ldr	r0, [pc, #632]	; (23f8 <init+0x7f8>)
    2180:	498b      	ldr	r1, [pc, #556]	; (23b0 <init+0x7b0>)
    2182:	f012 f839 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LFA Clock: %.3f kHz!", (float)LFA_CLOCK_FREQ / 1000);
    2186:	4b9d      	ldr	r3, [pc, #628]	; (23fc <init+0x7fc>)
    2188:	edd3 7a00 	vldr	s15, [r3]
    218c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2190:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2194:	ee17 0a90 	vmov	r0, s15
    2198:	f7fe f946 	bl	428 <__aeabi_f2d>
    219c:	4602      	mov	r2, r0
    219e:	460b      	mov	r3, r1
    21a0:	4897      	ldr	r0, [pc, #604]	; (2400 <init+0x800>)
    21a2:	4983      	ldr	r1, [pc, #524]	; (23b0 <init+0x7b0>)
    21a4:	f012 f828 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LESENSE Clock: %.3f kHz!", (float)LESENSE_CLOCK_FREQ / 1000);
    21a8:	4b96      	ldr	r3, [pc, #600]	; (2404 <init+0x804>)
    21aa:	edd3 7a00 	vldr	s15, [r3]
    21ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
    21b2:	eec7 7a88 	vdiv.f32	s15, s15, s16
    21b6:	ee17 0a90 	vmov	r0, s15
    21ba:	f7fe f935 	bl	428 <__aeabi_f2d>
    21be:	4602      	mov	r2, r0
    21c0:	460b      	mov	r3, r1
    21c2:	4891      	ldr	r0, [pc, #580]	; (2408 <init+0x808>)
    21c4:	497a      	ldr	r1, [pc, #488]	; (23b0 <init+0x7b0>)
    21c6:	f012 f817 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - RTC Clock: %.3f kHz!", (float)RTC_CLOCK_FREQ / 1000);
    21ca:	4b90      	ldr	r3, [pc, #576]	; (240c <init+0x80c>)
    21cc:	edd3 7a00 	vldr	s15, [r3]
    21d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    21d4:	eec7 7a88 	vdiv.f32	s15, s15, s16
    21d8:	ee17 0a90 	vmov	r0, s15
    21dc:	f7fe f924 	bl	428 <__aeabi_f2d>
    21e0:	4602      	mov	r2, r0
    21e2:	460b      	mov	r3, r1
    21e4:	488a      	ldr	r0, [pc, #552]	; (2410 <init+0x810>)
    21e6:	4972      	ldr	r1, [pc, #456]	; (23b0 <init+0x7b0>)
    21e8:	f012 f806 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LCD Clock: %.3f kHz!", (float)LCD_CLOCK_FREQ / 1000);
    21ec:	4b89      	ldr	r3, [pc, #548]	; (2414 <init+0x814>)
    21ee:	edd3 7a00 	vldr	s15, [r3]
    21f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    21f6:	eec7 7a88 	vdiv.f32	s15, s15, s16
    21fa:	ee17 0a90 	vmov	r0, s15
    21fe:	f7fe f913 	bl	428 <__aeabi_f2d>
    2202:	4602      	mov	r2, r0
    2204:	460b      	mov	r3, r1
    2206:	4884      	ldr	r0, [pc, #528]	; (2418 <init+0x818>)
    2208:	4969      	ldr	r1, [pc, #420]	; (23b0 <init+0x7b0>)
    220a:	f011 fff5 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LETIMER0 Clock: %.3f kHz!", (float)LETIMER0_CLOCK_FREQ / 1000);
    220e:	4b83      	ldr	r3, [pc, #524]	; (241c <init+0x81c>)
    2210:	edd3 7a00 	vldr	s15, [r3]
    2214:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2218:	eec7 7a88 	vdiv.f32	s15, s15, s16
    221c:	ee17 0a90 	vmov	r0, s15
    2220:	f7fe f902 	bl	428 <__aeabi_f2d>
    2224:	4602      	mov	r2, r0
    2226:	460b      	mov	r3, r1
    2228:	487d      	ldr	r0, [pc, #500]	; (2420 <init+0x820>)
    222a:	4961      	ldr	r1, [pc, #388]	; (23b0 <init+0x7b0>)
    222c:	f011 ffe4 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LETIMER1 Clock: %.3f kHz!", (float)LETIMER1_CLOCK_FREQ / 1000);
    2230:	4b7c      	ldr	r3, [pc, #496]	; (2424 <init+0x824>)
    2232:	edd3 7a00 	vldr	s15, [r3]
    2236:	eef8 7a67 	vcvt.f32.u32	s15, s15
    223a:	eec7 7a88 	vdiv.f32	s15, s15, s16
    223e:	ee17 0a90 	vmov	r0, s15
    2242:	f7fe f8f1 	bl	428 <__aeabi_f2d>
    2246:	4602      	mov	r2, r0
    2248:	460b      	mov	r3, r1
    224a:	4877      	ldr	r0, [pc, #476]	; (2428 <init+0x828>)
    224c:	4958      	ldr	r1, [pc, #352]	; (23b0 <init+0x7b0>)
    224e:	f011 ffd3 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LFB Clock: %.3f kHz!", (float)LFB_CLOCK_FREQ / 1000);
    2252:	4b76      	ldr	r3, [pc, #472]	; (242c <init+0x82c>)
    2254:	edd3 7a00 	vldr	s15, [r3]
    2258:	eef8 7a67 	vcvt.f32.u32	s15, s15
    225c:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2260:	ee17 0a90 	vmov	r0, s15
    2264:	f7fe f8e0 	bl	428 <__aeabi_f2d>
    2268:	4602      	mov	r2, r0
    226a:	460b      	mov	r3, r1
    226c:	4870      	ldr	r0, [pc, #448]	; (2430 <init+0x830>)
    226e:	4950      	ldr	r1, [pc, #320]	; (23b0 <init+0x7b0>)
    2270:	f011 ffc2 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LEUART0 Clock: %.3f kHz!", (float)LEUART0_CLOCK_FREQ / 1000);
    2274:	4b6f      	ldr	r3, [pc, #444]	; (2434 <init+0x834>)
    2276:	edd3 7a00 	vldr	s15, [r3]
    227a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    227e:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2282:	ee17 0a90 	vmov	r0, s15
    2286:	f7fe f8cf 	bl	428 <__aeabi_f2d>
    228a:	4602      	mov	r2, r0
    228c:	460b      	mov	r3, r1
    228e:	486a      	ldr	r0, [pc, #424]	; (2438 <init+0x838>)
    2290:	4947      	ldr	r1, [pc, #284]	; (23b0 <init+0x7b0>)
    2292:	f011 ffb1 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LEUART1 Clock: %.3f kHz!", (float)LEUART1_CLOCK_FREQ / 1000);
    2296:	4b69      	ldr	r3, [pc, #420]	; (243c <init+0x83c>)
    2298:	edd3 7a00 	vldr	s15, [r3]
    229c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    22a0:	eec7 7a88 	vdiv.f32	s15, s15, s16
    22a4:	ee17 0a90 	vmov	r0, s15
    22a8:	f7fe f8be 	bl	428 <__aeabi_f2d>
    22ac:	4602      	mov	r2, r0
    22ae:	460b      	mov	r3, r1
    22b0:	4863      	ldr	r0, [pc, #396]	; (2440 <init+0x840>)
    22b2:	493f      	ldr	r1, [pc, #252]	; (23b0 <init+0x7b0>)
    22b4:	f011 ffa0 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - SYSTICK Clock: %.3f kHz!", (float)SYSTICK_CLOCK_FREQ / 1000);
    22b8:	4b62      	ldr	r3, [pc, #392]	; (2444 <init+0x844>)
    22ba:	edd3 7a00 	vldr	s15, [r3]
    22be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    22c2:	eec7 7a88 	vdiv.f32	s15, s15, s16
    22c6:	ee17 0a90 	vmov	r0, s15
    22ca:	f7fe f8ad 	bl	428 <__aeabi_f2d>
    22ce:	4602      	mov	r2, r0
    22d0:	460b      	mov	r3, r1
    22d2:	485d      	ldr	r0, [pc, #372]	; (2448 <init+0x848>)
    22d4:	4936      	ldr	r1, [pc, #216]	; (23b0 <init+0x7b0>)
    22d6:	f011 ff8f 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - CSEN Clock: %.3f kHz!", (float)CSEN_CLOCK_FREQ / 1000);
    22da:	4b5c      	ldr	r3, [pc, #368]	; (244c <init+0x84c>)
    22dc:	edd3 7a00 	vldr	s15, [r3]
    22e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    22e4:	eec7 7a88 	vdiv.f32	s15, s15, s16
    22e8:	ee17 0a90 	vmov	r0, s15
    22ec:	f7fe f89c 	bl	428 <__aeabi_f2d>
    22f0:	4602      	mov	r2, r0
    22f2:	460b      	mov	r3, r1
    22f4:	4856      	ldr	r0, [pc, #344]	; (2450 <init+0x850>)
    22f6:	492e      	ldr	r1, [pc, #184]	; (23b0 <init+0x7b0>)
    22f8:	f011 ff7e 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LFC Clock: %.3f kHz!", (float)LFC_CLOCK_FREQ / 1000);
    22fc:	4b55      	ldr	r3, [pc, #340]	; (2454 <init+0x854>)
    22fe:	edd3 7a00 	vldr	s15, [r3]
    2302:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2306:	eec7 7a88 	vdiv.f32	s15, s15, s16
    230a:	ee17 0a90 	vmov	r0, s15
    230e:	f7fe f88b 	bl	428 <__aeabi_f2d>
    2312:	4602      	mov	r2, r0
    2314:	460b      	mov	r3, r1
    2316:	4850      	ldr	r0, [pc, #320]	; (2458 <init+0x858>)
    2318:	4925      	ldr	r1, [pc, #148]	; (23b0 <init+0x7b0>)
    231a:	f011 ff6d 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - LFE Clock: %.3f kHz!", (float)LFE_CLOCK_FREQ / 1000);
    231e:	4b4f      	ldr	r3, [pc, #316]	; (245c <init+0x85c>)
    2320:	edd3 7a00 	vldr	s15, [r3]
    2324:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2328:	eec7 7a88 	vdiv.f32	s15, s15, s16
    232c:	ee17 0a90 	vmov	r0, s15
    2330:	f7fe f87a 	bl	428 <__aeabi_f2d>
    2334:	4602      	mov	r2, r0
    2336:	460b      	mov	r3, r1
    2338:	4849      	ldr	r0, [pc, #292]	; (2460 <init+0x860>)
    233a:	491d      	ldr	r1, [pc, #116]	; (23b0 <init+0x7b0>)
    233c:	f011 ff5c 	bl	141f8 <printf>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);
    2340:	4b48      	ldr	r3, [pc, #288]	; (2464 <init+0x864>)
    2342:	edd3 7a00 	vldr	s15, [r3]
    2346:	eef8 7a67 	vcvt.f32.u32	s15, s15
    234a:	eec7 7a88 	vdiv.f32	s15, s15, s16
    234e:	ee17 0a90 	vmov	r0, s15
    2352:	f7fe f869 	bl	428 <__aeabi_f2d>
    2356:	4602      	mov	r2, r0
    2358:	460b      	mov	r3, r1
    235a:	4843      	ldr	r0, [pc, #268]	; (2468 <init+0x868>)
    235c:	4914      	ldr	r1, [pc, #80]	; (23b0 <init+0x7b0>)
    235e:	f011 ff4b 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    2362:	eddd 7a05 	vldr	s15, [sp, #20]
    2366:	ee67 7a88 	vmul.f32	s15, s15, s16
    236a:	ee17 0a90 	vmov	r0, s15
    236e:	f7fe f85b 	bl	428 <__aeabi_f2d>
    2372:	4602      	mov	r2, r0
    2374:	460b      	mov	r3, r1
    2376:	483d      	ldr	r0, [pc, #244]	; (246c <init+0x86c>)
    2378:	490d      	ldr	r1, [pc, #52]	; (23b0 <init+0x7b0>)
    237a:	f011 ff3d 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    237e:	eddd 7a04 	vldr	s15, [sp, #16]
    2382:	ee67 7a88 	vmul.f32	s15, s15, s16
    2386:	ee17 0a90 	vmov	r0, s15
    238a:	f7fe f84d 	bl	428 <__aeabi_f2d>
    238e:	4602      	mov	r2, r0
    2390:	460b      	mov	r3, r1
    2392:	4837      	ldr	r0, [pc, #220]	; (2470 <init+0x870>)
    2394:	4906      	ldr	r1, [pc, #24]	; (23b0 <init+0x7b0>)
    2396:	f011 ff2f 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    239a:	f010 ff35 	bl	13208 <adc_get_avdd>
    239e:	ee10 0a10 	vmov	r0, s0
    23a2:	f7fe f841 	bl	428 <__aeabi_f2d>
    23a6:	4602      	mov	r2, r0
    23a8:	460b      	mov	r3, r1
    23aa:	e063      	b.n	2474 <init+0x874>
    23ac:	00014f80 	.word	0x00014f80
    23b0:	00015b84 	.word	0x00015b84
    23b4:	20006300 	.word	0x20006300
    23b8:	00014fa7 	.word	0x00014fa7
    23bc:	200062cc 	.word	0x200062cc
    23c0:	00014fce 	.word	0x00014fce
    23c4:	200062fc 	.word	0x200062fc
    23c8:	00014ff3 	.word	0x00014ff3
    23cc:	20006318 	.word	0x20006318
    23d0:	00015018 	.word	0x00015018
    23d4:	200062c0 	.word	0x200062c0
    23d8:	0001503d 	.word	0x0001503d
    23dc:	200062d8 	.word	0x200062d8
    23e0:	00015061 	.word	0x00015061
    23e4:	200062e4 	.word	0x200062e4
    23e8:	00015086 	.word	0x00015086
    23ec:	20006330 	.word	0x20006330
    23f0:	000150ab 	.word	0x000150ab
    23f4:	20006310 	.word	0x20006310
    23f8:	000150cf 	.word	0x000150cf
    23fc:	200062c8 	.word	0x200062c8
    2400:	000150f3 	.word	0x000150f3
    2404:	20006320 	.word	0x20006320
    2408:	00015117 	.word	0x00015117
    240c:	20006324 	.word	0x20006324
    2410:	0001513f 	.word	0x0001513f
    2414:	20006328 	.word	0x20006328
    2418:	00015163 	.word	0x00015163
    241c:	200062bc 	.word	0x200062bc
    2420:	00015187 	.word	0x00015187
    2424:	200062d4 	.word	0x200062d4
    2428:	000151b0 	.word	0x000151b0
    242c:	200062dc 	.word	0x200062dc
    2430:	000151d9 	.word	0x000151d9
    2434:	2000632c 	.word	0x2000632c
    2438:	000151fd 	.word	0x000151fd
    243c:	200062ec 	.word	0x200062ec
    2440:	00015225 	.word	0x00015225
    2444:	200062d0 	.word	0x200062d0
    2448:	0001524d 	.word	0x0001524d
    244c:	200062c4 	.word	0x200062c4
    2450:	00015275 	.word	0x00015275
    2454:	2000630c 	.word	0x2000630c
    2458:	0001529a 	.word	0x0001529a
    245c:	200062f0 	.word	0x200062f0
    2460:	000152be 	.word	0x000152be
    2464:	200062e8 	.word	0x200062e8
    2468:	000152e2 	.word	0x000152e2
    246c:	00015307 	.word	0x00015307
    2470:	00015334 	.word	0x00015334
    2474:	4883      	ldr	r0, [pc, #524]	; (2684 <init+0xa84>)
    2476:	4984      	ldr	r1, [pc, #528]	; (2688 <init+0xa88>)
    2478:	f011 febe 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    247c:	4b83      	ldr	r3, [pc, #524]	; (268c <init+0xa8c>)
    247e:	4982      	ldr	r1, [pc, #520]	; (2688 <init+0xa88>)
    2480:	781a      	ldrb	r2, [r3, #0]
    2482:	4883      	ldr	r0, [pc, #524]	; (2690 <init+0xa90>)
    2484:	2a00      	cmp	r2, #0
    2486:	bf14      	ite	ne
    2488:	462a      	movne	r2, r5
    248a:	4622      	moveq	r2, r4
    248c:	f011 feb4 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Fall Threshold: %.2f mV!", fDVDDLowThresh * 1000);
    2490:	eddd 7a06 	vldr	s15, [sp, #24]
    2494:	ee67 7a88 	vmul.f32	s15, s15, s16
    2498:	ee17 0a90 	vmov	r0, s15
    249c:	f7fd ffc4 	bl	428 <__aeabi_f2d>
    24a0:	4602      	mov	r2, r0
    24a2:	460b      	mov	r3, r1
    24a4:	487b      	ldr	r0, [pc, #492]	; (2694 <init+0xa94>)
    24a6:	4978      	ldr	r1, [pc, #480]	; (2688 <init+0xa88>)
    24a8:	f011 fea6 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Rise Threshold: %.2f mV!", fDVDDHighThresh * 1000);
    24ac:	ee69 7a88 	vmul.f32	s15, s19, s16
    24b0:	ee17 0a90 	vmov	r0, s15
    24b4:	f7fd ffb8 	bl	428 <__aeabi_f2d>
    24b8:	4602      	mov	r2, r0
    24ba:	460b      	mov	r3, r1
    24bc:	4876      	ldr	r0, [pc, #472]	; (2698 <init+0xa98>)
    24be:	4972      	ldr	r1, [pc, #456]	; (2688 <init+0xa88>)
    24c0:	f011 fe9a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Voltage: %.2f mV", adc_get_dvdd());
    24c4:	f010 fee2 	bl	1328c <adc_get_dvdd>
    24c8:	ee10 0a10 	vmov	r0, s0
    24cc:	f7fd ffac 	bl	428 <__aeabi_f2d>
    24d0:	4602      	mov	r2, r0
    24d2:	460b      	mov	r3, r1
    24d4:	4871      	ldr	r0, [pc, #452]	; (269c <init+0xa9c>)
    24d6:	496c      	ldr	r1, [pc, #432]	; (2688 <init+0xa88>)
    24d8:	f011 fe8e 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Status: %s", g_ubDVDDLow ? "LOW" : "OK");
    24dc:	4b70      	ldr	r3, [pc, #448]	; (26a0 <init+0xaa0>)
    24de:	496a      	ldr	r1, [pc, #424]	; (2688 <init+0xa88>)
    24e0:	781a      	ldrb	r2, [r3, #0]
    24e2:	4870      	ldr	r0, [pc, #448]	; (26a4 <init+0xaa4>)
    24e4:	2a00      	cmp	r2, #0
    24e6:	bf14      	ite	ne
    24e8:	462a      	movne	r2, r5
    24ea:	4622      	moveq	r2, r4
    24ec:	f011 fe84 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Fall Threshold: %.2f mV!", fIOVDDLowThresh * 1000);
    24f0:	eddd 7a07 	vldr	s15, [sp, #28]
    24f4:	ee67 7a88 	vmul.f32	s15, s15, s16
    24f8:	ee17 0a90 	vmov	r0, s15
    24fc:	f7fd ff94 	bl	428 <__aeabi_f2d>
    2500:	4602      	mov	r2, r0
    2502:	460b      	mov	r3, r1
    2504:	4868      	ldr	r0, [pc, #416]	; (26a8 <init+0xaa8>)
    2506:	4960      	ldr	r1, [pc, #384]	; (2688 <init+0xa88>)
    2508:	f011 fe76 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Rise Threshold: %.2f mV!", fIOVDDHighThresh * 1000);
    250c:	ee69 7a08 	vmul.f32	s15, s18, s16
    2510:	ee17 0a90 	vmov	r0, s15
    2514:	f7fd ff88 	bl	428 <__aeabi_f2d>
    2518:	4602      	mov	r2, r0
    251a:	460b      	mov	r3, r1
    251c:	4863      	ldr	r0, [pc, #396]	; (26ac <init+0xaac>)
    251e:	495a      	ldr	r1, [pc, #360]	; (2688 <init+0xa88>)
    2520:	f011 fe6a 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Voltage: %.2f mV", adc_get_iovdd());
    2524:	f010 fef4 	bl	13310 <adc_get_iovdd>
    2528:	ee10 0a10 	vmov	r0, s0
    252c:	f7fd ff7c 	bl	428 <__aeabi_f2d>
    2530:	4602      	mov	r2, r0
    2532:	460b      	mov	r3, r1
    2534:	485e      	ldr	r0, [pc, #376]	; (26b0 <init+0xab0>)
    2536:	4954      	ldr	r1, [pc, #336]	; (2688 <init+0xa88>)
    2538:	f011 fe5e 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Status: %s", g_ubIOVDDLow ? "LOW" : "OK");
    253c:	4b5d      	ldr	r3, [pc, #372]	; (26b4 <init+0xab4>)
    253e:	4952      	ldr	r1, [pc, #328]	; (2688 <init+0xa88>)
    2540:	781a      	ldrb	r2, [r3, #0]
    2542:	485d      	ldr	r0, [pc, #372]	; (26b8 <init+0xab8>)
    2544:	2a00      	cmp	r2, #0
    2546:	bf14      	ite	ne
    2548:	462a      	movne	r2, r5
    254a:	4622      	moveq	r2, r4
    254c:	f011 fe54 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - Core Voltage: %.2f mV", adc_get_corevdd());
    2550:	f010 ff20 	bl	13394 <adc_get_corevdd>
    2554:	ee10 0a10 	vmov	r0, s0
    2558:	f7fd ff66 	bl	428 <__aeabi_f2d>
    255c:	4602      	mov	r2, r0
    255e:	460b      	mov	r3, r1
    2560:	4856      	ldr	r0, [pc, #344]	; (26bc <init+0xabc>)
    2562:	4949      	ldr	r1, [pc, #292]	; (2688 <init+0xa88>)
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    2564:	4d48      	ldr	r5, [pc, #288]	; (2688 <init+0xa88>)
    DBGPRINTLN_CTX("EMU - Core Voltage: %.2f mV", adc_get_corevdd());
    2566:	f011 fe47 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - R5V VREGI Voltage: %.2f mV", adc_get_r5v_vregi());
    256a:	f010 ff55 	bl	13418 <adc_get_r5v_vregi>
    256e:	ee10 0a10 	vmov	r0, s0
    2572:	f7fd ff59 	bl	428 <__aeabi_f2d>
    2576:	4602      	mov	r2, r0
    2578:	460b      	mov	r3, r1
    257a:	4851      	ldr	r0, [pc, #324]	; (26c0 <init+0xac0>)
    257c:	4942      	ldr	r1, [pc, #264]	; (2688 <init+0xa88>)
    257e:	f011 fe3b 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - R5V VREGI Current: %.2f mA", adc_get_r5v_vregi_current());
    2582:	f010 ff99 	bl	134b8 <adc_get_r5v_vregi_current>
    2586:	ee10 0a10 	vmov	r0, s0
    258a:	f7fd ff4d 	bl	428 <__aeabi_f2d>
    258e:	4602      	mov	r2, r0
    2590:	460b      	mov	r3, r1
    2592:	484c      	ldr	r0, [pc, #304]	; (26c4 <init+0xac4>)
    2594:	493c      	ldr	r1, [pc, #240]	; (2688 <init+0xa88>)
    2596:	f011 fe2f 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - R5V VBUS Voltage: %.2f mV", adc_get_r5v_vbus());
    259a:	f010 ffdf 	bl	1355c <adc_get_r5v_vbus>
    259e:	ee10 0a10 	vmov	r0, s0
    25a2:	f7fd ff41 	bl	428 <__aeabi_f2d>
    25a6:	4602      	mov	r2, r0
    25a8:	460b      	mov	r3, r1
    25aa:	4847      	ldr	r0, [pc, #284]	; (26c8 <init+0xac8>)
    25ac:	4936      	ldr	r1, [pc, #216]	; (2688 <init+0xa88>)
    25ae:	f011 fe23 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - R5V VBUS Current: %.2f mA", adc_get_r5v_vbus_current());
    25b2:	f011 f823 	bl	135fc <adc_get_r5v_vbus_current>
    25b6:	ee10 0a10 	vmov	r0, s0
    25ba:	f7fd ff35 	bl	428 <__aeabi_f2d>
    25be:	4602      	mov	r2, r0
    25c0:	460b      	mov	r3, r1
    25c2:	4842      	ldr	r0, [pc, #264]	; (26cc <init+0xacc>)
    25c4:	4930      	ldr	r1, [pc, #192]	; (2688 <init+0xa88>)
    25c6:	f011 fe17 	bl	141f8 <printf>
    DBGPRINTLN_CTX("EMU - R5V VREGO Voltage: %.2f mV", adc_get_r5v_vrego());
    25ca:	f011 f869 	bl	136a0 <adc_get_r5v_vrego>
    25ce:	ee10 0a10 	vmov	r0, s0
    25d2:	f7fd ff29 	bl	428 <__aeabi_f2d>
    25d6:	4602      	mov	r2, r0
    25d8:	460b      	mov	r3, r1
    25da:	483d      	ldr	r0, [pc, #244]	; (26d0 <init+0xad0>)
    25dc:	492a      	ldr	r1, [pc, #168]	; (2688 <init+0xa88>)
    25de:	f011 fe0b 	bl	141f8 <printf>
    play_sound(1500, 500);
    25e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    25e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
    25ea:	f00f fee7 	bl	123bc <play_sound>
    delay_ms(100);
    25ee:	2064      	movs	r0, #100	; 0x64
    25f0:	2100      	movs	r1, #0
    25f2:	f00f ffa9 	bl	12548 <delay_ms>
    DBGPRINTLN_CTX("Scanning I2C bus 0...");
    25f6:	4924      	ldr	r1, [pc, #144]	; (2688 <init+0xa88>)
    25f8:	4836      	ldr	r0, [pc, #216]	; (26d4 <init+0xad4>)
    25fa:	f011 fdfd 	bl	141f8 <printf>
    25fe:	2408      	movs	r4, #8
    2600:	0060      	lsls	r0, r4, #1
    2602:	2200      	movs	r2, #0
    2604:	2301      	movs	r3, #1
    2606:	4611      	mov	r1, r2
    2608:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    260c:	f00f fff0 	bl	125f0 <i2c0_transmit>
        if(i2c0_write(a, 0, 0, I2C_STOP))
    2610:	b120      	cbz	r0, 261c <init+0xa1c>
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    2612:	4622      	mov	r2, r4
    2614:	4629      	mov	r1, r5
    2616:	4630      	mov	r0, r6
    2618:	f011 fdee 	bl	141f8 <printf>
    for(uint8_t a = 0x08; a < 0x78; a++)
    261c:	3401      	adds	r4, #1
    261e:	2c78      	cmp	r4, #120	; 0x78
    2620:	d1ee      	bne.n	2600 <init+0xa00>
    }

    DBGPRINTLN_CTX("Scanning I2C bus 1...");
    2622:	4919      	ldr	r1, [pc, #100]	; (2688 <init+0xa88>)
    2624:	482c      	ldr	r0, [pc, #176]	; (26d8 <init+0xad8>)

    for(uint8_t a = 0x08; a < 0x78; a++)
    {
        if(i2c1_write(a, 0, 0, I2C_STOP))
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    2626:	4d18      	ldr	r5, [pc, #96]	; (2688 <init+0xa88>)
    2628:	4e2c      	ldr	r6, [pc, #176]	; (26dc <init+0xadc>)
    DBGPRINTLN_CTX("Scanning I2C bus 1...");
    262a:	f011 fde5 	bl	141f8 <printf>
    262e:	2408      	movs	r4, #8

void i2c1_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation);
uint8_t i2c1_transmit(uint8_t ubAddress, uint8_t *pubSrc, uint32_t ulCount, uint8_t ubStop);
static inline uint8_t i2c1_write(uint8_t ubAddress, uint8_t *pubSrc, uint32_t ulCount, uint8_t ubStop)
{
    return i2c1_transmit((ubAddress << 1) & ~0x01, pubSrc, ulCount, ubStop);
    2630:	0060      	lsls	r0, r4, #1
    2632:	2200      	movs	r2, #0
    2634:	2301      	movs	r3, #1
    2636:	4611      	mov	r1, r2
    2638:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    263c:	f010 f894 	bl	12768 <i2c1_transmit>
        if(i2c1_write(a, 0, 0, I2C_STOP))
    2640:	b120      	cbz	r0, 264c <init+0xa4c>
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    2642:	4622      	mov	r2, r4
    2644:	4629      	mov	r1, r5
    2646:	4630      	mov	r0, r6
    2648:	f011 fdd6 	bl	141f8 <printf>
    for(uint8_t a = 0x08; a < 0x78; a++)
    264c:	3401      	adds	r4, #1
    264e:	2c78      	cmp	r4, #120	; 0x78
    2650:	d1ee      	bne.n	2630 <init+0xa30>
    }

    if(mcp9600_init(0))
    2652:	2000      	movs	r0, #0
    2654:	f7ff fa49 	bl	1aea <mcp9600_init>
        DBGPRINTLN_CTX("MCP9600 #0 init OK!");
    2658:	490b      	ldr	r1, [pc, #44]	; (2688 <init+0xa88>)
    if(mcp9600_init(0))
    265a:	b178      	cbz	r0, 267c <init+0xa7c>
        DBGPRINTLN_CTX("MCP9600 #0 init OK!");
    265c:	4820      	ldr	r0, [pc, #128]	; (26e0 <init+0xae0>)
    else
        DBGPRINTLN_CTX("MCP9600 #0 init NOK!");
    265e:	f011 fdcb 	bl	141f8 <printf>

    if(mcp9600_init(7))
    2662:	2007      	movs	r0, #7
    2664:	f7ff fa41 	bl	1aea <mcp9600_init>
        DBGPRINTLN_CTX("MCP9600 #7 init OK!");
    2668:	4907      	ldr	r1, [pc, #28]	; (2688 <init+0xa88>)
    if(mcp9600_init(7))
    266a:	b148      	cbz	r0, 2680 <init+0xa80>
        DBGPRINTLN_CTX("MCP9600 #7 init OK!");
    266c:	481d      	ldr	r0, [pc, #116]	; (26e4 <init+0xae4>)
    else
        DBGPRINTLN_CTX("MCP9600 #7 init NOK!");
    266e:	f011 fdc3 	bl	141f8 <printf>

    return 0;
}
    2672:	2000      	movs	r0, #0
    2674:	b010      	add	sp, #64	; 0x40
    2676:	ecbd 8b04 	vpop	{d8-d9}
    267a:	bd70      	pop	{r4, r5, r6, pc}
        DBGPRINTLN_CTX("MCP9600 #0 init NOK!");
    267c:	481a      	ldr	r0, [pc, #104]	; (26e8 <init+0xae8>)
    267e:	e7ee      	b.n	265e <init+0xa5e>
        DBGPRINTLN_CTX("MCP9600 #7 init NOK!");
    2680:	481a      	ldr	r0, [pc, #104]	; (26ec <init+0xaec>)
    2682:	e7f4      	b.n	266e <init+0xa6e>
    2684:	00015361 	.word	0x00015361
    2688:	00015b84 	.word	0x00015b84
    268c:	20005e90 	.word	0x20005e90
    2690:	00015386 	.word	0x00015386
    2694:	000153a5 	.word	0x000153a5
    2698:	000153d2 	.word	0x000153d2
    269c:	000153ff 	.word	0x000153ff
    26a0:	20005e92 	.word	0x20005e92
    26a4:	00015424 	.word	0x00015424
    26a8:	00015443 	.word	0x00015443
    26ac:	00015471 	.word	0x00015471
    26b0:	0001549f 	.word	0x0001549f
    26b4:	20005e93 	.word	0x20005e93
    26b8:	000154c5 	.word	0x000154c5
    26bc:	000154e5 	.word	0x000154e5
    26c0:	0001550a 	.word	0x0001550a
    26c4:	00015534 	.word	0x00015534
    26c8:	0001555e 	.word	0x0001555e
    26cc:	00015587 	.word	0x00015587
    26d0:	000155b0 	.word	0x000155b0
    26d4:	000155da 	.word	0x000155da
    26d8:	0001561a 	.word	0x0001561a
    26dc:	000155f9 	.word	0x000155f9
    26e0:	00015639 	.word	0x00015639
    26e4:	00015674 	.word	0x00015674
    26e8:	00015656 	.word	0x00015656
    26ec:	00015691 	.word	0x00015691

000026f0 <main>:
int main()
{
    26f0:	b500      	push	{lr}
    play_sound(2000, 100);
    26f2:	2164      	movs	r1, #100	; 0x64
{
    26f4:	b08b      	sub	sp, #44	; 0x2c
    play_sound(2000, 100);
    26f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    26fa:	f00f fe5f 	bl	123bc <play_sound>
    delay_ms(50);
    26fe:	2032      	movs	r0, #50	; 0x32
    2700:	2100      	movs	r1, #0
    2702:	f00f ff21 	bl	12548 <delay_ms>
    play_sound(2000, 100);
    2706:	2164      	movs	r1, #100	; 0x64
    2708:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    270c:	f00f fe56 	bl	123bc <play_sound>

    // QSPI
    DBGPRINTLN_CTX("Flash Part ID: %06X", qspi_flash_read_jedec_id());
    2710:	f00f fce4 	bl	120dc <qspi_flash_read_jedec_id>
    2714:	4942      	ldr	r1, [pc, #264]	; (2820 <main+0x130>)
    2716:	4602      	mov	r2, r0
    2718:	4842      	ldr	r0, [pc, #264]	; (2824 <main+0x134>)
    271a:	f011 fd6d 	bl	141f8 <printf>

    uint8_t ubFlashUID[8];

    qspi_flash_read_security(0x0000, ubFlashUID, 8);
    271e:	a908      	add	r1, sp, #32
    2720:	2208      	movs	r2, #8
    2722:	2000      	movs	r0, #0
    2724:	f00f fd00 	bl	12128 <qspi_flash_read_security>

    DBGPRINTLN_CTX("Flash ID: %02X%02X%02X%02X%02X%02X%02X%02X", ubFlashUID[0], ubFlashUID[1], ubFlashUID[2], ubFlashUID[3], ubFlashUID[4], ubFlashUID[5], ubFlashUID[6], ubFlashUID[7]);
    2728:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    272c:	9305      	str	r3, [sp, #20]
    272e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    2732:	9304      	str	r3, [sp, #16]
    2734:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    2738:	9303      	str	r3, [sp, #12]
    273a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    273e:	9302      	str	r3, [sp, #8]
    2740:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    2744:	9301      	str	r3, [sp, #4]
    2746:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    274a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    274e:	4934      	ldr	r1, [pc, #208]	; (2820 <main+0x130>)
    2750:	9300      	str	r3, [sp, #0]
    2752:	4835      	ldr	r0, [pc, #212]	; (2828 <main+0x138>)
    2754:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2758:	f011 fd4e 	bl	141f8 <printf>


    // LEDs init
    sk9822_init();
    275c:	f7fe faf4 	bl	d48 <sk9822_init>
    DBGPRINTLN_CTX("SK9822 LEDs Init!");
    2760:	492f      	ldr	r1, [pc, #188]	; (2820 <main+0x130>)
    2762:	4832      	ldr	r0, [pc, #200]	; (282c <main+0x13c>)
    2764:	f011 fd48 	bl	141f8 <printf>

    // tft + LvGL init
    lv_init();
    2768:	f008 f82a 	bl	a7c0 <lv_init>
    lv_disp_ili9488_init();
    276c:	f000 f998 	bl	2aa0 <lv_disp_ili9488_init>
    DBGPRINTLN_CTX("ILI9488 init!");
    2770:	492b      	ldr	r1, [pc, #172]	; (2820 <main+0x130>)
    2772:	482f      	ldr	r0, [pc, #188]	; (2830 <main+0x140>)
    2774:	f011 fd40 	bl	141f8 <printf>
    lv_indev_ft6x36_init();
    2778:	f000 f8b6 	bl	28e8 <lv_indev_ft6x36_init>
    DBGPRINTLN_CTX("FT6236 init!");
    277c:	4928      	ldr	r1, [pc, #160]	; (2820 <main+0x130>)
    277e:	482d      	ldr	r0, [pc, #180]	; (2834 <main+0x144>)
    2780:	f011 fd3a 	bl	141f8 <printf>

    lv_disp_ili9488_display_on();
    2784:	f000 f976 	bl	2a74 <lv_disp_ili9488_display_on>
    lv_disp_ili9488_bl_init(20000);
    2788:	f644 6020 	movw	r0, #20000	; 0x4e20
    278c:	f000 fa50 	bl	2c30 <lv_disp_ili9488_bl_init>
    lv_disp_ili9488_bl_set(0.8);
    2790:	ed9f 0a29 	vldr	s0, [pc, #164]	; 2838 <main+0x148>
    2794:	f000 fa74 	bl	2c80 <lv_disp_ili9488_bl_set>

    // MCP9600 ID
    DBGPRINTLN_CTX("MCP9600 #0 ID 0x%02X Revision 0x%02X", mcp9600_get_id(0), mcp9600_get_revision(0));
    2798:	2000      	movs	r0, #0
    279a:	f7ff f9d7 	bl	1b4c <mcp9600_get_id>
    279e:	9007      	str	r0, [sp, #28]
    27a0:	2000      	movs	r0, #0
    27a2:	f7ff f9da 	bl	1b5a <mcp9600_get_revision>
    27a6:	9a07      	ldr	r2, [sp, #28]
    27a8:	491d      	ldr	r1, [pc, #116]	; (2820 <main+0x130>)
    27aa:	4603      	mov	r3, r0
    27ac:	4823      	ldr	r0, [pc, #140]	; (283c <main+0x14c>)
    27ae:	f011 fd23 	bl	141f8 <printf>
    DBGPRINTLN_CTX("MCP9600 #7 ID 0x%02X Revision 0x%02X", mcp9600_get_id(7), mcp9600_get_revision(7));
    27b2:	2007      	movs	r0, #7
    27b4:	f7ff f9ca 	bl	1b4c <mcp9600_get_id>
    27b8:	9007      	str	r0, [sp, #28]
    27ba:	2007      	movs	r0, #7
    27bc:	f7ff f9cd 	bl	1b5a <mcp9600_get_revision>
    27c0:	9a07      	ldr	r2, [sp, #28]
    27c2:	4917      	ldr	r1, [pc, #92]	; (2820 <main+0x130>)
    27c4:	4603      	mov	r3, r0
    27c6:	481e      	ldr	r0, [pc, #120]	; (2840 <main+0x150>)
    27c8:	f011 fd16 	bl	141f8 <printf>

    // MCP9600 init
    mcp9600_set_sensor_config(0, MCP9600_TYPE_K | MCP9600_FILT_COEF_0);
    27cc:	2100      	movs	r1, #0
    27ce:	4608      	mov	r0, r1
    27d0:	f7ff f9d0 	bl	1b74 <mcp9600_set_sensor_config>
    mcp9600_set_config(0, MCP9600_BURST_TS_1 | MCP9600_MODE_NORMAL);
    27d4:	2100      	movs	r1, #0
    27d6:	4608      	mov	r0, r1
    27d8:	f7ff f9d0 	bl	1b7c <mcp9600_set_config>

    mcp9600_set_sensor_config(7, MCP9600_TYPE_K | MCP9600_FILT_COEF_0);
    27dc:	2100      	movs	r1, #0
    27de:	2007      	movs	r0, #7
    27e0:	f7ff f9c8 	bl	1b74 <mcp9600_set_sensor_config>
    mcp9600_set_config(7, MCP9600_BURST_TS_1 | MCP9600_MODE_NORMAL);
    27e4:	2100      	movs	r1, #0
    27e6:	2007      	movs	r0, #7
    27e8:	f7ff f9c8 	bl	1b7c <mcp9600_set_config>

    oven_init();
    27ec:	f7fe fde0 	bl	13b0 <oven_init>

    ui_init();
    27f0:	f7fe fff0 	bl	17d4 <ui_init>
    void *pCurrentHeap = malloc(1);
    27f4:	2001      	movs	r0, #1
    27f6:	f011 fd4d 	bl	14294 <malloc>
    27fa:	f3ef 8308 	mrs	r3, MSP
    uint32_t ulFreeRAM = (uint32_t)__get_MSP() - (uint32_t)pCurrentHeap;
    27fe:	1a1a      	subs	r2, r3, r0
    2800:	9207      	str	r2, [sp, #28]
    free(pCurrentHeap);
    2802:	f011 fd4f 	bl	142a4 <free>

    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    2806:	9a07      	ldr	r2, [sp, #28]
    2808:	4905      	ldr	r1, [pc, #20]	; (2820 <main+0x130>)
    280a:	480e      	ldr	r0, [pc, #56]	; (2844 <main+0x154>)
    280c:	f011 fcf4 	bl	141f8 <printf>

    for(;;)
    {
        lv_task_handler();
    2810:	f001 f818 	bl	3844 <lv_task_handler>

        ui_task();
    2814:	f7ff f8d2 	bl	19bc <ui_task>

        oven_task();
    2818:	f7fe fe60 	bl	14dc <oven_task>
    for(;;)
    281c:	e7f8      	b.n	2810 <main+0x120>
    281e:	bf00      	nop
    2820:	00015b89 	.word	0x00015b89
    2824:	000156af 	.word	0x000156af
    2828:	000156cc 	.word	0x000156cc
    282c:	00015700 	.word	0x00015700
    2830:	0001571b 	.word	0x0001571b
    2834:	00015732 	.word	0x00015732
    2838:	3f4ccccd 	.word	0x3f4ccccd
    283c:	00015748 	.word	0x00015748
    2840:	00015776 	.word	0x00015776
    2844:	00014d17 	.word	0x00014d17

00002848 <lv_indev_ft6x36_lv_drv_read>:
}

/* Will be called by the library to read the touchpad */
static bool lv_indev_ft6x36_lv_drv_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)
{
    if(lv_indev_ft6x36_isPressed) // touchpad_is_pressed()
    2848:	4b06      	ldr	r3, [pc, #24]	; (2864 <lv_indev_ft6x36_lv_drv_read+0x1c>)
    284a:	781b      	ldrb	r3, [r3, #0]
    284c:	3b00      	subs	r3, #0
    284e:	bf18      	it	ne
    2850:	2301      	movne	r3, #1
    2852:	738b      	strb	r3, [r1, #14]
        data->state = LV_INDEV_STATE_PR;
    else
        data->state = LV_INDEV_STATE_REL;

    /*Set the pressed coordinates*/
    data->point.x = lv_indev_ft6x36_touchXLoc;
    2854:	4b04      	ldr	r3, [pc, #16]	; (2868 <lv_indev_ft6x36_lv_drv_read+0x20>)
    2856:	881b      	ldrh	r3, [r3, #0]
    2858:	800b      	strh	r3, [r1, #0]
    data->point.y = lv_indev_ft6x36_touchYLoc;
    285a:	4b04      	ldr	r3, [pc, #16]	; (286c <lv_indev_ft6x36_lv_drv_read+0x24>)
    285c:	881b      	ldrh	r3, [r3, #0]
    285e:	804b      	strh	r3, [r1, #2]

    /*Return `false` because we are not buffering and no more data to read*/
    return false;
}
    2860:	2000      	movs	r0, #0
    2862:	4770      	bx	lr
    2864:	20000160 	.word	0x20000160
    2868:	20000162 	.word	0x20000162
    286c:	20000164 	.word	0x20000164

00002870 <lv_indev_ft6x36_isr>:
{
    2870:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2872:	f3ef 8410 	mrs	r4, PRIMASK
    2876:	b672      	cpsid	i
        i2c1_write_byte(FT6X06_I2C_ADDR, FT6X06_REG_P1_XH, I2C_RESTART);
    2878:	2303      	movs	r3, #3
    287a:	f88d 3004 	strb.w	r3, [sp, #4]
{
    return i2c1_transmit((ubAddress << 1) | 0x01, pubDst, ulCount, ubStop);
}
static inline uint8_t i2c1_write_byte(uint8_t ubAddress, uint8_t ubData, uint8_t ubStop)
{
    return i2c1_transmit((ubAddress << 1) & ~0x01, &ubData, 1, ubStop);
    287e:	2201      	movs	r2, #1
    2880:	2300      	movs	r3, #0
    2882:	a901      	add	r1, sp, #4
    2884:	2070      	movs	r0, #112	; 0x70
    2886:	f00f ff6f 	bl	12768 <i2c1_transmit>
    return i2c1_transmit((ubAddress << 1) | 0x01, pubDst, ulCount, ubStop);
    288a:	2204      	movs	r2, #4
    288c:	2301      	movs	r3, #1
    288e:	eb0d 0102 	add.w	r1, sp, r2
    2892:	2071      	movs	r0, #113	; 0x71
    2894:	f00f ff68 	bl	12768 <i2c1_transmit>
    if(!*__s)
    2898:	b904      	cbnz	r4, 289c <lv_indev_ft6x36_isr+0x2c>
        __asm__ volatile ("cpsie i" ::: "memory");
    289a:	b662      	cpsie	i
    uint8_t ubEvent = pubBuf[0] & 0xC0;
    289c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    uint16_t touchYLoc = ((uint16_t)(pubBuf[2] & 0x07) << 8) | (uint16_t)pubBuf[3];
    28a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    uint16_t touchXLoc = ((uint16_t)(pubBuf[0] & 0x07) << 8) | (uint16_t)pubBuf[1];
    28a4:	0203      	lsls	r3, r0, #8
    28a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
    28aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    28ae:	4313      	orrs	r3, r2
    uint16_t touchYLoc = ((uint16_t)(pubBuf[2] & 0x07) << 8) | (uint16_t)pubBuf[3];
    28b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    28b4:	0212      	lsls	r2, r2, #8
    28b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    28ba:	430a      	orrs	r2, r1
    lv_indev_ft6x36_touchXLoc = touchYLoc;
    28bc:	4907      	ldr	r1, [pc, #28]	; (28dc <lv_indev_ft6x36_isr+0x6c>)
    28be:	800a      	strh	r2, [r1, #0]
    lv_indev_ft6x36_touchYLoc = ILI9488_TFTWIDTH - touchXLoc;
    28c0:	4a07      	ldr	r2, [pc, #28]	; (28e0 <lv_indev_ft6x36_isr+0x70>)
    28c2:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
    28c6:	8013      	strh	r3, [r2, #0]
    switch(ubEvent)
    28c8:	f010 0f40 	tst.w	r0, #64	; 0x40
    28cc:	4b05      	ldr	r3, [pc, #20]	; (28e4 <lv_indev_ft6x36_isr+0x74>)
            lv_indev_ft6x36_isPressed = 1;
    28ce:	bf0c      	ite	eq
    28d0:	2201      	moveq	r2, #1
            lv_indev_ft6x36_isPressed = 0;
    28d2:	2200      	movne	r2, #0
    28d4:	701a      	strb	r2, [r3, #0]
}
    28d6:	b002      	add	sp, #8
    28d8:	bd10      	pop	{r4, pc}
    28da:	bf00      	nop
    28dc:	20000162 	.word	0x20000162
    28e0:	20000164 	.word	0x20000164
    28e4:	20000160 	.word	0x20000160

000028e8 <lv_indev_ft6x36_init>:

uint8_t lv_indev_ft6x36_init()
{
    28e8:	b510      	push	{r4, lr}
    FT6X36_RESET();
    28ea:	4b1f      	ldr	r3, [pc, #124]	; (2968 <lv_indev_ft6x36_init+0x80>)
    28ec:	2440      	movs	r4, #64	; 0x40
{
    28ee:	b088      	sub	sp, #32
    FT6X36_RESET();
    28f0:	601c      	str	r4, [r3, #0]
    delay_ms(10);
    28f2:	200a      	movs	r0, #10
    28f4:	2100      	movs	r1, #0
    28f6:	f00f fe27 	bl	12548 <delay_ms>
    FT6X36_UNRESET();
    28fa:	4b1c      	ldr	r3, [pc, #112]	; (296c <lv_indev_ft6x36_init+0x84>)
    delay_ms(120);
    28fc:	2078      	movs	r0, #120	; 0x78
    FT6X36_UNRESET();
    28fe:	601c      	str	r4, [r3, #0]
    delay_ms(120);
    2900:	2100      	movs	r1, #0
    2902:	f00f fe21 	bl	12548 <delay_ms>
    return i2c1_transmit((ubAddress << 1) & ~0x01, pubSrc, ulCount, ubStop);
    2906:	2200      	movs	r2, #0
    2908:	2301      	movs	r3, #1
    290a:	4611      	mov	r1, r2
    290c:	2070      	movs	r0, #112	; 0x70
    290e:	f00f ff2b 	bl	12768 <i2c1_transmit>

    if(!i2c1_write(FT6X06_I2C_ADDR, NULL, 0, I2C_STOP)) // Check ACK from the expected address
    2912:	b338      	cbz	r0, 2964 <lv_indev_ft6x36_init+0x7c>
    pubBuffer[0] = ubRegister;
    2914:	f44f 5322 	mov.w	r3, #10368	; 0x2880
    2918:	f8ad 3004 	strh.w	r3, [sp, #4]
    291c:	f3ef 8410 	mrs	r4, PRIMASK
    __asm__ volatile ("cpsid i" ::: "memory");
    2920:	b672      	cpsid	i
    2922:	2301      	movs	r3, #1
    2924:	2202      	movs	r2, #2
    2926:	a901      	add	r1, sp, #4
    2928:	2070      	movs	r0, #112	; 0x70
    292a:	f00f ff1d 	bl	12768 <i2c1_transmit>
    if(!*__s)
    292e:	b904      	cbnz	r4, 2932 <lv_indev_ft6x36_init+0x4a>
        __asm__ volatile ("cpsie i" ::: "memory");
    2930:	b662      	cpsie	i
        return 0;

    //ft6x36_write_register(FT6X06_REG_PERIODACTIVE, 0x05);
    lv_indev_ft6x36_write_register(FT6X06_REG_TH_GROUP, 40);

    delay_ms(10);
    2932:	2100      	movs	r1, #0
    2934:	200a      	movs	r0, #10
    2936:	f00f fe07 	bl	12548 <delay_ms>

    lv_indev_ft6x36_isPressed = 0;
    293a:	4a0d      	ldr	r2, [pc, #52]	; (2970 <lv_indev_ft6x36_init+0x88>)
    293c:	2300      	movs	r3, #0
    293e:	7013      	strb	r3, [r2, #0]
    lv_indev_ft6x36_touchXLoc = 0;
    2940:	4a0c      	ldr	r2, [pc, #48]	; (2974 <lv_indev_ft6x36_init+0x8c>)
    2942:	8013      	strh	r3, [r2, #0]
    lv_indev_ft6x36_touchYLoc = 0;
    2944:	4a0c      	ldr	r2, [pc, #48]	; (2978 <lv_indev_ft6x36_init+0x90>)

    lv_indev_drv_t indev_drv;

    /*Register a touchpad input device*/
    lv_indev_drv_init(&indev_drv);
    2946:	a801      	add	r0, sp, #4
    lv_indev_ft6x36_touchYLoc = 0;
    2948:	8013      	strh	r3, [r2, #0]
    indev_drv.type = LV_INDEV_TYPE_POINTER;
    294a:	2401      	movs	r4, #1
    lv_indev_drv_init(&indev_drv);
    294c:	f005 fc4a 	bl	81e4 <lv_indev_drv_init>
    indev_drv.read_cb = lv_indev_ft6x36_lv_drv_read;
    2950:	4b0a      	ldr	r3, [pc, #40]	; (297c <lv_indev_ft6x36_init+0x94>)
    2952:	9302      	str	r3, [sp, #8]
    indev_touchpad = lv_indev_drv_register(&indev_drv);
    2954:	a801      	add	r0, sp, #4
    indev_drv.type = LV_INDEV_TYPE_POINTER;
    2956:	f88d 4004 	strb.w	r4, [sp, #4]
    indev_touchpad = lv_indev_drv_register(&indev_drv);
    295a:	f005 fc53 	bl	8204 <lv_indev_drv_register>
    295e:	4b08      	ldr	r3, [pc, #32]	; (2980 <lv_indev_ft6x36_init+0x98>)
    2960:	6018      	str	r0, [r3, #0]

    return 1;
    2962:	4620      	mov	r0, r4
}
    2964:	b008      	add	sp, #32
    2966:	bd10      	pop	{r4, pc}
    2968:	4408803c 	.word	0x4408803c
    296c:	4608803c 	.word	0x4608803c
    2970:	20000160 	.word	0x20000160
    2974:	20000162 	.word	0x20000162
    2978:	20000164 	.word	0x20000164
    297c:	00002849 	.word	0x00002849
    2980:	20005f0c 	.word	0x20005f0c

00002984 <lv_disp_ili9488_send_cmd>:
#include "lv_disp_ili9488.h"

static void lv_disp_ili9488_send_cmd(uint8_t ubCmd, uint8_t *pubParam, uint8_t ubNParam)
{
    2984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ILI9488_SELECT();
    2986:	4b0d      	ldr	r3, [pc, #52]	; (29bc <lv_disp_ili9488_send_cmd+0x38>)
    2988:	4e0d      	ldr	r6, [pc, #52]	; (29c0 <lv_disp_ili9488_send_cmd+0x3c>)
{
    298a:	4614      	mov	r4, r2
    ILI9488_SETUP_CMD();
    298c:	2702      	movs	r7, #2
    ILI9488_SELECT();
    298e:	2220      	movs	r2, #32
    2990:	601a      	str	r2, [r3, #0]
{
    2992:	460d      	mov	r5, r1
    ILI9488_SETUP_CMD();
    2994:	601f      	str	r7, [r3, #0]

    usart2_spi_transfer_byte(ubCmd);
    2996:	f010 fbf7 	bl	13188 <usart2_spi_transfer_byte>

    if(pubParam && ubNParam)
    299a:	b915      	cbnz	r5, 29a2 <lv_disp_ili9488_send_cmd+0x1e>
        ILI9488_SETUP_DAT();

        usart2_spi_write(pubParam, ubNParam, 1);
    }

    ILI9488_UNSELECT();
    299c:	2320      	movs	r3, #32
    299e:	6033      	str	r3, [r6, #0]
}
    29a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(pubParam && ubNParam)
    29a2:	2c00      	cmp	r4, #0
    29a4:	d0fa      	beq.n	299c <lv_disp_ili9488_send_cmd+0x18>
        ILI9488_SETUP_DAT();
    29a6:	6037      	str	r7, [r6, #0]
static inline void usart2_spi_write(const uint8_t *pubSrc, uint32_t ulSize, const uint8_t ubWait)
{
	if(!pubSrc)
        return;

    while(ulSize--)
    29a8:	3c01      	subs	r4, #1
    29aa:	d3f7      	bcc.n	299c <lv_disp_ili9488_send_cmd+0x18>
        usart2_spi_write_byte(*pubSrc++, ubWait && !ulSize);
    29ac:	fab4 f184 	clz	r1, r4
    29b0:	f815 0b01 	ldrb.w	r0, [r5], #1
    29b4:	0949      	lsrs	r1, r1, #5
    29b6:	f010 fbf9 	bl	131ac <usart2_spi_write_byte>
    29ba:	e7f5      	b.n	29a8 <lv_disp_ili9488_send_cmd+0x24>
    29bc:	4408806c 	.word	0x4408806c
    29c0:	4608806c 	.word	0x4608806c

000029c4 <lv_disp_ili9488_flush>:

/* Flush the content of the internal buffer the specific area on the display
 * You can use DMA or any hardware acceleration to do this operation in the background but
 * 'lv_disp_flush_ready()' has to be called when finished. */
static void lv_disp_ili9488_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
    29c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t ubBuf[4];

    ubBuf[0] = area->x1 >> 8;
    29c6:	880b      	ldrh	r3, [r1, #0]
    29c8:	ba5b      	rev16	r3, r3
    29ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    ubBuf[1] = area->x1 & 0x00FF; // XSTART
    ubBuf[2] = area->x2 >> 8;
    29ce:	888b      	ldrh	r3, [r1, #4]
{
    29d0:	460e      	mov	r6, r1
    29d2:	4615      	mov	r5, r2
    ubBuf[3] = area->x2 & 0x00FF; // XEND
    lv_disp_ili9488_send_cmd(ILI9488_C_ADDR_SET, ubBuf, 4); // Column addr set
    29d4:	2204      	movs	r2, #4
    ubBuf[2] = area->x2 >> 8;
    29d6:	ba5b      	rev16	r3, r3
    lv_disp_ili9488_send_cmd(ILI9488_C_ADDR_SET, ubBuf, 4); // Column addr set
    29d8:	eb0d 0102 	add.w	r1, sp, r2
{
    29dc:	4607      	mov	r7, r0
    lv_disp_ili9488_send_cmd(ILI9488_C_ADDR_SET, ubBuf, 4); // Column addr set
    29de:	202a      	movs	r0, #42	; 0x2a
    ubBuf[2] = area->x2 >> 8;
    29e0:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_disp_ili9488_send_cmd(ILI9488_C_ADDR_SET, ubBuf, 4); // Column addr set
    29e4:	f7ff ffce 	bl	2984 <lv_disp_ili9488_send_cmd>

    ubBuf[0] = area->y1 >> 8;
    29e8:	8873      	ldrh	r3, [r6, #2]
    29ea:	ba5b      	rev16	r3, r3
    29ec:	f8ad 3004 	strh.w	r3, [sp, #4]
    ubBuf[1] = area->y1 & 0x00FF; // YSTART
    ubBuf[2] = area->y2 >> 8;
    29f0:	88f3      	ldrh	r3, [r6, #6]
    ubBuf[3] = area->y2 & 0x00FF; // YEND
    lv_disp_ili9488_send_cmd(ILI9488_P_ADDR_SET, ubBuf, 4); // Row addr set
    29f2:	2204      	movs	r2, #4
    ubBuf[2] = area->y2 >> 8;
    29f4:	ba5b      	rev16	r3, r3
    lv_disp_ili9488_send_cmd(ILI9488_P_ADDR_SET, ubBuf, 4); // Row addr set
    29f6:	eb0d 0102 	add.w	r1, sp, r2
    29fa:	202b      	movs	r0, #43	; 0x2b
    ubBuf[2] = area->y2 >> 8;
    29fc:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_disp_ili9488_send_cmd(ILI9488_P_ADDR_SET, ubBuf, 4); // Row addr set
    2a00:	f7ff ffc0 	bl	2984 <lv_disp_ili9488_send_cmd>

    lv_disp_ili9488_send_cmd(ILI9488_RAM_WR, NULL, 0); // write to RAM
    2a04:	2200      	movs	r2, #0
    2a06:	4611      	mov	r1, r2
    2a08:	202c      	movs	r0, #44	; 0x2c
    2a0a:	f7ff ffbb 	bl	2984 <lv_disp_ili9488_send_cmd>

    uint32_t block_size = (area->x2 - area->x1 + 1) * (area->y2 - area->y1 + 1);
    2a0e:	f9b6 4004 	ldrsh.w	r4, [r6, #4]
    2a12:	f9b6 3000 	ldrsh.w	r3, [r6]
    2a16:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
    2a1a:	1ae3      	subs	r3, r4, r3
    2a1c:	f9b6 4006 	ldrsh.w	r4, [r6, #6]

    ILI9488_SELECT();
    ILI9488_SETUP_DAT();
    2a20:	4e12      	ldr	r6, [pc, #72]	; (2a6c <lv_disp_ili9488_flush+0xa8>)
    uint32_t block_size = (area->x2 - area->x1 + 1) * (area->y2 - area->y1 + 1);
    2a22:	1aa4      	subs	r4, r4, r2
    2a24:	3401      	adds	r4, #1
    2a26:	fb03 4404 	mla	r4, r3, r4, r4
    ILI9488_SELECT();
    2a2a:	4b11      	ldr	r3, [pc, #68]	; (2a70 <lv_disp_ili9488_flush+0xac>)
    2a2c:	2220      	movs	r2, #32
    2a2e:	601a      	str	r2, [r3, #0]
    ILI9488_SETUP_DAT();
    2a30:	2202      	movs	r2, #2
    2a32:	6032      	str	r2, [r6, #0]

    while(block_size--)
    2a34:	3c01      	subs	r4, #1
    2a36:	d206      	bcs.n	2a46 <lv_disp_ili9488_flush+0x82>
        usart2_spi_write_byte((rgb565_t)(color_p)->ch.red, 0);
        usart2_spi_write_byte((rgb565_t)(color_p)->ch.green, 0);
        usart2_spi_write_byte((rgb565_t)(color_p++)->ch.blue, 0);
    }

    ILI9488_UNSELECT();
    2a38:	2320      	movs	r3, #32
    2a3a:	6033      	str	r3, [r6, #0]

    /* IMPORTANT!!!
     * Inform the graphics library that you are ready with the flushing*/
    lv_disp_flush_ready(disp_drv);
    2a3c:	4638      	mov	r0, r7
    2a3e:	f005 fb91 	bl	8164 <lv_disp_flush_ready>
}
    2a42:	b003      	add	sp, #12
    2a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        usart2_spi_write_byte((rgb565_t)(color_p)->ch.red, 0);
    2a46:	7868      	ldrb	r0, [r5, #1]
    2a48:	2100      	movs	r1, #0
    2a4a:	08c0      	lsrs	r0, r0, #3
    2a4c:	f010 fbae 	bl	131ac <usart2_spi_write_byte>
        usart2_spi_write_byte((rgb565_t)(color_p)->ch.green, 0);
    2a50:	8828      	ldrh	r0, [r5, #0]
    2a52:	2100      	movs	r1, #0
    2a54:	f3c0 1045 	ubfx	r0, r0, #5, #6
    2a58:	f010 fba8 	bl	131ac <usart2_spi_write_byte>
        usart2_spi_write_byte((rgb565_t)(color_p++)->ch.blue, 0);
    2a5c:	f815 0b02 	ldrb.w	r0, [r5], #2
    2a60:	2100      	movs	r1, #0
    2a62:	f000 001f 	and.w	r0, r0, #31
    2a66:	f010 fba1 	bl	131ac <usart2_spi_write_byte>
    2a6a:	e7e3      	b.n	2a34 <lv_disp_ili9488_flush+0x70>
    2a6c:	4608806c 	.word	0x4608806c
    2a70:	4408806c 	.word	0x4408806c

00002a74 <lv_disp_ili9488_display_on>:
        lv_disp_ili9488_display_on();
}

void lv_disp_ili9488_display_on()
{
    lv_disp_ili9488_send_cmd(ILI9488_DISP_ON, NULL, 0); //Display on
    2a74:	2200      	movs	r2, #0
    2a76:	4611      	mov	r1, r2
    2a78:	2029      	movs	r0, #41	; 0x29
    2a7a:	f7ff bf83 	b.w	2984 <lv_disp_ili9488_send_cmd>

00002a7e <lv_disp_ili9488_wakeup>:
    lv_disp_ili9488_send_cmd(ILI9488_SLP_OUT, NULL, 0); // Sleep out
    2a7e:	2200      	movs	r2, #0
{
    2a80:	b510      	push	{r4, lr}
    lv_disp_ili9488_send_cmd(ILI9488_SLP_OUT, NULL, 0); // Sleep out
    2a82:	4611      	mov	r1, r2
{
    2a84:	4604      	mov	r4, r0
    lv_disp_ili9488_send_cmd(ILI9488_SLP_OUT, NULL, 0); // Sleep out
    2a86:	2011      	movs	r0, #17
    2a88:	f7ff ff7c 	bl	2984 <lv_disp_ili9488_send_cmd>
	delay_ms(120);
    2a8c:	2078      	movs	r0, #120	; 0x78
    2a8e:	2100      	movs	r1, #0
    2a90:	f00f fd5a 	bl	12548 <delay_ms>
    if(ubDisplayOn)
    2a94:	b11c      	cbz	r4, 2a9e <lv_disp_ili9488_wakeup+0x20>
}
    2a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_disp_ili9488_display_on();
    2a9a:	f7ff bfeb 	b.w	2a74 <lv_disp_ili9488_display_on>
}
    2a9e:	bd10      	pop	{r4, pc}

00002aa0 <lv_disp_ili9488_init>:
{
    2aa0:	b530      	push	{r4, r5, lr}
    ILI9488_RESET();
    2aa2:	4b55      	ldr	r3, [pc, #340]	; (2bf8 <lv_disp_ili9488_init+0x158>)
    2aa4:	2420      	movs	r4, #32
{
    2aa6:	b08f      	sub	sp, #60	; 0x3c
    ILI9488_RESET();
    2aa8:	601c      	str	r4, [r3, #0]
    delay_ms(10);
    2aaa:	200a      	movs	r0, #10
    2aac:	2100      	movs	r1, #0
    2aae:	f00f fd4b 	bl	12548 <delay_ms>
    ILI9488_UNRESET();
    2ab2:	4b52      	ldr	r3, [pc, #328]	; (2bfc <lv_disp_ili9488_init+0x15c>)
    delay_ms(120);
    2ab4:	2078      	movs	r0, #120	; 0x78
    ILI9488_UNRESET();
    2ab6:	601c      	str	r4, [r3, #0]
    delay_ms(120);
    2ab8:	2100      	movs	r1, #0
    2aba:	f00f fd45 	bl	12548 <delay_ms>
    ubBuf[4] =  0x16;
    2abe:	4a50      	ldr	r2, [pc, #320]	; (2c00 <lv_disp_ili9488_init+0x160>)
    2ac0:	4b50      	ldr	r3, [pc, #320]	; (2c04 <lv_disp_ili9488_init+0x164>)
    ubBuf[14] = 0x0F;
    2ac2:	240f      	movs	r4, #15
    ubBuf[4] =  0x16;
    2ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    ubBuf[8] =  0x4C;
    2ac8:	4b4f      	ldr	r3, [pc, #316]	; (2c08 <lv_disp_ili9488_init+0x168>)
    2aca:	9304      	str	r3, [sp, #16]
    lv_disp_ili9488_send_cmd(ILI9488_PGAMCTRL, ubBuf, 15); // PGAMCTRL(Positive Gamma Control)
    2acc:	4622      	mov	r2, r4
    ubBuf[12] = 0x16;
    2ace:	f641 2316 	movw	r3, #6678	; 0x1a16
    lv_disp_ili9488_send_cmd(ILI9488_PGAMCTRL, ubBuf, 15); // PGAMCTRL(Positive Gamma Control)
    2ad2:	a902      	add	r1, sp, #8
    2ad4:	20e0      	movs	r0, #224	; 0xe0
    ubBuf[12] = 0x16;
    2ad6:	f8ad 3014 	strh.w	r3, [sp, #20]
    ubBuf[14] = 0x0F;
    2ada:	f88d 4016 	strb.w	r4, [sp, #22]
    lv_disp_ili9488_send_cmd(ILI9488_PGAMCTRL, ubBuf, 15); // PGAMCTRL(Positive Gamma Control)
    2ade:	f7ff ff51 	bl	2984 <lv_disp_ili9488_send_cmd>
    ubBuf[4] =  0x0F;
    2ae2:	494a      	ldr	r1, [pc, #296]	; (2c0c <lv_disp_ili9488_init+0x16c>)
    2ae4:	4b4a      	ldr	r3, [pc, #296]	; (2c10 <lv_disp_ili9488_init+0x170>)
    ubBuf[14] = 0x0F;
    2ae6:	f88d 4016 	strb.w	r4, [sp, #22]
    ubBuf[4] =  0x0F;
    2aea:	e9cd 1302 	strd	r1, r3, [sp, #8]
    ubBuf[8] =  0x46;
    2aee:	4b49      	ldr	r3, [pc, #292]	; (2c14 <lv_disp_ili9488_init+0x174>)
    2af0:	9304      	str	r3, [sp, #16]
	lv_disp_ili9488_send_cmd(ILI9488_NGAMCTRL, ubBuf, 15); // NGAMCTRL(Negative Gamma Control)
    2af2:	4622      	mov	r2, r4
    ubBuf[12] = 0x35;
    2af4:	f243 7335 	movw	r3, #14133	; 0x3735
	lv_disp_ili9488_send_cmd(ILI9488_NGAMCTRL, ubBuf, 15); // NGAMCTRL(Negative Gamma Control)
    2af8:	a902      	add	r1, sp, #8
    2afa:	20e1      	movs	r0, #225	; 0xe1
    ubBuf[12] = 0x35;
    2afc:	f8ad 3014 	strh.w	r3, [sp, #20]
	lv_disp_ili9488_send_cmd(ILI9488_NGAMCTRL, ubBuf, 15); // NGAMCTRL(Negative Gamma Control)
    2b00:	f7ff ff40 	bl	2984 <lv_disp_ili9488_send_cmd>
    ubBuf[0] = 0x17; // VReg1out
    2b04:	f241 5317 	movw	r3, #5399	; 0x1517
	lv_disp_ili9488_send_cmd(ILI9488_POW_CTL_1, ubBuf, 2); // Power Control 1
    2b08:	a902      	add	r1, sp, #8
    2b0a:	2202      	movs	r2, #2
    2b0c:	20c0      	movs	r0, #192	; 0xc0
    ubBuf[0] = 0x17; // VReg1out
    2b0e:	f8ad 3008 	strh.w	r3, [sp, #8]
	lv_disp_ili9488_send_cmd(ILI9488_POW_CTL_1, ubBuf, 2); // Power Control 1
    2b12:	f7ff ff37 	bl	2984 <lv_disp_ili9488_send_cmd>
    ubBuf[0] = 0x41; // VGH,VGL
    2b16:	2341      	movs	r3, #65	; 0x41
	lv_disp_ili9488_send_cmd(ILI9488_POW_CTL_2, ubBuf, 1); // Power Control 2
    2b18:	a902      	add	r1, sp, #8
    2b1a:	2201      	movs	r2, #1
    2b1c:	20c1      	movs	r0, #193	; 0xc1
    ubBuf[0] = 0x41; // VGH,VGL
    2b1e:	f88d 3008 	strb.w	r3, [sp, #8]
	lv_disp_ili9488_send_cmd(ILI9488_POW_CTL_2, ubBuf, 1); // Power Control 2
    2b22:	f7ff ff2f 	bl	2984 <lv_disp_ili9488_send_cmd>
	ubBuf[0] = 0x80;
    2b26:	2380      	movs	r3, #128	; 0x80
	lv_disp_ili9488_send_cmd(ILI9488_VCOM_CTL_1, ubBuf, 3); // Power Control 3
    2b28:	a902      	add	r1, sp, #8
    2b2a:	2203      	movs	r2, #3
    2b2c:	20c5      	movs	r0, #197	; 0xc5
	ubBuf[0] = 0x80;
    2b2e:	f88d 3008 	strb.w	r3, [sp, #8]
	lv_disp_ili9488_send_cmd(ILI9488_VCOM_CTL_1, ubBuf, 3); // Power Control 3
    2b32:	f7ff ff27 	bl	2984 <lv_disp_ili9488_send_cmd>
    ubBuf[0] = 0x48; // MX | BGR
    2b36:	2348      	movs	r3, #72	; 0x48
	lv_disp_ili9488_send_cmd(ILI9488_MEM_A_CTL, ubBuf, 1); // Memory Access
    2b38:	a902      	add	r1, sp, #8
    2b3a:	2201      	movs	r2, #1
    2b3c:	2036      	movs	r0, #54	; 0x36
    ubBuf[0] = 0x48; // MX | BGR
    2b3e:	f88d 3008 	strb.w	r3, [sp, #8]
	lv_disp_ili9488_send_cmd(ILI9488_MEM_A_CTL, ubBuf, 1); // Memory Access
    2b42:	f7ff ff1f 	bl	2984 <lv_disp_ili9488_send_cmd>
    ubBuf[0] = 0x66; // 18 bit
    2b46:	2366      	movs	r3, #102	; 0x66
	lv_disp_ili9488_send_cmd(ILI9488_PIX_FMT, ubBuf, 1); // Interface Pixel Format
    2b48:	a902      	add	r1, sp, #8
    2b4a:	2201      	movs	r2, #1
    2b4c:	203a      	movs	r0, #58	; 0x3a
    ubBuf[0] = 0x66; // 18 bit
    2b4e:	f88d 3008 	strb.w	r3, [sp, #8]
    ubBuf[0] = 0x00;
    2b52:	2400      	movs	r4, #0
	lv_disp_ili9488_send_cmd(ILI9488_PIX_FMT, ubBuf, 1); // Interface Pixel Format
    2b54:	f7ff ff16 	bl	2984 <lv_disp_ili9488_send_cmd>
	lv_disp_ili9488_send_cmd(ILI9488_IF_MD_CTL, ubBuf, 1); // Interface Mode Control
    2b58:	a902      	add	r1, sp, #8
    2b5a:	2201      	movs	r2, #1
    2b5c:	20b0      	movs	r0, #176	; 0xb0
    ubBuf[0] = 0x00;
    2b5e:	f88d 4008 	strb.w	r4, [sp, #8]
	lv_disp_ili9488_send_cmd(ILI9488_IF_MD_CTL, ubBuf, 1); // Interface Mode Control
    2b62:	f7ff ff0f 	bl	2984 <lv_disp_ili9488_send_cmd>
    ubBuf[0] = 0xA0; // 60Hz
    2b66:	23a0      	movs	r3, #160	; 0xa0
	lv_disp_ili9488_send_cmd(ILI9488_FRMRT_CTL_1, ubBuf, 1); // Frame rate
    2b68:	a902      	add	r1, sp, #8
    2b6a:	2201      	movs	r2, #1
    2b6c:	20b1      	movs	r0, #177	; 0xb1
    ubBuf[0] = 0xA0; // 60Hz
    2b6e:	f88d 3008 	strb.w	r3, [sp, #8]
    ubBuf[0] = 0x02; // 2-dot
    2b72:	2502      	movs	r5, #2
	lv_disp_ili9488_send_cmd(ILI9488_FRMRT_CTL_1, ubBuf, 1); // Frame rate
    2b74:	f7ff ff06 	bl	2984 <lv_disp_ili9488_send_cmd>
	lv_disp_ili9488_send_cmd(ILI9488_INV_CTL, ubBuf, 1); // Display Inversion Control
    2b78:	a902      	add	r1, sp, #8
    2b7a:	2201      	movs	r2, #1
    2b7c:	20b4      	movs	r0, #180	; 0xb4
    ubBuf[0] = 0x02; // 2-dot
    2b7e:	f88d 5008 	strb.w	r5, [sp, #8]
	lv_disp_ili9488_send_cmd(ILI9488_INV_CTL, ubBuf, 1); // Display Inversion Control
    2b82:	f7ff feff 	bl	2984 <lv_disp_ili9488_send_cmd>
    ubBuf[0] = 0x02; // MCU
    2b86:	f240 2302 	movw	r3, #514	; 0x202
	lv_disp_ili9488_send_cmd(ILI9488_DISP_FUNC_CTL, ubBuf, 2); // Display Function Control RGB/MCU Interface Control
    2b8a:	462a      	mov	r2, r5
    2b8c:	a902      	add	r1, sp, #8
    2b8e:	20b6      	movs	r0, #182	; 0xb6
    ubBuf[0] = 0x02; // MCU
    2b90:	f8ad 3008 	strh.w	r3, [sp, #8]
	lv_disp_ili9488_send_cmd(ILI9488_DISP_FUNC_CTL, ubBuf, 2); // Display Function Control RGB/MCU Interface Control
    2b94:	f7ff fef6 	bl	2984 <lv_disp_ili9488_send_cmd>
	lv_disp_ili9488_send_cmd(ILI9488_SET_IMG_FUNC, ubBuf, 1); // Set Image Functio
    2b98:	a902      	add	r1, sp, #8
    2b9a:	2201      	movs	r2, #1
    2b9c:	20e9      	movs	r0, #233	; 0xe9
    ubBuf[0] = 0x00; // Disable 24 bit data
    2b9e:	f88d 4008 	strb.w	r4, [sp, #8]
	lv_disp_ili9488_send_cmd(ILI9488_SET_IMG_FUNC, ubBuf, 1); // Set Image Functio
    2ba2:	f7ff feef 	bl	2984 <lv_disp_ili9488_send_cmd>
    ubBuf[0] = 0xA9;
    2ba6:	4b1c      	ldr	r3, [pc, #112]	; (2c18 <lv_disp_ili9488_init+0x178>)
    2ba8:	9302      	str	r3, [sp, #8]
	lv_disp_ili9488_send_cmd(ILI9488_ADJ_CTL_3, ubBuf, 4); // Adjust Control
    2baa:	a902      	add	r1, sp, #8
    2bac:	2204      	movs	r2, #4
    2bae:	20f7      	movs	r0, #247	; 0xf7
    2bb0:	f7ff fee8 	bl	2984 <lv_disp_ili9488_send_cmd>
	lv_disp_ili9488_wakeup(0); // Wake up controller, leave display off
    2bb4:	4620      	mov	r0, r4
    lv_disp_buf_init(&disp_buf_2, buf2_1, buf2_2, LV_HOR_RES_MAX * 10);   /*Initialize the display buffer*/
    2bb6:	4c19      	ldr	r4, [pc, #100]	; (2c1c <lv_disp_ili9488_init+0x17c>)
	lv_disp_ili9488_wakeup(0); // Wake up controller, leave display off
    2bb8:	f7ff ff61 	bl	2a7e <lv_disp_ili9488_wakeup>
    uint8_t ubParamBuff = ILI9488_MADCTL_MV | ILI9488_MADCTL_BGR;
    2bbc:	2328      	movs	r3, #40	; 0x28
    lv_disp_ili9488_send_cmd(ILI9488_MEM_A_CTL, &ubParamBuff, 1);
    2bbe:	f10d 0107 	add.w	r1, sp, #7
    2bc2:	2201      	movs	r2, #1
    2bc4:	2036      	movs	r0, #54	; 0x36
    uint8_t ubParamBuff = ILI9488_MADCTL_MV | ILI9488_MADCTL_BGR;
    2bc6:	f88d 3007 	strb.w	r3, [sp, #7]
    lv_disp_ili9488_send_cmd(ILI9488_MEM_A_CTL, &ubParamBuff, 1);
    2bca:	f7ff fedb 	bl	2984 <lv_disp_ili9488_send_cmd>
    lv_disp_buf_init(&disp_buf_2, buf2_1, buf2_2, LV_HOR_RES_MAX * 10);   /*Initialize the display buffer*/
    2bce:	4a14      	ldr	r2, [pc, #80]	; (2c20 <lv_disp_ili9488_init+0x180>)
    2bd0:	4914      	ldr	r1, [pc, #80]	; (2c24 <lv_disp_ili9488_init+0x184>)
    2bd2:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
    2bd6:	4620      	mov	r0, r4
    2bd8:	f005 fa10 	bl	7ffc <lv_disp_buf_init>
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
    2bdc:	a806      	add	r0, sp, #24
    2bde:	f005 f9f5 	bl	7fcc <lv_disp_drv_init>
    disp_drv.hor_res = LV_HOR_RES_MAX;
    2be2:	4b11      	ldr	r3, [pc, #68]	; (2c28 <lv_disp_ili9488_init+0x188>)
    2be4:	9306      	str	r3, [sp, #24]
    lv_disp_drv_register(&disp_drv);
    2be6:	a806      	add	r0, sp, #24
    disp_drv.flush_cb = lv_disp_ili9488_flush;
    2be8:	4b10      	ldr	r3, [pc, #64]	; (2c2c <lv_disp_ili9488_init+0x18c>)
    2bea:	9309      	str	r3, [sp, #36]	; 0x24
    disp_drv.buffer = &disp_buf_2;
    2bec:	9407      	str	r4, [sp, #28]
    lv_disp_drv_register(&disp_drv);
    2bee:	f005 fa13 	bl	8018 <lv_disp_drv_register>
}
    2bf2:	2001      	movs	r0, #1
    2bf4:	b00f      	add	sp, #60	; 0x3c
    2bf6:	bd30      	pop	{r4, r5, pc}
    2bf8:	4408803c 	.word	0x4408803c
    2bfc:	4608803c 	.word	0x4608803c
    2c00:	08090300 	.word	0x08090300
    2c04:	783f0a16 	.word	0x783f0a16
    2c08:	080a094c 	.word	0x080a094c
    2c0c:	03191600 	.word	0x03191600
    2c10:	4532050f 	.word	0x4532050f
    2c14:	0d0e0446 	.word	0x0d0e0446
    2c18:	822c51a9 	.word	0x822c51a9
    2c1c:	20004c68 	.word	0x20004c68
    2c20:	200026e6 	.word	0x200026e6
    2c24:	20000166 	.word	0x20000166
    2c28:	014001e0 	.word	0x014001e0
    2c2c:	000029c5 	.word	0x000029c5

00002c30 <lv_disp_ili9488_bl_init>:
}

/* Initialize backlight pwm at desired frequency. */
void lv_disp_ili9488_bl_init(uint32_t ulFrequency)
{
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_TIMER1;
    2c30:	490f      	ldr	r1, [pc, #60]	; (2c70 <lv_disp_ili9488_bl_init+0x40>)
    2c32:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
    2c36:	f043 0302 	orr.w	r3, r3, #2
    2c3a:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0

    TIMER1->CTRL = TIMER_CTRL_RSSCOIST | TIMER_CTRL_PRESC_DIV1 | TIMER_CTRL_CLKSEL_PRESCHFPERCLK | TIMER_CTRL_FALLA_NONE | TIMER_CTRL_RISEA_NONE | TIMER_CTRL_MODE_UP;
    2c3e:	4b0d      	ldr	r3, [pc, #52]	; (2c74 <lv_disp_ili9488_bl_init+0x44>)
    TIMER1->TOP = (HFPER_CLOCK_FREQ / ulFrequency) - 1;
    TIMER1->CNT = 0x0000;

    TIMER1->CC[0].CTRL = TIMER_CC_CTRL_PRSCONF_LEVEL | TIMER_CC_CTRL_CUFOA_NONE | TIMER_CC_CTRL_COFOA_SET | TIMER_CC_CTRL_CMOA_CLEAR | TIMER_CC_CTRL_MODE_PWM;
    2c40:	490d      	ldr	r1, [pc, #52]	; (2c78 <lv_disp_ili9488_bl_init+0x48>)
    TIMER1->CTRL = TIMER_CTRL_RSSCOIST | TIMER_CTRL_PRESC_DIV1 | TIMER_CTRL_CLKSEL_PRESCHFPERCLK | TIMER_CTRL_FALLA_NONE | TIMER_CTRL_RISEA_NONE | TIMER_CTRL_MODE_UP;
    2c42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2c46:	601a      	str	r2, [r3, #0]
    TIMER1->TOP = (HFPER_CLOCK_FREQ / ulFrequency) - 1;
    2c48:	4a0c      	ldr	r2, [pc, #48]	; (2c7c <lv_disp_ili9488_bl_init+0x4c>)
    2c4a:	6812      	ldr	r2, [r2, #0]
    2c4c:	fbb2 f0f0 	udiv	r0, r2, r0
    TIMER1->CNT = 0x0000;
    2c50:	2200      	movs	r2, #0
    TIMER1->TOP = (HFPER_CLOCK_FREQ / ulFrequency) - 1;
    2c52:	3801      	subs	r0, #1
    2c54:	61d8      	str	r0, [r3, #28]
    TIMER1->CNT = 0x0000;
    2c56:	625a      	str	r2, [r3, #36]	; 0x24
    TIMER1->CC[0].CTRL = TIMER_CC_CTRL_PRSCONF_LEVEL | TIMER_CC_CTRL_CUFOA_NONE | TIMER_CC_CTRL_COFOA_SET | TIMER_CC_CTRL_CMOA_CLEAR | TIMER_CC_CTRL_MODE_PWM;
    2c58:	6619      	str	r1, [r3, #96]	; 0x60
    TIMER1->CC[0].CCV = 0x0000;

    TIMER1->ROUTELOC0 = TIMER_ROUTELOC0_CC0LOC_LOC2;
    2c5a:	2102      	movs	r1, #2
    TIMER1->CC[0].CCV = 0x0000;
    2c5c:	665a      	str	r2, [r3, #100]	; 0x64
    TIMER1->ROUTELOC0 = TIMER_ROUTELOC0_CC0LOC_LOC2;
    2c5e:	6359      	str	r1, [r3, #52]	; 0x34
    TIMER1->ROUTEPEN |= TIMER_ROUTEPEN_CC0PEN;
    2c60:	6b19      	ldr	r1, [r3, #48]	; 0x30
    2c62:	f041 0101 	orr.w	r1, r1, #1
    2c66:	6319      	str	r1, [r3, #48]	; 0x30

    TIMER1->CMD = TIMER_CMD_START;
    2c68:	2101      	movs	r1, #1
    2c6a:	6059      	str	r1, [r3, #4]

    TIMER1->CC[0].CCVB = 0;
    2c6c:	66da      	str	r2, [r3, #108]	; 0x6c
}
    2c6e:	4770      	bx	lr
    2c70:	400e4000 	.word	0x400e4000
    2c74:	40018400 	.word	0x40018400
    2c78:	10000e03 	.word	0x10000e03
    2c7c:	20006314 	.word	0x20006314

00002c80 <lv_disp_ili9488_bl_set>:

/* Initialize backlight pwm output compare value (0 <= fBrightness <= 1). */
void lv_disp_ili9488_bl_set(float fBrightness)
{
    if(fBrightness > 1.f) fBrightness = 1.f;
    2c80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2c84:	eeb4 0ae7 	vcmpe.f32	s0, s15
    2c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c8c:	dc12      	bgt.n	2cb4 <lv_disp_ili9488_bl_set+0x34>
    if(fBrightness < 0.f) fBrightness = 0.f;
    2c8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    2c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c96:	d501      	bpl.n	2c9c <lv_disp_ili9488_bl_set+0x1c>
    2c98:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2cbc <lv_disp_ili9488_bl_set+0x3c>

    TIMER1->CC[0].CCVB = TIMER1->TOP * fBrightness;
    2c9c:	4b08      	ldr	r3, [pc, #32]	; (2cc0 <lv_disp_ili9488_bl_set+0x40>)
    2c9e:	edd3 7a07 	vldr	s15, [r3, #28]
    2ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2ca6:	ee27 0a80 	vmul.f32	s0, s15, s0
    2caa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    2cae:	ed83 0a1b 	vstr	s0, [r3, #108]	; 0x6c
    2cb2:	4770      	bx	lr
    if(fBrightness > 1.f) fBrightness = 1.f;
    2cb4:	eeb0 0a67 	vmov.f32	s0, s15
    2cb8:	e7f0      	b.n	2c9c <lv_disp_ili9488_bl_set+0x1c>
    2cba:	bf00      	nop
    2cbc:	00000000 	.word	0x00000000
    2cc0:	40018400 	.word	0x40018400

00002cc4 <_default_isr>:
extern uint32_t _end;


void _default_isr()
{
    while(1);
    2cc4:	e7fe      	b.n	2cc4 <_default_isr>

00002cc6 <__libc_init_array>:
}

void __attribute__ ((weak)) __libc_init_array()
{

}
    2cc6:	4770      	bx	lr

00002cc8 <_reset_isr>:
extern int main();

#define DEFAULT_ISR "_default_isr"

void _reset_isr()
{
    2cc8:	b508      	push	{r3, lr}
    uint32_t *src, *dst;

    src = &_siiram0;
    2cca:	4a1d      	ldr	r2, [pc, #116]	; (2d40 <_reset_isr+0x78>)
    2ccc:	4b1d      	ldr	r3, [pc, #116]	; (2d44 <_reset_isr+0x7c>)
    dst = &_siram0;

    while (dst < &_eiram0) // Copy RAM code
    2cce:	491e      	ldr	r1, [pc, #120]	; (2d48 <_reset_isr+0x80>)
    2cd0:	428b      	cmp	r3, r1
    2cd2:	d327      	bcc.n	2d24 <_reset_isr+0x5c>
    2cd4:	4b1d      	ldr	r3, [pc, #116]	; (2d4c <_reset_isr+0x84>)
        *(dst++) = *(src++);

    src = &_sidata;
    2cd6:	4a1e      	ldr	r2, [pc, #120]	; (2d50 <_reset_isr+0x88>)
    dst = &_sdata;

    while (dst < &_edata) // Copy data
    2cd8:	491e      	ldr	r1, [pc, #120]	; (2d54 <_reset_isr+0x8c>)
    2cda:	428b      	cmp	r3, r1
    2cdc:	d327      	bcc.n	2d2e <_reset_isr+0x66>
        *(dst++) = *(src++);

    src = 0;
    dst = &_sbss;
    2cde:	4b1e      	ldr	r3, [pc, #120]	; (2d58 <_reset_isr+0x90>)

    while (dst < &_ebss) // Zero BSS
    2ce0:	4a1e      	ldr	r2, [pc, #120]	; (2d5c <_reset_isr+0x94>)
        *(dst++) = 0;
    2ce2:	2100      	movs	r1, #0
    while (dst < &_ebss) // Zero BSS
    2ce4:	4293      	cmp	r3, r2
    2ce6:	d327      	bcc.n	2d38 <_reset_isr+0x70>

    __libc_init_array();
    2ce8:	f7ff ffed 	bl	2cc6 <__libc_init_array>

    SCB->VTOR = (uint32_t)&_svect; // ISR Vectors offset
    2cec:	4b1c      	ldr	r3, [pc, #112]	; (2d60 <_reset_isr+0x98>)
    2cee:	4a1d      	ldr	r2, [pc, #116]	; (2d64 <_reset_isr+0x9c>)
    2cf0:	609a      	str	r2, [r3, #8]
    SCB->AIRCR = 0x05FA0000 | (5 << 8); // Interrupt priority - 2 bits Group, 1 bit Sub-group
    2cf2:	4a1d      	ldr	r2, [pc, #116]	; (2d68 <_reset_isr+0xa0>)
    2cf4:	60da      	str	r2, [r3, #12]
    SCB->SHCSR = SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk; // Enable separate fault handlers
    2cf6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
    2cfa:	625a      	str	r2, [r3, #36]	; 0x24
    SCB->SCR |= SCB_SCR_SEVONPEND_Msk; // Pending disabled interrupt generates event
    2cfc:	691a      	ldr	r2, [r3, #16]
    2cfe:	f042 0210 	orr.w	r2, r2, #16
    2d02:	611a      	str	r2, [r3, #16]
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; // Enable division by zero faults
    2d04:	695a      	ldr	r2, [r3, #20]
    2d06:	f042 0210 	orr.w	r2, r2, #16
    2d0a:	615a      	str	r2, [r3, #20]
    SCB->CPACR |= 0xF << 20; // Enable CP10 & CP11 (FPU) in priv. and non priv. mode
    2d0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2d10:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    2d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    init();
    2d18:	f7fe ff72 	bl	1c00 <init>
    main();
    2d1c:	f7ff fce8 	bl	26f0 <main>
  __ASM volatile ("cpsid i" : : : "memory");
    2d20:	b672      	cpsid	i

    __disable_irq();
    while(1);
    2d22:	e7fe      	b.n	2d22 <_reset_isr+0x5a>
        *(dst++) = *(src++);
    2d24:	f852 0b04 	ldr.w	r0, [r2], #4
    2d28:	f843 0b04 	str.w	r0, [r3], #4
    2d2c:	e7d0      	b.n	2cd0 <_reset_isr+0x8>
        *(dst++) = *(src++);
    2d2e:	f852 0b04 	ldr.w	r0, [r2], #4
    2d32:	f843 0b04 	str.w	r0, [r3], #4
    2d36:	e7d0      	b.n	2cda <_reset_isr+0x12>
        *(dst++) = 0;
    2d38:	f843 1b04 	str.w	r1, [r3], #4
    2d3c:	e7d2      	b.n	2ce4 <_reset_isr+0x1c>
    2d3e:	bf00      	nop
    2d40:	0001def0 	.word	0x0001def0
    2d44:	10000000 	.word	0x10000000
    2d48:	10000000 	.word	0x10000000
    2d4c:	20000000 	.word	0x20000000
    2d50:	0001def0 	.word	0x0001def0
    2d54:	200000c0 	.word	0x200000c0
    2d58:	200000c0 	.word	0x200000c0
    2d5c:	20006344 	.word	0x20006344
    2d60:	e000ed00 	.word	0xe000ed00
    2d64:	00000000 	.word	0x00000000
    2d68:	05fa0500 	.word	0x05fa0500

00002d6c <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
    2d6c:	8002      	strh	r2, [r0, #0]
    c->y = 0;
    2d6e:	2300      	movs	r3, #0
    *tmp = 1 - radius;
    2d70:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
    2d74:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
    2d76:	800a      	strh	r2, [r1, #0]
}
    2d78:	4770      	bx	lr

00002d7a <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
    2d7a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    2d7e:	f9b0 0000 	ldrsh.w	r0, [r0]
}
    2d82:	4282      	cmp	r2, r0
    2d84:	bfcc      	ite	gt
    2d86:	2000      	movgt	r0, #0
    2d88:	2001      	movle	r0, #1
    2d8a:	4770      	bx	lr

00002d8c <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
    2d8c:	8843      	ldrh	r3, [r0, #2]
    2d8e:	3301      	adds	r3, #1
{
    2d90:	b510      	push	{r4, lr}
    c->y++;
    2d92:	b29c      	uxth	r4, r3
    2d94:	b21b      	sxth	r3, r3
    2d96:	8043      	strh	r3, [r0, #2]

    if(*tmp <= 0) {
    2d98:	f9b1 2000 	ldrsh.w	r2, [r1]
    2d9c:	2a00      	cmp	r2, #0
    2d9e:	dc04      	bgt.n	2daa <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; /*Change in decision criterion for y -> y+1*/
    2da0:	3201      	adds	r2, #1
    2da2:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    2da6:	800a      	strh	r2, [r1, #0]
    } else {
        c->x--;
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
    }
}
    2da8:	bd10      	pop	{r4, pc}
        c->x--;
    2daa:	8802      	ldrh	r2, [r0, #0]
    2dac:	3a01      	subs	r2, #1
    2dae:	b212      	sxth	r2, r2
    2db0:	8002      	strh	r2, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
    2db2:	1a9b      	subs	r3, r3, r2
    2db4:	880a      	ldrh	r2, [r1, #0]
    2db6:	3201      	adds	r2, #1
    2db8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    2dbc:	800b      	strh	r3, [r1, #0]
}
    2dbe:	e7f3      	b.n	2da8 <lv_circ_next+0x1c>

00002dc0 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
    2dc0:	f990 2000 	ldrsb.w	r2, [r0]
    2dc4:	7803      	ldrb	r3, [r0, #0]
    2dc6:	2a00      	cmp	r2, #0
    2dc8:	da0e      	bge.n	2de8 <lv_txt_utf8_size+0x28>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
    2dca:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
    2dce:	2ac0      	cmp	r2, #192	; 0xc0
    2dd0:	d00c      	beq.n	2dec <lv_txt_utf8_size+0x2c>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
    2dd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    2dd6:	2ae0      	cmp	r2, #224	; 0xe0
    2dd8:	d00a      	beq.n	2df0 <lv_txt_utf8_size+0x30>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
    2dda:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    2dde:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
    2de0:	bf14      	ite	ne
    2de2:	2000      	movne	r0, #0
    2de4:	2004      	moveq	r0, #4
    2de6:	4770      	bx	lr
        return 1;
    2de8:	2001      	movs	r0, #1
    2dea:	4770      	bx	lr
        return 2;
    2dec:	2002      	movs	r0, #2
    2dee:	4770      	bx	lr
        return 3;
    2df0:	2003      	movs	r0, #3
    return 0; /*If the char was invalid tell it's 1 byte long*/
}
    2df2:	4770      	bx	lr

00002df4 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
    2df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
    2df6:	2300      	movs	r3, #0
    2df8:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
    2dfa:	b901      	cbnz	r1, 2dfe <lv_txt_utf8_next+0xa>
    2dfc:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
    2dfe:	680a      	ldr	r2, [r1, #0]
    2e00:	5685      	ldrsb	r5, [r0, r2]
    2e02:	5c83      	ldrb	r3, [r0, r2]
    2e04:	2d00      	cmp	r5, #0
    2e06:	f102 0401 	add.w	r4, r2, #1
    2e0a:	db03      	blt.n	2e14 <lv_txt_utf8_next+0x20>
        result = txt[*i];
    2e0c:	4618      	mov	r0, r3
        (*i)++;
    2e0e:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
    2e10:	b002      	add	sp, #8
    2e12:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
    2e14:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
    2e18:	2dc0      	cmp	r5, #192	; 0xc0
    2e1a:	d110      	bne.n	2e3e <lv_txt_utf8_next+0x4a>
            (*i)++;
    2e1c:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
    2e1e:	5d00      	ldrb	r0, [r0, r4]
    2e20:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
    2e24:	2c80      	cmp	r4, #128	; 0x80
    2e26:	d001      	beq.n	2e2c <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
    2e28:	2000      	movs	r0, #0
    2e2a:	e7f1      	b.n	2e10 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
    2e2c:	019b      	lsls	r3, r3, #6
    2e2e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
    2e32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2e36:	4418      	add	r0, r3
            (*i)++;
    2e38:	3202      	adds	r2, #2
            (*i)++;
    2e3a:	600a      	str	r2, [r1, #0]
    2e3c:	e7e8      	b.n	2e10 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
    2e3e:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
    2e42:	2de0      	cmp	r5, #224	; 0xe0
    2e44:	d117      	bne.n	2e76 <lv_txt_utf8_next+0x82>
            (*i)++;
    2e46:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
    2e48:	5d04      	ldrb	r4, [r0, r4]
    2e4a:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
    2e4e:	2d80      	cmp	r5, #128	; 0x80
    2e50:	d1ea      	bne.n	2e28 <lv_txt_utf8_next+0x34>
            (*i)++;
    2e52:	1c95      	adds	r5, r2, #2
    2e54:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
    2e56:	5d45      	ldrb	r5, [r0, r5]
    2e58:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
    2e5c:	2880      	cmp	r0, #128	; 0x80
    2e5e:	d1e3      	bne.n	2e28 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
    2e60:	0318      	lsls	r0, r3, #12
    2e62:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
    2e64:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
    2e68:	01a3      	lsls	r3, r4, #6
    2e6a:	4428      	add	r0, r5
    2e6c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
    2e70:	4418      	add	r0, r3
            (*i)++;
    2e72:	3203      	adds	r2, #3
    2e74:	e7e1      	b.n	2e3a <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF8) == 0xF0) {
    2e76:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
    2e7a:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
    2e7c:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
    2e7e:	d1d3      	bne.n	2e28 <lv_txt_utf8_next+0x34>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
    2e80:	5d04      	ldrb	r4, [r0, r4]
    2e82:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
    2e86:	2d80      	cmp	r5, #128	; 0x80
    2e88:	d1ce      	bne.n	2e28 <lv_txt_utf8_next+0x34>
            (*i)++;
    2e8a:	1c95      	adds	r5, r2, #2
    2e8c:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
    2e8e:	5d45      	ldrb	r5, [r0, r5]
    2e90:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
    2e94:	2e80      	cmp	r6, #128	; 0x80
    2e96:	d1c7      	bne.n	2e28 <lv_txt_utf8_next+0x34>
            (*i)++;
    2e98:	1cd6      	adds	r6, r2, #3
    2e9a:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
    2e9c:	5d86      	ldrb	r6, [r0, r6]
    2e9e:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
    2ea2:	2880      	cmp	r0, #128	; 0x80
    2ea4:	d1c0      	bne.n	2e28 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
    2ea6:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
    2ea8:	0320      	lsls	r0, r4, #12
    2eaa:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result = (uint32_t)(txt[*i] & 0x07) << 18;
    2eae:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
    2eb2:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
    2eb4:	01a8      	lsls	r0, r5, #6
    2eb6:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
    2eba:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    2ebe:	4430      	add	r0, r6
    2ec0:	4418      	add	r0, r3
            (*i)++;
    2ec2:	3204      	adds	r2, #4
    2ec4:	e7b9      	b.n	2e3a <lv_txt_utf8_next+0x46>
	...

00002ec8 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
    2ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    2ecc:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
        uint8_t c_size = lv_txt_encoded_size(&txt[byte_cnt]);
    2ece:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2ef8 <lv_txt_utf8_get_byte_id+0x30>
{
    2ed2:	4607      	mov	r7, r0
    2ed4:	460d      	mov	r5, r1
    for(i = 0; i < utf8_id; i++) {
    2ed6:	4626      	mov	r6, r4
    2ed8:	42ae      	cmp	r6, r5
    2eda:	d102      	bne.n	2ee2 <lv_txt_utf8_get_byte_id+0x1a>
        byte_cnt += c_size > 0 ? c_size : 1;
    }

    return byte_cnt;
}
    2edc:	4620      	mov	r0, r4
    2ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = lv_txt_encoded_size(&txt[byte_cnt]);
    2ee2:	1938      	adds	r0, r7, r4
    2ee4:	f8d8 3000 	ldr.w	r3, [r8]
    2ee8:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
    2eea:	2801      	cmp	r0, #1
    2eec:	bf38      	it	cc
    2eee:	2001      	movcc	r0, #1
    2ef0:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id; i++) {
    2ef4:	3601      	adds	r6, #1
    2ef6:	e7ef      	b.n	2ed8 <lv_txt_utf8_get_byte_id+0x10>
    2ef8:	20000014 	.word	0x20000014

00002efc <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
    2efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
    2efe:	2400      	movs	r4, #0
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
    2f00:	4f07      	ldr	r7, [pc, #28]	; (2f20 <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
    2f02:	9401      	str	r4, [sp, #4]
{
    2f04:	4606      	mov	r6, r0
    2f06:	460d      	mov	r5, r1
    while(i < byte_id) {
    2f08:	9b01      	ldr	r3, [sp, #4]
    2f0a:	42ab      	cmp	r3, r5
    2f0c:	d302      	bcc.n	2f14 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
    2f0e:	4620      	mov	r0, r4
    2f10:	b003      	add	sp, #12
    2f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
    2f14:	683b      	ldr	r3, [r7, #0]
    2f16:	a901      	add	r1, sp, #4
    2f18:	4630      	mov	r0, r6
    2f1a:	4798      	blx	r3
        char_cnt++;
    2f1c:	3401      	adds	r4, #1
    2f1e:	e7f3      	b.n	2f08 <lv_txt_utf8_get_char_id+0xc>
    2f20:	2000000c 	.word	0x2000000c

00002f24 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
    2f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
    2f26:	2400      	movs	r4, #0

    while(txt[i] != '\0') {
        lv_txt_encoded_next(txt, &i);
    2f28:	4e07      	ldr	r6, [pc, #28]	; (2f48 <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
    2f2a:	9401      	str	r4, [sp, #4]
{
    2f2c:	4605      	mov	r5, r0
    while(txt[i] != '\0') {
    2f2e:	9b01      	ldr	r3, [sp, #4]
    2f30:	5ceb      	ldrb	r3, [r5, r3]
    2f32:	b913      	cbnz	r3, 2f3a <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
    2f34:	4620      	mov	r0, r4
    2f36:	b002      	add	sp, #8
    2f38:	bd70      	pop	{r4, r5, r6, pc}
        lv_txt_encoded_next(txt, &i);
    2f3a:	6833      	ldr	r3, [r6, #0]
    2f3c:	a901      	add	r1, sp, #4
    2f3e:	4628      	mov	r0, r5
    2f40:	4798      	blx	r3
        len++;
    2f42:	3401      	adds	r4, #1
    2f44:	e7f3      	b.n	2f2e <lv_txt_utf8_get_length+0xa>
    2f46:	bf00      	nop
    2f48:	2000000c 	.word	0x2000000c

00002f4c <lv_txt_utf8_prev>:
    (*i)--;
    2f4c:	680b      	ldr	r3, [r1, #0]
{
    2f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
    2f50:	3b01      	subs	r3, #1
        c_size = lv_txt_encoded_size(&txt[*i]);
    2f52:	4f0e      	ldr	r7, [pc, #56]	; (2f8c <lv_txt_utf8_prev+0x40>)
    (*i)--;
    2f54:	600b      	str	r3, [r1, #0]
{
    2f56:	4606      	mov	r6, r0
    2f58:	460c      	mov	r4, r1
    (*i)--;
    2f5a:	2504      	movs	r5, #4
        c_size = lv_txt_encoded_size(&txt[*i]);
    2f5c:	6820      	ldr	r0, [r4, #0]
    2f5e:	683b      	ldr	r3, [r7, #0]
    2f60:	4430      	add	r0, r6
    2f62:	4798      	blx	r3
        if(c_size == 0) {
    2f64:	6823      	ldr	r3, [r4, #0]
    2f66:	b948      	cbnz	r0, 2f7c <lv_txt_utf8_prev+0x30>
            if(*i != 0)
    2f68:	b12b      	cbz	r3, 2f76 <lv_txt_utf8_prev+0x2a>
                (*i)--;
    2f6a:	3d01      	subs	r5, #1
    2f6c:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
    2f6e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
    2f72:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
    2f74:	d1f2      	bne.n	2f5c <lv_txt_utf8_prev+0x10>
    2f76:	2000      	movs	r0, #0
}
    2f78:	b003      	add	sp, #12
    2f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
    2f7c:	9301      	str	r3, [sp, #4]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
    2f7e:	4b04      	ldr	r3, [pc, #16]	; (2f90 <lv_txt_utf8_prev+0x44>)
    2f80:	a901      	add	r1, sp, #4
    2f82:	681b      	ldr	r3, [r3, #0]
    2f84:	4630      	mov	r0, r6
    2f86:	4798      	blx	r3
    return letter;
    2f88:	e7f6      	b.n	2f78 <lv_txt_utf8_prev+0x2c>
    2f8a:	bf00      	nop
    2f8c:	20000014 	.word	0x20000014
    2f90:	2000000c 	.word	0x2000000c

00002f94 <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
    2f94:	2923      	cmp	r1, #35	; 0x23
{
    2f96:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
    2f98:	d117      	bne.n	2fca <lv_txt_is_cmd+0x36>
    2f9a:	7803      	ldrb	r3, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
    2f9c:	b91b      	cbnz	r3, 2fa6 <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
    2f9e:	2301      	movs	r3, #1
    2fa0:	7003      	strb	r3, [r0, #0]
            ret    = true;
    2fa2:	2001      	movs	r0, #1
    2fa4:	e004      	b.n	2fb0 <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
    2fa6:	2b01      	cmp	r3, #1
    2fa8:	f04f 0000 	mov.w	r0, #0
    2fac:	d109      	bne.n	2fc2 <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
    2fae:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
    2fb0:	7813      	ldrb	r3, [r2, #0]
    2fb2:	2b01      	cmp	r3, #1
    2fb4:	d104      	bne.n	2fc0 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
    2fb6:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
    2fb8:	bf04      	itt	eq
    2fba:	2102      	moveq	r1, #2
    2fbc:	7011      	strbeq	r1, [r2, #0]
        ret = true;
    2fbe:	4618      	mov	r0, r3
}
    2fc0:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
    2fc2:	2b02      	cmp	r3, #2
    2fc4:	d1f4      	bne.n	2fb0 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
    2fc6:	7010      	strb	r0, [r2, #0]
    2fc8:	e7eb      	b.n	2fa2 <lv_txt_is_cmd+0xe>
    bool ret = false;
    2fca:	2000      	movs	r0, #0
    2fcc:	e7f0      	b.n	2fb0 <lv_txt_is_cmd+0x1c>
	...

00002fd0 <lv_txt_get_width>:
{
    2fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fd4:	4688      	mov	r8, r1
    2fd6:	b085      	sub	sp, #20
    2fd8:	4617      	mov	r7, r2
    2fda:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
    2fdc:	4605      	mov	r5, r0
    2fde:	2400      	movs	r4, #0
    2fe0:	2800      	cmp	r0, #0
    2fe2:	d03e      	beq.n	3062 <lv_txt_get_width+0x92>
    if(font == NULL) return 0;
    2fe4:	2a00      	cmp	r2, #0
    2fe6:	d03e      	beq.n	3066 <lv_txt_get_width+0x96>
    uint32_t i                   = 0;
    2fe8:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
    2fea:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
    2fee:	2900      	cmp	r1, #0
    2ff0:	d035      	beq.n	305e <lv_txt_get_width+0x8e>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    2ff2:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
    2ff6:	f8df a074 	ldr.w	sl, [pc, #116]	; 306c <lv_txt_get_width+0x9c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    2ffa:	f009 0901 	and.w	r9, r9, #1
            letter      = lv_txt_encoded_next(txt, &i);
    2ffe:	f8da 3000 	ldr.w	r3, [sl]
    3002:	a903      	add	r1, sp, #12
    3004:	4628      	mov	r0, r5
    3006:	4798      	blx	r3
    3008:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
    300a:	9803      	ldr	r0, [sp, #12]
    300c:	f8da 3000 	ldr.w	r3, [sl]
    3010:	2100      	movs	r1, #0
    3012:	4428      	add	r0, r5
    3014:	4798      	blx	r3
    3016:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    3018:	f1b9 0f00 	cmp.w	r9, #0
    301c:	d111      	bne.n	3042 <lv_txt_get_width+0x72>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
    301e:	4659      	mov	r1, fp
    3020:	4638      	mov	r0, r7
    3022:	f006 fa55 	bl	94d0 <lv_font_get_glyph_width>
            if(char_width > 0) {
    3026:	b203      	sxth	r3, r0
    3028:	2b00      	cmp	r3, #0
    302a:	dc14      	bgt.n	3056 <lv_txt_get_width+0x86>
        while(i < length) {
    302c:	9b03      	ldr	r3, [sp, #12]
    302e:	4598      	cmp	r8, r3
    3030:	d8e5      	bhi.n	2ffe <lv_txt_get_width+0x2e>
        if(width > 0) {
    3032:	2c00      	cmp	r4, #0
    3034:	dd01      	ble.n	303a <lv_txt_get_width+0x6a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
    3036:	1ba4      	subs	r4, r4, r6
    3038:	b224      	sxth	r4, r4
}
    303a:	4620      	mov	r0, r4
    303c:	b005      	add	sp, #20
    303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3042:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
    3044:	4659      	mov	r1, fp
    3046:	f10d 000b 	add.w	r0, sp, #11
    304a:	f7ff ffa3 	bl	2f94 <lv_txt_is_cmd>
    304e:	9a01      	ldr	r2, [sp, #4]
    3050:	2800      	cmp	r0, #0
    3052:	d0e4      	beq.n	301e <lv_txt_get_width+0x4e>
    3054:	e7ea      	b.n	302c <lv_txt_get_width+0x5c>
                width += letter_space;
    3056:	4434      	add	r4, r6
    3058:	4404      	add	r4, r0
    305a:	b224      	sxth	r4, r4
    305c:	e7e6      	b.n	302c <lv_txt_get_width+0x5c>
    lv_coord_t width             = 0;
    305e:	460c      	mov	r4, r1
    3060:	e7eb      	b.n	303a <lv_txt_get_width+0x6a>
    if(txt == NULL) return 0;
    3062:	4604      	mov	r4, r0
    3064:	e7e9      	b.n	303a <lv_txt_get_width+0x6a>
    3066:	4614      	mov	r4, r2
    3068:	e7e7      	b.n	303a <lv_txt_get_width+0x6a>
    306a:	bf00      	nop
    306c:	2000000c 	.word	0x2000000c

00003070 <lv_txt_get_next_line>:
{
    3070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3074:	b091      	sub	sp, #68	; 0x44
    3076:	4699      	mov	r9, r3
    3078:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    307c:	9304      	str	r3, [sp, #16]
    307e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    if(txt == NULL) return 0;
    3082:	4607      	mov	r7, r0
    3084:	2800      	cmp	r0, #0
    3086:	d05a      	beq.n	313e <lv_txt_get_next_line+0xce>
    if(font == NULL) return 0;
    3088:	2900      	cmp	r1, #0
    308a:	f000 80dd 	beq.w	3248 <lv_txt_get_next_line+0x1d8>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
    308e:	9b04      	ldr	r3, [sp, #16]
    3090:	f013 0302 	ands.w	r3, r3, #2
    3094:	9305      	str	r3, [sp, #20]
    3096:	f647 4318 	movw	r3, #31768	; 0x7c18
    309a:	bf18      	it	ne
    309c:	4699      	movne	r9, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
    309e:	2300      	movs	r3, #0
    30a0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;                                        /* Iterating index into txt */
    30a4:	930c      	str	r3, [sp, #48]	; 0x30
    while(txt[i] != '\0' && max_width > 0) {
    30a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    30a8:	9300      	str	r3, [sp, #0]
    30aa:	eb07 0b03 	add.w	fp, r7, r3
    30ae:	5cfb      	ldrb	r3, [r7, r3]
    30b0:	2b00      	cmp	r3, #0
    30b2:	d03b      	beq.n	312c <lv_txt_get_next_line+0xbc>
    30b4:	f1b9 0f00 	cmp.w	r9, #0
    30b8:	dd38      	ble.n	312c <lv_txt_get_next_line+0xbc>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
    30ba:	9a05      	ldr	r2, [sp, #20]
    30bc:	f647 4318 	movw	r3, #31768	; 0x7c18
    30c0:	2a00      	cmp	r2, #0
    30c2:	bf08      	it	eq
    30c4:	464b      	moveq	r3, r9
    30c6:	9307      	str	r3, [sp, #28]
    letter = lv_txt_encoded_next(txt, &i_next);
    30c8:	4b60      	ldr	r3, [pc, #384]	; (324c <lv_txt_get_next_line+0x1dc>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
    30ca:	2500      	movs	r5, #0
    letter = lv_txt_encoded_next(txt, &i_next);
    30cc:	681b      	ldr	r3, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
    30ce:	950f      	str	r5, [sp, #60]	; 0x3c
    30d0:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
    letter = lv_txt_encoded_next(txt, &i_next);
    30d4:	a90e      	add	r1, sp, #56	; 0x38
    30d6:	4658      	mov	r0, fp
    30d8:	4798      	blx	r3
    i_next_next = i_next;
    30da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    30dc:	930f      	str	r3, [sp, #60]	; 0x3c
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    30de:	9b04      	ldr	r3, [sp, #16]
    uint32_t break_letter_count = 0; /* Number of characters up to the long word break point */
    30e0:	9501      	str	r5, [sp, #4]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    30e2:	f003 0301 	and.w	r3, r3, #1
    letter = lv_txt_encoded_next(txt, &i_next);
    30e6:	4680      	mov	r8, r0
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
    30e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
    30ec:	46aa      	mov	sl, r5
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
    30ee:	462e      	mov	r6, r5
    uint32_t letter_next = 0; /* Letter at i_next */
    30f0:	462a      	mov	r2, r5
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    30f2:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
    30f4:	990d      	ldr	r1, [sp, #52]	; 0x34
    30f6:	f81b 1001 	ldrb.w	r1, [fp, r1]
    30fa:	bb19      	cbnz	r1, 3144 <lv_txt_get_next_line+0xd4>
    if( break_index == NO_BREAK_FOUND ) {
    30fc:	1c63      	adds	r3, r4, #1
    30fe:	d070      	beq.n	31e2 <lv_txt_get_next_line+0x172>
    if(word_len < LV_TXT_LINE_BREAK_LONG_LEN) {
    3100:	f1ba 0f0b 	cmp.w	sl, #11
    3104:	d87a      	bhi.n	31fc <lv_txt_get_next_line+0x18c>
        if( force ) return break_index;
    3106:	9b00      	ldr	r3, [sp, #0]
    3108:	2b00      	cmp	r3, #0
    310a:	f040 8088 	bne.w	321e <lv_txt_get_next_line+0x1ae>
    310e:	b2a4      	uxth	r4, r4
        max_width -= word_w;
    3110:	eba9 0905 	sub.w	r9, r9, r5
    3114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3116:	fa0f f989 	sxth.w	r9, r9
        if( advance == 0 ){
    311a:	2c00      	cmp	r4, #0
    311c:	f040 8082 	bne.w	3224 <lv_txt_get_next_line+0x1b4>
            if(i == 0) lv_txt_encoded_next(txt, &i); // prevent inf loops
    3120:	b95b      	cbnz	r3, 313a <lv_txt_get_next_line+0xca>
    3122:	4b4a      	ldr	r3, [pc, #296]	; (324c <lv_txt_get_next_line+0x1dc>)
    3124:	a90c      	add	r1, sp, #48	; 0x30
    3126:	681b      	ldr	r3, [r3, #0]
    3128:	4638      	mov	r0, r7
    312a:	4798      	blx	r3
    if(i == 0) {
    312c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    312e:	b923      	cbnz	r3, 313a <lv_txt_get_next_line+0xca>
        lv_txt_encoded_next(txt, &i);
    3130:	4b46      	ldr	r3, [pc, #280]	; (324c <lv_txt_get_next_line+0x1dc>)
    3132:	a90c      	add	r1, sp, #48	; 0x30
    3134:	681b      	ldr	r3, [r3, #0]
    3136:	4638      	mov	r0, r7
    3138:	4798      	blx	r3
    return i;
    313a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
}
    313e:	b011      	add	sp, #68	; 0x44
    3140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        letter_next = lv_txt_encoded_next(txt, &i_next_next);
    3144:	4b41      	ldr	r3, [pc, #260]	; (324c <lv_txt_get_next_line+0x1dc>)
    3146:	a90f      	add	r1, sp, #60	; 0x3c
    3148:	681a      	ldr	r2, [r3, #0]
    314a:	4658      	mov	r0, fp
    314c:	4790      	blx	r2
        word_len++;
    314e:	f10a 0301 	add.w	r3, sl, #1
    3152:	9306      	str	r3, [sp, #24]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    3154:	9b08      	ldr	r3, [sp, #32]
        letter_next = lv_txt_encoded_next(txt, &i_next_next);
    3156:	4602      	mov	r2, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    3158:	b17b      	cbz	r3, 317a <lv_txt_get_next_line+0x10a>
    315a:	9009      	str	r0, [sp, #36]	; 0x24
            if(lv_txt_is_cmd(cmd_state, letter) != false) {
    315c:	4641      	mov	r1, r8
    315e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    3162:	f7ff ff17 	bl	2f94 <lv_txt_is_cmd>
    3166:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3168:	b138      	cbz	r0, 317a <lv_txt_get_next_line+0x10a>
        i = i_next;
    316a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    316c:	930d      	str	r3, [sp, #52]	; 0x34
        i_next = i_next_next;
    316e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
    3170:	f8dd a018 	ldr.w	sl, [sp, #24]
        i_next = i_next_next;
    3174:	930e      	str	r3, [sp, #56]	; 0x38
        letter_next = lv_txt_encoded_next(txt, &i_next_next);
    3176:	4690      	mov	r8, r2
    3178:	e7bc      	b.n	30f4 <lv_txt_get_next_line+0x84>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
    317a:	9802      	ldr	r0, [sp, #8]
    317c:	9209      	str	r2, [sp, #36]	; 0x24
    317e:	4641      	mov	r1, r8
    3180:	f006 f9a6 	bl	94d0 <lv_font_get_glyph_width>
        cur_w += letter_w;
    3184:	4406      	add	r6, r0
        if(letter_w > 0) {
    3186:	b200      	sxth	r0, r0
    3188:	2800      	cmp	r0, #0
            cur_w += letter_space;
    318a:	bfc8      	it	gt
    318c:	9b03      	ldrgt	r3, [sp, #12]
        if(letter_w > 0) {
    318e:	9a09      	ldr	r2, [sp, #36]	; 0x24
        cur_w += letter_w;
    3190:	b2b6      	uxth	r6, r6
            cur_w += letter_space;
    3192:	bfc4      	itt	gt
    3194:	18f6      	addgt	r6, r6, r3
    3196:	b2b6      	uxthgt	r6, r6
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
    3198:	1c60      	adds	r0, r4, #1
    319a:	b236      	sxth	r6, r6
    319c:	d107      	bne.n	31ae <lv_txt_get_next_line+0x13e>
    319e:	9b03      	ldr	r3, [sp, #12]
    31a0:	1af1      	subs	r1, r6, r3
    31a2:	9b07      	ldr	r3, [sp, #28]
    31a4:	4299      	cmp	r1, r3
            break_index = i; 
    31a6:	bfc4      	itt	gt
    31a8:	9c0d      	ldrgt	r4, [sp, #52]	; 0x34
    31aa:	f8cd a004 	strgt.w	sl, [sp, #4]
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
    31ae:	f1b8 0f0a 	cmp.w	r8, #10
    31b2:	d010      	beq.n	31d6 <lv_txt_get_next_line+0x166>
    31b4:	f1b8 0f0d 	cmp.w	r8, #13
    31b8:	d00d      	beq.n	31d6 <lv_txt_get_next_line+0x166>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
    31ba:	4b25      	ldr	r3, [pc, #148]	; (3250 <lv_txt_get_next_line+0x1e0>)
    31bc:	2100      	movs	r1, #0
    31be:	b2c8      	uxtb	r0, r1
    31c0:	5c18      	ldrb	r0, [r3, r0]
    31c2:	b920      	cbnz	r0, 31ce <lv_txt_get_next_line+0x15e>
        if( word_w_ptr != NULL && break_index == NO_BREAK_FOUND ) *word_w_ptr = cur_w;
    31c4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    31c8:	bf08      	it	eq
    31ca:	4635      	moveq	r5, r6
    31cc:	e7cd      	b.n	316a <lv_txt_get_next_line+0xfa>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
    31ce:	4580      	cmp	r8, r0
    31d0:	f101 0101 	add.w	r1, r1, #1
    31d4:	d1f3      	bne.n	31be <lv_txt_get_next_line+0x14e>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
    31d6:	990d      	ldr	r1, [sp, #52]	; 0x34
    31d8:	2900      	cmp	r1, #0
    31da:	d18f      	bne.n	30fc <lv_txt_get_next_line+0x8c>
    31dc:	1c61      	adds	r1, r4, #1
    31de:	d18f      	bne.n	3100 <lv_txt_get_next_line+0x90>
    31e0:	4635      	mov	r5, r6
        if( word_len == 0 || (letter == '\r' && letter_next == '\n') ) i = i_next;
    31e2:	f1ba 0f00 	cmp.w	sl, #0
    31e6:	d004      	beq.n	31f2 <lv_txt_get_next_line+0x182>
    31e8:	f1b8 0f0d 	cmp.w	r8, #13
    31ec:	d103      	bne.n	31f6 <lv_txt_get_next_line+0x186>
    31ee:	2a0a      	cmp	r2, #10
    31f0:	d101      	bne.n	31f6 <lv_txt_get_next_line+0x186>
    31f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    31f4:	930d      	str	r3, [sp, #52]	; 0x34
    return i;
    31f6:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
    31fa:	e789      	b.n	3110 <lv_txt_get_next_line+0xa0>
    if(break_letter_count < LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN) {
    31fc:	9b01      	ldr	r3, [sp, #4]
    31fe:	2b02      	cmp	r3, #2
    3200:	d981      	bls.n	3106 <lv_txt_get_next_line+0x96>
        i = break_index;
    3202:	940d      	str	r4, [sp, #52]	; 0x34
        int32_t n_move = LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN - (word_len - break_letter_count);
    3204:	9c01      	ldr	r4, [sp, #4]
    3206:	3403      	adds	r4, #3
    3208:	eba4 040a 	sub.w	r4, r4, sl
        for(;n_move>0; n_move--){
    320c:	2c00      	cmp	r4, #0
    320e:	ddf2      	ble.n	31f6 <lv_txt_get_next_line+0x186>
            lv_txt_encoded_prev(txt, &i);
    3210:	4b10      	ldr	r3, [pc, #64]	; (3254 <lv_txt_get_next_line+0x1e4>)
    3212:	a90d      	add	r1, sp, #52	; 0x34
    3214:	681a      	ldr	r2, [r3, #0]
    3216:	4658      	mov	r0, fp
    3218:	4790      	blx	r2
        for(;n_move>0; n_move--){
    321a:	3c01      	subs	r4, #1
    321c:	e7f6      	b.n	320c <lv_txt_get_next_line+0x19c>
        if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
    321e:	2500      	movs	r5, #0
        return 0;
    3220:	462c      	mov	r4, r5
    3222:	e775      	b.n	3110 <lv_txt_get_next_line+0xa0>
        i += advance;
    3224:	441c      	add	r4, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
    3226:	783b      	ldrb	r3, [r7, #0]
        i += advance;
    3228:	940c      	str	r4, [sp, #48]	; 0x30
        if(txt[0] == '\n' || txt[0] == '\r') break;
    322a:	2b0a      	cmp	r3, #10
    322c:	f43f af7e 	beq.w	312c <lv_txt_get_next_line+0xbc>
    3230:	2b0d      	cmp	r3, #13
    3232:	f43f af7b 	beq.w	312c <lv_txt_get_next_line+0xbc>
        if(txt[i] == '\n' || txt[i] == '\r'){
    3236:	5d3b      	ldrb	r3, [r7, r4]
    3238:	2b0a      	cmp	r3, #10
    323a:	d002      	beq.n	3242 <lv_txt_get_next_line+0x1d2>
    323c:	2b0d      	cmp	r3, #13
    323e:	f47f af32 	bne.w	30a6 <lv_txt_get_next_line+0x36>
            i++;  /* Include the following newline in the current line */
    3242:	3401      	adds	r4, #1
    3244:	940c      	str	r4, [sp, #48]	; 0x30
            break;
    3246:	e771      	b.n	312c <lv_txt_get_next_line+0xbc>
    if(txt == NULL) return 0;
    3248:	9802      	ldr	r0, [sp, #8]
    324a:	e778      	b.n	313e <lv_txt_get_next_line+0xce>
    324c:	2000000c 	.word	0x2000000c
    3250:	0001a9b0 	.word	0x0001a9b0
    3254:	20000010 	.word	0x20000010

00003258 <lv_txt_get_size>:
{
    3258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    325c:	b087      	sub	sp, #28
    size_res->x = 0;
    325e:	2500      	movs	r5, #0
{
    3260:	4698      	mov	r8, r3
    3262:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    3266:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
    326a:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
    326e:	9304      	str	r3, [sp, #16]
    3270:	4604      	mov	r4, r0
    3272:	4616      	mov	r6, r2
    size_res->x = 0;
    3274:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
    3276:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
    3278:	460f      	mov	r7, r1
    327a:	b1f9      	cbz	r1, 32bc <lv_txt_get_size+0x64>
    if(font == NULL) return;
    327c:	b1f2      	cbz	r2, 32bc <lv_txt_get_size+0x64>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
    327e:	f013 0f02 	tst.w	r3, #2
    3282:	f647 4318 	movw	r3, #31768	; 0x7c18
    3286:	bf18      	it	ne
    3288:	469a      	movne	sl, r3
    uint8_t letter_height = lv_font_get_line_height(font);
    328a:	7a13      	ldrb	r3, [r2, #8]
    328c:	9303      	str	r3, [sp, #12]
        size_res->y += line_space;
    328e:	445b      	add	r3, fp
    3290:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
    3292:	5d7b      	ldrb	r3, [r7, r5]
    3294:	eb07 0905 	add.w	r9, r7, r5
    3298:	b99b      	cbnz	r3, 32c2 <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
    329a:	b155      	cbz	r5, 32b2 <lv_txt_get_size+0x5a>
    329c:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    32a0:	2b0a      	cmp	r3, #10
    32a2:	d001      	beq.n	32a8 <lv_txt_get_size+0x50>
    32a4:	2b0d      	cmp	r3, #13
    32a6:	d104      	bne.n	32b2 <lv_txt_get_size+0x5a>
        size_res->y += letter_height + line_space;
    32a8:	9b03      	ldr	r3, [sp, #12]
    32aa:	8862      	ldrh	r2, [r4, #2]
    32ac:	445b      	add	r3, fp
    32ae:	4413      	add	r3, r2
    32b0:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
    32b2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    32b6:	bb03      	cbnz	r3, 32fa <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
    32b8:	9b03      	ldr	r3, [sp, #12]
        size_res->y -= line_space;
    32ba:	8063      	strh	r3, [r4, #2]
}
    32bc:	b007      	add	sp, #28
    32be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
    32c2:	9b04      	ldr	r3, [sp, #16]
    32c4:	9300      	str	r3, [sp, #0]
    32c6:	4642      	mov	r2, r8
    32c8:	4653      	mov	r3, sl
    32ca:	4631      	mov	r1, r6
    32cc:	4648      	mov	r0, r9
    32ce:	f7ff fecf 	bl	3070 <lv_txt_get_next_line>
        size_res->y += line_space;
    32d2:	8863      	ldrh	r3, [r4, #2]
    32d4:	9a05      	ldr	r2, [sp, #20]
    32d6:	4413      	add	r3, r2
    32d8:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
    32da:	9b04      	ldr	r3, [sp, #16]
    32dc:	9300      	str	r3, [sp, #0]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
    32de:	4601      	mov	r1, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
    32e0:	4643      	mov	r3, r8
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
    32e2:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
    32e4:	4632      	mov	r2, r6
    32e6:	4648      	mov	r0, r9
    32e8:	f7ff fe72 	bl	2fd0 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
    32ec:	f9b4 3000 	ldrsh.w	r3, [r4]
    32f0:	4298      	cmp	r0, r3
    32f2:	bfb8      	it	lt
    32f4:	4618      	movlt	r0, r3
    32f6:	8020      	strh	r0, [r4, #0]
        line_start  = new_line_start;
    32f8:	e7cb      	b.n	3292 <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
    32fa:	eba3 030b 	sub.w	r3, r3, fp
    32fe:	e7dc      	b.n	32ba <lv_txt_get_size+0x62>

00003300 <lv_mem_init>:
    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
    full->header.s.used = 0;
    /*The total mem size id reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
#endif
}
    3300:	4770      	bx	lr
	...

00003304 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
    3304:	b510      	push	{r4, lr}
    if(size == 0) {
    3306:	4604      	mov	r4, r0
    3308:	b170      	cbz	r0, 3328 <lv_mem_alloc+0x24>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
    330a:	0783      	lsls	r3, r0, #30
        size = size & (~0x3);
    330c:	bf1c      	itt	ne
    330e:	f020 0403 	bicne.w	r4, r0, #3
        size += 4;
    3312:	3404      	addne	r4, #4
/*Use custom, user defined malloc function*/
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
    3314:	1d20      	adds	r0, r4, #4
    3316:	f010 ffbd 	bl	14294 <malloc>
    if(alloc != NULL) {
    331a:	b120      	cbz	r0, 3326 <lv_mem_alloc+0x22>
        ((lv_mem_ent_t *)alloc)->header.s.d_size = size;
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
    331c:	0064      	lsls	r4, r4, #1
    331e:	f044 0401 	orr.w	r4, r4, #1
    3322:	f840 4b04 	str.w	r4, [r0], #4
#endif

    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return alloc;
}
    3326:	bd10      	pop	{r4, pc}
        return &zero_mem;
    3328:	4800      	ldr	r0, [pc, #0]	; (332c <lv_mem_alloc+0x28>)
    332a:	e7fc      	b.n	3326 <lv_mem_alloc+0x22>
    332c:	20004c84 	.word	0x20004c84

00003330 <lv_mem_free>:
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
    if(data == &zero_mem) return;
    3330:	4b06      	ldr	r3, [pc, #24]	; (334c <lv_mem_free+0x1c>)
    3332:	4298      	cmp	r0, r3
    3334:	d008      	beq.n	3348 <lv_mem_free+0x18>
    if(data == NULL) return;
    3336:	b138      	cbz	r0, 3348 <lv_mem_free+0x18>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
    e->header.s.used = 0;
    3338:	f810 3c04 	ldrb.w	r3, [r0, #-4]
    333c:	f36f 0300 	bfc	r3, #0, #1
    3340:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
    }
#endif
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
    3344:	f010 bfae 	b.w	142a4 <free>
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
    3348:	4770      	bx	lr
    334a:	bf00      	nop
    334c:	20004c84 	.word	0x20004c84

00003350 <lv_mem_get_size>:

#if LV_ENABLE_GC == 0

uint32_t lv_mem_get_size(const void * data)
{
    if(data == NULL) return 0;
    3350:	b140      	cbz	r0, 3364 <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
    3352:	4b05      	ldr	r3, [pc, #20]	; (3368 <lv_mem_get_size+0x18>)
    3354:	4298      	cmp	r0, r3
    3356:	d004      	beq.n	3362 <lv_mem_get_size+0x12>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));

    return e->header.s.d_size;
    3358:	f850 0c04 	ldr.w	r0, [r0, #-4]
    335c:	f3c0 005e 	ubfx	r0, r0, #1, #31
    3360:	4770      	bx	lr
    if(data == NULL) return 0;
    3362:	2000      	movs	r0, #0
}
    3364:	4770      	bx	lr
    3366:	bf00      	nop
    3368:	20004c84 	.word	0x20004c84

0000336c <lv_mem_realloc>:
{
    336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    336e:	460e      	mov	r6, r1
    if(data_p != NULL) {
    3370:	4604      	mov	r4, r0
    3372:	b130      	cbz	r0, 3382 <lv_mem_realloc+0x16>
        if(e->header.s.used == 0) {
    3374:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
    3378:	f013 0f01 	tst.w	r3, #1
    337c:	bf14      	ite	ne
    337e:	4604      	movne	r4, r0
    3380:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
    3382:	4620      	mov	r0, r4
    3384:	f7ff ffe4 	bl	3350 <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
    3388:	42b0      	cmp	r0, r6
    uint32_t old_size = lv_mem_get_size(data_p);
    338a:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
    338c:	d012      	beq.n	33b4 <lv_mem_realloc+0x48>
    new_p = lv_mem_alloc(new_size);
    338e:	4630      	mov	r0, r6
    3390:	f7ff ffb8 	bl	3304 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
    3394:	4605      	mov	r5, r0
    3396:	b158      	cbz	r0, 33b0 <lv_mem_realloc+0x44>
    3398:	b154      	cbz	r4, 33b0 <lv_mem_realloc+0x44>
        if(old_size != 0) {
    339a:	b14f      	cbz	r7, 33b0 <lv_mem_realloc+0x44>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
    339c:	42b7      	cmp	r7, r6
    339e:	463a      	mov	r2, r7
    33a0:	4621      	mov	r1, r4
    33a2:	bf28      	it	cs
    33a4:	4632      	movcs	r2, r6
    33a6:	f010 ff85 	bl	142b4 <memcpy>
            lv_mem_free(data_p);
    33aa:	4620      	mov	r0, r4
    33ac:	f7ff ffc0 	bl	3330 <lv_mem_free>
}
    33b0:	4628      	mov	r0, r5
    33b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33b4:	4625      	mov	r5, r4
    33b6:	e7fb      	b.n	33b0 <lv_mem_realloc+0x44>

000033b8 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
    33b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33bc:	9d08      	ldr	r5, [sp, #32]
    33be:	4680      	mov	r8, r0
    33c0:	460f      	mov	r7, r1
    33c2:	4614      	mov	r4, r2
    33c4:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
    33c6:	b90c      	cbnz	r4, 33cc <lv_utils_bsearch+0x14>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
    33c8:	4626      	mov	r6, r4
    33ca:	e012      	b.n	33f2 <lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
    33cc:	ea4f 0a54 	mov.w	sl, r4, lsr #1
    33d0:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
    33d4:	4631      	mov	r1, r6
    33d6:	4640      	mov	r0, r8
    33d8:	47a8      	blx	r5
    33da:	2800      	cmp	r0, #0
    33dc:	dd08      	ble.n	33f0 <lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
    33de:	43e4      	mvns	r4, r4
    33e0:	f004 0401 	and.w	r4, r4, #1
    33e4:	ebaa 0a04 	sub.w	sl, sl, r4
            base = (middle += size);
    33e8:	eb06 0709 	add.w	r7, r6, r9
{
    33ec:	4654      	mov	r4, sl
    33ee:	e7ea      	b.n	33c6 <lv_utils_bsearch+0xe>
        } else if(c < 0) {
    33f0:	d1fc      	bne.n	33ec <lv_utils_bsearch+0x34>
}
    33f2:	4630      	mov	r0, r6
    33f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000033f8 <node_set_next.isra.0>:
 * Set the 'next node pointer' of a node
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
    33f8:	b507      	push	{r0, r1, r2, lr}
    33fa:	9201      	str	r2, [sp, #4]
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
    33fc:	b149      	cbz	r1, 3412 <node_set_next.isra.0+0x1a>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
    33fe:	6800      	ldr	r0, [r0, #0]
    3400:	3004      	adds	r0, #4
    3402:	4408      	add	r0, r1
    3404:	4611      	mov	r1, r2
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
    3406:	2204      	movs	r2, #4
    if(next)
    3408:	b131      	cbz	r1, 3418 <node_set_next.isra.0+0x20>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
    340a:	eb0d 0102 	add.w	r1, sp, r2
    340e:	f010 ff51 	bl	142b4 <memcpy>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
}
    3412:	b003      	add	sp, #12
    3414:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
    3418:	f010 ff5a 	bl	142d0 <memset>
    341c:	e7f9      	b.n	3412 <node_set_next.isra.0+0x1a>

0000341e <node_set_prev.isra.0>:
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
    341e:	b507      	push	{r0, r1, r2, lr}
    3420:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
    3422:	b141      	cbz	r1, 3436 <node_set_prev.isra.0+0x18>
    if(prev)
    3424:	6800      	ldr	r0, [r0, #0]
    3426:	4408      	add	r0, r1
    3428:	4611      	mov	r1, r2
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
    342a:	2204      	movs	r2, #4
    if(prev)
    342c:	b131      	cbz	r1, 343c <node_set_prev.isra.0+0x1e>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
    342e:	eb0d 0102 	add.w	r1, sp, r2
    3432:	f010 ff3f 	bl	142b4 <memcpy>
}
    3436:	b003      	add	sp, #12
    3438:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
    343c:	f010 ff48 	bl	142d0 <memset>
    3440:	e7f9      	b.n	3436 <node_set_prev.isra.0+0x18>

00003442 <lv_ll_init>:
    ll_p->head = NULL;
    3442:	2300      	movs	r3, #0
    ll_p->tail = NULL;
    3444:	e9c0 3301 	strd	r3, r3, [r0, #4]
    if(node_size & 0x3) {
    3448:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
    344a:	bf1c      	itt	ne
    344c:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
    3450:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
    3452:	6001      	str	r1, [r0, #0]
}
    3454:	4770      	bx	lr

00003456 <lv_ll_ins_head>:
{
    3456:	b538      	push	{r3, r4, r5, lr}
    3458:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
    345a:	6800      	ldr	r0, [r0, #0]
    345c:	3008      	adds	r0, #8
    345e:	f7ff ff51 	bl	3304 <lv_mem_alloc>
    if(n_new != NULL) {
    3462:	4605      	mov	r5, r0
    3464:	b198      	cbz	r0, 348e <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
    3466:	4601      	mov	r1, r0
    3468:	2200      	movs	r2, #0
    346a:	4620      	mov	r0, r4
    346c:	f7ff ffd7 	bl	341e <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
    3470:	4629      	mov	r1, r5
    3472:	6862      	ldr	r2, [r4, #4]
    3474:	4620      	mov	r0, r4
    3476:	f7ff ffbf 	bl	33f8 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
    347a:	6861      	ldr	r1, [r4, #4]
    347c:	b119      	cbz	r1, 3486 <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
    347e:	462a      	mov	r2, r5
    3480:	4620      	mov	r0, r4
    3482:	f7ff ffcc 	bl	341e <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
    3486:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
    3488:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
    348a:	b903      	cbnz	r3, 348e <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
    348c:	60a5      	str	r5, [r4, #8]
}
    348e:	4628      	mov	r0, r5
    3490:	bd38      	pop	{r3, r4, r5, pc}

00003492 <lv_ll_ins_tail>:
{
    3492:	b538      	push	{r3, r4, r5, lr}
    3494:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
    3496:	6800      	ldr	r0, [r0, #0]
    3498:	3008      	adds	r0, #8
    349a:	f7ff ff33 	bl	3304 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
    349e:	4605      	mov	r5, r0
    34a0:	b198      	cbz	r0, 34ca <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
    34a2:	4601      	mov	r1, r0
    34a4:	2200      	movs	r2, #0
    34a6:	4620      	mov	r0, r4
    34a8:	f7ff ffa6 	bl	33f8 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
    34ac:	4629      	mov	r1, r5
    34ae:	68a2      	ldr	r2, [r4, #8]
    34b0:	4620      	mov	r0, r4
    34b2:	f7ff ffb4 	bl	341e <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
    34b6:	68a1      	ldr	r1, [r4, #8]
    34b8:	b119      	cbz	r1, 34c2 <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
    34ba:	462a      	mov	r2, r5
    34bc:	4620      	mov	r0, r4
    34be:	f7ff ff9b 	bl	33f8 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
    34c2:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
    34c4:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
    34c6:	b903      	cbnz	r3, 34ca <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
    34c8:	6065      	str	r5, [r4, #4]
}
    34ca:	4628      	mov	r0, r5
    34cc:	bd38      	pop	{r3, r4, r5, pc}

000034ce <lv_ll_get_head>:
    if(ll_p != NULL) {
    34ce:	b100      	cbz	r0, 34d2 <lv_ll_get_head+0x4>
        head = ll_p->head;
    34d0:	6840      	ldr	r0, [r0, #4]
}
    34d2:	4770      	bx	lr

000034d4 <lv_ll_get_tail>:
    if(ll_p != NULL) {
    34d4:	b100      	cbz	r0, 34d8 <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
    34d6:	6880      	ldr	r0, [r0, #8]
}
    34d8:	4770      	bx	lr

000034da <lv_ll_get_next>:
{
    34da:	b507      	push	{r0, r1, r2, lr}
    void * next = NULL;
    34dc:	2300      	movs	r3, #0
    34de:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
    34e0:	b138      	cbz	r0, 34f2 <lv_ll_get_next+0x18>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
    34e2:	6803      	ldr	r3, [r0, #0]
    34e4:	2204      	movs	r2, #4
    34e6:	3304      	adds	r3, #4
    34e8:	4419      	add	r1, r3
    34ea:	eb0d 0002 	add.w	r0, sp, r2
    34ee:	f010 fee1 	bl	142b4 <memcpy>
}
    34f2:	9801      	ldr	r0, [sp, #4]
    34f4:	b003      	add	sp, #12
    34f6:	f85d fb04 	ldr.w	pc, [sp], #4

000034fa <lv_ll_get_prev>:
{
    34fa:	b507      	push	{r0, r1, r2, lr}
    void * prev = NULL;
    34fc:	2300      	movs	r3, #0
    34fe:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
    3500:	b130      	cbz	r0, 3510 <lv_ll_get_prev+0x16>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
    3502:	6803      	ldr	r3, [r0, #0]
    3504:	2204      	movs	r2, #4
    3506:	4419      	add	r1, r3
    3508:	eb0d 0002 	add.w	r0, sp, r2
    350c:	f010 fed2 	bl	142b4 <memcpy>
}
    3510:	9801      	ldr	r0, [sp, #4]
    3512:	b003      	add	sp, #12
    3514:	f85d fb04 	ldr.w	pc, [sp], #4

00003518 <lv_ll_ins_prev>:
{
    3518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    351a:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
    351c:	4605      	mov	r5, r0
    351e:	b360      	cbz	r0, 357a <lv_ll_ins_prev+0x62>
    3520:	b369      	cbz	r1, 357e <lv_ll_ins_prev+0x66>
    if(lv_ll_get_head(ll_p) == n_act) {
    3522:	6843      	ldr	r3, [r0, #4]
    3524:	4299      	cmp	r1, r3
    3526:	d107      	bne.n	3538 <lv_ll_ins_prev+0x20>
        n_new = lv_ll_ins_head(ll_p);
    3528:	f7ff ff95 	bl	3456 <lv_ll_ins_head>
        if(n_new == NULL) return NULL;
    352c:	2800      	cmp	r0, #0
    352e:	bf38      	it	cc
    3530:	2000      	movcc	r0, #0
    3532:	4604      	mov	r4, r0
}
    3534:	4620      	mov	r0, r4
    3536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
    3538:	6800      	ldr	r0, [r0, #0]
    353a:	3008      	adds	r0, #8
    353c:	f7ff fee2 	bl	3304 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
    3540:	4604      	mov	r4, r0
    3542:	2800      	cmp	r0, #0
    3544:	d0f6      	beq.n	3534 <lv_ll_ins_prev+0x1c>
        n_prev = lv_ll_get_prev(ll_p, n_act);
    3546:	4631      	mov	r1, r6
    3548:	4628      	mov	r0, r5
    354a:	f7ff ffd6 	bl	34fa <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
    354e:	4622      	mov	r2, r4
        n_prev = lv_ll_get_prev(ll_p, n_act);
    3550:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
    3552:	4601      	mov	r1, r0
    3554:	4628      	mov	r0, r5
    3556:	f7ff ff4f 	bl	33f8 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
    355a:	463a      	mov	r2, r7
    355c:	4621      	mov	r1, r4
    355e:	4628      	mov	r0, r5
    3560:	f7ff ff5d 	bl	341e <node_set_prev.isra.0>
        node_set_prev(ll_p, n_act, n_new);
    3564:	4622      	mov	r2, r4
    3566:	4631      	mov	r1, r6
    3568:	4628      	mov	r0, r5
    356a:	f7ff ff58 	bl	341e <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, n_act);
    356e:	4632      	mov	r2, r6
    3570:	4621      	mov	r1, r4
    3572:	4628      	mov	r0, r5
    3574:	f7ff ff40 	bl	33f8 <node_set_next.isra.0>
    3578:	e7dc      	b.n	3534 <lv_ll_ins_prev+0x1c>
    if(NULL == ll_p || NULL == n_act) return NULL;
    357a:	4604      	mov	r4, r0
    357c:	e7da      	b.n	3534 <lv_ll_ins_prev+0x1c>
    357e:	460c      	mov	r4, r1
    3580:	e7d8      	b.n	3534 <lv_ll_ins_prev+0x1c>

00003582 <lv_ll_rem>:
{
    3582:	b570      	push	{r4, r5, r6, lr}
    3584:	460d      	mov	r5, r1
    if(ll_p != NULL) {
    3586:	4604      	mov	r4, r0
    3588:	b308      	cbz	r0, 35ce <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
    358a:	6843      	ldr	r3, [r0, #4]
    358c:	4299      	cmp	r1, r3
    358e:	d10e      	bne.n	35ae <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
    3590:	4629      	mov	r1, r5
    3592:	4620      	mov	r0, r4
    3594:	f7ff ffa1 	bl	34da <lv_ll_get_next>
    3598:	4601      	mov	r1, r0
    359a:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
    359c:	b908      	cbnz	r0, 35a2 <lv_ll_rem+0x20>
            ll_p->tail = NULL;
    359e:	60a0      	str	r0, [r4, #8]
}
    35a0:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
    35a2:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
    35a4:	4620      	mov	r0, r4
}
    35a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
    35aa:	f7ff bf38 	b.w	341e <node_set_prev.isra.0>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
    35ae:	6883      	ldr	r3, [r0, #8]
    35b0:	4299      	cmp	r1, r3
    35b2:	d10e      	bne.n	35d2 <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
    35b4:	f7ff ffa1 	bl	34fa <lv_ll_get_prev>
    35b8:	4601      	mov	r1, r0
    35ba:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
    35bc:	b908      	cbnz	r0, 35c2 <lv_ll_rem+0x40>
            ll_p->head = NULL;
    35be:	6060      	str	r0, [r4, #4]
    35c0:	e7ee      	b.n	35a0 <lv_ll_rem+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
    35c2:	4620      	mov	r0, r4
    35c4:	2200      	movs	r2, #0
}
    35c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
    35ca:	f7ff bf15 	b.w	33f8 <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
    35ce:	2900      	cmp	r1, #0
    35d0:	d0de      	beq.n	3590 <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
    35d2:	4629      	mov	r1, r5
    35d4:	4620      	mov	r0, r4
    35d6:	f7ff ff90 	bl	34fa <lv_ll_get_prev>
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
    35da:	4629      	mov	r1, r5
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
    35dc:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
    35de:	4620      	mov	r0, r4
    35e0:	f7ff ff7b 	bl	34da <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
    35e4:	4631      	mov	r1, r6
    35e6:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
    35e8:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
    35ea:	4620      	mov	r0, r4
    35ec:	f7ff ff04 	bl	33f8 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
    35f0:	4632      	mov	r2, r6
    35f2:	4629      	mov	r1, r5
    35f4:	e7d6      	b.n	35a4 <lv_ll_rem+0x22>

000035f6 <lv_ll_clear>:
{
    35f6:	b570      	push	{r4, r5, r6, lr}
    if(ll_p != NULL) {
    35f8:	4604      	mov	r4, r0
    35fa:	b108      	cbz	r0, 3600 <lv_ll_clear+0xa>
        head = ll_p->head;
    35fc:	6845      	ldr	r5, [r0, #4]
    while(i != NULL) {
    35fe:	b905      	cbnz	r5, 3602 <lv_ll_clear+0xc>
}
    3600:	bd70      	pop	{r4, r5, r6, pc}
        i_next = lv_ll_get_next(ll_p, i);
    3602:	4629      	mov	r1, r5
    3604:	4620      	mov	r0, r4
    3606:	f7ff ff68 	bl	34da <lv_ll_get_next>
        lv_ll_rem(ll_p, i);
    360a:	4629      	mov	r1, r5
        i_next = lv_ll_get_next(ll_p, i);
    360c:	4606      	mov	r6, r0
        lv_ll_rem(ll_p, i);
    360e:	4620      	mov	r0, r4
    3610:	f7ff ffb7 	bl	3582 <lv_ll_rem>
        lv_mem_free(i);
    3614:	4628      	mov	r0, r5
    3616:	f7ff fe8b 	bl	3330 <lv_mem_free>
        i = i_next;
    361a:	4635      	mov	r5, r6
    361c:	e7ef      	b.n	35fe <lv_ll_clear+0x8>

0000361e <lv_ll_chg_list>:
{
    361e:	b570      	push	{r4, r5, r6, lr}
    3620:	460c      	mov	r4, r1
    3622:	461e      	mov	r6, r3
    lv_ll_rem(ll_ori_p, node);
    3624:	4611      	mov	r1, r2
{
    3626:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
    3628:	f7ff ffab 	bl	3582 <lv_ll_rem>
    if(head) {
    362c:	b1a6      	cbz	r6, 3658 <lv_ll_chg_list+0x3a>
        node_set_prev(ll_new_p, node, NULL);
    362e:	2200      	movs	r2, #0
    3630:	4629      	mov	r1, r5
    3632:	4620      	mov	r0, r4
    3634:	f7ff fef3 	bl	341e <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, ll_new_p->head);
    3638:	4629      	mov	r1, r5
    363a:	6862      	ldr	r2, [r4, #4]
    363c:	4620      	mov	r0, r4
    363e:	f7ff fedb 	bl	33f8 <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
    3642:	6861      	ldr	r1, [r4, #4]
    3644:	b119      	cbz	r1, 364e <lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
    3646:	462a      	mov	r2, r5
    3648:	4620      	mov	r0, r4
    364a:	f7ff fee8 	bl	341e <node_set_prev.isra.0>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
    364e:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
    3650:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
    3652:	b903      	cbnz	r3, 3656 <lv_ll_chg_list+0x38>
            ll_new_p->tail = node;
    3654:	60a5      	str	r5, [r4, #8]
}
    3656:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
    3658:	68a2      	ldr	r2, [r4, #8]
    365a:	4629      	mov	r1, r5
    365c:	4620      	mov	r0, r4
    365e:	f7ff fede 	bl	341e <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, NULL);
    3662:	4629      	mov	r1, r5
    3664:	4632      	mov	r2, r6
    3666:	4620      	mov	r0, r4
    3668:	f7ff fec6 	bl	33f8 <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
    366c:	68a1      	ldr	r1, [r4, #8]
    366e:	b119      	cbz	r1, 3678 <lv_ll_chg_list+0x5a>
            node_set_next(ll_new_p, ll_new_p->tail, node);
    3670:	462a      	mov	r2, r5
    3672:	4620      	mov	r0, r4
    3674:	f7ff fec0 	bl	33f8 <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
    3678:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
    367a:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
    367c:	2b00      	cmp	r3, #0
    367e:	d1ea      	bne.n	3656 <lv_ll_chg_list+0x38>
            ll_new_p->head = node;
    3680:	6065      	str	r5, [r4, #4]
}
    3682:	e7e8      	b.n	3656 <lv_ll_chg_list+0x38>

00003684 <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
    3684:	4291      	cmp	r1, r2
{
    3686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3688:	4604      	mov	r4, r0
    368a:	460d      	mov	r5, r1
    368c:	4617      	mov	r7, r2
    if(n_act == n_after) return; /*Can't move before itself*/
    368e:	d022      	beq.n	36d6 <lv_ll_move_before+0x52>
    if(n_after != NULL)
    3690:	b312      	cbz	r2, 36d8 <lv_ll_move_before+0x54>
        n_before = lv_ll_get_prev(ll_p, n_after);
    3692:	4611      	mov	r1, r2
    3694:	f7ff ff31 	bl	34fa <lv_ll_get_prev>
    3698:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
    369a:	42ae      	cmp	r6, r5
    369c:	d01b      	beq.n	36d6 <lv_ll_move_before+0x52>
    lv_ll_rem(ll_p, n_act);
    369e:	4629      	mov	r1, r5
    36a0:	4620      	mov	r0, r4
    36a2:	f7ff ff6e 	bl	3582 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
    36a6:	462a      	mov	r2, r5
    36a8:	4631      	mov	r1, r6
    36aa:	4620      	mov	r0, r4
    36ac:	f7ff fea4 	bl	33f8 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
    36b0:	4632      	mov	r2, r6
    36b2:	4629      	mov	r1, r5
    36b4:	4620      	mov	r0, r4
    36b6:	f7ff feb2 	bl	341e <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
    36ba:	462a      	mov	r2, r5
    36bc:	4639      	mov	r1, r7
    36be:	4620      	mov	r0, r4
    36c0:	f7ff fead 	bl	341e <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
    36c4:	463a      	mov	r2, r7
    36c6:	4629      	mov	r1, r5
    36c8:	4620      	mov	r0, r4
    36ca:	f7ff fe95 	bl	33f8 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
    36ce:	b907      	cbnz	r7, 36d2 <lv_ll_move_before+0x4e>
    36d0:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
    36d2:	b906      	cbnz	r6, 36d6 <lv_ll_move_before+0x52>
    36d4:	6065      	str	r5, [r4, #4]
}
    36d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
    36d8:	b108      	cbz	r0, 36de <lv_ll_move_before+0x5a>
        tail = ll_p->tail;
    36da:	6886      	ldr	r6, [r0, #8]
    36dc:	e7dd      	b.n	369a <lv_ll_move_before+0x16>
    void * tail = NULL;
    36de:	4606      	mov	r6, r0
    36e0:	e7db      	b.n	369a <lv_ll_move_before+0x16>

000036e2 <lv_ll_is_empty>:
    if(ll_p == NULL) return true;
    36e2:	b130      	cbz	r0, 36f2 <lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
    36e4:	6843      	ldr	r3, [r0, #4]
    36e6:	b933      	cbnz	r3, 36f6 <lv_ll_is_empty+0x14>
    36e8:	6880      	ldr	r0, [r0, #8]
    36ea:	fab0 f080 	clz	r0, r0
    36ee:	0940      	lsrs	r0, r0, #5
    36f0:	4770      	bx	lr
    if(ll_p == NULL) return true;
    36f2:	2001      	movs	r0, #1
    36f4:	4770      	bx	lr
    return false;
    36f6:	2000      	movs	r0, #0
}
    36f8:	4770      	bx	lr
	...

000036fc <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
    36fc:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
    36fe:	4804      	ldr	r0, [pc, #16]	; (3710 <lv_task_core_init+0x14>)
    3700:	2114      	movs	r1, #20
    3702:	f7ff fe9e 	bl	3442 <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
    3706:	4b03      	ldr	r3, [pc, #12]	; (3714 <lv_task_core_init+0x18>)
    3708:	2201      	movs	r2, #1
    370a:	701a      	strb	r2, [r3, #0]
}
    370c:	bd08      	pop	{r3, pc}
    370e:	bf00      	nop
    3710:	20005f10 	.word	0x20005f10
    3714:	20004c9c 	.word	0x20004c9c

00003718 <lv_task_create_basic>:
{
    3718:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
    371a:	4828      	ldr	r0, [pc, #160]	; (37bc <lv_task_create_basic+0xa4>)
    371c:	f7ff fed7 	bl	34ce <lv_ll_get_head>
    if(NULL == tmp) {
    3720:	4605      	mov	r5, r0
    3722:	b198      	cbz	r0, 374c <lv_task_create_basic+0x34>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
    3724:	4c25      	ldr	r4, [pc, #148]	; (37bc <lv_task_create_basic+0xa4>)
            if(tmp->prio <= DEF_PRIO) {
    3726:	7c2b      	ldrb	r3, [r5, #16]
    3728:	f003 0307 	and.w	r3, r3, #7
    372c:	2b03      	cmp	r3, #3
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
    372e:	4629      	mov	r1, r5
            if(tmp->prio <= DEF_PRIO) {
    3730:	d81d      	bhi.n	376e <lv_task_create_basic+0x56>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
    3732:	4822      	ldr	r0, [pc, #136]	; (37bc <lv_task_create_basic+0xa4>)
    3734:	f7ff fef0 	bl	3518 <lv_ll_ins_prev>
    3738:	4604      	mov	r4, r0
                LV_ASSERT_MEM(new_task);
    373a:	f006 fff1 	bl	a720 <lv_debug_check_null>
    373e:	4603      	mov	r3, r0
    3740:	b988      	cbnz	r0, 3766 <lv_task_create_basic+0x4e>
    3742:	481f      	ldr	r0, [pc, #124]	; (37c0 <lv_task_create_basic+0xa8>)
    3744:	4622      	mov	r2, r4
    3746:	f006 fffb 	bl	a740 <lv_debug_log_error>
    374a:	e7fe      	b.n	374a <lv_task_create_basic+0x32>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
    374c:	481b      	ldr	r0, [pc, #108]	; (37bc <lv_task_create_basic+0xa4>)
    374e:	f7ff fe82 	bl	3456 <lv_ll_ins_head>
    3752:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
    3754:	f006 ffe4 	bl	a720 <lv_debug_check_null>
    3758:	4603      	mov	r3, r0
    375a:	b920      	cbnz	r0, 3766 <lv_task_create_basic+0x4e>
    375c:	4818      	ldr	r0, [pc, #96]	; (37c0 <lv_task_create_basic+0xa8>)
    375e:	4622      	mov	r2, r4
    3760:	f006 ffee 	bl	a740 <lv_debug_log_error>
    3764:	e7fe      	b.n	3764 <lv_task_create_basic+0x4c>
        if(new_task == NULL) return NULL;
    3766:	b9b4      	cbnz	r4, 3796 <lv_task_create_basic+0x7e>
    3768:	2400      	movs	r4, #0
}
    376a:	4620      	mov	r0, r4
    376c:	bd38      	pop	{r3, r4, r5, pc}
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
    376e:	4620      	mov	r0, r4
    3770:	f7ff feb3 	bl	34da <lv_ll_get_next>
        } while(tmp != NULL);
    3774:	4605      	mov	r5, r0
    3776:	2800      	cmp	r0, #0
    3778:	d1d5      	bne.n	3726 <lv_task_create_basic+0xe>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
    377a:	4810      	ldr	r0, [pc, #64]	; (37bc <lv_task_create_basic+0xa4>)
    377c:	f7ff fe89 	bl	3492 <lv_ll_ins_tail>
    3780:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
    3782:	f006 ffcd 	bl	a720 <lv_debug_check_null>
    3786:	2800      	cmp	r0, #0
    3788:	d1ed      	bne.n	3766 <lv_task_create_basic+0x4e>
    378a:	480d      	ldr	r0, [pc, #52]	; (37c0 <lv_task_create_basic+0xa8>)
    378c:	4622      	mov	r2, r4
    378e:	462b      	mov	r3, r5
    3790:	f006 ffd6 	bl	a740 <lv_debug_log_error>
    3794:	e7fe      	b.n	3794 <lv_task_create_basic+0x7c>
    new_task->period  = DEF_PERIOD;
    3796:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    379a:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
    379c:	7c23      	ldrb	r3, [r4, #16]
    379e:	f023 030f 	bic.w	r3, r3, #15
    37a2:	f043 0303 	orr.w	r3, r3, #3
    new_task->task_cb = NULL;
    37a6:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
    37a8:	7423      	strb	r3, [r4, #16]
    new_task->task_cb = NULL;
    37aa:	60a5      	str	r5, [r4, #8]
    new_task->last_run = lv_tick_get();
    37ac:	f004 fc00 	bl	7fb0 <lv_tick_get>
    task_created = true;
    37b0:	4b04      	ldr	r3, [pc, #16]	; (37c4 <lv_task_create_basic+0xac>)
    new_task->last_run = lv_tick_get();
    37b2:	6060      	str	r0, [r4, #4]
    task_created = true;
    37b4:	2201      	movs	r2, #1
    new_task->user_data = NULL;
    37b6:	60e5      	str	r5, [r4, #12]
    task_created = true;
    37b8:	701a      	strb	r2, [r3, #0]
    return new_task;
    37ba:	e7d6      	b.n	376a <lv_task_create_basic+0x52>
    37bc:	20005f10 	.word	0x20005f10
    37c0:	0001a9b8 	.word	0x0001a9b8
    37c4:	20004c9d 	.word	0x20004c9d

000037c8 <lv_task_del>:
{
    37c8:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
    37ca:	4601      	mov	r1, r0
{
    37cc:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
    37ce:	4807      	ldr	r0, [pc, #28]	; (37ec <lv_task_del+0x24>)
    37d0:	f7ff fed7 	bl	3582 <lv_ll_rem>
    lv_mem_free(task);
    37d4:	4620      	mov	r0, r4
    37d6:	f7ff fdab 	bl	3330 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
    37da:	4b05      	ldr	r3, [pc, #20]	; (37f0 <lv_task_del+0x28>)
    37dc:	681b      	ldr	r3, [r3, #0]
    37de:	42a3      	cmp	r3, r4
    37e0:	bf02      	ittt	eq
    37e2:	4b04      	ldreq	r3, [pc, #16]	; (37f4 <lv_task_del+0x2c>)
    37e4:	2201      	moveq	r2, #1
    37e6:	701a      	strbeq	r2, [r3, #0]
}
    37e8:	bd10      	pop	{r4, pc}
    37ea:	bf00      	nop
    37ec:	20005f10 	.word	0x20005f10
    37f0:	20005f50 	.word	0x20005f50
    37f4:	20004c9e 	.word	0x20004c9e

000037f8 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
    37f8:	b538      	push	{r3, r4, r5, lr}
    37fa:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
    37fc:	6840      	ldr	r0, [r0, #4]
    37fe:	f004 fbdd 	bl	7fbc <lv_tick_elaps>
    if(elp >= task->period) {
    3802:	6823      	ldr	r3, [r4, #0]
    3804:	4283      	cmp	r3, r0
    3806:	d817      	bhi.n	3838 <lv_task_exec+0x40>
        task->last_run = lv_tick_get();
    3808:	f004 fbd2 	bl	7fb0 <lv_tick_get>
        task_deleted   = false;
    380c:	4d0b      	ldr	r5, [pc, #44]	; (383c <lv_task_exec+0x44>)
        task_created   = false;
    380e:	4a0c      	ldr	r2, [pc, #48]	; (3840 <lv_task_exec+0x48>)
        task->last_run = lv_tick_get();
    3810:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
    3812:	2300      	movs	r3, #0
    3814:	702b      	strb	r3, [r5, #0]
        task_created   = false;
    3816:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
    3818:	68a3      	ldr	r3, [r4, #8]
    381a:	b933      	cbnz	r3, 382a <lv_task_exec+0x32>

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
            if(task->once != 0) {
    381c:	7c23      	ldrb	r3, [r4, #16]
    381e:	071b      	lsls	r3, r3, #28
    3820:	d508      	bpl.n	3834 <lv_task_exec+0x3c>
                lv_task_del(task);
    3822:	4620      	mov	r0, r4
    3824:	f7ff ffd0 	bl	37c8 <lv_task_del>
    3828:	e004      	b.n	3834 <lv_task_exec+0x3c>
        if(task->task_cb) task->task_cb(task);
    382a:	4620      	mov	r0, r4
    382c:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
    382e:	782b      	ldrb	r3, [r5, #0]
    3830:	2b00      	cmp	r3, #0
    3832:	d0f3      	beq.n	381c <lv_task_exec+0x24>
                lv_task_del(task);
    3834:	2001      	movs	r0, #1
        }
        exec = true;
    }

    return exec;
}
    3836:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
    3838:	2000      	movs	r0, #0
    383a:	e7fc      	b.n	3836 <lv_task_exec+0x3e>
    383c:	20004c9e 	.word	0x20004c9e
    3840:	20004c9d 	.word	0x20004c9d

00003844 <lv_task_handler>:
{
    3844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return;
    3848:	4d3f      	ldr	r5, [pc, #252]	; (3948 <lv_task_handler+0x104>)
    384a:	782c      	ldrb	r4, [r5, #0]
    384c:	b934      	cbnz	r4, 385c <lv_task_handler+0x18>
    already_running = true;
    384e:	2301      	movs	r3, #1
    3850:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
    3852:	4b3e      	ldr	r3, [pc, #248]	; (394c <lv_task_handler+0x108>)
    3854:	781b      	ldrb	r3, [r3, #0]
    3856:	b923      	cbnz	r3, 3862 <lv_task_handler+0x1e>
        already_running = false; /*Release mutex*/
    3858:	2300      	movs	r3, #0
    385a:	702b      	strb	r3, [r5, #0]
}
    385c:	b003      	add	sp, #12
    385e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
    3862:	f004 fba5 	bl	7fb0 <lv_tick_get>
    3866:	4b3a      	ldr	r3, [pc, #232]	; (3950 <lv_task_handler+0x10c>)
        task_deleted             = false;
    3868:	4e3a      	ldr	r6, [pc, #232]	; (3954 <lv_task_handler+0x110>)
    handler_start = lv_tick_get();
    386a:	6018      	str	r0, [r3, #0]
    lv_task_t * task_interrupter = NULL;
    386c:	9301      	str	r3, [sp, #4]
        task_deleted             = false;
    386e:	46a3      	mov	fp, r4
        task_created             = false;
    3870:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 395c <lv_task_handler+0x118>
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
    3874:	4838      	ldr	r0, [pc, #224]	; (3958 <lv_task_handler+0x114>)
        task_deleted             = false;
    3876:	f886 b000 	strb.w	fp, [r6]
        task_created             = false;
    387a:	f888 b000 	strb.w	fp, [r8]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
    387e:	f7ff fe26 	bl	34ce <lv_ll_get_head>
    3882:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 396c <lv_task_handler+0x128>
    3886:	f8c9 0000 	str.w	r0, [r9]
        while(LV_GC_ROOT(_lv_task_act)) {
    388a:	46ca      	mov	sl, r9
    388c:	f8da 1000 	ldr.w	r1, [sl]
    3890:	b1b9      	cbz	r1, 38c2 <lv_task_handler+0x7e>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
    3892:	4831      	ldr	r0, [pc, #196]	; (3958 <lv_task_handler+0x114>)
    3894:	f7ff fe21 	bl	34da <lv_ll_get_next>
    3898:	4607      	mov	r7, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
    389a:	f8da 0000 	ldr.w	r0, [sl]
    389e:	7c03      	ldrb	r3, [r0, #16]
    38a0:	f013 0207 	ands.w	r2, r3, #7
    38a4:	d00d      	beq.n	38c2 <lv_task_handler+0x7e>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
    38a6:	42a0      	cmp	r0, r4
    38a8:	d103      	bne.n	38b2 <lv_task_handler+0x6e>
                LV_GC_ROOT(_lv_task_act) = next;
    38aa:	f8ca 7000 	str.w	r7, [sl]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
    38ae:	2400      	movs	r4, #0
                continue; /*Load the next task*/
    38b0:	e7ec      	b.n	388c <lv_task_handler+0x48>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
    38b2:	2a05      	cmp	r2, #5
    38b4:	d12b      	bne.n	390e <lv_task_handler+0xca>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
    38b6:	f7ff ff9f 	bl	37f8 <lv_task_exec>
            if(task_created || task_deleted) {
    38ba:	4b28      	ldr	r3, [pc, #160]	; (395c <lv_task_handler+0x118>)
    38bc:	781b      	ldrb	r3, [r3, #0]
    38be:	2b00      	cmp	r3, #0
    38c0:	d03b      	beq.n	393a <lv_task_handler+0xf6>
    busy_time += lv_tick_elaps(handler_start);
    38c2:	9b01      	ldr	r3, [sp, #4]
    38c4:	4c26      	ldr	r4, [pc, #152]	; (3960 <lv_task_handler+0x11c>)
    38c6:	6818      	ldr	r0, [r3, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
    38c8:	4e26      	ldr	r6, [pc, #152]	; (3964 <lv_task_handler+0x120>)
    busy_time += lv_tick_elaps(handler_start);
    38ca:	f004 fb77 	bl	7fbc <lv_tick_elaps>
    38ce:	6823      	ldr	r3, [r4, #0]
    38d0:	4418      	add	r0, r3
    38d2:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
    38d4:	6830      	ldr	r0, [r6, #0]
    38d6:	f004 fb71 	bl	7fbc <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
    38da:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    38de:	d3bb      	bcc.n	3858 <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
    38e0:	6822      	ldr	r2, [r4, #0]
    38e2:	2364      	movs	r3, #100	; 0x64
    38e4:	4353      	muls	r3, r2
    38e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    38ea:	fbb3 f3f2 	udiv	r3, r3, r2
    38ee:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
    38f0:	2b64      	cmp	r3, #100	; 0x64
    38f2:	bf98      	it	ls
    38f4:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
    38f8:	4a1b      	ldr	r2, [pc, #108]	; (3968 <lv_task_handler+0x124>)
    38fa:	bf94      	ite	ls
    38fc:	b2db      	uxtbls	r3, r3
    38fe:	2300      	movhi	r3, #0
    3900:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
    3902:	2300      	movs	r3, #0
    3904:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
    3906:	f004 fb53 	bl	7fb0 <lv_tick_get>
    390a:	6030      	str	r0, [r6, #0]
    390c:	e7a4      	b.n	3858 <lv_task_handler+0x14>
            else if(task_interrupter) {
    390e:	b134      	cbz	r4, 391e <lv_task_handler+0xda>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
    3910:	7c22      	ldrb	r2, [r4, #16]
    3912:	f003 0307 	and.w	r3, r3, #7
    3916:	f002 0207 	and.w	r2, r2, #7
    391a:	4293      	cmp	r3, r2
    391c:	d9cd      	bls.n	38ba <lv_task_handler+0x76>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
    391e:	f7ff ff6b 	bl	37f8 <lv_task_exec>
    3922:	2800      	cmp	r0, #0
    3924:	d0c9      	beq.n	38ba <lv_task_handler+0x76>
                    if(!task_created && !task_deleted) {
    3926:	f898 3000 	ldrb.w	r3, [r8]
    392a:	2b00      	cmp	r3, #0
    392c:	d1c9      	bne.n	38c2 <lv_task_handler+0x7e>
    392e:	7833      	ldrb	r3, [r6, #0]
    3930:	2b00      	cmp	r3, #0
    3932:	d1c6      	bne.n	38c2 <lv_task_handler+0x7e>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
    3934:	f8d9 4000 	ldr.w	r4, [r9]
    } while(!end_flag);
    3938:	e79a      	b.n	3870 <lv_task_handler+0x2c>
            if(task_created || task_deleted) {
    393a:	7833      	ldrb	r3, [r6, #0]
    393c:	2b00      	cmp	r3, #0
    393e:	d1c0      	bne.n	38c2 <lv_task_handler+0x7e>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
    3940:	f8ca 7000 	str.w	r7, [sl]
    3944:	e7a2      	b.n	388c <lv_task_handler+0x48>
    3946:	bf00      	nop
    3948:	20004c88 	.word	0x20004c88
    394c:	20004c9c 	.word	0x20004c9c
    3950:	20004c90 	.word	0x20004c90
    3954:	20004c9e 	.word	0x20004c9e
    3958:	20005f10 	.word	0x20005f10
    395c:	20004c9d 	.word	0x20004c9d
    3960:	20004c8c 	.word	0x20004c8c
    3964:	20004c98 	.word	0x20004c98
    3968:	20004c94 	.word	0x20004c94
    396c:	20005f50 	.word	0x20005f50

00003970 <lv_task_set_prio>:
    if(task->prio == prio) return;
    3970:	7c03      	ldrb	r3, [r0, #16]
    3972:	f003 0307 	and.w	r3, r3, #7
    3976:	428b      	cmp	r3, r1
{
    3978:	b570      	push	{r4, r5, r6, lr}
    397a:	4604      	mov	r4, r0
    397c:	460d      	mov	r5, r1
    if(task->prio == prio) return;
    397e:	d014      	beq.n	39aa <lv_task_set_prio+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
    3980:	480d      	ldr	r0, [pc, #52]	; (39b8 <lv_task_set_prio+0x48>)
    3982:	4e0d      	ldr	r6, [pc, #52]	; (39b8 <lv_task_set_prio+0x48>)
    3984:	f7ff fda3 	bl	34ce <lv_ll_get_head>
    3988:	4602      	mov	r2, r0
    398a:	b132      	cbz	r2, 399a <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
    398c:	7c13      	ldrb	r3, [r2, #16]
    398e:	f003 0307 	and.w	r3, r3, #7
    3992:	429d      	cmp	r5, r3
    3994:	db0a      	blt.n	39ac <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
    3996:	42a2      	cmp	r2, r4
    3998:	d003      	beq.n	39a2 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
    399a:	4807      	ldr	r0, [pc, #28]	; (39b8 <lv_task_set_prio+0x48>)
    399c:	4621      	mov	r1, r4
    399e:	f7ff fe71 	bl	3684 <lv_ll_move_before>
    task->prio = prio;
    39a2:	7c23      	ldrb	r3, [r4, #16]
    39a4:	f365 0302 	bfi	r3, r5, #0, #3
    39a8:	7423      	strb	r3, [r4, #16]
}
    39aa:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
    39ac:	4611      	mov	r1, r2
    39ae:	4630      	mov	r0, r6
    39b0:	f7ff fd93 	bl	34da <lv_ll_get_next>
    39b4:	4602      	mov	r2, r0
    39b6:	e7e8      	b.n	398a <lv_task_set_prio+0x1a>
    39b8:	20005f10 	.word	0x20005f10

000039bc <lv_task_create>:
{
    39bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    39be:	460f      	mov	r7, r1
    39c0:	461d      	mov	r5, r3
    39c2:	9201      	str	r2, [sp, #4]
    39c4:	4606      	mov	r6, r0
    lv_task_t * new_task = lv_task_create_basic();
    39c6:	f7ff fea7 	bl	3718 <lv_task_create_basic>
    39ca:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_task);
    39cc:	f006 fea8 	bl	a720 <lv_debug_check_null>
    39d0:	9901      	ldr	r1, [sp, #4]
    39d2:	4603      	mov	r3, r0
    39d4:	b920      	cbnz	r0, 39e0 <lv_task_create+0x24>
    39d6:	4807      	ldr	r0, [pc, #28]	; (39f4 <lv_task_create+0x38>)
    39d8:	4622      	mov	r2, r4
    39da:	f006 feb1 	bl	a740 <lv_debug_log_error>
    39de:	e7fe      	b.n	39de <lv_task_create+0x22>
    if(new_task == NULL) return NULL;
    39e0:	b12c      	cbz	r4, 39ee <lv_task_create+0x32>
    task->task_cb = task_cb;
    39e2:	60a6      	str	r6, [r4, #8]
    task->period = period;
    39e4:	6027      	str	r7, [r4, #0]
    lv_task_set_prio(new_task, prio);
    39e6:	4620      	mov	r0, r4
    39e8:	f7ff ffc2 	bl	3970 <lv_task_set_prio>
    new_task->user_data = user_data;
    39ec:	60e5      	str	r5, [r4, #12]
}
    39ee:	4620      	mov	r0, r4
    39f0:	b003      	add	sp, #12
    39f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39f4:	0001a9b8 	.word	0x0001a9b8

000039f8 <lv_task_ready>:
{
    39f8:	b510      	push	{r4, lr}
    39fa:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
    39fc:	f004 fad8 	bl	7fb0 <lv_tick_get>
    3a00:	6823      	ldr	r3, [r4, #0]
    3a02:	43db      	mvns	r3, r3
    3a04:	4403      	add	r3, r0
    3a06:	6063      	str	r3, [r4, #4]
}
    3a08:	bd10      	pop	{r4, pc}

00003a0a <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
    3a0a:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
    3a0c:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
    3a10:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
    3a12:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
    3a14:	80c3      	strh	r3, [r0, #6]
}
    3a16:	4770      	bx	lr

00003a18 <lv_area_set_width>:
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
    area_p->x2 = area_p->x1 + w - 1;
    3a18:	8803      	ldrh	r3, [r0, #0]
    3a1a:	3901      	subs	r1, #1
    3a1c:	4419      	add	r1, r3
    3a1e:	8081      	strh	r1, [r0, #4]
}
    3a20:	4770      	bx	lr

00003a22 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
    3a22:	8843      	ldrh	r3, [r0, #2]
    3a24:	3901      	subs	r1, #1
    3a26:	4419      	add	r1, r3
    3a28:	80c1      	strh	r1, [r0, #6]
}
    3a2a:	4770      	bx	lr

00003a2c <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
    3a2c:	b570      	push	{r4, r5, r6, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    3a2e:	88c3      	ldrh	r3, [r0, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    3a30:	8884      	ldrh	r4, [r0, #4]
    3a32:	8806      	ldrh	r6, [r0, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    3a34:	8845      	ldrh	r5, [r0, #2]
    lv_coord_t w = lv_area_get_width(area_p);
    lv_coord_t h = lv_area_get_height(area_p);
    area_p->x1   = x;
    3a36:	8001      	strh	r1, [r0, #0]
    area_p->y1   = y;
    3a38:	8042      	strh	r2, [r0, #2]
    area_p->x2 = area_p->x1 + w - 1;
    3a3a:	4421      	add	r1, r4
    area_p->y2 = area_p->y1 + h - 1;
    3a3c:	441a      	add	r2, r3
    area_p->x2 = area_p->x1 + w - 1;
    3a3e:	1b89      	subs	r1, r1, r6
    area_p->y2 = area_p->y1 + h - 1;
    3a40:	1b52      	subs	r2, r2, r5
    area_p->x2 = area_p->x1 + w - 1;
    3a42:	8081      	strh	r1, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
    3a44:	80c2      	strh	r2, [r0, #6]
    lv_area_set_width(area_p, w);
    lv_area_set_height(area_p, h);
}
    3a46:	bd70      	pop	{r4, r5, r6, pc}

00003a48 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
    3a48:	f9b0 3000 	ldrsh.w	r3, [r0]
    3a4c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    3a50:	1ad2      	subs	r2, r2, r3
    3a52:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
    3a56:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
    3a5a:	1a18      	subs	r0, r3, r0
    3a5c:	3001      	adds	r0, #1

    return size;
}
    3a5e:	fb02 0000 	mla	r0, r2, r0, r0
    3a62:	4770      	bx	lr

00003a64 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
    3a64:	f9b1 3000 	ldrsh.w	r3, [r1]
{
    3a68:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
    3a6a:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
    3a6e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
    3a72:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
    3a76:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
    3a7a:	429d      	cmp	r5, r3
    3a7c:	bfb8      	it	lt
    3a7e:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
    3a80:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
    3a84:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
    3a86:	42a3      	cmp	r3, r4
    3a88:	bfb8      	it	lt
    3a8a:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
    3a8c:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
    3a90:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
    3a94:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
    3a96:	42b4      	cmp	r4, r6
    3a98:	bfa8      	it	ge
    3a9a:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
    3a9c:	428a      	cmp	r2, r1
    3a9e:	bfa8      	it	ge
    3aa0:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
    3aa2:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
    3aa4:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
    3aa6:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
    3aa8:	dc04      	bgt.n	3ab4 <lv_area_intersect+0x50>
    3aaa:	4293      	cmp	r3, r2
    3aac:	bfcc      	ite	gt
    3aae:	2000      	movgt	r0, #0
    3ab0:	2001      	movle	r0, #1
        union_ok = false;
    }

    return union_ok;
}
    3ab2:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
    3ab4:	2000      	movs	r0, #0
    3ab6:	e7fc      	b.n	3ab2 <lv_area_intersect+0x4e>

00003ab8 <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
    3ab8:	f9b2 3000 	ldrsh.w	r3, [r2]
{
    3abc:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
    3abe:	f9b1 4000 	ldrsh.w	r4, [r1]
    3ac2:	42a3      	cmp	r3, r4
    3ac4:	bfa8      	it	ge
    3ac6:	4623      	movge	r3, r4
    3ac8:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
    3aca:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    3ace:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    3ad2:	42a3      	cmp	r3, r4
    3ad4:	bfa8      	it	ge
    3ad6:	4623      	movge	r3, r4
    3ad8:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
    3ada:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    3ade:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
    3ae2:	42a3      	cmp	r3, r4
    3ae4:	bfb8      	it	lt
    3ae6:	4623      	movlt	r3, r4
    3ae8:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
    3aea:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
    3aee:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
    3af2:	4293      	cmp	r3, r2
    3af4:	bfb8      	it	lt
    3af6:	4613      	movlt	r3, r2
    3af8:	80c3      	strh	r3, [r0, #6]
}
    3afa:	bd10      	pop	{r4, pc}

00003afc <lv_area_is_point_on>:
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
    bool is_on = false;

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
    3afc:	f9b1 3000 	ldrsh.w	r3, [r1]
    3b00:	f9b0 2000 	ldrsh.w	r2, [r0]
    3b04:	429a      	cmp	r2, r3
    3b06:	dc10      	bgt.n	3b2a <lv_area_is_point_on+0x2e>
    3b08:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    3b0c:	429a      	cmp	r2, r3
    3b0e:	db0c      	blt.n	3b2a <lv_area_is_point_on+0x2e>
    3b10:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    3b14:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    3b18:	429a      	cmp	r2, r3
    3b1a:	dc06      	bgt.n	3b2a <lv_area_is_point_on+0x2e>
    3b1c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
    3b20:	4298      	cmp	r0, r3
    3b22:	bfb4      	ite	lt
    3b24:	2000      	movlt	r0, #0
    3b26:	2001      	movge	r0, #1
    3b28:	4770      	bx	lr
    bool is_on = false;
    3b2a:	2000      	movs	r0, #0
        is_on = true;
    }

    return is_on;
}
    3b2c:	4770      	bx	lr

00003b2e <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
    3b2e:	f9b0 2000 	ldrsh.w	r2, [r0]
    3b32:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    3b36:	429a      	cmp	r2, r3
    3b38:	dc14      	bgt.n	3b64 <lv_area_is_on+0x36>
    3b3a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    3b3e:	f9b1 3000 	ldrsh.w	r3, [r1]
    3b42:	429a      	cmp	r2, r3
    3b44:	db0e      	blt.n	3b64 <lv_area_is_on+0x36>
    3b46:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    3b4a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    3b4e:	429a      	cmp	r2, r3
    3b50:	dc08      	bgt.n	3b64 <lv_area_is_on+0x36>
    3b52:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
    3b56:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    3b5a:	4298      	cmp	r0, r3
    3b5c:	bfb4      	ite	lt
    3b5e:	2000      	movlt	r0, #0
    3b60:	2001      	movge	r0, #1
    3b62:	4770      	bx	lr
        return true;
    } else {
        return false;
    3b64:	2000      	movs	r0, #0
    }
}
    3b66:	4770      	bx	lr

00003b68 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
    3b68:	f9b0 2000 	ldrsh.w	r2, [r0]
    3b6c:	f9b1 3000 	ldrsh.w	r3, [r1]
    3b70:	429a      	cmp	r2, r3
    3b72:	db14      	blt.n	3b9e <lv_area_is_in+0x36>
    3b74:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    3b78:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    3b7c:	429a      	cmp	r2, r3
    3b7e:	db0e      	blt.n	3b9e <lv_area_is_in+0x36>
    3b80:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    3b84:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    3b88:	429a      	cmp	r2, r3
    3b8a:	dc08      	bgt.n	3b9e <lv_area_is_in+0x36>
    3b8c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
    3b90:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    3b94:	4298      	cmp	r0, r3
    3b96:	bfcc      	ite	gt
    3b98:	2000      	movgt	r0, #0
    3b9a:	2001      	movle	r0, #1
    3b9c:	4770      	bx	lr
    bool is_in = false;
    3b9e:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
    3ba0:	4770      	bx	lr

00003ba2 <lv_anim_path_linear>:
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
    3ba2:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
    3ba6:	8b02      	ldrh	r2, [r0, #24]
    3ba8:	429a      	cmp	r2, r3
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
    3baa:	bf1c      	itt	ne
    3bac:	029b      	lslne	r3, r3, #10
    3bae:	fb93 f3f2 	sdivne	r3, r3, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
    3bb2:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    3bb6:	bf08      	it	eq
    3bb8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
    new_value = (int32_t)step * (a->end - a->start);
    3bbc:	1a80      	subs	r0, r0, r2
    3bbe:	4343      	muls	r3, r0
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
    3bc0:	eb02 23a3 	add.w	r3, r2, r3, asr #10

    return (lv_anim_value_t)new_value;
}
    3bc4:	b218      	sxth	r0, r3
    3bc6:	4770      	bx	lr

00003bc8 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
    3bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
    3bcc:	4843      	ldr	r0, [pc, #268]	; (3cdc <anim_task+0x114>)
    3bce:	4c43      	ldr	r4, [pc, #268]	; (3cdc <anim_task+0x114>)
{
    3bd0:	b08a      	sub	sp, #40	; 0x28
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
    3bd2:	f7ff fc7c 	bl	34ce <lv_ll_get_head>
    3bd6:	b990      	cbnz	r0, 3bfe <anim_task+0x36>
    {
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
    3bd8:	4d41      	ldr	r5, [pc, #260]	; (3ce0 <anim_task+0x118>)
    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
    3bda:	f8df 8108 	ldr.w	r8, [pc, #264]	; 3ce4 <anim_task+0x11c>
    uint32_t elaps = lv_tick_elaps(last_task_run);
    3bde:	6828      	ldr	r0, [r5, #0]
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
    3be0:	4e3e      	ldr	r6, [pc, #248]	; (3cdc <anim_task+0x114>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
    3be2:	f004 f9eb 	bl	7fbc <lv_tick_elaps>
    3be6:	4607      	mov	r7, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
    3be8:	483c      	ldr	r0, [pc, #240]	; (3cdc <anim_task+0x114>)
    3bea:	f7ff fc70 	bl	34ce <lv_ll_get_head>
    3bee:	4604      	mov	r4, r0
    while(a != NULL) {
    3bf0:	b984      	cbnz	r4, 3c14 <anim_task+0x4c>
    }

    last_task_run = lv_tick_get();
    3bf2:	f004 f9dd 	bl	7fb0 <lv_tick_get>
    3bf6:	6028      	str	r0, [r5, #0]
}
    3bf8:	b00a      	add	sp, #40	; 0x28
    3bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
    3bfe:	f890 3020 	ldrb.w	r3, [r0, #32]
    3c02:	f36f 03c3 	bfc	r3, #3, #1
    3c06:	f880 3020 	strb.w	r3, [r0, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
    3c0a:	4601      	mov	r1, r0
    3c0c:	4620      	mov	r0, r4
    3c0e:	f7ff fc64 	bl	34da <lv_ll_get_next>
    3c12:	e7e0      	b.n	3bd6 <anim_task+0xe>
        anim_list_changed = false;
    3c14:	2300      	movs	r3, #0
    3c16:	f888 3000 	strb.w	r3, [r8]
        if(!a->has_run) {
    3c1a:	f894 3020 	ldrb.w	r3, [r4, #32]
    3c1e:	0718      	lsls	r0, r3, #28
    3c20:	d456      	bmi.n	3cd0 <anim_task+0x108>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
    3c22:	f043 0308 	orr.w	r3, r3, #8
    3c26:	f884 3020 	strb.w	r3, [r4, #32]
            a->act_time += elaps;
    3c2a:	8b63      	ldrh	r3, [r4, #26]
    3c2c:	443b      	add	r3, r7
    3c2e:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
    3c30:	2b00      	cmp	r3, #0
            a->act_time += elaps;
    3c32:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
    3c34:	db4c      	blt.n	3cd0 <anim_task+0x108>
                if(a->act_time > a->time) a->act_time = a->time;
    3c36:	8b22      	ldrh	r2, [r4, #24]
    3c38:	4293      	cmp	r3, r2
    3c3a:	bfc8      	it	gt
    3c3c:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path_cb(a);
    3c3e:	68a3      	ldr	r3, [r4, #8]
    3c40:	4620      	mov	r0, r4
    3c42:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
    3c44:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
    3c46:	4601      	mov	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
    3c48:	b10b      	cbz	r3, 3c4e <anim_task+0x86>
    3c4a:	6820      	ldr	r0, [r4, #0]
    3c4c:	4798      	blx	r3
                if(a->act_time >= a->time) {
    3c4e:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
    3c52:	8b23      	ldrh	r3, [r4, #24]
    3c54:	429a      	cmp	r2, r3
    3c56:	db1a      	blt.n	3c8e <anim_task+0xc6>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
    3c58:	f894 3020 	ldrb.w	r3, [r4, #32]
    3c5c:	0799      	lsls	r1, r3, #30
    3c5e:	d003      	beq.n	3c68 <anim_task+0xa0>
    3c60:	f003 0207 	and.w	r2, r3, #7
    3c64:	2a05      	cmp	r2, #5
    3c66:	d11a      	bne.n	3c9e <anim_task+0xd6>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
    3c68:	2224      	movs	r2, #36	; 0x24
    3c6a:	4621      	mov	r1, r4
    3c6c:	a801      	add	r0, sp, #4
    3c6e:	f010 fb21 	bl	142b4 <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
    3c72:	4621      	mov	r1, r4
    3c74:	4630      	mov	r0, r6
    3c76:	f7ff fc84 	bl	3582 <lv_ll_rem>
        lv_mem_free(a);
    3c7a:	4620      	mov	r0, r4
    3c7c:	f7ff fb58 	bl	3330 <lv_mem_free>
        anim_list_changed = true;
    3c80:	2301      	movs	r3, #1
    3c82:	f888 3000 	strb.w	r3, [r8]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
    3c86:	9b04      	ldr	r3, [sp, #16]
    3c88:	b10b      	cbz	r3, 3c8e <anim_task+0xc6>
    3c8a:	a801      	add	r0, sp, #4
    3c8c:	4798      	blx	r3
        if(anim_list_changed)
    3c8e:	f898 3000 	ldrb.w	r3, [r8]
    3c92:	b1eb      	cbz	r3, 3cd0 <anim_task+0x108>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
    3c94:	4630      	mov	r0, r6
    3c96:	f7ff fc1a 	bl	34ce <lv_ll_get_head>
    3c9a:	4604      	mov	r4, r0
    3c9c:	e7a8      	b.n	3bf0 <anim_task+0x28>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
    3c9e:	8be2      	ldrh	r2, [r4, #30]
    3ca0:	4252      	negs	r2, r2
    3ca2:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
    3ca4:	07da      	lsls	r2, r3, #31
    3ca6:	d5f2      	bpl.n	3c8e <anim_task+0xc6>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
    3ca8:	f013 0304 	ands.w	r3, r3, #4
    3cac:	bf02      	ittt	eq
    3cae:	8ba2      	ldrheq	r2, [r4, #28]
    3cb0:	4252      	negeq	r2, r2
    3cb2:	8362      	strheq	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
    3cb4:	fab3 f383 	clz	r3, r3
    3cb8:	f894 2020 	ldrb.w	r2, [r4, #32]
    3cbc:	095b      	lsrs	r3, r3, #5
    3cbe:	f363 0282 	bfi	r2, r3, #2, #1
    3cc2:	f884 2020 	strb.w	r2, [r4, #32]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
            a->start = a->end;
    3cc6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
            a->end   = tmp;
    3cca:	e9c4 2304 	strd	r2, r3, [r4, #16]
    3cce:	e7de      	b.n	3c8e <anim_task+0xc6>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
    3cd0:	4621      	mov	r1, r4
    3cd2:	4630      	mov	r0, r6
    3cd4:	f7ff fc01 	bl	34da <lv_ll_get_next>
    3cd8:	e7df      	b.n	3c9a <anim_task+0xd2>
    3cda:	bf00      	nop
    3cdc:	20005f58 	.word	0x20005f58
    3ce0:	20004ca0 	.word	0x20004ca0
    3ce4:	20004c9f 	.word	0x20004c9f

00003ce8 <lv_anim_core_init>:
{
    3ce8:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
    3cea:	2124      	movs	r1, #36	; 0x24
    3cec:	4807      	ldr	r0, [pc, #28]	; (3d0c <lv_anim_core_init+0x24>)
    3cee:	f7ff fba8 	bl	3442 <lv_ll_init>
    last_task_run = lv_tick_get();
    3cf2:	f004 f95d 	bl	7fb0 <lv_tick_get>
    3cf6:	4b06      	ldr	r3, [pc, #24]	; (3d10 <lv_anim_core_init+0x28>)
}
    3cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    last_task_run = lv_tick_get();
    3cfc:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
    3cfe:	2203      	movs	r2, #3
    3d00:	4804      	ldr	r0, [pc, #16]	; (3d14 <lv_anim_core_init+0x2c>)
    3d02:	2300      	movs	r3, #0
    3d04:	2121      	movs	r1, #33	; 0x21
    3d06:	f7ff be59 	b.w	39bc <lv_task_create>
    3d0a:	bf00      	nop
    3d0c:	20005f58 	.word	0x20005f58
    3d10:	20004ca0 	.word	0x20004ca0
    3d14:	00003bc9 	.word	0x00003bc9

00003d18 <lv_anim_del>:
{
    3d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d1c:	4606      	mov	r6, r0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
    3d1e:	4815      	ldr	r0, [pc, #84]	; (3d74 <lv_anim_del+0x5c>)
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
    3d20:	f8df b050 	ldr.w	fp, [pc, #80]	; 3d74 <lv_anim_del+0x5c>
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
    3d24:	f8df 9050 	ldr.w	r9, [pc, #80]	; 3d78 <lv_anim_del+0x60>
{
    3d28:	460d      	mov	r5, r1
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
    3d2a:	f7ff fbd0 	bl	34ce <lv_ll_get_head>
    bool del = false;
    3d2e:	f04f 0800 	mov.w	r8, #0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
    3d32:	4604      	mov	r4, r0
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
    3d34:	f04f 0a01 	mov.w	sl, #1
    while(a != NULL) {
    3d38:	b914      	cbnz	r4, 3d40 <lv_anim_del+0x28>
}
    3d3a:	4640      	mov	r0, r8
    3d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
    3d40:	4621      	mov	r1, r4
    3d42:	4658      	mov	r0, fp
    3d44:	f7ff fbc9 	bl	34da <lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
    3d48:	6823      	ldr	r3, [r4, #0]
    3d4a:	42b3      	cmp	r3, r6
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
    3d4c:	4607      	mov	r7, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
    3d4e:	d10e      	bne.n	3d6e <lv_anim_del+0x56>
    3d50:	6863      	ldr	r3, [r4, #4]
    3d52:	42ab      	cmp	r3, r5
    3d54:	d000      	beq.n	3d58 <lv_anim_del+0x40>
    3d56:	b955      	cbnz	r5, 3d6e <lv_anim_del+0x56>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
    3d58:	4621      	mov	r1, r4
    3d5a:	4658      	mov	r0, fp
    3d5c:	f7ff fc11 	bl	3582 <lv_ll_rem>
            lv_mem_free(a);
    3d60:	4620      	mov	r0, r4
    3d62:	f7ff fae5 	bl	3330 <lv_mem_free>
            del = true;
    3d66:	f04f 0801 	mov.w	r8, #1
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
    3d6a:	f889 a000 	strb.w	sl, [r9]
            del = true;
    3d6e:	463c      	mov	r4, r7
    3d70:	e7e2      	b.n	3d38 <lv_anim_del+0x20>
    3d72:	bf00      	nop
    3d74:	20005f58 	.word	0x20005f58
    3d78:	20004c9f 	.word	0x20004c9f

00003d7c <lv_anim_create>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
    3d7c:	6841      	ldr	r1, [r0, #4]
{
    3d7e:	b538      	push	{r3, r4, r5, lr}
    3d80:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
    3d82:	b111      	cbz	r1, 3d8a <lv_anim_create+0xe>
    3d84:	6800      	ldr	r0, [r0, #0]
    3d86:	f7ff ffc7 	bl	3d18 <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
    3d8a:	4811      	ldr	r0, [pc, #68]	; (3dd0 <lv_anim_create+0x54>)
    3d8c:	f7ff fb63 	bl	3456 <lv_ll_ins_head>
    3d90:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
    3d92:	f006 fcc5 	bl	a720 <lv_debug_check_null>
    3d96:	4603      	mov	r3, r0
    3d98:	b920      	cbnz	r0, 3da4 <lv_anim_create+0x28>
    3d9a:	480e      	ldr	r0, [pc, #56]	; (3dd4 <lv_anim_create+0x58>)
    3d9c:	4622      	mov	r2, r4
    3d9e:	f006 fccf 	bl	a740 <lv_debug_log_error>
    3da2:	e7fe      	b.n	3da2 <lv_anim_create+0x26>
    if(new_anim == NULL) return;
    3da4:	b19c      	cbz	r4, 3dce <lv_anim_create+0x52>
    a->playback_now = 0;
    3da6:	f895 3020 	ldrb.w	r3, [r5, #32]
    3daa:	f36f 0382 	bfc	r3, #2, #1
    3dae:	f885 3020 	strb.w	r3, [r5, #32]
    memcpy(new_anim, a, sizeof(lv_anim_t));
    3db2:	2224      	movs	r2, #36	; 0x24
    3db4:	4629      	mov	r1, r5
    3db6:	4620      	mov	r0, r4
    3db8:	f010 fa7c 	bl	142b4 <memcpy>
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
    3dbc:	6863      	ldr	r3, [r4, #4]
    3dbe:	b11b      	cbz	r3, 3dc8 <lv_anim_create+0x4c>
    3dc0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
    3dc4:	6820      	ldr	r0, [r4, #0]
    3dc6:	4798      	blx	r3
    anim_list_changed = true;
    3dc8:	4b03      	ldr	r3, [pc, #12]	; (3dd8 <lv_anim_create+0x5c>)
    3dca:	2201      	movs	r2, #1
    3dcc:	701a      	strb	r2, [r3, #0]
}
    3dce:	bd38      	pop	{r3, r4, r5, pc}
    3dd0:	20005f58 	.word	0x20005f58
    3dd4:	0001a9b8 	.word	0x0001a9b8
    3dd8:	20004c9f 	.word	0x20004c9f

00003ddc <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
    3ddc:	1a8a      	subs	r2, r1, r2
    3dde:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
    3de2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
    3de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3dea:	434a      	muls	r2, r1
    3dec:	fbb2 f0f0 	udiv	r0, r2, r0
    3df0:	2801      	cmp	r0, #1
    3df2:	bf38      	it	cc
    3df4:	2001      	movcc	r0, #1
    return time;
    3df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3dfa:	4298      	cmp	r0, r3
    3dfc:	bf28      	it	cs
    3dfe:	4618      	movcs	r0, r3
}
    3e00:	b280      	uxth	r0, r0
    3e02:	4770      	bx	lr

00003e04 <lv_color_hsv_to_rgb>:
 * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 */
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v)
{
    h = (uint32_t)((uint32_t)h * 255) / 360;
    s = (uint16_t)((uint16_t)s * 255) / 100;
    3e04:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
    v = (uint16_t)((uint16_t)v * 255) / 100;
    3e08:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    s = (uint16_t)((uint16_t)s * 255) / 100;
    3e0c:	2364      	movs	r3, #100	; 0x64
{
    3e0e:	b530      	push	{r4, r5, lr}
    s = (uint16_t)((uint16_t)s * 255) / 100;
    3e10:	b28c      	uxth	r4, r1
    v = (uint16_t)((uint16_t)v * 255) / 100;
    3e12:	b291      	uxth	r1, r2
    s = (uint16_t)((uint16_t)s * 255) / 100;
    3e14:	fbb4 f4f3 	udiv	r4, r4, r3

    uint8_t r, g, b;

    uint8_t region, remainder, p, q, t;

    if(s == 0) {
    3e18:	f014 02ff 	ands.w	r2, r4, #255	; 0xff
    v = (uint16_t)((uint16_t)v * 255) / 100;
    3e1c:	fbb1 f1f3 	udiv	r1, r1, r3
    3e20:	b2c9      	uxtb	r1, r1
    if(s == 0) {
    3e22:	d10a      	bne.n	3e3a <lv_color_hsv_to_rgb+0x36>
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    3e24:	08ca      	lsrs	r2, r1, #3
    3e26:	f04f 0000 	mov.w	r0, #0
    3e2a:	f362 0004 	bfi	r0, r2, #0, #5
    3e2e:	0889      	lsrs	r1, r1, #2
    3e30:	f361 104a 	bfi	r0, r1, #5, #6
    3e34:	f362 20cf 	bfi	r0, r2, #11, #5
            break;
    }

    lv_color_t result = lv_color_make(r, g, b);
    return result;
}
    3e38:	bd30      	pop	{r4, r5, pc}
    h = (uint32_t)((uint32_t)h * 255) / 360;
    3e3a:	f44f 73b4 	mov.w	r3, #360	; 0x168
    3e3e:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
    3e42:	fbb0 f0f3 	udiv	r0, r0, r3
    region    = h / 43;
    3e46:	232b      	movs	r3, #43	; 0x2b
    3e48:	b284      	uxth	r4, r0
    3e4a:	fbb4 f4f3 	udiv	r4, r4, r3
    remainder = (h - (region * 43)) * 6;
    3e4e:	f06f 032a 	mvn.w	r3, #42	; 0x2a
    region    = h / 43;
    3e52:	b2e4      	uxtb	r4, r4
    remainder = (h - (region * 43)) * 6;
    3e54:	fb03 0304 	mla	r3, r3, r4, r0
    3e58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e5c:	005b      	lsls	r3, r3, #1
    3e5e:	b2db      	uxtb	r3, r3
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
    3e60:	fb12 f503 	smulbb	r5, r2, r3
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
    3e64:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    3e68:	4353      	muls	r3, r2
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
    3e6a:	122d      	asrs	r5, r5, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
    3e6c:	121b      	asrs	r3, r3, #8
    p = (v * (255 - s)) >> 8;
    3e6e:	f1c2 00ff 	rsb	r0, r2, #255	; 0xff
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
    3e72:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
    3e76:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    p = (v * (255 - s)) >> 8;
    3e7a:	4348      	muls	r0, r1
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
    3e7c:	434d      	muls	r5, r1
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
    3e7e:	434b      	muls	r3, r1
    p = (v * (255 - s)) >> 8;
    3e80:	f3c0 2007 	ubfx	r0, r0, #8, #8
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
    3e84:	f3c5 2507 	ubfx	r5, r5, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
    3e88:	f3c3 2307 	ubfx	r3, r3, #8, #8
    switch(region) {
    3e8c:	2c04      	cmp	r4, #4
    3e8e:	d81f      	bhi.n	3ed0 <lv_color_hsv_to_rgb+0xcc>
    3e90:	e8df f004 	tbb	[pc, r4]
    3e94:	15100305 	.word	0x15100305
    3e98:	1a          	.byte	0x1a
    3e99:	00          	.byte	0x00
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
    3e9a:	460b      	mov	r3, r1
    3e9c:	4629      	mov	r1, r5
    return result;
    3e9e:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    3ea2:	f3c3 0387 	ubfx	r3, r3, #2, #8
    3ea6:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
    3eaa:	f3c1 00c7 	ubfx	r0, r1, #3, #8
    3eae:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
    3eb2:	e7c1      	b.n	3e38 <lv_color_hsv_to_rgb+0x34>
            break;
    3eb4:	460a      	mov	r2, r1
            r = p;
    3eb6:	4601      	mov	r1, r0
            b = t;
    3eb8:	4618      	mov	r0, r3
            g = v;
    3eba:	4613      	mov	r3, r2
            break;
    3ebc:	e7ef      	b.n	3e9e <lv_color_hsv_to_rgb+0x9a>
            break;
    3ebe:	460a      	mov	r2, r1
            g = q;
    3ec0:	462b      	mov	r3, r5
            r = p;
    3ec2:	4601      	mov	r1, r0
            b = v;
    3ec4:	4610      	mov	r0, r2
            break;
    3ec6:	e7ea      	b.n	3e9e <lv_color_hsv_to_rgb+0x9a>
    3ec8:	460a      	mov	r2, r1
            r = t;
    3eca:	4619      	mov	r1, r3
            g = p;
    3ecc:	4603      	mov	r3, r0
    3ece:	e7f9      	b.n	3ec4 <lv_color_hsv_to_rgb+0xc0>
            g = p;
    3ed0:	4603      	mov	r3, r0
            b = q;
    3ed2:	4628      	mov	r0, r5
            break;
    3ed4:	e7e3      	b.n	3e9e <lv_color_hsv_to_rgb+0x9a>

00003ed6 <line_init>:
#endif
    }
}

static void line_init(line_draw_t * line, const lv_point_t * p1, const lv_point_t * p2)
{
    3ed6:	b530      	push	{r4, r5, lr}
    line->p1.x = p1->x;
    3ed8:	f9b1 5000 	ldrsh.w	r5, [r1]
    3edc:	8005      	strh	r5, [r0, #0]
    line->p1.y = p1->y;
    3ede:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    line->p2.x = p2->x;
    3ee2:	f9b2 1000 	ldrsh.w	r1, [r2]
    line->p1.y = p1->y;
    3ee6:	8044      	strh	r4, [r0, #2]
    line->p2.y = p2->y;

    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
    3ee8:	1b4b      	subs	r3, r1, r5
    line->p2.y = p2->y;
    3eea:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    line->p2.x = p2->x;
    3eee:	8081      	strh	r1, [r0, #4]
    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	bfb8      	it	lt
    3ef4:	425b      	neglt	r3, r3
    line->sx  = line->p1.x < line->p2.x ? 1 : -1;
    3ef6:	428d      	cmp	r5, r1
    3ef8:	bfb4      	ite	lt
    3efa:	2101      	movlt	r1, #1
    3efc:	f04f 31ff 	movge.w	r1, #4294967295	; 0xffffffff
    3f00:	81c1      	strh	r1, [r0, #14]
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
    3f02:	1b11      	subs	r1, r2, r4
    3f04:	2900      	cmp	r1, #0
    3f06:	bfb8      	it	lt
    3f08:	4249      	neglt	r1, r1
    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
    3f0a:	b21b      	sxth	r3, r3
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
    3f0c:	b209      	sxth	r1, r1
    line->p2.y = p2->y;
    3f0e:	80c2      	strh	r2, [r0, #6]
    line->sy  = line->p1.y < line->p2.y ? 1 : -1;
    3f10:	4294      	cmp	r4, r2
    3f12:	bfb4      	ite	lt
    3f14:	2201      	movlt	r2, #1
    3f16:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
    3f1a:	428b      	cmp	r3, r1
    line->sy  = line->p1.y < line->p2.y ? 1 : -1;
    3f1c:	8242      	strh	r2, [r0, #18]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
    3f1e:	bfdb      	ittet	le
    3f20:	eb01 72d1 	addle.w	r2, r1, r1, lsr #31
    3f24:	1052      	asrle	r2, r2, #1
    3f26:	eb03 72d3 	addgt.w	r2, r3, r3, lsr #31
    3f2a:	4252      	negle	r2, r2
    3f2c:	bfcc      	ite	gt
    3f2e:	1052      	asrgt	r2, r2, #1
    3f30:	b212      	sxthle	r2, r2
    line->e2  = 0;
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
    3f32:	428b      	cmp	r3, r1
    line->dx  = LV_MATH_ABS(line->p2.x - line->p1.x);
    3f34:	8183      	strh	r3, [r0, #12]
    line->err = (line->dx > line->dy ? line->dx : -line->dy) / 2;
    3f36:	8282      	strh	r2, [r0, #20]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
    3f38:	bfd8      	it	le
    3f3a:	2300      	movle	r3, #0
    line->e2  = 0;
    3f3c:	f04f 0200 	mov.w	r2, #0
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
    3f40:	bfc8      	it	gt
    3f42:	2301      	movgt	r3, #1
    line->dy  = LV_MATH_ABS(line->p2.y - line->p1.y);
    3f44:	8201      	strh	r1, [r0, #16]
    line->e2  = 0;
    3f46:	82c2      	strh	r2, [r0, #22]
    line->hor = line->dx > line->dy ? true : false; /*Rather horizontal or vertical*/
    3f48:	7603      	strb	r3, [r0, #24]

    line->p_act.x = line->p1.x;
    3f4a:	8105      	strh	r5, [r0, #8]
    line->p_act.y = line->p1.y;
    3f4c:	8144      	strh	r4, [r0, #10]
}
    3f4e:	bd30      	pop	{r4, r5, pc}

00003f50 <line_next>:

static bool line_next(line_draw_t * line)
{
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
    3f50:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
    3f54:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    3f58:	428b      	cmp	r3, r1
{
    3f5a:	b530      	push	{r4, r5, lr}
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
    3f5c:	d105      	bne.n	3f6a <line_next+0x1a>
    3f5e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    3f62:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
    3f66:	429a      	cmp	r2, r3
    3f68:	d019      	beq.n	3f9e <line_next+0x4e>
    line->e2 = line->err;
    if(line->e2 > -line->dx) {
    3f6a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    line->e2 = line->err;
    3f6e:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    3f72:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
    3f76:	82c2      	strh	r2, [r0, #22]
    if(line->e2 > -line->dx) {
    3f78:	425d      	negs	r5, r3
    3f7a:	42aa      	cmp	r2, r5
    3f7c:	dd04      	ble.n	3f88 <line_next+0x38>
        line->err -= line->dy;
    3f7e:	1b15      	subs	r5, r2, r4
    3f80:	8285      	strh	r5, [r0, #20]
        line->p_act.x += line->sx;
    3f82:	89c5      	ldrh	r5, [r0, #14]
    3f84:	4429      	add	r1, r5
    3f86:	8101      	strh	r1, [r0, #8]
    }
    if(line->e2 < line->dy) {
    3f88:	42a2      	cmp	r2, r4
    3f8a:	da06      	bge.n	3f9a <line_next+0x4a>
        line->err += line->dx;
    3f8c:	8a82      	ldrh	r2, [r0, #20]
    3f8e:	4413      	add	r3, r2
    3f90:	8283      	strh	r3, [r0, #20]
        line->p_act.y += line->sy;
    3f92:	8a42      	ldrh	r2, [r0, #18]
    3f94:	8943      	ldrh	r3, [r0, #10]
    3f96:	4413      	add	r3, r2
    3f98:	8143      	strh	r3, [r0, #10]
    }
    return true;
    3f9a:	2001      	movs	r0, #1
    3f9c:	e000      	b.n	3fa0 <line_next+0x50>
    if(line->p_act.x == line->p2.x && line->p_act.y == line->p2.y) return false;
    3f9e:	2000      	movs	r0, #0
}
    3fa0:	bd30      	pop	{r4, r5, pc}

00003fa2 <lv_draw_line>:
{
    3fa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(style->line.width == 0) return;
    3fa6:	f9b3 6036 	ldrsh.w	r6, [r3, #54]	; 0x36
{
    3faa:	b09f      	sub	sp, #124	; 0x7c
    3fac:	4615      	mov	r5, r2
    3fae:	f89d 70a0 	ldrb.w	r7, [sp, #160]	; 0xa0
    3fb2:	461c      	mov	r4, r3
    if(style->line.width == 0) return;
    3fb4:	2e00      	cmp	r6, #0
    3fb6:	f000 808b 	beq.w	40d0 <lv_draw_line+0x12e>
    if(point1->x == point2->x && point1->y == point2->y) return;
    3fba:	f9b0 3000 	ldrsh.w	r3, [r0]
    3fbe:	f9b1 2000 	ldrsh.w	r2, [r1]
    3fc2:	4293      	cmp	r3, r2
    3fc4:	d105      	bne.n	3fd2 <lv_draw_line+0x30>
    3fc6:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
    3fca:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
    3fce:	45e6      	cmp	lr, ip
    3fd0:	d07e      	beq.n	40d0 <lv_draw_line+0x12e>
    if(point1->x < mask->x1 - style->line.width && point2->x < mask->x1 - style->line.width) return;
    3fd2:	f9b5 c000 	ldrsh.w	ip, [r5]
    3fd6:	ebac 0c06 	sub.w	ip, ip, r6
    3fda:	4563      	cmp	r3, ip
    3fdc:	da01      	bge.n	3fe2 <lv_draw_line+0x40>
    3fde:	4594      	cmp	ip, r2
    3fe0:	dc76      	bgt.n	40d0 <lv_draw_line+0x12e>
    if(point1->x > mask->x2 + style->line.width && point2->x > mask->x2 + style->line.width) return;
    3fe2:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
    3fe6:	44b4      	add	ip, r6
    3fe8:	4563      	cmp	r3, ip
    3fea:	dd01      	ble.n	3ff0 <lv_draw_line+0x4e>
    3fec:	4594      	cmp	ip, r2
    3fee:	db6f      	blt.n	40d0 <lv_draw_line+0x12e>
    if(point1->y < mask->y1 - style->line.width && point2->y < mask->y1 - style->line.width) return;
    3ff0:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
    3ff4:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    3ff8:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
    3ffc:	1b80      	subs	r0, r0, r6
    3ffe:	4584      	cmp	ip, r0
    4000:	da01      	bge.n	4006 <lv_draw_line+0x64>
    4002:	4570      	cmp	r0, lr
    4004:	dc64      	bgt.n	40d0 <lv_draw_line+0x12e>
    if(point1->y > mask->y2 + style->line.width && point2->y > mask->y2 + style->line.width) return;
    4006:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
    400a:	440e      	add	r6, r1
    400c:	45b4      	cmp	ip, r6
    400e:	dd01      	ble.n	4014 <lv_draw_line+0x72>
    4010:	4576      	cmp	r6, lr
    4012:	db5d      	blt.n	40d0 <lv_draw_line+0x12e>
    if(LV_MATH_ABS(point1->x - point2->x) > LV_MATH_ABS(point1->y - point2->y)) {
    4014:	1a98      	subs	r0, r3, r2
    4016:	ebac 010e 	sub.w	r1, ip, lr
    401a:	2800      	cmp	r0, #0
    401c:	bfb8      	it	lt
    401e:	4240      	neglt	r0, r0
    4020:	2900      	cmp	r1, #0
    4022:	bfb8      	it	lt
    4024:	4249      	neglt	r1, r1
    4026:	4288      	cmp	r0, r1
    4028:	dd55      	ble.n	40d6 <lv_draw_line+0x134>
        if(point1->x < point2->x) {
    402a:	4293      	cmp	r3, r2
            p2.x = point2->x;
    402c:	bfb4      	ite	lt
    402e:	f8ad 2034 	strhlt.w	r2, [sp, #52]	; 0x34
            p1.x = point2->x;
    4032:	f8ad 2030 	strhge.w	r2, [sp, #48]	; 0x30
    line_init(&main_line, &p1, &p2);
    4036:	a90c      	add	r1, sp, #48	; 0x30
    4038:	aa0d      	add	r2, sp, #52	; 0x34
    403a:	a810      	add	r0, sp, #64	; 0x40
            p1.y = point1->y;
    403c:	bfb9      	ittee	lt
    403e:	f8ad c032 	strhlt.w	ip, [sp, #50]	; 0x32
            p2.y = point2->y;
    4042:	f8ad e036 	strhlt.w	lr, [sp, #54]	; 0x36
            p1.y = point2->y;
    4046:	f8ad e032 	strhge.w	lr, [sp, #50]	; 0x32
            p2.y = point1->y;
    404a:	f8ad c036 	strhge.w	ip, [sp, #54]	; 0x36
            p1.x = point1->x;
    404e:	bfb4      	ite	lt
    4050:	f8ad 3030 	strhlt.w	r3, [sp, #48]	; 0x30
            p2.x = point1->x;
    4054:	f8ad 3034 	strhge.w	r3, [sp, #52]	; 0x34
    line_init(&main_line, &p1, &p2);
    4058:	f7ff ff3d 	bl	3ed6 <line_init>
    if(main_line.p1.y == main_line.p2.y) {
    405c:	f9bd e042 	ldrsh.w	lr, [sp, #66]	; 0x42
    4060:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
    4064:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
    4068:	f9bd c044 	ldrsh.w	ip, [sp, #68]	; 0x44
    406c:	45b6      	cmp	lr, r6
    406e:	d134      	bne.n	40da <lv_draw_line+0x138>
    lv_coord_t width      = style->line.width - 1;
    4070:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    4072:	3b01      	subs	r3, #1
    lv_coord_t width_half = width >> 1;
    4074:	f343 004e 	sbfx	r0, r3, #1, #15
    lv_coord_t width_1    = width & 0x1;
    4078:	f003 0201 	and.w	r2, r3, #1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
    407c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    4080:	2fff      	cmp	r7, #255	; 0xff
    4082:	bf18      	it	ne
    4084:	437b      	mulne	r3, r7
    act_area.y1 = main_line->p1.y - width_half - width_1;
    4086:	fa12 f280 	uxtah	r2, r2, r0
    act_area.y2 = main_line->p2.y + width_half;
    408a:	fa16 f680 	uxtah	r6, r6, r0
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
    408e:	bf18      	it	ne
    4090:	0a1b      	lsrne	r3, r3, #8
    act_area.y1 = main_line->p1.y - width_half - width_1;
    4092:	ebae 0202 	sub.w	r2, lr, r2
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
    4096:	4561      	cmp	r1, ip
    4098:	4608      	mov	r0, r1
    act_area.y1 = main_line->p1.y - width_half - width_1;
    409a:	b212      	sxth	r2, r2
    act_area.y2 = main_line->p2.y + width_half;
    409c:	b236      	sxth	r6, r6
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
    409e:	bfa8      	it	ge
    40a0:	4660      	movge	r0, ip
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
    40a2:	4561      	cmp	r1, ip
    40a4:	bfb8      	it	lt
    40a6:	4661      	movlt	r1, ip
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
    40a8:	42b2      	cmp	r2, r6
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
    40aa:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
    40ae:	4611      	mov	r1, r2
    40b0:	bfa8      	it	ge
    40b2:	4631      	movge	r1, r6
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
    40b4:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
    40b8:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
    40bc:	42b2      	cmp	r2, r6
    40be:	bfb8      	it	lt
    40c0:	4632      	movlt	r2, r6
    40c2:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
    lv_draw_fill(&draw_area, mask, style->line.color, opa);
    40c6:	4629      	mov	r1, r5
    40c8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    40ca:	a817      	add	r0, sp, #92	; 0x5c
    40cc:	f003 fb4a 	bl	7764 <lv_draw_fill>
}
    40d0:	b01f      	add	sp, #124	; 0x7c
    40d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(point1->y < point2->y) {
    40d6:	45f4      	cmp	ip, lr
    40d8:	e7a8      	b.n	402c <lv_draw_line+0x8a>
    else if(main_line.p1.x == main_line.p2.x) {
    40da:	4561      	cmp	r1, ip
    40dc:	d125      	bne.n	412a <lv_draw_line+0x188>
    lv_coord_t width      = style->line.width - 1;
    40de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    40e0:	3b01      	subs	r3, #1
    lv_coord_t width_half = width >> 1;
    40e2:	f343 024e 	sbfx	r2, r3, #1, #15
    act_area.x1 = main_line->p1.x - width_half;
    40e6:	b292      	uxth	r2, r2
    lv_coord_t width_1    = width & 0x1;
    40e8:	f003 0801 	and.w	r8, r3, #1
    act_area.x1 = main_line->p1.x - width_half;
    40ec:	1a88      	subs	r0, r1, r2
    40ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    act_area.x2 = main_line->p2.x + width_half + width_1;
    40f2:	eb02 0108 	add.w	r1, r2, r8
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
    40f6:	2fff      	cmp	r7, #255	; 0xff
    act_area.x2 = main_line->p2.x + width_half + width_1;
    40f8:	4461      	add	r1, ip
    act_area.x1 = main_line->p1.x - width_half;
    40fa:	b200      	sxth	r0, r0
    act_area.x2 = main_line->p2.x + width_half + width_1;
    40fc:	b209      	sxth	r1, r1
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
    40fe:	bf1c      	itt	ne
    4100:	437b      	mulne	r3, r7
    4102:	0a1b      	lsrne	r3, r3, #8
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
    4104:	4288      	cmp	r0, r1
    4106:	4602      	mov	r2, r0
    4108:	bfa8      	it	ge
    410a:	460a      	movge	r2, r1
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
    410c:	4288      	cmp	r0, r1
    410e:	bfb8      	it	lt
    4110:	4608      	movlt	r0, r1
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
    4112:	45b6      	cmp	lr, r6
    draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
    4114:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
    4118:	4672      	mov	r2, lr
    411a:	bfa8      	it	ge
    411c:	4632      	movge	r2, r6
    411e:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
    4122:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
    draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2);
    4126:	4672      	mov	r2, lr
    4128:	e7c8      	b.n	40bc <lv_draw_line+0x11a>
        bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    412a:	f006 f951 	bl	a3d0 <lv_refr_get_disp_refreshing>
    412e:	f004 f80f 	bl	8150 <lv_disp_get_antialiasing>
    4132:	4680      	mov	r8, r0
    4134:	4606      	mov	r6, r0
        if(aa) {
    4136:	b1e0      	cbz	r0, 4172 <lv_draw_line+0x1d0>
            if(main_line.hor) {
    4138:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
    413c:	2e00      	cmp	r6, #0
    413e:	d060      	beq.n	4202 <lv_draw_line+0x260>
                if(main_line.p1.y < main_line.p2.y) {
    4140:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
    4144:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    4148:	429a      	cmp	r2, r3
    414a:	da44      	bge.n	41d6 <lv_draw_line+0x234>
                    p_tmp.x = main_line.p2.x;
    414c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    4150:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
                    p_tmp.y = main_line.p2.y - 1;
    4154:	3b01      	subs	r3, #1
                    line_init(&main_line, &p1, &p_tmp);
    4156:	aa17      	add	r2, sp, #92	; 0x5c
    4158:	a90c      	add	r1, sp, #48	; 0x30
    415a:	a810      	add	r0, sp, #64	; 0x40
                    p_tmp.y = main_line.p2.y - 1;
    415c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    line_init(&main_line, &p1, &p_tmp);
    4160:	f7ff feb9 	bl	3ed6 <line_init>
                    main_line.sy = LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
    4164:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    4168:	2b00      	cmp	r3, #0
    416a:	bfb8      	it	lt
    416c:	425b      	neglt	r3, r3
    416e:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->line.opa : (uint16_t)((uint16_t)style->line.opa * opa_scale) >> 8;
    4172:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
    4176:	2fff      	cmp	r7, #255	; 0xff
    4178:	bf1c      	itt	ne
    417a:	fb0a f707 	mulne.w	r7, sl, r7
    417e:	ea4f 2a17 	movne.w	sl, r7, lsr #8
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    4182:	f006 f925 	bl	a3d0 <lv_refr_get_disp_refreshing>
    4186:	f003 ffe3 	bl	8150 <lv_disp_get_antialiasing>
    vect_main.x = main_line->p2.x - main_line->p1.x;
    418a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    418e:	9003      	str	r0, [sp, #12]
    vect_main.x = main_line->p2.x - main_line->p1.x;
    4190:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
    vect_main.y = main_line->p2.y - main_line->p1.y;
    4194:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
    vect_main.x = main_line->p2.x - main_line->p1.x;
    4198:	f9bd e044 	ldrsh.w	lr, [sp, #68]	; 0x44
    419c:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
    vect_main.y = main_line->p2.y - main_line->p1.y;
    41a0:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
    41a4:	f9bd b042 	ldrsh.w	fp, [sp, #66]	; 0x42
    vect_main.x = main_line->p2.x - main_line->p1.x;
    41a8:	1a47      	subs	r7, r0, r1
    41aa:	b23b      	sxth	r3, r7
    41ac:	9302      	str	r3, [sp, #8]
    vect_main.y = main_line->p2.y - main_line->p1.y;
    41ae:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    if(main_line->hor) {
    41b2:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    vect_main.y = main_line->p2.y - main_line->p1.y;
    41b6:	eba2 0c03 	sub.w	ip, r2, r3
    41ba:	fa0f fc8c 	sxth.w	ip, ip
    if(main_line->hor) {
    41be:	2f00      	cmp	r7, #0
    41c0:	d04f      	beq.n	4262 <lv_draw_line+0x2c0>
        if(main_line->p1.y < main_line->p2.y + dir_ori) {
    41c2:	44b0      	add	r8, r6
    41c4:	45c3      	cmp	fp, r8
    41c6:	da4f      	bge.n	4268 <lv_draw_line+0x2c6>
            vect_norm.x = -vect_main.y;
    41c8:	1a9b      	subs	r3, r3, r2
    41ca:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            vect_norm.y = vect_main.x;
    41ce:	9b02      	ldr	r3, [sp, #8]
    41d0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    41d4:	e04d      	b.n	4272 <lv_draw_line+0x2d0>
                } else if(main_line.p1.y > main_line.p2.y) {
    41d6:	dd12      	ble.n	41fe <lv_draw_line+0x25c>
                    p_tmp.x = main_line.p2.x;
    41d8:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    41dc:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
                    p_tmp.y = main_line.p2.y + 1;
    41e0:	3301      	adds	r3, #1
                    line_init(&main_line, &p1, &p_tmp);
    41e2:	aa17      	add	r2, sp, #92	; 0x5c
    41e4:	a90c      	add	r1, sp, #48	; 0x30
    41e6:	a810      	add	r0, sp, #64	; 0x40
                    p_tmp.y = main_line.p2.y + 1;
    41e8:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    line_init(&main_line, &p1, &p_tmp);
    41ec:	f7ff fe73 	bl	3ed6 <line_init>
                    main_line.sy = -LV_MATH_ABS(main_line.sy); /*The sign can change if the line becomes horizontal*/
    41f0:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    41f4:	2b00      	cmp	r3, #0
    41f6:	bfc8      	it	gt
    41f8:	425b      	neggt	r3, r3
    41fa:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool dir_ori = false;
    41fe:	2600      	movs	r6, #0
    4200:	e7b7      	b.n	4172 <lv_draw_line+0x1d0>
                if(main_line.p1.x < main_line.p2.x) {
    4202:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    4206:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    420a:	429a      	cmp	r2, r3
    420c:	da14      	bge.n	4238 <lv_draw_line+0x296>
                    p_tmp.x = main_line.p2.x - 1;
    420e:	3b01      	subs	r3, #1
    4210:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    line_init(&main_line, &p1, &p_tmp);
    4214:	aa17      	add	r2, sp, #92	; 0x5c
                    p_tmp.y = main_line.p2.y;
    4216:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    421a:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    line_init(&main_line, &p1, &p_tmp);
    421e:	a90c      	add	r1, sp, #48	; 0x30
    4220:	a810      	add	r0, sp, #64	; 0x40
    4222:	f7ff fe58 	bl	3ed6 <line_init>
                    main_line.sx = LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
    4226:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
    422a:	2b00      	cmp	r3, #0
    422c:	bfb8      	it	lt
    422e:	425b      	neglt	r3, r3
    4230:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                    dir_ori = true;
    4234:	4646      	mov	r6, r8
    4236:	e79c      	b.n	4172 <lv_draw_line+0x1d0>
                } else if(main_line.p1.x > main_line.p2.x) {
    4238:	dd9b      	ble.n	4172 <lv_draw_line+0x1d0>
                    p_tmp.x = main_line.p2.x + 1;
    423a:	3301      	adds	r3, #1
    423c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    line_init(&main_line, &p1, &p_tmp);
    4240:	aa17      	add	r2, sp, #92	; 0x5c
                    p_tmp.y = main_line.p2.y;
    4242:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    4246:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                    line_init(&main_line, &p1, &p_tmp);
    424a:	a90c      	add	r1, sp, #48	; 0x30
    424c:	a810      	add	r0, sp, #64	; 0x40
    424e:	f7ff fe42 	bl	3ed6 <line_init>
                    main_line.sx = -LV_MATH_ABS(main_line.sx); /*The sign can change if the line becomes vertical*/
    4252:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
    4256:	2b00      	cmp	r3, #0
    4258:	bfc8      	it	gt
    425a:	425b      	neggt	r3, r3
    425c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    4260:	e787      	b.n	4172 <lv_draw_line+0x1d0>
        if(main_line->p1.x < main_line->p2.x + dir_ori) {
    4262:	44b6      	add	lr, r6
    4264:	45f1      	cmp	r9, lr
    4266:	daaf      	bge.n	41c8 <lv_draw_line+0x226>
            vect_norm.y = -vect_main.x;
    4268:	1a09      	subs	r1, r1, r0
            vect_norm.x = vect_main.y;
    426a:	f8ad c038 	strh.w	ip, [sp, #56]	; 0x38
            vect_norm.y = -vect_main.x;
    426e:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    vect_norm.x = vect_norm.x << 4;
    4272:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    4276:	011b      	lsls	r3, r3, #4
    4278:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    vect_norm.y = vect_norm.y << 4;
    427c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
    4280:	011b      	lsls	r3, r3, #4
    4282:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    width = style->line.width;
    4286:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
    428a:	9302      	str	r3, [sp, #8]
    lv_coord_t pattern_size = width * 2;
    428c:	ea4f 0943 	mov.w	r9, r3, lsl #1
    4290:	fa0f f989 	sxth.w	r9, r9
    lv_point_t * pattern = lv_draw_get_buf(pattern_size * sizeof(lv_point_t));
    4294:	ea4f 0089 	mov.w	r0, r9, lsl #2
    4298:	f003 fd6c 	bl	7d74 <lv_draw_get_buf>
    if(width != 0) {
    429c:	9b02      	ldr	r3, [sp, #8]
    lv_point_t * pattern = lv_draw_get_buf(pattern_size * sizeof(lv_point_t));
    429e:	4607      	mov	r7, r0
    if(width != 0) {
    42a0:	2b00      	cmp	r3, #0
    42a2:	f000 83cf 	beq.w	4a44 <lv_draw_line+0xaa2>
        lv_point_t p0 = {0, 0};
    42a6:	f04f 0800 	mov.w	r8, #0
        line_init(&pattern_line, &p0, &vect_norm);
    42aa:	a817      	add	r0, sp, #92	; 0x5c
    42ac:	a90f      	add	r1, sp, #60	; 0x3c
    42ae:	aa0e      	add	r2, sp, #56	; 0x38
        lv_point_t p0 = {0, 0};
    42b0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
        line_init(&pattern_line, &p0, &vect_norm);
    42b4:	f7ff fe0f 	bl	3ed6 <line_init>
        uint32_t width_sqr = width * width;
    42b8:	9b02      	ldr	r3, [sp, #8]
        for(i = 0; i < (lv_coord_t)pattern_size - 1; i++) {
    42ba:	4641      	mov	r1, r8
        uint32_t width_sqr = width * width;
    42bc:	fb03 fb03 	mul.w	fp, r3, r3
        for(i = 0; i < (lv_coord_t)pattern_size - 1; i++) {
    42c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
            line_next(&pattern_line);
    42c4:	4603      	mov	r3, r0
    42c6:	fa0f f881 	sxth.w	r8, r1
        for(i = 0; i < (lv_coord_t)pattern_size - 1; i++) {
    42ca:	45c8      	cmp	r8, r9
    42cc:	db02      	blt.n	42d4 <lv_draw_line+0x332>
    if(aa) {
    42ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
    42d2:	e3be      	b.n	4a52 <lv_draw_line+0xab0>
            pattern[i].x = pattern_line.p_act.x;
    42d4:	eb07 0288 	add.w	r2, r7, r8, lsl #2
    42d8:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
            pattern[i].y = pattern_line.p_act.y;
    42dc:	f9bd c066 	ldrsh.w	ip, [sp, #102]	; 0x66
            pattern[i].x = pattern_line.p_act.x;
    42e0:	f827 0028 	strh.w	r0, [r7, r8, lsl #2]
            pattern[i].y = pattern_line.p_act.y;
    42e4:	f8a2 c002 	strh.w	ip, [r2, #2]
            uint32_t sqr = pattern_line.p_act.x * pattern_line.p_act.x + pattern_line.p_act.y * pattern_line.p_act.y;
    42e8:	f9bd c066 	ldrsh.w	ip, [sp, #102]	; 0x66
    42ec:	fb0c fc0c 	mul.w	ip, ip, ip
    42f0:	fb00 c000 	mla	r0, r0, r0, ip
            if(sqr >= width_sqr) {
    42f4:	4583      	cmp	fp, r0
    42f6:	f101 0201 	add.w	r2, r1, #1
    42fa:	d820      	bhi.n	433e <lv_draw_line+0x39c>
                if(aa) width--;
    42fc:	9b03      	ldr	r3, [sp, #12]
    42fe:	2b00      	cmp	r3, #0
    4300:	f000 83a3 	beq.w	4a4a <lv_draw_line+0xaa8>
    4304:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    4308:	fa0f f888 	sxth.w	r8, r8
        if(width == 0) width_safe = 1;
    430c:	f1b8 0f00 	cmp.w	r8, #0
    4310:	f040 839f 	bne.w	4a52 <lv_draw_line+0xab0>
    4314:	f04f 0801 	mov.w	r8, #1
        if(main_line->hor && main_line->p1.y >= main_line->p2.y + dir_ori) pattern[0].y--;
    4318:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    431c:	2b00      	cmp	r3, #0
    431e:	f000 8384 	beq.w	4a2a <lv_draw_line+0xa88>
    4322:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    4326:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
    432a:	441e      	add	r6, r3
    432c:	42b2      	cmp	r2, r6
    432e:	db02      	blt.n	4336 <lv_draw_line+0x394>
    4330:	887b      	ldrh	r3, [r7, #2]
    4332:	3b01      	subs	r3, #1
    4334:	807b      	strh	r3, [r7, #2]
    4336:	2300      	movs	r3, #0
    4338:	9302      	str	r3, [sp, #8]
    lv_coord_t y_center_ofs = 0;
    433a:	461a      	mov	r2, r3
    433c:	e39a      	b.n	4a74 <lv_draw_line+0xad2>
            line_next(&pattern_line);
    433e:	4618      	mov	r0, r3
    4340:	9204      	str	r2, [sp, #16]
    4342:	f7ff fe05 	bl	3f50 <line_next>
    4346:	9a04      	ldr	r2, [sp, #16]
    4348:	ab17      	add	r3, sp, #92	; 0x5c
    434a:	4611      	mov	r1, r2
    434c:	e7bb      	b.n	42c6 <lv_draw_line+0x324>
        pattern[i].x -= x_center_ofs;
    434e:	f8bb 3000 	ldrh.w	r3, [fp]
    4352:	9a09      	ldr	r2, [sp, #36]	; 0x24
        pattern[i].y -= y_center_ofs;
    4354:	f8bb 9002 	ldrh.w	r9, [fp, #2]
        pattern[i].x -= x_center_ofs;
    4358:	9308      	str	r3, [sp, #32]
    435a:	eba3 0c02 	sub.w	ip, r3, r2
        pattern[i].y -= y_center_ofs;
    435e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        if(aa) {
    4360:	9b03      	ldr	r3, [sp, #12]
        pattern[i].y -= y_center_ofs;
    4362:	eba9 0202 	sub.w	r2, r9, r2
        pattern[i].x -= x_center_ofs;
    4366:	fa1f fe8c 	uxth.w	lr, ip
        pattern[i].y -= y_center_ofs;
    436a:	b291      	uxth	r1, r2
        pattern[i].x -= x_center_ofs;
    436c:	fa0f fc8c 	sxth.w	ip, ip
        pattern[i].y -= y_center_ofs;
    4370:	b212      	sxth	r2, r2
        pattern[i].x -= x_center_ofs;
    4372:	f8ab c000 	strh.w	ip, [fp]
        pattern[i].y -= y_center_ofs;
    4376:	f8ab 2002 	strh.w	r2, [fp, #2]
        if(aa) {
    437a:	2b00      	cmp	r3, #0
    437c:	d04b      	beq.n	4416 <lv_draw_line+0x474>
            if(i != 0) {
    437e:	9b05      	ldr	r3, [sp, #20]
    4380:	2b00      	cmp	r3, #0
    4382:	d048      	beq.n	4416 <lv_draw_line+0x474>
                if(main_line->hor) {
    4384:	2800      	cmp	r0, #0
    4386:	d05d      	beq.n	4444 <lv_draw_line+0x4a2>
                    if(pattern[i - 1].x != pattern[i].x) {
    4388:	f93b 3c04 	ldrsh.w	r3, [fp, #-4]
    438c:	4563      	cmp	r3, ip
    438e:	d042      	beq.n	4416 <lv_draw_line+0x474>
                        lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
    4390:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    4394:	9307      	str	r3, [sp, #28]
    4396:	885b      	ldrh	r3, [r3, #2]
    4398:	f837 e026 	ldrh.w	lr, [r7, r6, lsl #2]
    439c:	f8bd c042 	ldrh.w	ip, [sp, #66]	; 0x42
    43a0:	1aca      	subs	r2, r1, r3
    43a2:	b290      	uxth	r0, r2
    43a4:	9008      	str	r0, [sp, #32]
    43a6:	980a      	ldr	r0, [sp, #40]	; 0x28
    43a8:	eba0 0909 	sub.w	r9, r0, r9
    43ac:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
    43b0:	3801      	subs	r0, #1
    43b2:	4470      	add	r0, lr
                        if(main_line->sy < 0) {
    43b4:	f9bd e052 	ldrsh.w	lr, [sp, #82]	; 0x52
    43b8:	4499      	add	r9, r3
    43ba:	f1be 0f00 	cmp.w	lr, #0
                        lv_coord_t seg_w = pattern[i].y - pattern[aa_last_corner].y;
    43be:	b212      	sxth	r2, r2
                        if(main_line->sy < 0) {
    43c0:	fa0f f989 	sxth.w	r9, r9
    43c4:	b200      	sxth	r0, r0
    43c6:	da2c      	bge.n	4422 <lv_draw_line+0x480>
                                               main_line->p1.y + pattern[aa_last_corner].y + seg_w + 1, seg_w, mask,
    43c8:	f10c 0c01 	add.w	ip, ip, #1
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
    43cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    43ce:	f8ad 3000 	strh.w	r3, [sp]
                                               main_line->p1.y + pattern[aa_last_corner].y + seg_w + 1, seg_w, mask,
    43d2:	4461      	add	r1, ip
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
    43d4:	462b      	mov	r3, r5
    43d6:	b209      	sxth	r1, r1
    43d8:	f8cd a004 	str.w	sl, [sp, #4]
    43dc:	f003 fd1c 	bl	7e18 <lv_draw_aa_ver_seg>
                                               main_line->p2.y + pattern[aa_last_corner].y + seg_w + 1, -seg_w, mask,
    43e0:	9b07      	ldr	r3, [sp, #28]
    43e2:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    43e6:	885b      	ldrh	r3, [r3, #2]
    43e8:	3101      	adds	r1, #1
    43ea:	4419      	add	r1, r3
    43ec:	9b08      	ldr	r3, [sp, #32]
    43ee:	440b      	add	r3, r1
    43f0:	4619      	mov	r1, r3
                            lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
    43f2:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
    43f6:	f837 3026 	ldrh.w	r3, [r7, r6, lsl #2]
    43fa:	f8cd a004 	str.w	sl, [sp, #4]
    43fe:	3001      	adds	r0, #1
    4400:	4418      	add	r0, r3
    4402:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4404:	f8ad 3000 	strh.w	r3, [sp]
    4408:	464a      	mov	r2, r9
    440a:	462b      	mov	r3, r5
    440c:	b209      	sxth	r1, r1
    440e:	b200      	sxth	r0, r0
    4410:	f003 fd02 	bl	7e18 <lv_draw_aa_ver_seg>
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
    4414:	9e05      	ldr	r6, [sp, #20]
    for(i = 0; i < width; i++) {
    4416:	9b06      	ldr	r3, [sp, #24]
    4418:	3301      	adds	r3, #1
    441a:	9306      	str	r3, [sp, #24]
    441c:	f10b 0b04 	add.w	fp, fp, #4
    4420:	e331      	b.n	4a86 <lv_draw_line+0xae4>
                                               main_line->p1.y + pattern[aa_last_corner].y, seg_w, mask,
    4422:	eb03 010c 	add.w	r1, r3, ip
                            lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
    4426:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4428:	f8ad 3000 	strh.w	r3, [sp]
    442c:	b209      	sxth	r1, r1
    442e:	462b      	mov	r3, r5
    4430:	f8cd a004 	str.w	sl, [sp, #4]
    4434:	f003 fcf0 	bl	7e18 <lv_draw_aa_ver_seg>
                                               main_line->p2.y + pattern[aa_last_corner].y, -seg_w, mask,
    4438:	9a07      	ldr	r2, [sp, #28]
    443a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    443e:	8851      	ldrh	r1, [r2, #2]
    4440:	4419      	add	r1, r3
    4442:	e7d6      	b.n	43f2 <lv_draw_line+0x450>
                    if(pattern[i - 1].y != pattern[i].y) {
    4444:	f93b 1c02 	ldrsh.w	r1, [fp, #-2]
    4448:	4291      	cmp	r1, r2
    444a:	d0e4      	beq.n	4416 <lv_draw_line+0x474>
                        lv_coord_t seg_w = pattern[i].x - pattern[aa_last_corner].x;
    444c:	f837 c026 	ldrh.w	ip, [r7, r6, lsl #2]
    4450:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
    4454:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
    4458:	ebae 020c 	sub.w	r2, lr, ip
    445c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    4460:	9307      	str	r3, [sp, #28]
    4462:	b293      	uxth	r3, r2
    4464:	930b      	str	r3, [sp, #44]	; 0x2c
    4466:	b213      	sxth	r3, r2
    4468:	ee07 3a90 	vmov	s15, r3
                        if(main_line->sx < 0) {
    446c:	9b07      	ldr	r3, [sp, #28]
    446e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    4472:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    4476:	3901      	subs	r1, #1
    4478:	4449      	add	r1, r9
    447a:	eba3 0902 	sub.w	r9, r3, r2
    447e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
    4482:	44e1      	add	r9, ip
    4484:	2b00      	cmp	r3, #0
    4486:	b209      	sxth	r1, r1
    4488:	fa0f f989 	sxth.w	r9, r9
    448c:	da27      	bge.n	44de <lv_draw_line+0x53c>
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w + 1,
    448e:	3001      	adds	r0, #1
    4490:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4492:	f8ad 3000 	strh.w	r3, [sp]
    4496:	4470      	add	r0, lr
    4498:	462b      	mov	r3, r5
    449a:	b200      	sxth	r0, r0
    449c:	ee17 2a90 	vmov	r2, s15
    44a0:	f8cd a004 	str.w	sl, [sp, #4]
    44a4:	f003 fce7 	bl	7e76 <lv_draw_aa_hor_seg>
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
    44a8:	9b07      	ldr	r3, [sp, #28]
    44aa:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    44ae:	885b      	ldrh	r3, [r3, #2]
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
    44b0:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
    44b4:	3101      	adds	r1, #1
    44b6:	4419      	add	r1, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w + 1,
    44b8:	f837 3026 	ldrh.w	r3, [r7, r6, lsl #2]
    44bc:	3001      	adds	r0, #1
    44be:	4418      	add	r0, r3
    44c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44c2:	4403      	add	r3, r0
    44c4:	4618      	mov	r0, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
    44c6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    44c8:	f8ad 3000 	strh.w	r3, [sp]
    44cc:	f8cd a004 	str.w	sl, [sp, #4]
    44d0:	462b      	mov	r3, r5
    44d2:	464a      	mov	r2, r9
    44d4:	b209      	sxth	r1, r1
    44d6:	b200      	sxth	r0, r0
    44d8:	f003 fccd 	bl	7e76 <lv_draw_aa_hor_seg>
    44dc:	e79a      	b.n	4414 <lv_draw_line+0x472>
                            lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
    44de:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    44e0:	f8ad 3000 	strh.w	r3, [sp]
    44e4:	4460      	add	r0, ip
    44e6:	462b      	mov	r3, r5
    44e8:	b200      	sxth	r0, r0
    44ea:	ee17 2a90 	vmov	r2, s15
    44ee:	f8cd a004 	str.w	sl, [sp, #4]
    44f2:	f003 fcc0 	bl	7e76 <lv_draw_aa_hor_seg>
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
    44f6:	9b07      	ldr	r3, [sp, #28]
    44f8:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    44fc:	885b      	ldrh	r3, [r3, #2]
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
    44fe:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
                                               main_line->p2.y + pattern[aa_last_corner].y + 1, -seg_w, mask,
    4502:	3101      	adds	r1, #1
    4504:	4419      	add	r1, r3
                            lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
    4506:	f837 3026 	ldrh.w	r3, [r7, r6, lsl #2]
    450a:	4418      	add	r0, r3
    450c:	e7db      	b.n	44c6 <lv_draw_line+0x524>
                                   main_line->p1.y + pattern[aa_last_corner].y, seg_w + main_line->sy, mask,
    450e:	4431      	add	r1, r6
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
    4510:	f8ad 3000 	strh.w	r3, [sp]
    4514:	b209      	sxth	r1, r1
    4516:	462b      	mov	r3, r5
    4518:	f8cd a004 	str.w	sl, [sp, #4]
    451c:	f003 fc7c 	bl	7e18 <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
    4520:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
    4524:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    4528:	f8b8 1002 	ldrh.w	r1, [r8, #2]
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
    452c:	444a      	add	r2, r9
    452e:	1ab2      	subs	r2, r6, r2
                                   main_line->p2.y + pattern[aa_last_corner].y, -(seg_w + main_line->sy), mask,
    4530:	4419      	add	r1, r3
    4532:	e2f7      	b.n	4b24 <lv_draw_line+0xb82>
            lv_coord_t seg_w = pattern[width_safe - 1].x - pattern[aa_last_corner].x;
    4534:	9a06      	ldr	r2, [sp, #24]
    4536:	f837 9022 	ldrh.w	r9, [r7, r2, lsl #2]
    453a:	eba9 020b 	sub.w	r2, r9, fp
    453e:	b290      	uxth	r0, r2
    4540:	9008      	str	r0, [sp, #32]
            if(main_line->sx < 0) {
    4542:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
    4546:	3901      	subs	r1, #1
    4548:	4431      	add	r1, r6
    454a:	fa10 f282 	uxtah	r2, r0, r2
    454e:	2800      	cmp	r0, #0
    4550:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
    4552:	b209      	sxth	r1, r1
    4554:	b212      	sxth	r2, r2
    4556:	da28      	bge.n	45aa <lv_draw_line+0x608>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x + seg_w,
    4558:	eb09 0003 	add.w	r0, r9, r3
    455c:	b200      	sxth	r0, r0
    455e:	462b      	mov	r3, r5
    4560:	f8cd a004 	str.w	sl, [sp, #4]
    4564:	f8ad 6000 	strh.w	r6, [sp]
    4568:	f003 fc85 	bl	7e76 <lv_draw_aa_hor_seg>
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
    456c:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    4570:	f8b8 3002 	ldrh.w	r3, [r8, #2]
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
    4574:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
    4578:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
    457c:	3101      	adds	r1, #1
    457e:	4419      	add	r1, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x + seg_w,
    4580:	9b07      	ldr	r3, [sp, #28]
    4582:	5afb      	ldrh	r3, [r7, r3]
    4584:	4418      	add	r0, r3
    4586:	9b08      	ldr	r3, [sp, #32]
    4588:	444a      	add	r2, r9
    458a:	4403      	add	r3, r0
    458c:	ebab 0202 	sub.w	r2, fp, r2
    4590:	4618      	mov	r0, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
    4592:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4594:	f8ad 3000 	strh.w	r3, [sp]
    4598:	f8cd a004 	str.w	sl, [sp, #4]
    459c:	462b      	mov	r3, r5
    459e:	b212      	sxth	r2, r2
    45a0:	b209      	sxth	r1, r1
    45a2:	b200      	sxth	r0, r0
    45a4:	f003 fc67 	bl	7e76 <lv_draw_aa_hor_seg>
    45a8:	e2cd      	b.n	4b46 <lv_draw_line+0xba4>
                lv_draw_aa_hor_seg(main_line->p1.x + pattern[aa_last_corner].x,
    45aa:	eb0b 0003 	add.w	r0, fp, r3
    45ae:	b200      	sxth	r0, r0
    45b0:	462b      	mov	r3, r5
    45b2:	f8cd a004 	str.w	sl, [sp, #4]
    45b6:	f8ad 6000 	strh.w	r6, [sp]
    45ba:	f003 fc5c 	bl	7e76 <lv_draw_aa_hor_seg>
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
    45be:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    45c2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
    45c6:	9807      	ldr	r0, [sp, #28]
    45c8:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
    45cc:	5a38      	ldrh	r0, [r7, r0]
                                   main_line->p2.y + pattern[aa_last_corner].y + 1, -(seg_w + main_line->sx), mask,
    45ce:	3101      	adds	r1, #1
    45d0:	4419      	add	r1, r3
                lv_draw_aa_hor_seg(main_line->p2.x + pattern[aa_last_corner].x,
    45d2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    45d6:	444a      	add	r2, r9
    45d8:	ebab 0202 	sub.w	r2, fp, r2
    45dc:	4418      	add	r0, r3
    45de:	e7d8      	b.n	4592 <lv_draw_line+0x5f0>
    if(aa) {
    45e0:	9b03      	ldr	r3, [sp, #12]
    45e2:	2b00      	cmp	r3, #0
    45e4:	f040 82af 	bne.w	4b46 <lv_draw_line+0xba4>
    lv_coord_t aa_shift2 = 0;
    45e8:	f8dd 900c 	ldr.w	r9, [sp, #12]
    lv_coord_t aa_shift1 = 0;
    45ec:	46cb      	mov	fp, r9
    45ee:	e2c1      	b.n	4b74 <lv_draw_line+0xbd2>
            if(main_line->sy < 0) {
    45f0:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    45f4:	e2b4      	b.n	4b60 <lv_draw_line+0xbbe>
                draw_area.x1 = prev_p.x + pattern[i].x;
    45f6:	8832      	ldrh	r2, [r6, #0]
    45f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
                draw_area.y1 = prev_p.y + pattern[i].y;
    45fc:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                draw_area.x1 = prev_p.x + pattern[i].x;
    4600:	441a      	add	r2, r3
    4602:	b292      	uxth	r2, r2
    4604:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
                draw_area.y1 = prev_p.y + pattern[i].y;
    4608:	8873      	ldrh	r3, [r6, #2]
    460a:	440b      	add	r3, r1
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
    460c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
    4610:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    4614:	ebac 0c01 	sub.w	ip, ip, r1
                draw_area.y1 = prev_p.y + pattern[i].y;
    4618:	b21b      	sxth	r3, r3
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
    461a:	4462      	add	r2, ip
                draw_area.y1 = prev_p.y + pattern[i].y;
    461c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x - 1;
    4620:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
                draw_area.y2 = draw_area.y1;
    4624:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
    4628:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    462a:	4653      	mov	r3, sl
    462c:	4629      	mov	r1, r5
    462e:	a817      	add	r0, sp, #92	; 0x5c
    4630:	f003 f898 	bl	7764 <lv_draw_fill>
                if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
    4634:	9b08      	ldr	r3, [sp, #32]
    4636:	b1b3      	cbz	r3, 4666 <lv_draw_line+0x6c4>
    4638:	f9b6 2000 	ldrsh.w	r2, [r6]
    463c:	f936 3c04 	ldrsh.w	r3, [r6, #-4]
    4640:	429a      	cmp	r2, r3
    4642:	d010      	beq.n	4666 <lv_draw_line+0x6c4>
    4644:	f1b8 0f00 	cmp.w	r8, #0
    4648:	d10d      	bne.n	4666 <lv_draw_line+0x6c4>
                    lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
    464a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    464e:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
    4652:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c
    4656:	f8cd a000 	str.w	sl, [sp]
    465a:	1ac9      	subs	r1, r1, r3
    465c:	462a      	mov	r2, r5
    465e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4660:	b209      	sxth	r1, r1
    4662:	f003 f832 	bl	76ca <lv_draw_px>
            for(i = 0; i < width; i++) {
    4666:	9b07      	ldr	r3, [sp, #28]
    4668:	3301      	adds	r3, #1
    466a:	9307      	str	r3, [sp, #28]
    466c:	3604      	adds	r6, #4
    466e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
    4672:	9a02      	ldr	r2, [sp, #8]
    4674:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
    4678:	9308      	str	r3, [sp, #32]
    467a:	4293      	cmp	r3, r2
    467c:	dbbb      	blt.n	45f6 <lv_draw_line+0x654>
            if(aa) {
    467e:	9b03      	ldr	r3, [sp, #12]
    4680:	2b00      	cmp	r3, #0
    4682:	d033      	beq.n	46ec <lv_draw_line+0x74a>
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
    4684:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
    4688:	8879      	ldrh	r1, [r7, #2]
    468a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
                                   -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
    468e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
    4692:	4419      	add	r1, r3
    4694:	883b      	ldrh	r3, [r7, #0]
    4696:	f8cd a004 	str.w	sl, [sp, #4]
                                   -(main_line->p_act.x - prev_p.x), mask, style->line.color, opa);
    469a:	eba2 020c 	sub.w	r2, r2, ip
                lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
    469e:	4418      	add	r0, r3
    46a0:	eba1 010b 	sub.w	r1, r1, fp
    46a4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    46a6:	f8ad 3000 	strh.w	r3, [sp]
    46aa:	b212      	sxth	r2, r2
    46ac:	462b      	mov	r3, r5
    46ae:	b209      	sxth	r1, r1
    46b0:	b200      	sxth	r0, r0
    46b2:	f003 fbe0 	bl	7e76 <lv_draw_aa_hor_seg>
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
    46b6:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
    46ba:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    46be:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    46c2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    46c6:	1a8a      	subs	r2, r1, r2
    46c8:	9905      	ldr	r1, [sp, #20]
    46ca:	8849      	ldrh	r1, [r1, #2]
    46cc:	4419      	add	r1, r3
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
    46ce:	9b05      	ldr	r3, [sp, #20]
    46d0:	881b      	ldrh	r3, [r3, #0]
    46d2:	f8cd a004 	str.w	sl, [sp, #4]
    46d6:	4418      	add	r0, r3
                                   prev_p.y + pattern[width_safe - 1].y + aa_shift2, main_line->p_act.x - prev_p.x,
    46d8:	4449      	add	r1, r9
                lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x,
    46da:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    46dc:	f8ad 3000 	strh.w	r3, [sp]
    46e0:	b212      	sxth	r2, r2
    46e2:	462b      	mov	r3, r5
    46e4:	b209      	sxth	r1, r1
    46e6:	b200      	sxth	r0, r0
    46e8:	f003 fbc5 	bl	7e76 <lv_draw_aa_hor_seg>
            prev_p.x = main_line->p_act.x;
    46ec:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
    46f0:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
    46f4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
    46f8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            first_run = false;
    46fc:	f04f 0800 	mov.w	r8, #0
 * @param line
 * @return
 */
static bool line_next_y(line_draw_t * line)
{
    lv_coord_t last_y = line->p_act.y;
    4700:	f9bd 604a 	ldrsh.w	r6, [sp, #74]	; 0x4a

    do {
        if(!line_next(line)) return false;
    4704:	a810      	add	r0, sp, #64	; 0x40
    4706:	f7ff fc23 	bl	3f50 <line_next>
    470a:	2800      	cmp	r0, #0
    470c:	f000 8088 	beq.w	4820 <lv_draw_line+0x87e>
    } while(last_y == line->p_act.y);
    4710:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
    4714:	42b3      	cmp	r3, r6
    4716:	d0f5      	beq.n	4704 <lv_draw_line+0x762>
    4718:	2300      	movs	r3, #0
    471a:	463e      	mov	r6, r7
    471c:	9307      	str	r3, [sp, #28]
    471e:	e7a6      	b.n	466e <lv_draw_line+0x6cc>
            draw_area.x1 = prev_p.x + pattern[i].x;
    4720:	9b04      	ldr	r3, [sp, #16]
    4722:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    4726:	881b      	ldrh	r3, [r3, #0]
            draw_area.y1 = prev_p.y + pattern[i].y;
    4728:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
    472c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
            draw_area.x1 = prev_p.x + pattern[i].x;
    4730:	4413      	add	r3, r2
    4732:	b29b      	uxth	r3, r3
            draw_area.y1 = prev_p.y + pattern[i].y;
    4734:	9a04      	ldr	r2, [sp, #16]
            draw_area.x1 = prev_p.x + pattern[i].x;
    4736:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            draw_area.y1 = prev_p.y + pattern[i].y;
    473a:	8852      	ldrh	r2, [r2, #2]
    473c:	440a      	add	r2, r1
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
    473e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    4742:	1a09      	subs	r1, r1, r0
            draw_area.y1 = prev_p.y + pattern[i].y;
    4744:	b212      	sxth	r2, r2
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
    4746:	440b      	add	r3, r1
            draw_area.y1 = prev_p.y + pattern[i].y;
    4748:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
            draw_area.x2 = draw_area.x1 + main_line->p_act.x - prev_p.x;
    474c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            draw_area.y2 = draw_area.y1;
    4750:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
    4754:	4653      	mov	r3, sl
    4756:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    4758:	4629      	mov	r1, r5
    475a:	a817      	add	r0, sp, #92	; 0x5c
    475c:	f003 f802 	bl	7764 <lv_draw_fill>
            if(i != 0 && pattern[i].x != pattern[i - 1].x && !first_run) {
    4760:	9b07      	ldr	r3, [sp, #28]
    4762:	b1bb      	cbz	r3, 4794 <lv_draw_line+0x7f2>
    4764:	9b04      	ldr	r3, [sp, #16]
    4766:	f9b3 2000 	ldrsh.w	r2, [r3]
    476a:	f933 3c04 	ldrsh.w	r3, [r3, #-4]
    476e:	429a      	cmp	r2, r3
    4770:	d010      	beq.n	4794 <lv_draw_line+0x7f2>
    4772:	f1b8 0f00 	cmp.w	r8, #0
    4776:	d10d      	bne.n	4794 <lv_draw_line+0x7f2>
                lv_draw_px(draw_area.x1, draw_area.y1 - main_line->sy, mask, style->line.color, opa);
    4778:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    477c:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
    4780:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c
    4784:	f8cd a000 	str.w	sl, [sp]
    4788:	1ac9      	subs	r1, r1, r3
    478a:	462a      	mov	r2, r5
    478c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    478e:	b209      	sxth	r1, r1
    4790:	f002 ff9b 	bl	76ca <lv_draw_px>
        for(i = 0; i < width; i++) {
    4794:	9b04      	ldr	r3, [sp, #16]
    4796:	3304      	adds	r3, #4
    4798:	3601      	adds	r6, #1
    479a:	9304      	str	r3, [sp, #16]
    479c:	9a02      	ldr	r2, [sp, #8]
    479e:	b233      	sxth	r3, r6
    47a0:	4293      	cmp	r3, r2
    47a2:	9307      	str	r3, [sp, #28]
    47a4:	dbbc      	blt.n	4720 <lv_draw_line+0x77e>
        if(aa) {
    47a6:	9b03      	ldr	r3, [sp, #12]
    47a8:	2b00      	cmp	r3, #0
    47aa:	f43f ac91 	beq.w	40d0 <lv_draw_line+0x12e>
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
    47ae:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
                               -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
    47b2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
    47b6:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
                               -(main_line->p_act.x - prev_p.x + 1), mask, style->line.color, opa);
    47ba:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
    47be:	1a52      	subs	r2, r2, r1
            lv_draw_aa_hor_seg(prev_p.x + pattern[0].x, prev_p.y + pattern[0].y - aa_shift1,
    47c0:	8879      	ldrh	r1, [r7, #2]
    47c2:	4401      	add	r1, r0
    47c4:	8838      	ldrh	r0, [r7, #0]
    47c6:	f8cd a004 	str.w	sl, [sp, #4]
    47ca:	eba1 010b 	sub.w	r1, r1, fp
    47ce:	4418      	add	r0, r3
    47d0:	43d2      	mvns	r2, r2
    47d2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    47d4:	f8ad 3000 	strh.w	r3, [sp]
    47d8:	b212      	sxth	r2, r2
    47da:	462b      	mov	r3, r5
    47dc:	b209      	sxth	r1, r1
    47de:	b200      	sxth	r0, r0
    47e0:	f003 fb49 	bl	7e76 <lv_draw_aa_hor_seg>
                               main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
    47e4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
    47e8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    47ec:	f8bd b03e 	ldrh.w	fp, [sp, #62]	; 0x3e
                               main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
    47f0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
    47f4:	9806      	ldr	r0, [sp, #24]
                               main_line->p_act.x - prev_p.x + 1, mask, style->line.color, opa);
    47f6:	3201      	adds	r2, #1
    47f8:	1a52      	subs	r2, r2, r1
            lv_draw_aa_hor_seg(prev_p.x + pattern[width_safe - 1].x, prev_p.y + pattern[width_safe - 1].y + aa_shift2,
    47fa:	9905      	ldr	r1, [sp, #20]
    47fc:	f837 0020 	ldrh.w	r0, [r7, r0, lsl #2]
    4800:	8849      	ldrh	r1, [r1, #2]
    4802:	f8cd a004 	str.w	sl, [sp, #4]
    4806:	4459      	add	r1, fp
    4808:	4449      	add	r1, r9
    480a:	4418      	add	r0, r3
    480c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    480e:	f8ad 3000 	strh.w	r3, [sp]
    4812:	b212      	sxth	r2, r2
    4814:	462b      	mov	r3, r5
    4816:	b209      	sxth	r1, r1
    4818:	b200      	sxth	r0, r0
    481a:	f003 fb2c 	bl	7e76 <lv_draw_aa_hor_seg>
    481e:	e457      	b.n	40d0 <lv_draw_line+0x12e>
    4820:	4606      	mov	r6, r0
    4822:	e7bb      	b.n	479c <lv_draw_line+0x7fa>
                draw_area.x1 = prev_p.x + pattern[i].x;
    4824:	8831      	ldrh	r1, [r6, #0]
    4826:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
                draw_area.y1 = prev_p.y + pattern[i].y;
    482a:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
                draw_area.x1 = prev_p.x + pattern[i].x;
    482e:	4419      	add	r1, r3
    4830:	b209      	sxth	r1, r1
    4832:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
                draw_area.y1 = prev_p.y + pattern[i].y;
    4836:	8873      	ldrh	r3, [r6, #2]
                draw_area.x2 = draw_area.x1;
    4838:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
    483c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                draw_area.y1 = prev_p.y + pattern[i].y;
    4840:	4403      	add	r3, r0
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
    4842:	3a01      	subs	r2, #1
    4844:	1a52      	subs	r2, r2, r1
                draw_area.y1 = prev_p.y + pattern[i].y;
    4846:	b29b      	uxth	r3, r3
    4848:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y - 1;
    484c:	4413      	add	r3, r2
    484e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                lv_draw_fill(&draw_area, mask, style->line.color, opa);
    4852:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    4854:	4653      	mov	r3, sl
    4856:	4629      	mov	r1, r5
    4858:	a817      	add	r0, sp, #92	; 0x5c
    485a:	f002 ff83 	bl	7764 <lv_draw_fill>
                if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
    485e:	9b08      	ldr	r3, [sp, #32]
    4860:	b1ab      	cbz	r3, 488e <lv_draw_line+0x8ec>
    4862:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
    4866:	f936 3c02 	ldrsh.w	r3, [r6, #-2]
    486a:	429a      	cmp	r2, r3
    486c:	d00f      	beq.n	488e <lv_draw_line+0x8ec>
    486e:	9b07      	ldr	r3, [sp, #28]
    4870:	b96b      	cbnz	r3, 488e <lv_draw_line+0x8ec>
                    lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
    4872:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
    4876:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
    487a:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
    487e:	f8cd a000 	str.w	sl, [sp]
    4882:	1ac0      	subs	r0, r0, r3
    4884:	462a      	mov	r2, r5
    4886:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4888:	b200      	sxth	r0, r0
    488a:	f002 ff1e 	bl	76ca <lv_draw_px>
            for(i = 0; i < width; i++) {
    488e:	f108 0801 	add.w	r8, r8, #1
    4892:	3604      	adds	r6, #4
    4894:	9902      	ldr	r1, [sp, #8]
    4896:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
    489a:	fa0f f388 	sxth.w	r3, r8
    489e:	428b      	cmp	r3, r1
    48a0:	9308      	str	r3, [sp, #32]
    48a2:	dbbf      	blt.n	4824 <lv_draw_line+0x882>
            if(aa) {
    48a4:	9b03      	ldr	r3, [sp, #12]
    48a6:	2b00      	cmp	r3, #0
    48a8:	d032      	beq.n	4910 <lv_draw_line+0x96e>
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
    48aa:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
    48ae:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                                   -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
    48b2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
    48b6:	8838      	ldrh	r0, [r7, #0]
                                   -(main_line->p_act.y - prev_p.y), mask, style->line.color, opa);
    48b8:	1a9a      	subs	r2, r3, r2
                lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
    48ba:	887b      	ldrh	r3, [r7, #2]
    48bc:	f8cd a004 	str.w	sl, [sp, #4]
    48c0:	4430      	add	r0, r6
    48c2:	4419      	add	r1, r3
    48c4:	eba0 000b 	sub.w	r0, r0, fp
    48c8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    48ca:	f8ad 3000 	strh.w	r3, [sp]
    48ce:	b212      	sxth	r2, r2
    48d0:	462b      	mov	r3, r5
    48d2:	b209      	sxth	r1, r1
    48d4:	b200      	sxth	r0, r0
    48d6:	f003 fa9f 	bl	7e18 <lv_draw_aa_ver_seg>
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
    48da:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
                                   prev_p.y + pattern[width_safe - 1].y, main_line->p_act.y - prev_p.y, mask,
    48de:	f8bd 004a 	ldrh.w	r0, [sp, #74]	; 0x4a
    48e2:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    48e6:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    48ea:	1a82      	subs	r2, r0, r2
    48ec:	9805      	ldr	r0, [sp, #20]
    48ee:	8840      	ldrh	r0, [r0, #2]
    48f0:	4401      	add	r1, r0
                lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2,
    48f2:	9805      	ldr	r0, [sp, #20]
    48f4:	8800      	ldrh	r0, [r0, #0]
    48f6:	f8cd a004 	str.w	sl, [sp, #4]
    48fa:	4418      	add	r0, r3
    48fc:	4448      	add	r0, r9
    48fe:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4900:	f8ad 3000 	strh.w	r3, [sp]
    4904:	b212      	sxth	r2, r2
    4906:	462b      	mov	r3, r5
    4908:	b209      	sxth	r1, r1
    490a:	b200      	sxth	r0, r0
    490c:	f003 fa84 	bl	7e18 <lv_draw_aa_ver_seg>
            prev_p.x = main_line->p_act.x;
    4910:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
    4914:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            prev_p.y = main_line->p_act.y;
    4918:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
    491c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            first_run = false;
    4920:	2300      	movs	r3, #0
    4922:	e136      	b.n	4b92 <lv_draw_line+0xbf0>
            draw_area.x1 = prev_p.x + pattern[i].x;
    4924:	9a04      	ldr	r2, [sp, #16]
    4926:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    492a:	8812      	ldrh	r2, [r2, #0]
            draw_area.y1 = prev_p.y + pattern[i].y;
    492c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
            draw_area.x1 = prev_p.x + pattern[i].x;
    4930:	441a      	add	r2, r3
    4932:	b212      	sxth	r2, r2
            draw_area.y1 = prev_p.y + pattern[i].y;
    4934:	9b04      	ldr	r3, [sp, #16]
            draw_area.x1 = prev_p.x + pattern[i].x;
    4936:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
            draw_area.y1 = prev_p.y + pattern[i].y;
    493a:	885b      	ldrh	r3, [r3, #2]
            draw_area.x2 = draw_area.x1;
    493c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            draw_area.y1 = prev_p.y + pattern[i].y;
    4940:	440b      	add	r3, r1
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
    4942:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
    4946:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
            draw_area.y1 = prev_p.y + pattern[i].y;
    494a:	b29b      	uxth	r3, r3
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
    494c:	1a52      	subs	r2, r2, r1
            draw_area.y1 = prev_p.y + pattern[i].y;
    494e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            draw_area.y2 = draw_area.y1 + main_line->p_act.y - prev_p.y;
    4952:	4413      	add	r3, r2
    4954:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_fill(&draw_area, mask, style->line.color, opa);
    4958:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    495a:	4653      	mov	r3, sl
    495c:	4629      	mov	r1, r5
    495e:	a817      	add	r0, sp, #92	; 0x5c
    4960:	f002 ff00 	bl	7764 <lv_draw_fill>
            if(i != 0 && pattern[i].y != pattern[i - 1].y && !first_run) {
    4964:	f1b8 0f00 	cmp.w	r8, #0
    4968:	d016      	beq.n	4998 <lv_draw_line+0x9f6>
    496a:	9b04      	ldr	r3, [sp, #16]
    496c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    4970:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
    4974:	429a      	cmp	r2, r3
    4976:	d00f      	beq.n	4998 <lv_draw_line+0x9f6>
    4978:	9b07      	ldr	r3, [sp, #28]
    497a:	b96b      	cbnz	r3, 4998 <lv_draw_line+0x9f6>
                lv_draw_px(draw_area.x1 - main_line->sx, draw_area.y1, mask, style->line.color, opa);
    497c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
    4980:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
    4984:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
    4988:	f8cd a000 	str.w	sl, [sp]
    498c:	1ac0      	subs	r0, r0, r3
    498e:	462a      	mov	r2, r5
    4990:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4992:	b200      	sxth	r0, r0
    4994:	f002 fe99 	bl	76ca <lv_draw_px>
        for(i = 0; i < width; i++) {
    4998:	9b04      	ldr	r3, [sp, #16]
    499a:	3304      	adds	r3, #4
    499c:	3601      	adds	r6, #1
    499e:	9304      	str	r3, [sp, #16]
    49a0:	9b02      	ldr	r3, [sp, #8]
    49a2:	fa0f f886 	sxth.w	r8, r6
    49a6:	4598      	cmp	r8, r3
    49a8:	dbbc      	blt.n	4924 <lv_draw_line+0x982>
        if(aa) {
    49aa:	9b03      	ldr	r3, [sp, #12]
    49ac:	2b00      	cmp	r3, #0
    49ae:	f43f ab8f 	beq.w	40d0 <lv_draw_line+0x12e>
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
    49b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
                               -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
    49b6:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
    49ba:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                               -(main_line->p_act.y - prev_p.y + 1), mask, style->line.color, opa);
    49be:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
    49c2:	1a12      	subs	r2, r2, r0
            lv_draw_aa_ver_seg(prev_p.x + pattern[0].x - aa_shift1, prev_p.y + pattern[0].y,
    49c4:	8878      	ldrh	r0, [r7, #2]
    49c6:	4401      	add	r1, r0
    49c8:	8838      	ldrh	r0, [r7, #0]
    49ca:	f8cd a004 	str.w	sl, [sp, #4]
    49ce:	4418      	add	r0, r3
    49d0:	eba0 000b 	sub.w	r0, r0, fp
    49d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    49d6:	f8ad 3000 	strh.w	r3, [sp]
    49da:	43d2      	mvns	r2, r2
    49dc:	462b      	mov	r3, r5
    49de:	b212      	sxth	r2, r2
    49e0:	b209      	sxth	r1, r1
    49e2:	b200      	sxth	r0, r0
    49e4:	f003 fa18 	bl	7e18 <lv_draw_aa_ver_seg>
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
    49e8:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
    49ec:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
    49f0:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
                               main_line->p_act.y - prev_p.y + 1, mask, style->line.color, opa);
    49f4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    49f8:	3201      	adds	r2, #1
    49fa:	1ad2      	subs	r2, r2, r3
            lv_draw_aa_ver_seg(prev_p.x + pattern[width_safe - 1].x + aa_shift2, prev_p.y + pattern[width_safe - 1].y,
    49fc:	9b05      	ldr	r3, [sp, #20]
    49fe:	885b      	ldrh	r3, [r3, #2]
    4a00:	4419      	add	r1, r3
    4a02:	9b06      	ldr	r3, [sp, #24]
    4a04:	f837 0023 	ldrh.w	r0, [r7, r3, lsl #2]
    4a08:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4a0a:	f8ad 3000 	strh.w	r3, [sp]
    4a0e:	4458      	add	r0, fp
    4a10:	4448      	add	r0, r9
    4a12:	f8cd a004 	str.w	sl, [sp, #4]
    4a16:	462b      	mov	r3, r5
    4a18:	b212      	sxth	r2, r2
    4a1a:	b209      	sxth	r1, r1
    4a1c:	b200      	sxth	r0, r0
    4a1e:	f003 f9fb 	bl	7e18 <lv_draw_aa_ver_seg>
}
    4a22:	f7ff bb55 	b.w	40d0 <lv_draw_line+0x12e>
    4a26:	4606      	mov	r6, r0
    4a28:	e7ba      	b.n	49a0 <lv_draw_line+0x9fe>
        if(!main_line->hor && main_line->p1.x >= main_line->p2.x + dir_ori) pattern[0].x--;
    4a2a:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
    4a2e:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
    4a32:	4416      	add	r6, r2
    4a34:	42b1      	cmp	r1, r6
    4a36:	db02      	blt.n	4a3e <lv_draw_line+0xa9c>
    4a38:	883a      	ldrh	r2, [r7, #0]
    4a3a:	3a01      	subs	r2, #1
    4a3c:	803a      	strh	r2, [r7, #0]
    4a3e:	9302      	str	r3, [sp, #8]
    lv_coord_t y_center_ofs = 0;
    4a40:	461a      	mov	r2, r3
    4a42:	e017      	b.n	4a74 <lv_draw_line+0xad2>
        if(width == 0) width_safe = 1;
    4a44:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
    4a48:	e466      	b.n	4318 <lv_draw_line+0x376>
    if(width != 0) {
    4a4a:	f1b8 0f00 	cmp.w	r8, #0
    4a4e:	f43f ac63 	beq.w	4318 <lv_draw_line+0x376>
        x_center_ofs = pattern[width - 1].x / 2;
    4a52:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    4a56:	3b01      	subs	r3, #1
    4a58:	eb07 0283 	add.w	r2, r7, r3, lsl #2
    4a5c:	f937 3023 	ldrsh.w	r3, [r7, r3, lsl #2]
        y_center_ofs = pattern[width - 1].y / 2;
    4a60:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    4a64:	f8cd 8008 	str.w	r8, [sp, #8]
        x_center_ofs = pattern[width - 1].x / 2;
    4a68:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        y_center_ofs = pattern[width - 1].y / 2;
    4a6c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        x_center_ofs = pattern[width - 1].x / 2;
    4a70:	105b      	asrs	r3, r3, #1
        y_center_ofs = pattern[width - 1].y / 2;
    4a72:	1052      	asrs	r2, r2, #1
        pattern[i].x -= x_center_ofs;
    4a74:	b29b      	uxth	r3, r3
    for(i = 0; i < width; i++) {
    4a76:	2100      	movs	r1, #0
        pattern[i].x -= x_center_ofs;
    4a78:	9309      	str	r3, [sp, #36]	; 0x24
        pattern[i].y -= y_center_ofs;
    4a7a:	b293      	uxth	r3, r2
    4a7c:	9704      	str	r7, [sp, #16]
    for(i = 0; i < width; i++) {
    4a7e:	46bb      	mov	fp, r7
    4a80:	9106      	str	r1, [sp, #24]
    4a82:	460e      	mov	r6, r1
        pattern[i].y -= y_center_ofs;
    4a84:	930a      	str	r3, [sp, #40]	; 0x28
    4a86:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    for(i = 0; i < width; i++) {
    4a8a:	9a02      	ldr	r2, [sp, #8]
    4a8c:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
    4a90:	9305      	str	r3, [sp, #20]
    4a92:	4293      	cmp	r3, r2
    4a94:	f6ff ac5b 	blt.w	434e <lv_draw_line+0x3ac>
    if(width != 0 && aa) { /*Due to rounding error with very thin lines it looks ugly*/
    4a98:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    4a9c:	3b01      	subs	r3, #1
    4a9e:	9306      	str	r3, [sp, #24]
    4aa0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4aa4:	9305      	str	r3, [sp, #20]
    4aa6:	2a00      	cmp	r2, #0
    4aa8:	f43f ad9a 	beq.w	45e0 <lv_draw_line+0x63e>
    4aac:	9b03      	ldr	r3, [sp, #12]
    4aae:	2b00      	cmp	r3, #0
    4ab0:	f43f ad9a 	beq.w	45e8 <lv_draw_line+0x646>
        if(main_line->hor) {
    4ab4:	eb07 0886 	add.w	r8, r7, r6, lsl #2
    4ab8:	00b3      	lsls	r3, r6, #2
    4aba:	f837 b026 	ldrh.w	fp, [r7, r6, lsl #2]
    4abe:	9307      	str	r3, [sp, #28]
    4ac0:	f8b8 6002 	ldrh.w	r6, [r8, #2]
    4ac4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    4ac8:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
    4acc:	2800      	cmp	r0, #0
    4ace:	f43f ad31 	beq.w	4534 <lv_draw_line+0x592>
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
    4ad2:	9a05      	ldr	r2, [sp, #20]
            if(main_line->sy < 0) {
    4ad4:	f9bd c052 	ldrsh.w	ip, [sp, #82]	; 0x52
            lv_coord_t seg_w = pattern[width_safe - 1].y - pattern[aa_last_corner].y;
    4ad8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
    4adc:	eba9 0206 	sub.w	r2, r9, r6
    4ae0:	b290      	uxth	r0, r2
    4ae2:	9008      	str	r0, [sp, #32]
            if(main_line->sy < 0) {
    4ae4:	1e58      	subs	r0, r3, #1
    4ae6:	fa1c f282 	uxtah	r2, ip, r2
    4aea:	4458      	add	r0, fp
    4aec:	f1bc 0f00 	cmp.w	ip, #0
    4af0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4af2:	b212      	sxth	r2, r2
    4af4:	b200      	sxth	r0, r0
    4af6:	f6bf ad0a 	bge.w	450e <lv_draw_line+0x56c>
                                   main_line->p1.y + pattern[aa_last_corner].y + seg_w, seg_w + main_line->sy, mask,
    4afa:	4449      	add	r1, r9
                lv_draw_aa_ver_seg(main_line->p1.x + pattern[aa_last_corner].x - 1,
    4afc:	f8ad 3000 	strh.w	r3, [sp]
    4b00:	b209      	sxth	r1, r1
    4b02:	462b      	mov	r3, r5
    4b04:	f8cd a004 	str.w	sl, [sp, #4]
    4b08:	f003 f986 	bl	7e18 <lv_draw_aa_ver_seg>
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
    4b0c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    4b10:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
    4b14:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
    4b18:	4419      	add	r1, r3
    4b1a:	9b08      	ldr	r3, [sp, #32]
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
    4b1c:	444a      	add	r2, r9
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
    4b1e:	440b      	add	r3, r1
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
    4b20:	1ab2      	subs	r2, r6, r2
                                   main_line->p2.y + pattern[aa_last_corner].y + seg_w, -(seg_w + main_line->sy), mask,
    4b22:	4619      	mov	r1, r3
                lv_draw_aa_ver_seg(main_line->p2.x + pattern[aa_last_corner].x + 1,
    4b24:	9b07      	ldr	r3, [sp, #28]
    4b26:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
    4b2a:	5afb      	ldrh	r3, [r7, r3]
    4b2c:	f8cd a004 	str.w	sl, [sp, #4]
    4b30:	3001      	adds	r0, #1
    4b32:	4418      	add	r0, r3
    4b34:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4b36:	f8ad 3000 	strh.w	r3, [sp]
    4b3a:	b212      	sxth	r2, r2
    4b3c:	462b      	mov	r3, r5
    4b3e:	b209      	sxth	r1, r1
    4b40:	b200      	sxth	r0, r0
    4b42:	f003 f969 	bl	7e18 <lv_draw_aa_ver_seg>
        if(main_line->hor == false) {
    4b46:	9b02      	ldr	r3, [sp, #8]
    4b48:	f1b3 0b00 	subs.w	fp, r3, #0
    4b4c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    4b50:	bf18      	it	ne
    4b52:	f04f 0b01 	movne.w	fp, #1
    4b56:	2b00      	cmp	r3, #0
    4b58:	f47f ad4a 	bne.w	45f0 <lv_draw_line+0x64e>
            if(main_line->sx < 0) {
    4b5c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
            if(main_line->sy < 0) {
    4b60:	2b00      	cmp	r3, #0
                aa_shift2 = width == 0 ? 0 : aa_shift1;
    4b62:	bfb5      	itete	lt
    4b64:	f1cb 0900 	rsblt	r9, fp, #0
                aa_shift1 = width == 0 ? 0 : aa_shift2;
    4b68:	fa0f fb8b 	sxthge.w	fp, fp
                aa_shift1 = -1;
    4b6c:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
                aa_shift2 = 1;
    4b70:	f04f 0901 	movge.w	r9, #1
    prev_p.x = main_line->p1.x;
    4b74:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    if(main_line->hor) {
    4b78:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    prev_p.x = main_line->p1.x;
    4b7c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    prev_p.y = main_line->p1.y;
    4b80:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
    4b84:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if(main_line->hor) {
    4b88:	f1b8 0f00 	cmp.w	r8, #0
    4b8c:	f47f adb8 	bne.w	4700 <lv_draw_line+0x75e>
    bool first_run = true;
    4b90:	2301      	movs	r3, #1
 * @param line
 * @return
 */
static bool line_next_x(line_draw_t * line)
{
    lv_coord_t last_x = line->p_act.x;
    4b92:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
            first_run = false;
    4b96:	9307      	str	r3, [sp, #28]

    do {
        if(!line_next(line)) return false;
    4b98:	a810      	add	r0, sp, #64	; 0x40
    4b9a:	f7ff f9d9 	bl	3f50 <line_next>
    4b9e:	2800      	cmp	r0, #0
    4ba0:	f43f af41 	beq.w	4a26 <lv_draw_line+0xa84>
    } while(last_x == line->p_act.x);
    4ba4:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
    4ba8:	42b3      	cmp	r3, r6
    4baa:	d0f5      	beq.n	4b98 <lv_draw_line+0xbf6>
    4bac:	463e      	mov	r6, r7
    4bae:	f04f 0800 	mov.w	r8, #0
    4bb2:	e66f      	b.n	4894 <lv_draw_line+0x8f2>

00004bb4 <lv_img_decoder_built_in_read_line>:
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
    }

    return res;
}
    4bb4:	2000      	movs	r0, #0
    4bb6:	4770      	bx	lr

00004bb8 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
    4bb8:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    4bba:	6a0d      	ldr	r5, [r1, #32]
{
    4bbc:	460c      	mov	r4, r1
    if(user_data) {
    4bbe:	b145      	cbz	r5, 4bd2 <lv_img_decoder_built_in_close+0x1a>
        if(user_data->f) {
            lv_fs_close(user_data->f);
            lv_mem_free(user_data->f);
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
    4bc0:	6828      	ldr	r0, [r5, #0]
    4bc2:	b108      	cbz	r0, 4bc8 <lv_img_decoder_built_in_close+0x10>
    4bc4:	f7fe fbb4 	bl	3330 <lv_mem_free>

        lv_mem_free(user_data);
    4bc8:	4628      	mov	r0, r5
    4bca:	f7fe fbb1 	bl	3330 <lv_mem_free>

        dsc->user_data = NULL;
    4bce:	2300      	movs	r3, #0
    4bd0:	6223      	str	r3, [r4, #32]
    }
}
    4bd2:	bd38      	pop	{r3, r4, r5, pc}

00004bd4 <lv_img_decoder_built_in_open>:
{
    4bd4:	b538      	push	{r3, r4, r5, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    4bd6:	7b0c      	ldrb	r4, [r1, #12]
    4bd8:	2c01      	cmp	r4, #1
{
    4bda:	460a      	mov	r2, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    4bdc:	d014      	beq.n	4c08 <lv_img_decoder_built_in_open+0x34>
    lv_img_cf_t cf = dsc->header.cf;
    4bde:	7c0b      	ldrb	r3, [r1, #16]
    4be0:	f003 031f 	and.w	r3, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    4be4:	1f1d      	subs	r5, r3, #4
    4be6:	2d02      	cmp	r5, #2
    4be8:	d807      	bhi.n	4bfa <lv_img_decoder_built_in_open+0x26>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    4bea:	b924      	cbnz	r4, 4bf6 <lv_img_decoder_built_in_open+0x22>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
    4bec:	684b      	ldr	r3, [r1, #4]
    4bee:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
    4bf0:	6153      	str	r3, [r2, #20]
            return LV_RES_OK;
    4bf2:	2001      	movs	r0, #1
}
    4bf4:	bd38      	pop	{r3, r4, r5, pc}
            dsc->img_data = NULL;
    4bf6:	2300      	movs	r3, #0
    4bf8:	e7fa      	b.n	4bf0 <lv_img_decoder_built_in_open+0x1c>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
    4bfa:	3319      	adds	r3, #25
    4bfc:	f003 031f 	and.w	r3, r3, #31
    4c00:	2b07      	cmp	r3, #7
    4c02:	d901      	bls.n	4c08 <lv_img_decoder_built_in_open+0x34>
        lv_img_decoder_built_in_close(decoder, dsc);
    4c04:	f7ff ffd8 	bl	4bb8 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
    4c08:	2000      	movs	r0, #0
    4c0a:	e7f3      	b.n	4bf4 <lv_img_decoder_built_in_open+0x20>

00004c0c <lv_img_decoder_built_in_info>:
{
    4c0c:	b538      	push	{r3, r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
    4c0e:	4608      	mov	r0, r1
{
    4c10:	460d      	mov	r5, r1
    4c12:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
    4c14:	f003 f89e 	bl	7d54 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
    4c18:	b9c0      	cbnz	r0, 4c4c <lv_img_decoder_built_in_info+0x40>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
    4c1a:	782b      	ldrb	r3, [r5, #0]
    4c1c:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    4c20:	3b04      	subs	r3, #4
    4c22:	b2db      	uxtb	r3, r3
    4c24:	2b0a      	cmp	r3, #10
    4c26:	d810      	bhi.n	4c4a <lv_img_decoder_built_in_info+0x3e>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
    4c28:	886b      	ldrh	r3, [r5, #2]
    4c2a:	8862      	ldrh	r2, [r4, #2]
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
    4c2c:	6829      	ldr	r1, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
    4c2e:	095b      	lsrs	r3, r3, #5
    4c30:	f363 124f 	bfi	r2, r3, #5, #11
    4c34:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
    4c36:	6823      	ldr	r3, [r4, #0]
    4c38:	4a09      	ldr	r2, [pc, #36]	; (4c60 <lv_img_decoder_built_in_info+0x54>)
    4c3a:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
    4c3e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
    4c42:	400a      	ands	r2, r1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
    4c44:	4313      	orrs	r3, r2
    4c46:	6023      	str	r3, [r4, #0]
    return LV_RES_OK;
    4c48:	2001      	movs	r0, #1
}
    4c4a:	bd38      	pop	{r3, r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    4c4c:	2802      	cmp	r0, #2
    4c4e:	d104      	bne.n	4c5a <lv_img_decoder_built_in_info+0x4e>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
    4c50:	6823      	ldr	r3, [r4, #0]
    4c52:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
    4c56:	4b03      	ldr	r3, [pc, #12]	; (4c64 <lv_img_decoder_built_in_info+0x58>)
    4c58:	e7f4      	b.n	4c44 <lv_img_decoder_built_in_info+0x38>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    4c5a:	2000      	movs	r0, #0
    4c5c:	e7f5      	b.n	4c4a <lv_img_decoder_built_in_info+0x3e>
    4c5e:	bf00      	nop
    4c60:	001ffc1f 	.word	0x001ffc1f
    4c64:	0020040b 	.word	0x0020040b

00004c68 <lv_img_decoder_close>:
{
    4c68:	b510      	push	{r4, lr}
    4c6a:	4604      	mov	r4, r0
    if(dsc->decoder) {
    4c6c:	6800      	ldr	r0, [r0, #0]
    4c6e:	b158      	cbz	r0, 4c88 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
    4c70:	68c3      	ldr	r3, [r0, #12]
    4c72:	b10b      	cbz	r3, 4c78 <lv_img_decoder_close+0x10>
    4c74:	4621      	mov	r1, r4
    4c76:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    4c78:	7b23      	ldrb	r3, [r4, #12]
    4c7a:	2b01      	cmp	r3, #1
    4c7c:	d104      	bne.n	4c88 <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
    4c7e:	6860      	ldr	r0, [r4, #4]
    4c80:	f7fe fb56 	bl	3330 <lv_mem_free>
            dsc->src = NULL;
    4c84:	2300      	movs	r3, #0
    4c86:	6063      	str	r3, [r4, #4]
}
    4c88:	bd10      	pop	{r4, pc}
	...

00004c8c <lv_img_decoder_create>:
{
    4c8c:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
    4c8e:	480a      	ldr	r0, [pc, #40]	; (4cb8 <lv_img_decoder_create+0x2c>)
    4c90:	f7fe fbe1 	bl	3456 <lv_ll_ins_head>
    4c94:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
    4c96:	f005 fd43 	bl	a720 <lv_debug_check_null>
    4c9a:	4603      	mov	r3, r0
    4c9c:	b920      	cbnz	r0, 4ca8 <lv_img_decoder_create+0x1c>
    4c9e:	4807      	ldr	r0, [pc, #28]	; (4cbc <lv_img_decoder_create+0x30>)
    4ca0:	4622      	mov	r2, r4
    4ca2:	f005 fd4d 	bl	a740 <lv_debug_log_error>
    4ca6:	e7fe      	b.n	4ca6 <lv_img_decoder_create+0x1a>
    if(decoder == NULL) return NULL;
    4ca8:	b124      	cbz	r4, 4cb4 <lv_img_decoder_create+0x28>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
    4caa:	2210      	movs	r2, #16
    4cac:	2100      	movs	r1, #0
    4cae:	4620      	mov	r0, r4
    4cb0:	f00f fb0e 	bl	142d0 <memset>
}
    4cb4:	4620      	mov	r0, r4
    4cb6:	bd10      	pop	{r4, pc}
    4cb8:	20005f38 	.word	0x20005f38
    4cbc:	0001a9b8 	.word	0x0001a9b8

00004cc0 <lv_img_decoder_init>:
{
    4cc0:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
    4cc2:	480c      	ldr	r0, [pc, #48]	; (4cf4 <lv_img_decoder_init+0x34>)
    4cc4:	2110      	movs	r1, #16
    4cc6:	f7fe fbbc 	bl	3442 <lv_ll_init>
    decoder = lv_img_decoder_create();
    4cca:	f7ff ffdf 	bl	4c8c <lv_img_decoder_create>
    if(decoder == NULL) {
    4cce:	b940      	cbnz	r0, 4ce2 <lv_img_decoder_init+0x22>
        LV_ASSERT_MEM(decoder);
    4cd0:	f005 fd26 	bl	a720 <lv_debug_check_null>
    4cd4:	b968      	cbnz	r0, 4cf2 <lv_img_decoder_init+0x32>
    4cd6:	4808      	ldr	r0, [pc, #32]	; (4cf8 <lv_img_decoder_init+0x38>)
    4cd8:	2200      	movs	r2, #0
    4cda:	2300      	movs	r3, #0
    4cdc:	f005 fd30 	bl	a740 <lv_debug_log_error>
    4ce0:	e7fe      	b.n	4ce0 <lv_img_decoder_init+0x20>
    decoder->info_cb = info_cb;
    4ce2:	4a06      	ldr	r2, [pc, #24]	; (4cfc <lv_img_decoder_init+0x3c>)
    4ce4:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
    4ce6:	4a06      	ldr	r2, [pc, #24]	; (4d00 <lv_img_decoder_init+0x40>)
    4ce8:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
    4cea:	4a06      	ldr	r2, [pc, #24]	; (4d04 <lv_img_decoder_init+0x44>)
    4cec:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
    4cee:	4a06      	ldr	r2, [pc, #24]	; (4d08 <lv_img_decoder_init+0x48>)
    4cf0:	60c2      	str	r2, [r0, #12]
}
    4cf2:	bd08      	pop	{r3, pc}
    4cf4:	20005f38 	.word	0x20005f38
    4cf8:	0001a9b8 	.word	0x0001a9b8
    4cfc:	00004c0d 	.word	0x00004c0d
    4d00:	00004bd5 	.word	0x00004bd5
    4d04:	00004bb5 	.word	0x00004bb5
    4d08:	00004bb9 	.word	0x00004bb9

00004d0c <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
    4d0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4d10:	b2db      	uxtb	r3, r3
    4d12:	2b09      	cmp	r3, #9
    4d14:	d90a      	bls.n	4d2c <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
    4d16:	2860      	cmp	r0, #96	; 0x60
    4d18:	bf84      	itt	hi
    4d1a:	3820      	subhi	r0, #32
    4d1c:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
    4d1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    4d22:	2b05      	cmp	r3, #5
    4d24:	bf9a      	itte	ls
    4d26:	3837      	subls	r0, #55	; 0x37
    4d28:	b2c3      	uxtbls	r3, r0
{
    4d2a:	2300      	movhi	r3, #0
        default: result = 0; break;
        }
    }

    return result;
}
    4d2c:	4618      	mov	r0, r3
    4d2e:	4770      	bx	lr

00004d30 <lv_draw_label>:
{
    4d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d34:	ed2d 8b02 	vpush	{d8}
    4d38:	b0a9      	sub	sp, #164	; 0xa4
    4d3a:	4683      	mov	fp, r0
    4d3c:	9306      	str	r3, [sp, #24]
    4d3e:	2300      	movs	r3, #0
    4d40:	930d      	str	r3, [sp, #52]	; 0x34
    if (txt[0] == '\0')  return;
    4d42:	9b34      	ldr	r3, [sp, #208]	; 0xd0
{
    4d44:	f89d a0d4 	ldrb.w	sl, [sp, #212]	; 0xd4
    if (txt[0] == '\0')  return;
    4d48:	781b      	ldrb	r3, [r3, #0]
{
    4d4a:	9e38      	ldr	r6, [sp, #224]	; 0xe0
    4d4c:	9109      	str	r1, [sp, #36]	; 0x24
    4d4e:	4615      	mov	r5, r2
    if (txt[0] == '\0')  return;
    4d50:	2b00      	cmp	r3, #0
    4d52:	f000 80b1 	beq.w	4eb8 <lv_draw_label+0x188>
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
    4d56:	f01a 0f02 	tst.w	sl, #2
    const lv_font_t * font = style->text.font;
    4d5a:	6a57      	ldr	r7, [r2, #36]	; 0x24
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
    4d5c:	f040 80b1 	bne.w	4ec2 <lv_draw_label+0x192>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    4d60:	8883      	ldrh	r3, [r0, #4]
    4d62:	8802      	ldrh	r2, [r0, #0]
    4d64:	3301      	adds	r3, #1
    4d66:	1a9b      	subs	r3, r3, r2
    4d68:	b21b      	sxth	r3, r3
        w = p.x;
    4d6a:	ee08 3a10 	vmov	s16, r3
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
    4d6e:	f897 9008 	ldrb.w	r9, [r7, #8]
    4d72:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    pos.y = coords->y1;
    4d74:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
    4d78:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
    4d7c:	4499      	add	r9, r3
    4d7e:	fa1f f389 	uxth.w	r3, r9
    4d82:	930a      	str	r3, [sp, #40]	; 0x28
    4d84:	fa0f f389 	sxth.w	r3, r9
    4d88:	9305      	str	r3, [sp, #20]
    pos.x = coords->x1;
    4d8a:	f8bb 3000 	ldrh.w	r3, [fp]
    4d8e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    if(offset != NULL) {
    4d92:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4d94:	2b00      	cmp	r3, #0
    4d96:	f000 8224 	beq.w	51e2 <lv_draw_label+0x4b2>
        x_ofs = offset->x;
    4d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
    4d9e:	930e      	str	r3, [sp, #56]	; 0x38
        y_ofs = offset->y;
    4da0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4da2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
    4da6:	18d1      	adds	r1, r2, r3
    4da8:	f8ad 1052 	strh.w	r1, [sp, #82]	; 0x52
    if(hint && y_ofs == 0 && coords->y1 < 0) {
    4dac:	2e00      	cmp	r6, #0
    4dae:	f000 821c 	beq.w	51ea <lv_draw_label+0x4ba>
    4db2:	2b00      	cmp	r3, #0
    4db4:	f040 8219 	bne.w	51ea <lv_draw_label+0x4ba>
    4db8:	2a00      	cmp	r2, #0
    4dba:	f280 8216 	bge.w	51ea <lv_draw_label+0x4ba>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
    4dbe:	68b3      	ldr	r3, [r6, #8]
    4dc0:	1a9b      	subs	r3, r3, r2
    4dc2:	9a05      	ldr	r2, [sp, #20]
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	bfb8      	it	lt
    4dc8:	425b      	neglt	r3, r3
    4dca:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
    4dce:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
    4dd2:	bfc4      	itt	gt
    4dd4:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
    4dd8:	6033      	strgt	r3, [r6, #0]
        last_line_start = hint->line_start;
    4dda:	6834      	ldr	r4, [r6, #0]
    if(hint && last_line_start >= 0) {
    4ddc:	2c00      	cmp	r4, #0
    4dde:	f2c0 8204 	blt.w	51ea <lv_draw_label+0x4ba>
        pos.y += hint->y;
    4de2:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
    4de6:	6873      	ldr	r3, [r6, #4]
    4de8:	4413      	add	r3, r2
    4dea:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
    4dee:	9834      	ldr	r0, [sp, #208]	; 0xd0
    4df0:	f9b5 2028 	ldrsh.w	r2, [r5, #40]	; 0x28
    4df4:	f8cd a000 	str.w	sl, [sp]
    4df8:	ee18 3a10 	vmov	r3, s16
    4dfc:	4639      	mov	r1, r7
    4dfe:	4420      	add	r0, r4
    4e00:	f7fe f936 	bl	3070 <lv_txt_get_next_line>
    4e04:	eb00 0904 	add.w	r9, r0, r4
    while(pos.y + line_height < mask->y1) {
    4e08:	9a05      	ldr	r2, [sp, #20]
    4e0a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    4e0e:	4413      	add	r3, r2
    4e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4e12:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    4e16:	4293      	cmp	r3, r2
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
    4e18:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    while(pos.y + line_height < mask->y1) {
    4e1a:	db67      	blt.n	4eec <lv_draw_label+0x1bc>
    if(flag & LV_TXT_FLAG_CENTER) {
    4e1c:	1918      	adds	r0, r3, r4
    4e1e:	f01a 0304 	ands.w	r3, sl, #4
    4e22:	9311      	str	r3, [sp, #68]	; 0x44
    4e24:	f000 808b 	beq.w	4f3e <lv_draw_label+0x20e>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
    4e28:	eba9 0104 	sub.w	r1, r9, r4
    4e2c:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
    4e30:	f8cd a000 	str.w	sl, [sp]
    4e34:	463a      	mov	r2, r7
    4e36:	b289      	uxth	r1, r1
    4e38:	f7fe f8ca 	bl	2fd0 <lv_txt_get_width>
    4e3c:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    4e40:	f8bb 2000 	ldrh.w	r2, [fp]
    4e44:	3301      	adds	r3, #1
    4e46:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
    4e48:	b21b      	sxth	r3, r3
    4e4a:	1a18      	subs	r0, r3, r0
    4e4c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    4e50:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    4e54:	eb03 0060 	add.w	r0, r3, r0, asr #1
        pos.x += lv_area_get_width(coords) - line_width;
    4e58:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
    4e5c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    4e60:	9307      	str	r3, [sp, #28]
    4e62:	9b06      	ldr	r3, [sp, #24]
    4e64:	2bff      	cmp	r3, #255	; 0xff
    4e66:	bf1f      	itttt	ne
    4e68:	e9dd 2306 	ldrdne	r2, r3, [sp, #24]
    4e6c:	4353      	mulne	r3, r2
    4e6e:	0a1b      	lsrne	r3, r3, #8
    4e70:	9307      	strne	r3, [sp, #28]
    if(sel) {
    4e72:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    4e74:	2b00      	cmp	r3, #0
    4e76:	d07b      	beq.n	4f70 <lv_draw_label+0x240>
        sel_start = sel->start;
    4e78:	881b      	ldrh	r3, [r3, #0]
    4e7a:	9306      	str	r3, [sp, #24]
        sel_end = sel->end;
    4e7c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    4e7e:	885b      	ldrh	r3, [r3, #2]
    4e80:	9305      	str	r3, [sp, #20]
        if(sel_start > sel_end) {
    4e82:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    4e86:	4293      	cmp	r3, r2
    4e88:	d901      	bls.n	4e8e <lv_draw_label+0x15e>
    4e8a:	e9cd 3205 	strd	r3, r2, [sp, #20]
    lv_style_copy(&sel_style, &lv_style_plain_color);
    4e8e:	499f      	ldr	r1, [pc, #636]	; (510c <lv_draw_label+0x3dc>)
    4e90:	a818      	add	r0, sp, #96	; 0x60
    4e92:	f004 fb48 	bl	9526 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
    4e96:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    4e98:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    4e9c:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    uint16_t par_start = 0;
    4ea0:	2300      	movs	r3, #0
    4ea2:	930c      	str	r3, [sp, #48]	; 0x30
    4ea4:	f00a 0301 	and.w	r3, sl, #1
    4ea8:	9310      	str	r3, [sp, #64]	; 0x40
    while(txt[line_start] != '\0') {
    4eaa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    4eac:	4423      	add	r3, r4
    4eae:	930b      	str	r3, [sp, #44]	; 0x2c
    4eb0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    4eb2:	5d1b      	ldrb	r3, [r3, r4]
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d160      	bne.n	4f7a <lv_draw_label+0x24a>
}
    4eb8:	b029      	add	sp, #164	; 0xa4
    4eba:	ecbd 8b02 	vpop	{d8}
    4ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
    4ec2:	f647 4318 	movw	r3, #31768	; 0x7c18
    4ec6:	f8cd a008 	str.w	sl, [sp, #8]
    4eca:	9301      	str	r3, [sp, #4]
    4ecc:	f9b2 302a 	ldrsh.w	r3, [r2, #42]	; 0x2a
    4ed0:	9300      	str	r3, [sp, #0]
    4ed2:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
    4ed6:	9934      	ldr	r1, [sp, #208]	; 0xd0
    4ed8:	463a      	mov	r2, r7
    4eda:	a818      	add	r0, sp, #96	; 0x60
    4edc:	f7fe f9bc 	bl	3258 <lv_txt_get_size>
        w = p.x;
    4ee0:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    4ee4:	e741      	b.n	4d6a <lv_draw_label+0x3a>
    lv_coord_t x_ofs = 0;
    4ee6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4ee8:	930e      	str	r3, [sp, #56]	; 0x38
    4eea:	e765      	b.n	4db8 <lv_draw_label+0x88>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
    4eec:	eb03 0809 	add.w	r8, r3, r9
    4ef0:	f9b5 2028 	ldrsh.w	r2, [r5, #40]	; 0x28
    4ef4:	f8cd a000 	str.w	sl, [sp]
    4ef8:	ee18 3a10 	vmov	r3, s16
    4efc:	4639      	mov	r1, r7
    4efe:	4640      	mov	r0, r8
    4f00:	f7fe f8b6 	bl	3070 <lv_txt_get_next_line>
        pos.y += line_height;
    4f04:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    4f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f0a:	4413      	add	r3, r2
    4f0c:	b21b      	sxth	r3, r3
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
    4f0e:	4448      	add	r0, r9
        pos.y += line_height;
    4f10:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
    4f14:	b166      	cbz	r6, 4f30 <lv_draw_label+0x200>
    4f16:	f513 6f80 	cmn.w	r3, #1024	; 0x400
    4f1a:	db09      	blt.n	4f30 <lv_draw_label+0x200>
    4f1c:	6832      	ldr	r2, [r6, #0]
    4f1e:	2a00      	cmp	r2, #0
            hint->y          = pos.y - coords->y1;
    4f20:	bfbf      	itttt	lt
    4f22:	f9bb 2002 	ldrshlt.w	r2, [fp, #2]
            hint->line_start = line_start;
    4f26:	f8c6 9000 	strlt.w	r9, [r6]
            hint->y          = pos.y - coords->y1;
    4f2a:	1a9b      	sublt	r3, r3, r2
            hint->coord_y    = coords->y1;
    4f2c:	e9c6 3201 	strdlt	r3, r2, [r6, #4]
        if(txt[line_start] == '\0') return;
    4f30:	f898 3000 	ldrb.w	r3, [r8]
    4f34:	464c      	mov	r4, r9
    4f36:	2b00      	cmp	r3, #0
    4f38:	d0be      	beq.n	4eb8 <lv_draw_label+0x188>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
    4f3a:	4681      	mov	r9, r0
    4f3c:	e764      	b.n	4e08 <lv_draw_label+0xd8>
    else if(flag & LV_TXT_FLAG_RIGHT) {
    4f3e:	f01a 0f08 	tst.w	sl, #8
    4f42:	d08b      	beq.n	4e5c <lv_draw_label+0x12c>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
    4f44:	eba9 0104 	sub.w	r1, r9, r4
    4f48:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
    4f4c:	f8cd a000 	str.w	sl, [sp]
    4f50:	463a      	mov	r2, r7
    4f52:	b289      	uxth	r1, r1
    4f54:	f7fe f83c 	bl	2fd0 <lv_txt_get_width>
    4f58:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    4f5c:	f8bb 2000 	ldrh.w	r2, [fp]
    4f60:	3301      	adds	r3, #1
    4f62:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
    4f64:	b21b      	sxth	r3, r3
    4f66:	1a18      	subs	r0, r3, r0
    4f68:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    4f6c:	4418      	add	r0, r3
    4f6e:	e773      	b.n	4e58 <lv_draw_label+0x128>
    uint16_t sel_end = 0xFFFF;
    4f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
    uint16_t sel_start = 0xFFFF;
    4f74:	e9cd 3305 	strd	r3, r3, [sp, #20]
    4f78:	e789      	b.n	4e8e <lv_draw_label+0x15e>
        if(offset != NULL) {
    4f7a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4f7c:	b12b      	cbz	r3, 4f8a <lv_draw_label+0x25a>
            pos.x += x_ofs;
    4f7e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    4f82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4f84:	4413      	add	r3, r2
    4f86:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        i         = 0;
    4f8a:	2600      	movs	r6, #0
    4f8c:	9615      	str	r6, [sp, #84]	; 0x54
        while(i < line_end - line_start) {
    4f8e:	9915      	ldr	r1, [sp, #84]	; 0x54
    4f90:	eba9 0304 	sub.w	r3, r9, r4
    4f94:	428b      	cmp	r3, r1
    4f96:	d83f      	bhi.n	5018 <lv_draw_label+0x2e8>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
    4f98:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    4f9a:	f9b5 2028 	ldrsh.w	r2, [r5, #40]	; 0x28
    4f9e:	f8cd a000 	str.w	sl, [sp]
    4fa2:	eb03 0409 	add.w	r4, r3, r9
    4fa6:	4639      	mov	r1, r7
    4fa8:	ee18 3a10 	vmov	r3, s16
    4fac:	4620      	mov	r0, r4
    4fae:	f7fe f85f 	bl	3070 <lv_txt_get_next_line>
        pos.x = coords->x1;
    4fb2:	f8bb 3000 	ldrh.w	r3, [fp]
    4fb6:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        if(flag & LV_TXT_FLAG_CENTER) {
    4fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
    4fbc:	4601      	mov	r1, r0
    4fbe:	eb00 0609 	add.w	r6, r0, r9
        if(flag & LV_TXT_FLAG_CENTER) {
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	f000 80f5 	beq.w	51b2 <lv_draw_label+0x482>
                    lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
    4fc8:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
    4fcc:	f8cd a000 	str.w	sl, [sp]
    4fd0:	463a      	mov	r2, r7
    4fd2:	4620      	mov	r0, r4
    4fd4:	f7fd fffc 	bl	2fd0 <lv_txt_get_width>
    4fd8:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    4fdc:	f8bb 2000 	ldrh.w	r2, [fp]
    4fe0:	3301      	adds	r3, #1
    4fe2:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
    4fe4:	b21b      	sxth	r3, r3
    4fe6:	1a18      	subs	r0, r3, r0
    4fe8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    4fec:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    4ff0:	eb03 0060 	add.w	r0, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
    4ff4:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
        pos.y += line_height;
    4ff8:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    4ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4ffe:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
    5000:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5002:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
    5006:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
    5008:	429a      	cmp	r2, r3
        pos.y += line_height;
    500a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        line_start = line_end;
    500e:	464c      	mov	r4, r9
        if(pos.y > mask->y2) return;
    5010:	f6ff af52 	blt.w	4eb8 <lv_draw_label+0x188>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
    5014:	46b1      	mov	r9, r6
    5016:	e748      	b.n	4eaa <lv_draw_label+0x17a>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    5018:	9a06      	ldr	r2, [sp, #24]
    501a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    501e:	429a      	cmp	r2, r3
    5020:	d026      	beq.n	5070 <lv_draw_label+0x340>
    5022:	9a05      	ldr	r2, [sp, #20]
    5024:	429a      	cmp	r2, r3
    5026:	d023      	beq.n	5070 <lv_draw_label+0x340>
                logical_char_pos = lv_txt_encoded_get_char_id(txt, line_start + i);
    5028:	4b39      	ldr	r3, [pc, #228]	; (5110 <lv_draw_label+0x3e0>)
    502a:	9834      	ldr	r0, [sp, #208]	; 0xd0
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	4421      	add	r1, r4
    5030:	4798      	blx	r3
    5032:	b283      	uxth	r3, r0
            letter      = lv_txt_encoded_next(bidi_txt, &i);
    5034:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 5114 <lv_draw_label+0x3e4>
    5038:	980b      	ldr	r0, [sp, #44]	; 0x2c
    503a:	f8d8 2000 	ldr.w	r2, [r8]
    503e:	930f      	str	r3, [sp, #60]	; 0x3c
    5040:	a915      	add	r1, sp, #84	; 0x54
    5042:	4790      	blx	r2
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
    5044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            letter      = lv_txt_encoded_next(bidi_txt, &i);
    5046:	9008      	str	r0, [sp, #32]
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
    5048:	9815      	ldr	r0, [sp, #84]	; 0x54
    504a:	f8d8 2000 	ldr.w	r2, [r8]
    504e:	2100      	movs	r1, #0
    5050:	4418      	add	r0, r3
    5052:	4790      	blx	r2
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    5054:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
    5058:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
    505a:	2900      	cmp	r1, #0
    505c:	d051      	beq.n	5102 <lv_draw_label+0x3d2>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
    505e:	9908      	ldr	r1, [sp, #32]
    5060:	2923      	cmp	r1, #35	; 0x23
    5062:	d10d      	bne.n	5080 <lv_draw_label+0x350>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
    5064:	b936      	cbnz	r6, 5074 <lv_draw_label+0x344>
                        par_start = i;
    5066:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
                        cmd_state = CMD_STATE_PAR;
    506a:	9e10      	ldr	r6, [sp, #64]	; 0x40
                        par_start = i;
    506c:	930c      	str	r3, [sp, #48]	; 0x30
                        continue;
    506e:	e78e      	b.n	4f8e <lv_draw_label+0x25e>
            uint16_t logical_char_pos = 0;
    5070:	2300      	movs	r3, #0
    5072:	e7df      	b.n	5034 <lv_draw_label+0x304>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
    5074:	2e01      	cmp	r6, #1
    5076:	d04f      	beq.n	5118 <lv_draw_label+0x3e8>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
    5078:	2e02      	cmp	r6, #2
    507a:	d14e      	bne.n	511a <lv_draw_label+0x3ea>
                        cmd_state = CMD_STATE_WAIT;
    507c:	2600      	movs	r6, #0
    507e:	e786      	b.n	4f8e <lv_draw_label+0x25e>
                if(cmd_state == CMD_STATE_PAR) {
    5080:	2e01      	cmp	r6, #1
    5082:	d13e      	bne.n	5102 <lv_draw_label+0x3d2>
                    if(letter == ' ') {
    5084:	9b08      	ldr	r3, [sp, #32]
    5086:	2b20      	cmp	r3, #32
    5088:	d181      	bne.n	4f8e <lv_draw_label+0x25e>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
    508a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    508c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    508e:	1a9b      	subs	r3, r3, r2
    5090:	2b07      	cmp	r3, #7
    5092:	d134      	bne.n	50fe <lv_draw_label+0x3ce>
                            memcpy(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
    5094:	e9dd 310b 	ldrd	r3, r1, [sp, #44]	; 0x2c
    5098:	2206      	movs	r2, #6
    509a:	1859      	adds	r1, r3, r1
    509c:	a816      	add	r0, sp, #88	; 0x58
    509e:	f00f f909 	bl	142b4 <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
    50a2:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
    50a6:	f7ff fe31 	bl	4d0c <hex_char_to_num>
    50aa:	4602      	mov	r2, r0
    50ac:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
    50b0:	f7ff fe2c 	bl	4d0c <hex_char_to_num>
    50b4:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
    50b8:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
    50bc:	f7ff fe26 	bl	4d0c <hex_char_to_num>
    50c0:	4601      	mov	r1, r0
    50c2:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
    50c6:	f7ff fe21 	bl	4d0c <hex_char_to_num>
    50ca:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
    50ce:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
    50d2:	f7ff fe1b 	bl	4d0c <hex_char_to_num>
    50d6:	4606      	mov	r6, r0
    50d8:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
    50dc:	f7ff fe16 	bl	4d0c <hex_char_to_num>
    50e0:	eb00 1006 	add.w	r0, r0, r6, lsl #4
    50e4:	f3c0 03c4 	ubfx	r3, r0, #3, #5
    50e8:	f3c1 0185 	ubfx	r1, r1, #2, #6
    50ec:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    50f0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
    50f4:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
                            recolor.full = style->text.color.full;
    50f8:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    50fa:	2602      	movs	r6, #2
    50fc:	e747      	b.n	4f8e <lv_draw_label+0x25e>
                            recolor.full = style->text.color.full;
    50fe:	8c2b      	ldrh	r3, [r5, #32]
    5100:	e7fa      	b.n	50f8 <lv_draw_label+0x3c8>
            if(cmd_state == CMD_STATE_IN) color = recolor;
    5102:	2e02      	cmp	r6, #2
    5104:	d109      	bne.n	511a <lv_draw_label+0x3ea>
    5106:	990d      	ldr	r1, [sp, #52]	; 0x34
    5108:	e008      	b.n	511c <lv_draw_label+0x3ec>
    510a:	bf00      	nop
    510c:	2000627c 	.word	0x2000627c
    5110:	20000008 	.word	0x20000008
    5114:	2000000c 	.word	0x2000000c
                        cmd_state = CMD_STATE_WAIT;
    5118:	2600      	movs	r6, #0
            lv_color_t color = style->text.color;
    511a:	8c29      	ldrh	r1, [r5, #32]
            if(cmd_state == CMD_STATE_IN) color = recolor;
    511c:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
    5120:	4638      	mov	r0, r7
    5122:	9908      	ldr	r1, [sp, #32]
    5124:	9313      	str	r3, [sp, #76]	; 0x4c
    5126:	f004 f9d3 	bl	94d0 <lv_font_get_glyph_width>
    512a:	b203      	sxth	r3, r0
    512c:	9312      	str	r3, [sp, #72]	; 0x48
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    512e:	9b06      	ldr	r3, [sp, #24]
    5130:	f64f 72ff 	movw	r2, #65535	; 0xffff
    5134:	4293      	cmp	r3, r2
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
    5136:	4680      	mov	r8, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    5138:	d023      	beq.n	5182 <lv_draw_label+0x452>
    513a:	9b05      	ldr	r3, [sp, #20]
    513c:	4293      	cmp	r3, r2
    513e:	d020      	beq.n	5182 <lv_draw_label+0x452>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
    5140:	9b06      	ldr	r3, [sp, #24]
    5142:	461a      	mov	r2, r3
    5144:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5146:	429a      	cmp	r2, r3
    5148:	d81b      	bhi.n	5182 <lv_draw_label+0x452>
    514a:	9a05      	ldr	r2, [sp, #20]
    514c:	429a      	cmp	r2, r3
    514e:	d918      	bls.n	5182 <lv_draw_label+0x452>
                    sel_coords.x1 = pos.x;
    5150:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
    5154:	8d29      	ldrh	r1, [r5, #40]	; 0x28
                    sel_coords.x1 = pos.x;
    5156:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
    515a:	3b01      	subs	r3, #1
    515c:	440b      	add	r3, r1
    515e:	4403      	add	r3, r0
                    sel_coords.y1 = pos.y;
    5160:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
    5164:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    sel_coords.y2 = pos.y + line_height - 1;
    5168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                    sel_coords.y1 = pos.y;
    516a:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
                    sel_coords.y2 = pos.y + line_height - 1;
    516e:	3a01      	subs	r2, #1
    5170:	441a      	add	r2, r3
    5172:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
    5176:	9b07      	ldr	r3, [sp, #28]
    5178:	9909      	ldr	r1, [sp, #36]	; 0x24
    517a:	aa18      	add	r2, sp, #96	; 0x60
    517c:	a816      	add	r0, sp, #88	; 0x58
    517e:	f000 f89d 	bl	52bc <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
    5182:	9b07      	ldr	r3, [sp, #28]
    5184:	9301      	str	r3, [sp, #4]
    5186:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    518a:	f8ad 3000 	strh.w	r3, [sp]
    518e:	9909      	ldr	r1, [sp, #36]	; 0x24
    5190:	9b08      	ldr	r3, [sp, #32]
    5192:	463a      	mov	r2, r7
    5194:	a814      	add	r0, sp, #80	; 0x50
    5196:	f002 fb8d 	bl	78b4 <lv_draw_letter>
            if(letter_w > 0) {
    519a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    519c:	2b00      	cmp	r3, #0
    519e:	f77f aef6 	ble.w	4f8e <lv_draw_label+0x25e>
                pos.x += letter_w + style->text.letter_space;
    51a2:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
    51a6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    51a8:	4418      	add	r0, r3
    51aa:	4480      	add	r8, r0
    51ac:	f8ad 8050 	strh.w	r8, [sp, #80]	; 0x50
    51b0:	e6ed      	b.n	4f8e <lv_draw_label+0x25e>
        else if(flag & LV_TXT_FLAG_RIGHT) {
    51b2:	f01a 0f08 	tst.w	sl, #8
    51b6:	f43f af1f 	beq.w	4ff8 <lv_draw_label+0x2c8>
                    lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
    51ba:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
    51be:	f8cd a000 	str.w	sl, [sp]
    51c2:	463a      	mov	r2, r7
    51c4:	4620      	mov	r0, r4
    51c6:	f7fd ff03 	bl	2fd0 <lv_txt_get_width>
    51ca:	f8bb 3004 	ldrh.w	r3, [fp, #4]
    51ce:	f8bb 2000 	ldrh.w	r2, [fp]
    51d2:	3301      	adds	r3, #1
    51d4:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
    51d6:	b21b      	sxth	r3, r3
    51d8:	1a18      	subs	r0, r3, r0
    51da:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    51de:	4418      	add	r0, r3
    51e0:	e708      	b.n	4ff4 <lv_draw_label+0x2c4>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
    51e2:	2e00      	cmp	r6, #0
    51e4:	f47f ae7f 	bne.w	4ee6 <lv_draw_label+0x1b6>
    lv_coord_t x_ofs = 0;
    51e8:	960e      	str	r6, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    51ea:	2400      	movs	r4, #0
    51ec:	e5ff      	b.n	4dee <lv_draw_label+0xbe>
    51ee:	bf00      	nop

000051f0 <lv_color_mix>:
{
    51f0:	b570      	push	{r4, r5, r6, lr}
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    51f2:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    51f6:	f3c1 1445 	ubfx	r4, r1, #5, #6
    51fa:	436c      	muls	r4, r5
    51fc:	f3c0 1345 	ubfx	r3, r0, #5, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
    5200:	f001 061f 	and.w	r6, r1, #31
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    5204:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
    5208:	436e      	muls	r6, r5
    520a:	f000 041f 	and.w	r4, r0, #31
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    520e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
    5212:	fb04 6402 	mla	r4, r4, r2, r6
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    5216:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    521a:	4369      	muls	r1, r5
    return ret;
    521c:	08db      	lsrs	r3, r3, #3
    521e:	f3c4 2404 	ubfx	r4, r4, #8, #5
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    5222:	fb00 1202 	mla	r2, r0, r2, r1
    return ret;
    5226:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
    522a:	4323      	orrs	r3, r4
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    522c:	f3c2 2007 	ubfx	r0, r2, #8, #8
}
    5230:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
    5234:	bd70      	pop	{r4, r5, r6, pc}

00005236 <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
    5236:	b570      	push	{r4, r5, r6, lr}
    5238:	460e      	mov	r6, r1
    523a:	4604      	mov	r4, r0
    523c:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    523e:	f005 f8c7 	bl	a3d0 <lv_refr_get_disp_refreshing>
    5242:	f002 ff85 	bl	8150 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
    5246:	ebb4 0f66 	cmp.w	r4, r6, asr #1
    524a:	ea4f 0366 	mov.w	r3, r6, asr #1
    524e:	db03      	blt.n	5258 <lv_draw_cont_radius_corr+0x22>
        r = (w >> 1);
    5250:	b29c      	uxth	r4, r3
        if(r != 0) r--;
    5252:	b10c      	cbz	r4, 5258 <lv_draw_cont_radius_corr+0x22>
    5254:	1e63      	subs	r3, r4, #1
    5256:	b29c      	uxth	r4, r3
    }
    if(r >= (h >> 1)) {
    5258:	ebb4 0f65 	cmp.w	r4, r5, asr #1
    525c:	ea4f 0365 	mov.w	r3, r5, asr #1
    5260:	db03      	blt.n	526a <lv_draw_cont_radius_corr+0x34>
        r = (h >> 1);
    5262:	b29c      	uxth	r4, r3
        if(r != 0) r--;
    5264:	b124      	cbz	r4, 5270 <lv_draw_cont_radius_corr+0x3a>
    5266:	1e63      	subs	r3, r4, #1
    5268:	b29c      	uxth	r4, r3
    }

    if(r > 0) r -= aa;
    526a:	b10c      	cbz	r4, 5270 <lv_draw_cont_radius_corr+0x3a>
    526c:	1a20      	subs	r0, r4, r0
    526e:	b284      	uxth	r4, r0

    return r;
}
    5270:	4620      	mov	r0, r4
    5272:	bd70      	pop	{r4, r5, r6, pc}

00005274 <antialias_get_opa_circ>:
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
    5274:	2802      	cmp	r0, #2
    5276:	d105      	bne.n	5284 <antialias_get_opa_circ+0x10>
    5278:	4b0c      	ldr	r3, [pc, #48]	; (52ac <antialias_get_opa_circ+0x38>)
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 3
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
    527a:	5c5b      	ldrb	r3, [r3, r1]
    527c:	fb13 f202 	smulbb	r2, r3, r2
    5280:	0a10      	lsrs	r0, r2, #8
    5282:	4770      	bx	lr
    5284:	2803      	cmp	r0, #3
    5286:	d101      	bne.n	528c <antialias_get_opa_circ+0x18>
    5288:	4b09      	ldr	r3, [pc, #36]	; (52b0 <antialias_get_opa_circ+0x3c>)
    528a:	e7f6      	b.n	527a <antialias_get_opa_circ+0x6>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
    528c:	2804      	cmp	r0, #4
    528e:	d101      	bne.n	5294 <antialias_get_opa_circ+0x20>
    5290:	4b08      	ldr	r3, [pc, #32]	; (52b4 <antialias_get_opa_circ+0x40>)
    5292:	e7f2      	b.n	527a <antialias_get_opa_circ+0x6>
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    5294:	1e43      	subs	r3, r0, #1
    5296:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    529a:	fbb1 f1f3 	udiv	r1, r1, r3
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
    529e:	4b06      	ldr	r3, [pc, #24]	; (52b8 <antialias_get_opa_circ+0x44>)
    52a0:	b2c9      	uxtb	r1, r1
    52a2:	5c5b      	ldrb	r3, [r3, r1]
    52a4:	fb13 f002 	smulbb	r0, r3, r2
    52a8:	0a00      	lsrs	r0, r0, #8
}
    52aa:	4770      	bx	lr
    52ac:	0001a9c6 	.word	0x0001a9c6
    52b0:	0001a9c8 	.word	0x0001a9c8
    52b4:	0001a9cb 	.word	0x0001a9cb
    52b8:	0001a9cf 	.word	0x0001a9cf

000052bc <lv_draw_rect>:
{
    52bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52c0:	ed2d 8b06 	vpush	{d8-d10}
    52c4:	b0a5      	sub	sp, #148	; 0x94
    52c6:	4691      	mov	r9, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    52c8:	88c2      	ldrh	r2, [r0, #6]
    52ca:	9306      	str	r3, [sp, #24]
    52cc:	8843      	ldrh	r3, [r0, #2]
    52ce:	3201      	adds	r2, #1
    52d0:	1ad2      	subs	r2, r2, r3
    52d2:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
    52d4:	2a00      	cmp	r2, #0
{
    52d6:	4682      	mov	sl, r0
    52d8:	468b      	mov	fp, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
    52da:	f340 867b 	ble.w	5fd4 <lv_draw_rect+0xd18>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    52de:	8881      	ldrh	r1, [r0, #4]
    52e0:	8803      	ldrh	r3, [r0, #0]
    52e2:	3101      	adds	r1, #1
    52e4:	1ac9      	subs	r1, r1, r3
    52e6:	b209      	sxth	r1, r1
    52e8:	2900      	cmp	r1, #0
    52ea:	f340 8673 	ble.w	5fd4 <lv_draw_rect+0xd18>
    if(style->body.shadow.width != 0) {
    52ee:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    52f2:	2b00      	cmp	r3, #0
    52f4:	f000 82ca 	beq.w	588c <lv_draw_rect+0x5d0>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
    52f8:	f8b9 0006 	ldrh.w	r0, [r9, #6]
    52fc:	f7ff ff9b 	bl	5236 <lv_draw_cont_radius_corr>
    memcpy(dest, src, sizeof(lv_area_t));
    5300:	4651      	mov	r1, sl
    5302:	4604      	mov	r4, r0
    5304:	2208      	movs	r2, #8
    5306:	a81a      	add	r0, sp, #104	; 0x68
    5308:	f00e ffd4 	bl	142b4 <memcpy>
    area_tmp.x1 += radius;
    530c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    5310:	4423      	add	r3, r4
    5312:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    area_tmp.x2 -= radius;
    5316:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
    531a:	a91a      	add	r1, sp, #104	; 0x68
    area_tmp.x2 -= radius;
    531c:	1b1b      	subs	r3, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
    531e:	4658      	mov	r0, fp
    area_tmp.x2 -= radius;
    5320:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
    5324:	f7fe fc20 	bl	3b68 <lv_area_is_in>
    5328:	2800      	cmp	r0, #0
    532a:	f040 82af 	bne.w	588c <lv_draw_rect+0x5d0>
    532e:	2208      	movs	r2, #8
    5330:	4651      	mov	r1, sl
    5332:	a81a      	add	r0, sp, #104	; 0x68
    5334:	f00e ffbe 	bl	142b4 <memcpy>
    area_tmp.y2 -= radius;
    5338:	f8bd 006e 	ldrh.w	r0, [sp, #110]	; 0x6e
    area_tmp.y1 += radius;
    533c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    if(lv_area_is_in(mask, &area_tmp) != false) return;
    5340:	a91a      	add	r1, sp, #104	; 0x68
    area_tmp.y1 += radius;
    5342:	4423      	add	r3, r4
    area_tmp.y2 -= radius;
    5344:	1b04      	subs	r4, r0, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
    5346:	4658      	mov	r0, fp
    area_tmp.y1 += radius;
    5348:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    area_tmp.y2 -= radius;
    534c:	f8ad 406e 	strh.w	r4, [sp, #110]	; 0x6e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
    5350:	f7fe fc0a 	bl	3b68 <lv_area_is_in>
    5354:	4607      	mov	r7, r0
    5356:	2800      	cmp	r0, #0
    5358:	f040 8298 	bne.w	588c <lv_draw_rect+0x5d0>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
    535c:	f899 3014 	ldrb.w	r3, [r9, #20]
    5360:	2b01      	cmp	r3, #1
    5362:	f040 820e 	bne.w	5782 <lv_draw_rect+0x4c6>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    5366:	f005 f833 	bl	a3d0 <lv_refr_get_disp_refreshing>
    536a:	f002 fef1 	bl	8150 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
    536e:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    5372:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    5376:	9303      	str	r3, [sp, #12]
    5378:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    537c:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    5380:	3201      	adds	r2, #1
    5382:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5384:	f8ba 3000 	ldrh.w	r3, [sl]
    5388:	3101      	adds	r1, #1
    538a:	1ac9      	subs	r1, r1, r3
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    538c:	4605      	mov	r5, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
    538e:	b209      	sxth	r1, r1
    5390:	b212      	sxth	r2, r2
    5392:	f8b9 0006 	ldrh.w	r0, [r9, #6]
    5396:	f7ff ff4e 	bl	5236 <lv_draw_cont_radius_corr>
    radius += aa;
    539a:	b2ac      	uxth	r4, r5
    539c:	fa10 f085 	uxtah	r0, r0, r5
    int16_t filter_width = 2 * swidth + 1;
    53a0:	f8bd 500c 	ldrh.w	r5, [sp, #12]
    radius += aa;
    53a4:	b283      	uxth	r3, r0
    53a6:	9304      	str	r3, [sp, #16]
    int16_t filter_width = 2 * swidth + 1;
    53a8:	006e      	lsls	r6, r5, #1
    radius += aa;
    53aa:	b203      	sxth	r3, r0
    53ac:	930e      	str	r3, [sp, #56]	; 0x38
    int16_t filter_width = 2 * swidth + 1;
    53ae:	3601      	adds	r6, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
    53b0:	9b03      	ldr	r3, [sp, #12]
    int16_t filter_width = 2 * swidth + 1;
    53b2:	b236      	sxth	r6, r6
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
    53b4:	fa03 f380 	sxtah	r3, r3, r0
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
    53b8:	f106 0803 	add.w	r8, r6, #3
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
    53bc:	1d18      	adds	r0, r3, #4
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
    53be:	f028 0803 	bic.w	r8, r8, #3
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
    53c2:	f020 0003 	bic.w	r0, r0, #3
    line_1d_blur_size *= sizeof(uint32_t);
    53c6:	ea4f 0888 	mov.w	r8, r8, lsl #2
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
    53ca:	eb08 0840 	add.w	r8, r8, r0, lsl #1
    curve_x_size *= sizeof(lv_coord_t);
    53ce:	0042      	lsls	r2, r0, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
    53d0:	4440      	add	r0, r8
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
    53d2:	9308      	str	r3, [sp, #32]
    curve_x_size *= sizeof(lv_coord_t);
    53d4:	9205      	str	r2, [sp, #20]
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
    53d6:	f002 fccd 	bl	7d74 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
    53da:	9a05      	ldr	r2, [sp, #20]
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
    53dc:	9002      	str	r0, [sp, #8]
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
    53de:	4603      	mov	r3, r0
    53e0:	4413      	add	r3, r2
    53e2:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
    53e4:	4603      	mov	r3, r0
    53e6:	4443      	add	r3, r8
    memset(curve_x, 0, curve_x_size);
    53e8:	4639      	mov	r1, r7
    lv_circ_init(&circ, &circ_tmp, radius);
    53ea:	f10d 0864 	add.w	r8, sp, #100	; 0x64
    53ee:	f10d 0762 	add.w	r7, sp, #98	; 0x62
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
    53f2:	930a      	str	r3, [sp, #40]	; 0x28
    memset(curve_x, 0, curve_x_size);
    53f4:	f00e ff6c 	bl	142d0 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
    53f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    53fa:	4639      	mov	r1, r7
    53fc:	4640      	mov	r0, r8
    53fe:	f7fd fcb5 	bl	2d6c <lv_circ_init>
    while(lv_circ_cont(&circ)) {
    5402:	4640      	mov	r0, r8
    5404:	f7fd fcb9 	bl	2d7a <lv_circ_cont>
    5408:	2800      	cmp	r0, #0
    540a:	d14b      	bne.n	54a4 <lv_draw_rect+0x1e8>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
    540c:	9a06      	ldr	r2, [sp, #24]
    540e:	f899 3008 	ldrb.w	r3, [r9, #8]
    5412:	2aff      	cmp	r2, #255	; 0xff
    5414:	bf1c      	itt	ne
    5416:	4353      	mulne	r3, r2
    5418:	0a1b      	lsrne	r3, r3, #8
    for(line = 0; line < filter_width; line++) {
    541a:	ebc3 52c3 	rsb	r2, r3, r3, lsl #23
    541e:	fb13 f306 	smulbb	r3, r3, r6
                             (filter_width * filter_width);
    5422:	fb06 f106 	mul.w	r1, r6, r6
    5426:	0252      	lsls	r2, r2, #9
    5428:	025b      	lsls	r3, r3, #9
    for(line = 0; line < filter_width; line++) {
    542a:	2000      	movs	r0, #0
    542c:	b207      	sxth	r7, r0
    542e:	42be      	cmp	r6, r7
    5430:	dc48      	bgt.n	54c4 <lv_draw_rect+0x208>
    ofs_rb.x = coords->x2 - radius - aa;
    5432:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    5436:	9a04      	ldr	r2, [sp, #16]
    5438:	1b1b      	subs	r3, r3, r4
    543a:	1a9b      	subs	r3, r3, r2
    543c:	b29a      	uxth	r2, r3
    543e:	b21b      	sxth	r3, r3
    5440:	9313      	str	r3, [sp, #76]	; 0x4c
    ofs_rb.y = coords->y2 - radius - aa;
    5442:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    ofs_rb.x = coords->x2 - radius - aa;
    5446:	9212      	str	r2, [sp, #72]	; 0x48
    ofs_rb.y = coords->y2 - radius - aa;
    5448:	9a04      	ldr	r2, [sp, #16]
    544a:	1b1b      	subs	r3, r3, r4
    544c:	1a9b      	subs	r3, r3, r2
    544e:	b29a      	uxth	r2, r3
    5450:	b21b      	sxth	r3, r3
    5452:	930f      	str	r3, [sp, #60]	; 0x3c
    ofs_rt.y = coords->y1 + radius + aa;
    5454:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    ofs_rb.y = coords->y2 - radius - aa;
    5458:	920b      	str	r2, [sp, #44]	; 0x2c
    ofs_rt.y = coords->y1 + radius + aa;
    545a:	9a04      	ldr	r2, [sp, #16]
    545c:	4423      	add	r3, r4
    545e:	4413      	add	r3, r2
    5460:	b29a      	uxth	r2, r3
    5462:	b21b      	sxth	r3, r3
    5464:	9311      	str	r3, [sp, #68]	; 0x44
    ofs_lb.x = coords->x1 + radius + aa;
    5466:	f8ba 3000 	ldrh.w	r3, [sl]
    ofs_rt.y = coords->y1 + radius + aa;
    546a:	9210      	str	r2, [sp, #64]	; 0x40
    ofs_lb.x = coords->x1 + radius + aa;
    546c:	441c      	add	r4, r3
    546e:	9b04      	ldr	r3, [sp, #16]
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
    5470:	9207      	str	r2, [sp, #28]
    ofs_lb.x = coords->x1 + radius + aa;
    5472:	441c      	add	r4, r3
    5474:	b2a3      	uxth	r3, r4
    5476:	9314      	str	r3, [sp, #80]	; 0x50
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
    5478:	426d      	negs	r5, r5
    ofs_lb.x = coords->x1 + radius + aa;
    547a:	b223      	sxth	r3, r4
    547c:	9315      	str	r3, [sp, #84]	; 0x54
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
    547e:	b22b      	sxth	r3, r5
    5480:	9316      	str	r3, [sp, #88]	; 0x58
    5482:	9a07      	ldr	r2, [sp, #28]
    5484:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5486:	1a9b      	subs	r3, r3, r2
    5488:	b21b      	sxth	r3, r3
    548a:	9305      	str	r3, [sp, #20]
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
    548c:	9a05      	ldr	r2, [sp, #20]
    548e:	9b08      	ldr	r3, [sp, #32]
    5490:	4293      	cmp	r3, r2
    5492:	f2c0 81fb 	blt.w	588c <lv_draw_rect+0x5d0>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
    5496:	9b02      	ldr	r3, [sp, #8]
    5498:	eb03 0542 	add.w	r5, r3, r2, lsl #1
                if(col_rel < -swidth) { /*Outside of the blurred area. */
    549c:	9b03      	ldr	r3, [sp, #12]
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
    549e:	2400      	movs	r4, #0
                if(col_rel < -swidth) { /*Outside of the blurred area. */
    54a0:	4258      	negs	r0, r3
    54a2:	e033      	b.n	550c <lv_draw_rect+0x250>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
    54a4:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
    54a8:	9902      	ldr	r1, [sp, #8]
    54aa:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    54ae:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
    54b2:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
    54b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
    54ba:	4640      	mov	r0, r8
    54bc:	4639      	mov	r1, r7
    54be:	f7fd fc65 	bl	2d8c <lv_circ_next>
    54c2:	e79e      	b.n	5402 <lv_draw_rect+0x146>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
    54c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    54c6:	fbb3 fcf1 	udiv	ip, r3, r1
    54ca:	4413      	add	r3, r2
    54cc:	f847 c020 	str.w	ip, [r7, r0, lsl #2]
    for(line = 0; line < filter_width; line++) {
    54d0:	3001      	adds	r0, #1
    54d2:	e7ab      	b.n	542c <lv_draw_rect+0x170>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
    54d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
            uint32_t px_opa_sum = 0;
    54d6:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
    54d8:	9b03      	ldr	r3, [sp, #12]
    54da:	4293      	cmp	r3, r2
    54dc:	da01      	bge.n	54e2 <lv_draw_rect+0x226>
    54de:	2200      	movs	r2, #0
    54e0:	e00e      	b.n	5500 <lv_draw_rect+0x244>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
    54e2:	9b05      	ldr	r3, [sp, #20]
    54e4:	18d7      	adds	r7, r2, r3
    54e6:	f140 80a3 	bpl.w	5630 <lv_draw_rect+0x374>
                    col_rel = radius - curve_x[line] - col;
    54ea:	882b      	ldrh	r3, [r5, #0]
    54ec:	9e04      	ldr	r6, [sp, #16]
    54ee:	1af3      	subs	r3, r6, r3
    54f0:	1b1b      	subs	r3, r3, r4
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
    54f2:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
    54f4:	4283      	cmp	r3, r0
    54f6:	f280 80a6 	bge.w	5646 <lv_draw_rect+0x38a>
                    if(line_rel == -swidth)
    54fa:	1a16      	subs	r6, r2, r0
    54fc:	4272      	negs	r2, r6
    54fe:	4172      	adcs	r2, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
    5500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5502:	0a09      	lsrs	r1, r1, #8
    5504:	5519      	strb	r1, [r3, r4]
            if(line_ready) {
    5506:	3401      	adds	r4, #1
    5508:	b2a4      	uxth	r4, r4
    550a:	b912      	cbnz	r2, 5512 <lv_draw_rect+0x256>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
    550c:	9b08      	ldr	r3, [sp, #32]
    550e:	42a3      	cmp	r3, r4
    5510:	dae0      	bge.n	54d4 <lv_draw_rect+0x218>
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
    5512:	9a05      	ldr	r2, [sp, #20]
    5514:	9b02      	ldr	r3, [sp, #8]
        point_rt.y = ofs_rt.y - line;
    5516:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
    551a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    551e:	9a12      	ldr	r2, [sp, #72]	; 0x48
        point_rb.y = ofs_rb.y + line;
    5520:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
    5524:	3201      	adds	r2, #1
    5526:	441a      	add	r2, r3
    5528:	b292      	uxth	r2, r2
    552a:	920c      	str	r2, [sp, #48]	; 0x30
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
    552c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    552e:	3a01      	subs	r2, #1
    5530:	1ad3      	subs	r3, r2, r3
    5532:	b29b      	uxth	r3, r3
    5534:	930d      	str	r3, [sp, #52]	; 0x34
        for(d = 1; d < col; d++) {
    5536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5538:	2601      	movs	r6, #1
    553a:	1c5d      	adds	r5, r3, #1
    553c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    5540:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
    5544:	42a6      	cmp	r6, r4
    5546:	ee08 3a10 	vmov	s16, r3
    554a:	f0c0 808b 	bcc.w	5664 <lv_draw_rect+0x3a8>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
    554e:	9b05      	ldr	r3, [sp, #20]
    5550:	2b00      	cmp	r3, #0
    5552:	d164      	bne.n	561e <lv_draw_rect+0x362>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    5554:	f004 ff3c 	bl	a3d0 <lv_refr_get_disp_refreshing>
    5558:	f002 fdfa 	bl	8150 <lv_disp_get_antialiasing>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    555c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    5560:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5564:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    lv_coord_t swidth = style->body.shadow.width;
    5568:	f9b9 8012 	ldrsh.w	r8, [r9, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    556c:	3201      	adds	r2, #1
    556e:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5570:	f8ba 3000 	ldrh.w	r3, [sl]
    5574:	3101      	adds	r1, #1
    5576:	1ac9      	subs	r1, r1, r3
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    5578:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
    557a:	b212      	sxth	r2, r2
    557c:	b209      	sxth	r1, r1
    557e:	f8b9 0006 	ldrh.w	r0, [r9, #6]
    5582:	f7ff fe58 	bl	5236 <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
    5586:	f8ba 2004 	ldrh.w	r2, [sl, #4]
    radius += aa;
    558a:	b2a5      	uxth	r5, r4
    558c:	fa10 f084 	uxtah	r0, r0, r4
    right_area.x1 = coords->x2 + 1 - aa;
    5590:	1c53      	adds	r3, r2, #1
    right_area.y1 = coords->y1 + radius + aa;
    5592:	f8ba 4002 	ldrh.w	r4, [sl, #2]
    right_area.x1 = coords->x2 + 1 - aa;
    5596:	1b5b      	subs	r3, r3, r5
    right_area.y1 = coords->y1 + radius + aa;
    5598:	1929      	adds	r1, r5, r4
    right_area.x1 = coords->x2 + 1 - aa;
    559a:	b21b      	sxth	r3, r3
    radius += aa;
    559c:	fa1f fc80 	uxth.w	ip, r0
    right_area.x1 = coords->x2 + 1 - aa;
    55a0:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    right_area.y1 = coords->y1 + radius + aa;
    55a4:	fa11 f080 	uxtah	r0, r1, r0
    right_area.x2 = right_area.x1;
    55a8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    left_area.x1 = coords->x1 - 1 + aa;
    55ac:	f8ba 1000 	ldrh.w	r1, [sl]
    right_area.y2 = coords->y2 - radius - aa;
    55b0:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    left_area.x1 = coords->x1 - 1 + aa;
    55b4:	1e4f      	subs	r7, r1, #1
    right_area.y2 = coords->y2 - radius - aa;
    55b6:	1b5e      	subs	r6, r3, r5
    top_area.x1 = coords->x1 + radius + aa;
    55b8:	4429      	add	r1, r5
    top_area.x2 = coords->x2 - radius - aa;
    55ba:	1b52      	subs	r2, r2, r5
    top_area.y1 = coords->y1 - 1 + aa;
    55bc:	3c01      	subs	r4, #1
    bottom_area.y1 = coords->y2 + 1 - aa;
    55be:	3301      	adds	r3, #1
    right_area.y2 = coords->y2 - radius - aa;
    55c0:	eba6 060c 	sub.w	r6, r6, ip
    left_area.x1 = coords->x1 - 1 + aa;
    55c4:	442f      	add	r7, r5
    top_area.x1 = coords->x1 + radius + aa;
    55c6:	4461      	add	r1, ip
    top_area.y1 = coords->y1 - 1 + aa;
    55c8:	442c      	add	r4, r5
    top_area.x2 = coords->x2 - radius - aa;
    55ca:	eba2 0c0c 	sub.w	ip, r2, ip
    bottom_area.y1 = coords->y2 + 1 - aa;
    55ce:	1b5d      	subs	r5, r3, r5
    top_area.y1 = coords->y1 - 1 + aa;
    55d0:	b224      	sxth	r4, r4
    right_area.y1 = coords->y1 + radius + aa;
    55d2:	b200      	sxth	r0, r0
    right_area.y2 = coords->y2 - radius - aa;
    55d4:	b236      	sxth	r6, r6
    left_area.x1 = coords->x1 - 1 + aa;
    55d6:	b23f      	sxth	r7, r7
    top_area.x1 = coords->x1 + radius + aa;
    55d8:	b209      	sxth	r1, r1
    top_area.x2 = coords->x2 - radius - aa;
    55da:	fa0f fc8c 	sxth.w	ip, ip
    bottom_area.y1 = coords->y2 + 1 - aa;
    55de:	b22d      	sxth	r5, r5
    top_area.y1 = coords->y1 - 1 + aa;
    55e0:	f8ad 4082 	strh.w	r4, [sp, #130]	; 0x82
    top_area.y2 = top_area.y1;
    55e4:	f8ad 4086 	strh.w	r4, [sp, #134]	; 0x86
    right_area.y1 = coords->y1 + radius + aa;
    55e8:	f8ad 0072 	strh.w	r0, [sp, #114]	; 0x72
    right_area.y2 = coords->y2 - radius - aa;
    55ec:	f8ad 6076 	strh.w	r6, [sp, #118]	; 0x76
    left_area.x1 = coords->x1 - 1 + aa;
    55f0:	f8ad 7078 	strh.w	r7, [sp, #120]	; 0x78
    left_area.y1 = coords->y1 + radius + aa;
    55f4:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    left_area.x2 = left_area.x1;
    55f8:	f8ad 707c 	strh.w	r7, [sp, #124]	; 0x7c
    left_area.y2 = coords->y2 - radius - aa;
    55fc:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
    top_area.x1 = coords->x1 + radius + aa;
    5600:	f8ad 1080 	strh.w	r1, [sp, #128]	; 0x80
    top_area.x2 = coords->x2 - radius - aa;
    5604:	f8ad c084 	strh.w	ip, [sp, #132]	; 0x84
    bottom_area.x1 = coords->x1 + radius + aa;
    5608:	f8ad 1088 	strh.w	r1, [sp, #136]	; 0x88
    bottom_area.y1 = coords->y2 + 1 - aa;
    560c:	f8ad 508a 	strh.w	r5, [sp, #138]	; 0x8a
    bottom_area.x2 = coords->x2 - radius - aa;
    5610:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
    bottom_area.y2 = bottom_area.y1;
    5614:	f8ad 508e 	strh.w	r5, [sp, #142]	; 0x8e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
    5618:	2401      	movs	r4, #1
    561a:	45a0      	cmp	r8, r4
    561c:	da68      	bge.n	56f0 <lv_draw_rect+0x434>
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
    561e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5620:	3301      	adds	r3, #1
    5622:	b29b      	uxth	r3, r3
    5624:	930b      	str	r3, [sp, #44]	; 0x2c
    5626:	9b07      	ldr	r3, [sp, #28]
    5628:	3b01      	subs	r3, #1
    562a:	b29b      	uxth	r3, r3
    562c:	9307      	str	r3, [sp, #28]
    562e:	e728      	b.n	5482 <lv_draw_rect+0x1c6>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
    5630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5632:	42bb      	cmp	r3, r7
    5634:	f6ff af53 	blt.w	54de <lv_draw_rect+0x222>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
    5638:	882b      	ldrh	r3, [r5, #0]
    563a:	18e6      	adds	r6, r4, r3
    563c:	9b02      	ldr	r3, [sp, #8]
    563e:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
    5642:	1b9b      	subs	r3, r3, r6
    5644:	e755      	b.n	54f2 <lv_draw_rect+0x236>
                } else if(col_rel > swidth)
    5646:	9e03      	ldr	r6, [sp, #12]
    5648:	429e      	cmp	r6, r3
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
    564a:	bfa9      	itett	ge
    564c:	9e03      	ldrge	r6, [sp, #12]
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
    564e:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
    5650:	1af3      	subge	r3, r6, r3
    5652:	9e09      	ldrge	r6, [sp, #36]	; 0x24
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
    5654:	bfb4      	ite	lt
    5656:	681b      	ldrlt	r3, [r3, #0]
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
    5658:	f856 3023 	ldrge.w	r3, [r6, r3, lsl #2]
    565c:	3201      	adds	r2, #1
    565e:	4419      	add	r1, r3
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
    5660:	b212      	sxth	r2, r2
    5662:	e739      	b.n	54d8 <lv_draw_rect+0x21c>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
    5664:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5666:	4283      	cmp	r3, r0
    5668:	dd17      	ble.n	569a <lv_draw_rect+0x3de>
    566a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    566c:	42bb      	cmp	r3, r7
    566e:	dd09      	ble.n	5684 <lv_draw_rect+0x3c8>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
    5670:	782b      	ldrb	r3, [r5, #0]
    5672:	9300      	str	r3, [sp, #0]
    5674:	465a      	mov	r2, fp
    5676:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    567a:	9017      	str	r0, [sp, #92]	; 0x5c
    567c:	4639      	mov	r1, r7
    567e:	f002 f824 	bl	76ca <lv_draw_px>
    5682:	9817      	ldr	r0, [sp, #92]	; 0x5c
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
    5684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5686:	4543      	cmp	r3, r8
    5688:	da07      	bge.n	569a <lv_draw_rect+0x3de>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
    568a:	782b      	ldrb	r3, [r5, #0]
    568c:	9300      	str	r3, [sp, #0]
    568e:	465a      	mov	r2, fp
    5690:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    5694:	4641      	mov	r1, r8
    5696:	f002 f818 	bl	76ca <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
    569a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    569c:	ee18 2a10 	vmov	r2, s16
    56a0:	4293      	cmp	r3, r2
    56a2:	da19      	bge.n	56d8 <lv_draw_rect+0x41c>
    56a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    56a6:	42bb      	cmp	r3, r7
    56a8:	dd09      	ble.n	56be <lv_draw_rect+0x402>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
    56aa:	782b      	ldrb	r3, [r5, #0]
    56ac:	9300      	str	r3, [sp, #0]
    56ae:	ee18 0a10 	vmov	r0, s16
    56b2:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    56b6:	465a      	mov	r2, fp
    56b8:	4639      	mov	r1, r7
    56ba:	f002 f806 	bl	76ca <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
    56be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    56c0:	4543      	cmp	r3, r8
    56c2:	da09      	bge.n	56d8 <lv_draw_rect+0x41c>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
    56c4:	782b      	ldrb	r3, [r5, #0]
    56c6:	9300      	str	r3, [sp, #0]
    56c8:	ee18 0a10 	vmov	r0, s16
    56cc:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    56d0:	465a      	mov	r2, fp
    56d2:	4641      	mov	r1, r8
    56d4:	f001 fff9 	bl	76ca <lv_draw_px>
        for(d = 1; d < col; d++) {
    56d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    56da:	3b01      	subs	r3, #1
    56dc:	b29b      	uxth	r3, r3
    56de:	930d      	str	r3, [sp, #52]	; 0x34
    56e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    56e2:	3301      	adds	r3, #1
    56e4:	3601      	adds	r6, #1
    56e6:	b29b      	uxth	r3, r3
    56e8:	b2b6      	uxth	r6, r6
    56ea:	930c      	str	r3, [sp, #48]	; 0x30
    56ec:	3501      	adds	r5, #1
    56ee:	e725      	b.n	553c <lv_draw_rect+0x280>
        opa_act = map[d];
    56f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
    56f2:	f8b9 2010 	ldrh.w	r2, [r9, #16]
        opa_act = map[d];
    56f6:	5d1b      	ldrb	r3, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
    56f8:	9305      	str	r3, [sp, #20]
    56fa:	4659      	mov	r1, fp
    56fc:	a81c      	add	r0, sp, #112	; 0x70
    56fe:	f002 f831 	bl	7764 <lv_draw_fill>
        right_area.x1++;
    5702:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
    5706:	9b05      	ldr	r3, [sp, #20]
        right_area.x1++;
    5708:	3201      	adds	r2, #1
    570a:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        right_area.x2++;
    570e:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    5712:	3201      	adds	r2, #1
    5714:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
    5718:	4659      	mov	r1, fp
    571a:	f8b9 2010 	ldrh.w	r2, [r9, #16]
    571e:	a81e      	add	r0, sp, #120	; 0x78
    5720:	f002 f820 	bl	7764 <lv_draw_fill>
        left_area.x1--;
    5724:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
    5728:	9b05      	ldr	r3, [sp, #20]
        left_area.x1--;
    572a:	3a01      	subs	r2, #1
    572c:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        left_area.x2--;
    5730:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
    5734:	3a01      	subs	r2, #1
    5736:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
    573a:	4659      	mov	r1, fp
    573c:	f8b9 2010 	ldrh.w	r2, [r9, #16]
    5740:	a820      	add	r0, sp, #128	; 0x80
    5742:	f002 f80f 	bl	7764 <lv_draw_fill>
        top_area.y1--;
    5746:	f8bd 2082 	ldrh.w	r2, [sp, #130]	; 0x82
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
    574a:	9b05      	ldr	r3, [sp, #20]
        top_area.y1--;
    574c:	3a01      	subs	r2, #1
    574e:	f8ad 2082 	strh.w	r2, [sp, #130]	; 0x82
        top_area.y2--;
    5752:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
    5756:	3a01      	subs	r2, #1
    5758:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
    575c:	4659      	mov	r1, fp
    575e:	f8b9 2010 	ldrh.w	r2, [r9, #16]
    5762:	a822      	add	r0, sp, #136	; 0x88
    5764:	f001 fffe 	bl	7764 <lv_draw_fill>
        bottom_area.y1++;
    5768:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    576c:	3301      	adds	r3, #1
    576e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        bottom_area.y2++;
    5772:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    5776:	3401      	adds	r4, #1
    5778:	3301      	adds	r3, #1
    577a:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
    577e:	b224      	sxth	r4, r4
    5780:	e74b      	b.n	561a <lv_draw_rect+0x35e>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
    5782:	2b00      	cmp	r3, #0
    5784:	f040 8082 	bne.w	588c <lv_draw_rect+0x5d0>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    5788:	f004 fe22 	bl	a3d0 <lv_refr_get_disp_refreshing>
    578c:	f002 fce0 	bl	8150 <lv_disp_get_antialiasing>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    5790:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    5794:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5798:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    lv_coord_t swidth = style->body.shadow.width;
    579c:	f9b9 5012 	ldrsh.w	r5, [r9, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    57a0:	3201      	adds	r2, #1
    57a2:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    57a4:	f8ba 3000 	ldrh.w	r3, [sl]
    57a8:	3101      	adds	r1, #1
    57aa:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
    57ac:	b209      	sxth	r1, r1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    57ae:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
    57b0:	b212      	sxth	r2, r2
    57b2:	f8b9 0006 	ldrh.w	r0, [r9, #6]
    57b6:	f7ff fd3e 	bl	5236 <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
    57ba:	b2a4      	uxth	r4, r4
    57bc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    57c0:	4418      	add	r0, r3
    57c2:	b283      	uxth	r3, r0
    57c4:	9302      	str	r3, [sp, #8]
    57c6:	b203      	sxth	r3, r0
    57c8:	9304      	str	r3, [sp, #16]
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
    57ca:	9a04      	ldr	r2, [sp, #16]
    swidth += aa;
    57cc:	1963      	adds	r3, r4, r5
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
    57ce:	1d10      	adds	r0, r2, #4
    swidth += aa;
    57d0:	fa0f f883 	sxth.w	r8, r3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
    57d4:	3303      	adds	r3, #3
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
    57d6:	f020 0003 	bic.w	r0, r0, #3
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
    57da:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    curve_x_size *= sizeof(lv_coord_t);
    57de:	0045      	lsls	r5, r0, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
    57e0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    57e4:	f002 fac6 	bl	7d74 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
    57e8:	af20      	add	r7, sp, #128	; 0x80
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
    57ea:	4606      	mov	r6, r0
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
    57ec:	4405      	add	r5, r0
    lv_circ_init(&circ, &circ_tmp, radius);
    57ee:	9a04      	ldr	r2, [sp, #16]
    57f0:	a91e      	add	r1, sp, #120	; 0x78
    57f2:	4638      	mov	r0, r7
    57f4:	f7fd faba 	bl	2d6c <lv_circ_init>
    while(lv_circ_cont(&circ)) {
    57f8:	4638      	mov	r0, r7
    57fa:	f7fd fabe 	bl	2d7a <lv_circ_cont>
    57fe:	2800      	cmp	r0, #0
    5800:	f040 83ed 	bne.w	5fde <lv_draw_rect+0xd22>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
    5804:	9a06      	ldr	r2, [sp, #24]
    5806:	f899 3008 	ldrb.w	r3, [r9, #8]
    580a:	2aff      	cmp	r2, #255	; 0xff
    580c:	bf1c      	itt	ne
    580e:	4353      	mulne	r3, r2
    5810:	0a1b      	lsrne	r3, r3, #8
    for(col = 0; col < swidth; col++) {
    5812:	fb13 f108 	smulbb	r1, r3, r8
    5816:	2200      	movs	r2, #0
    5818:	b210      	sxth	r0, r2
    581a:	4580      	cmp	r8, r0
    581c:	f300 83ef 	bgt.w	5ffe <lv_draw_rect+0xd42>
    ofs_l.x = coords->x1 + radius;
    5820:	9a02      	ldr	r2, [sp, #8]
    5822:	f8ba 3000 	ldrh.w	r3, [sl]
    5826:	f8ba 0006 	ldrh.w	r0, [sl, #6]
    582a:	4413      	add	r3, r2
    582c:	b29a      	uxth	r2, r3
    582e:	3001      	adds	r0, #1
    5830:	b21b      	sxth	r3, r3
    5832:	9207      	str	r2, [sp, #28]
    5834:	1b04      	subs	r4, r0, r4
    ofs_l.y = coords->y2 - radius + 1 - aa;
    5836:	9a02      	ldr	r2, [sp, #8]
    ofs_l.x = coords->x1 + radius;
    5838:	930b      	str	r3, [sp, #44]	; 0x2c
    ofs_l.y = coords->y2 - radius + 1 - aa;
    583a:	b2a3      	uxth	r3, r4
    583c:	930a      	str	r3, [sp, #40]	; 0x28
    583e:	1a9b      	subs	r3, r3, r2
    5840:	b29b      	uxth	r3, r3
    5842:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_r.x = coords->x2 - radius;
    5844:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    5848:	1a9f      	subs	r7, r3, r2
    584a:	b2bb      	uxth	r3, r7
    584c:	9308      	str	r3, [sp, #32]
    for(col = 0; col <= radius; col++) {
    584e:	9305      	str	r3, [sp, #20]
    5850:	2300      	movs	r3, #0
    5852:	9302      	str	r3, [sp, #8]
    5854:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
    5858:	9a04      	ldr	r2, [sp, #16]
    585a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    585e:	42a2      	cmp	r2, r4
    5860:	f280 83d4 	bge.w	600c <lv_draw_rect+0xd50>
    area_mid.x1 = ofs_l.x + 1;
    5864:	9b07      	ldr	r3, [sp, #28]
    area_mid.y1 = ofs_l.y + radius;
    5866:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
    586a:	f8ad 408a 	strh.w	r4, [sp, #138]	; 0x8a
    area_mid.x1 = ofs_l.x + 1;
    586e:	3301      	adds	r3, #1
    5870:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    area_mid.x2 = ofs_r.x - 1;
    5874:	9b08      	ldr	r3, [sp, #32]
    area_mid.y2 = area_mid.y1;
    5876:	f8ad 408e 	strh.w	r4, [sp, #142]	; 0x8e
    area_mid.x2 = ofs_r.x - 1;
    587a:	1e5f      	subs	r7, r3, #1
    587c:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
    for(d = 0; d < swidth; d++) {
    5880:	2300      	movs	r3, #0
    5882:	1c5c      	adds	r4, r3, #1
    5884:	b29b      	uxth	r3, r3
    5886:	4543      	cmp	r3, r8
    5888:	f2c0 8407 	blt.w	609a <lv_draw_rect+0xdde>
    if(lv_area_is_on(coords, mask) == false) return;
    588c:	4659      	mov	r1, fp
    588e:	4650      	mov	r0, sl
    5890:	f7fe f94d 	bl	3b2e <lv_area_is_on>
    5894:	2800      	cmp	r0, #0
    5896:	f000 839d 	beq.w	5fd4 <lv_draw_rect+0xd18>
    if(style->body.opa > LV_OPA_MIN) {
    589a:	f899 3008 	ldrb.w	r3, [r9, #8]
    589e:	2b10      	cmp	r3, #16
    58a0:	f240 81ca 	bls.w	5c38 <lv_draw_rect+0x97c>
    uint16_t radius = style->body.radius;
    58a4:	f8b9 6006 	ldrh.w	r6, [r9, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    58a8:	f004 fd92 	bl	a3d0 <lv_refr_get_disp_refreshing>
    58ac:	f002 fc50 	bl	8150 <lv_disp_get_antialiasing>
    lv_color_t gcolor = style->body.grad_color;
    58b0:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    58b4:	f8ba 5006 	ldrh.w	r5, [sl, #6]
    58b8:	9302      	str	r3, [sp, #8]
    58ba:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    58be:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    lv_color_t mcolor = style->body.main_color;
    58c2:	f8b9 7002 	ldrh.w	r7, [r9, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    58c6:	3501      	adds	r5, #1
    58c8:	1aed      	subs	r5, r5, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    58ca:	f8ba 3000 	ldrh.w	r3, [sl]
    58ce:	3101      	adds	r1, #1
    58d0:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
    58d2:	9b06      	ldr	r3, [sp, #24]
    58d4:	2bff      	cmp	r3, #255	; 0xff
    58d6:	bf18      	it	ne
    58d8:	9a06      	ldrne	r2, [sp, #24]
    58da:	f899 3008 	ldrb.w	r3, [r9, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    58de:	b22d      	sxth	r5, r5
    58e0:	bf18      	it	ne
    58e2:	4353      	mulne	r3, r2
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    58e4:	4604      	mov	r4, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    58e6:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
    58e8:	462a      	mov	r2, r5
    58ea:	4630      	mov	r0, r6
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
    58ec:	bf0c      	ite	eq
    58ee:	4698      	moveq	r8, r3
    58f0:	ea4f 2813 	movne.w	r8, r3, lsr #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
    58f4:	f7ff fc9f 	bl	5236 <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
    58f8:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
    58fc:	ebb0 0f63 	cmp.w	r0, r3, asr #1
    5900:	f340 83df 	ble.w	60c2 <lv_draw_rect+0xe06>
        if(style->body.radius != 0) {
    5904:	f9b9 6006 	ldrsh.w	r6, [r9, #6]
    5908:	2e00      	cmp	r6, #0
    590a:	f000 8195 	beq.w	5c38 <lv_draw_rect+0x97c>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    590e:	f004 fd5f 	bl	a3d0 <lv_refr_get_disp_refreshing>
    5912:	f002 fc1d 	bl	8150 <lv_disp_get_antialiasing>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
    5916:	9b06      	ldr	r3, [sp, #24]
    5918:	f899 7008 	ldrb.w	r7, [r9, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    591c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5920:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    5924:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
    5926:	2bff      	cmp	r3, #255	; 0xff
    5928:	bf18      	it	ne
    592a:	9b06      	ldrne	r3, [sp, #24]
    lv_color_t mcolor = style->body.main_color;
    592c:	f8b9 4002 	ldrh.w	r4, [r9, #2]
    lv_color_t gcolor = style->body.grad_color;
    5930:	f8b9 8004 	ldrh.w	r8, [r9, #4]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
    5934:	bf18      	it	ne
    5936:	435f      	mulne	r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    5938:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    593c:	f102 0201 	add.w	r2, r2, #1
    5940:	eba2 0203 	sub.w	r2, r2, r3
    5944:	b213      	sxth	r3, r2
    5946:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5948:	f8ba 3000 	ldrh.w	r3, [sl]
    radius = lv_draw_cont_radius_corr(radius, width, height);
    594c:	9a02      	ldr	r2, [sp, #8]
    594e:	f101 0101 	add.w	r1, r1, #1
    5952:	eba1 0103 	sub.w	r1, r1, r3
    uint16_t radius = style->body.radius;
    5956:	b2b6      	uxth	r6, r6
    radius = lv_draw_cont_radius_corr(radius, width, height);
    5958:	b209      	sxth	r1, r1
    595a:	4630      	mov	r0, r6
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
    595c:	bf0c      	ite	eq
    595e:	463d      	moveq	r5, r7
    5960:	0a3d      	lsrne	r5, r7, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
    5962:	f7ff fc68 	bl	5236 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
    5966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    radius = lv_draw_cont_radius_corr(radius, width, height);
    5968:	9007      	str	r0, [sp, #28]
    lt_origo.x = coords->x1 + radius + aa;
    596a:	f8ba 0000 	ldrh.w	r0, [sl]
    lt_origo.y = coords->y1 + radius + aa;
    596e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    lt_origo.x = coords->x1 + radius + aa;
    5970:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
    lb_origo.y = coords->y2 - radius - aa;
    5974:	9907      	ldr	r1, [sp, #28]
    lt_origo.x = coords->x1 + radius + aa;
    5976:	fa10 f083 	uxtah	r0, r0, r3
    597a:	9b07      	ldr	r3, [sp, #28]
    597c:	4418      	add	r0, r3
    597e:	b283      	uxth	r3, r0
    5980:	9304      	str	r3, [sp, #16]
    lt_origo.y = coords->y1 + radius + aa;
    5982:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    5986:	fa13 f382 	uxtah	r3, r3, r2
    598a:	9a07      	ldr	r2, [sp, #28]
    598c:	4413      	add	r3, r2
    598e:	b29a      	uxth	r2, r3
    5990:	b21b      	sxth	r3, r3
    5992:	9310      	str	r3, [sp, #64]	; 0x40
    lb_origo.y = coords->y2 - radius - aa;
    5994:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    lt_origo.y = coords->y1 + radius + aa;
    5998:	9208      	str	r2, [sp, #32]
    lb_origo.y = coords->y2 - radius - aa;
    599a:	1b9b      	subs	r3, r3, r6
    599c:	1a5b      	subs	r3, r3, r1
    599e:	4632      	mov	r2, r6
    59a0:	b299      	uxth	r1, r3
    rt_origo.x = coords->x2 - radius - aa;
    59a2:	f8ba 6004 	ldrh.w	r6, [sl, #4]
    lb_origo.y = coords->y2 - radius - aa;
    59a6:	9109      	str	r1, [sp, #36]	; 0x24
    59a8:	b21b      	sxth	r3, r3
    59aa:	9311      	str	r3, [sp, #68]	; 0x44
    rt_origo.x = coords->x2 - radius - aa;
    59ac:	9b07      	ldr	r3, [sp, #28]
    59ae:	1ab6      	subs	r6, r6, r2
    59b0:	1af6      	subs	r6, r6, r3
    59b2:	b2b3      	uxth	r3, r6
    59b4:	9305      	str	r3, [sp, #20]
    lv_circ_init(&cir, &cir_tmp, radius);
    59b6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
    59ba:	9303      	str	r3, [sp, #12]
    59bc:	ae1a      	add	r6, sp, #104	; 0x68
    59be:	461a      	mov	r2, r3
    59c0:	a919      	add	r1, sp, #100	; 0x64
    59c2:	4630      	mov	r0, r6
    59c4:	f7fd f9d2 	bl	2d6c <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
    59c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59ca:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    59ce:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
    59d2:	9804      	ldr	r0, [sp, #16]
    59d4:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
    59d6:	9b05      	ldr	r3, [sp, #20]
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
    59d8:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
    59da:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
    59dc:	1a41      	subs	r1, r0, r1
    59de:	9200      	str	r2, [sp, #0]
    59e0:	b21b      	sxth	r3, r3
    59e2:	b209      	sxth	r1, r1
    59e4:	a820      	add	r0, sp, #128	; 0x80
    59e6:	f7fe f810 	bl	3a0a <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
    59ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59ec:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    59f0:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    59f4:	9804      	ldr	r0, [sp, #16]
    59f6:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
    59f8:	9b05      	ldr	r3, [sp, #20]
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
    59fa:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
    59fc:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
    59fe:	1a41      	subs	r1, r0, r1
    5a00:	9200      	str	r2, [sp, #0]
    5a02:	b21b      	sxth	r3, r3
    5a04:	b209      	sxth	r1, r1
    5a06:	a822      	add	r0, sp, #136	; 0x88
    5a08:	f7fd ffff 	bl	3a0a <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
    5a0c:	9b08      	ldr	r3, [sp, #32]
    5a0e:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    5a12:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
    5a16:	9804      	ldr	r0, [sp, #16]
    5a18:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
    5a1a:	9b05      	ldr	r3, [sp, #20]
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
    5a1c:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
    5a1e:	440b      	add	r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
    5a20:	1a41      	subs	r1, r0, r1
    5a22:	9200      	str	r2, [sp, #0]
    5a24:	b21b      	sxth	r3, r3
    5a26:	b209      	sxth	r1, r1
    5a28:	a81e      	add	r0, sp, #120	; 0x78
    5a2a:	f7fd ffee 	bl	3a0a <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
    5a2e:	9b08      	ldr	r3, [sp, #32]
    5a30:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    5a34:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    5a38:	9804      	ldr	r0, [sp, #16]
    5a3a:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
    5a3c:	9b05      	ldr	r3, [sp, #20]
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
    5a3e:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
    5a40:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
    5a42:	1a41      	subs	r1, r0, r1
    5a44:	b21b      	sxth	r3, r3
    5a46:	9200      	str	r2, [sp, #0]
    5a48:	b209      	sxth	r1, r1
    5a4a:	a81c      	add	r0, sp, #112	; 0x70
    5a4c:	f7fd ffdd 	bl	3a0a <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
    5a50:	2300      	movs	r3, #0
    5a52:	930a      	str	r3, [sp, #40]	; 0x28
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    5a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    while(lv_circ_cont(&cir)) {
    5a56:	ee0a 6a10 	vmov	s20, r6
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    5a5a:	3301      	adds	r3, #1
    5a5c:	9314      	str	r3, [sp, #80]	; 0x50
    while(lv_circ_cont(&cir)) {
    5a5e:	ee1a 0a10 	vmov	r0, s20
    5a62:	f7fd f98a 	bl	2d7a <lv_circ_cont>
    5a66:	2800      	cmp	r0, #0
    5a68:	f040 8388 	bne.w	617c <lv_draw_rect+0xec0>
    if(mcolor.full == gcolor.full)
    5a6c:	4544      	cmp	r4, r8
    5a6e:	f040 8535 	bne.w	64dc <lv_draw_rect+0x1220>
        act_color = mcolor;
    5a72:	4622      	mov	r2, r4
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
    5a74:	462b      	mov	r3, r5
    5a76:	4659      	mov	r1, fp
    5a78:	a81c      	add	r0, sp, #112	; 0x70
    5a7a:	f001 fe73 	bl	7764 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
    5a7e:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    5a82:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    5a86:	429a      	cmp	r2, r3
    5a88:	d008      	beq.n	5a9c <lv_draw_rect+0x7e0>
        if(mcolor.full == gcolor.full)
    5a8a:	4544      	cmp	r4, r8
    5a8c:	f040 8538 	bne.w	6500 <lv_draw_rect+0x1244>
            act_color = mcolor;
    5a90:	4622      	mov	r2, r4
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
    5a92:	462b      	mov	r3, r5
    5a94:	4659      	mov	r1, fp
    5a96:	a81e      	add	r0, sp, #120	; 0x78
    5a98:	f001 fe64 	bl	7764 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
    5a9c:	4544      	cmp	r4, r8
    5a9e:	f040 853f 	bne.w	6520 <lv_draw_rect+0x1264>
        act_color = mcolor;
    5aa2:	4622      	mov	r2, r4
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
    5aa4:	462b      	mov	r3, r5
    5aa6:	4659      	mov	r1, fp
    5aa8:	a820      	add	r0, sp, #128	; 0x80
    5aaa:	f001 fe5b 	bl	7764 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
    5aae:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
    5ab2:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
    5ab6:	429a      	cmp	r2, r3
    5ab8:	d008      	beq.n	5acc <lv_draw_rect+0x810>
        if(mcolor.full == gcolor.full)
    5aba:	4544      	cmp	r4, r8
    5abc:	f040 8542 	bne.w	6544 <lv_draw_rect+0x1288>
            act_color = mcolor;
    5ac0:	4622      	mov	r2, r4
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
    5ac2:	462b      	mov	r3, r5
    5ac4:	4659      	mov	r1, fp
    5ac6:	a822      	add	r0, sp, #136	; 0x88
    5ac8:	f001 fe4c 	bl	7764 <lv_draw_fill>
    if(aa) {
    5acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5ace:	2b00      	cmp	r3, #0
    5ad0:	f000 80b2 	beq.w	5c38 <lv_draw_rect+0x97c>
        edge_top_area.x1 = coords->x1 + radius + 2;
    5ad4:	f8ba 3000 	ldrh.w	r3, [sl]
    5ad8:	9a07      	ldr	r2, [sp, #28]
    5ada:	3302      	adds	r3, #2
    5adc:	4413      	add	r3, r2
    5ade:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        edge_top_area.x2 = coords->x2 - radius - 2;
    5ae2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    5ae6:	3b02      	subs	r3, #2
    5ae8:	1a9b      	subs	r3, r3, r2
    5aea:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        edge_top_area.y1 = coords->y1;
    5aee:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
    5af2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
        edge_top_area.y1 = coords->y1;
    5af6:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        edge_top_area.y2 = coords->y1;
    5afa:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
    5afe:	4659      	mov	r1, fp
    5b00:	462b      	mov	r3, r5
    5b02:	a81c      	add	r0, sp, #112	; 0x70
    5b04:	f001 fe2e 	bl	7764 <lv_draw_fill>
        edge_top_area.y1 = coords->y2;
    5b08:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
    5b0c:	f8b9 2004 	ldrh.w	r2, [r9, #4]
        edge_top_area.y1 = coords->y2;
    5b10:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        edge_top_area.y2 = coords->y2;
    5b14:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
    5b18:	4659      	mov	r1, fp
    5b1a:	462b      	mov	r3, r5
    5b1c:	a81c      	add	r0, sp, #112	; 0x70
    5b1e:	f001 fe21 	bl	7764 <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
    5b22:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    5b26:	930b      	str	r3, [sp, #44]	; 0x2c
    5b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5b2a:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    5b2e:	1a9b      	subs	r3, r3, r2
    5b30:	b21b      	sxth	r3, r3
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
    5b32:	9a03      	ldr	r2, [sp, #12]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
    5b34:	930d      	str	r3, [sp, #52]	; 0x34
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
    5b36:	9b07      	ldr	r3, [sp, #28]
    5b38:	1a9a      	subs	r2, r3, r2
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
    5b3a:	4621      	mov	r1, r4
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
    5b3c:	9b02      	ldr	r3, [sp, #8]
    5b3e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
    5b42:	4640      	mov	r0, r8
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
    5b44:	fbb2 f2f3 	udiv	r2, r2, r3
    5b48:	b2d2      	uxtb	r2, r2
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
    5b4a:	920c      	str	r2, [sp, #48]	; 0x30
    5b4c:	f7ff fb50 	bl	51f0 <lv_color_mix>
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
    5b50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
    5b52:	ee08 0a90 	vmov	s17, r0
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
    5b56:	4641      	mov	r1, r8
    5b58:	4620      	mov	r0, r4
    5b5a:	f7ff fb49 	bl	51f0 <lv_color_mix>
    5b5e:	9b07      	ldr	r3, [sp, #28]
    5b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5b62:	ee08 0a10 	vmov	s16, r0
        for(i = 0; i < seg_size; i++) {
    5b66:	1a98      	subs	r0, r3, r2
    5b68:	ebc0 2300 	rsb	r3, r0, r0, lsl #8
    5b6c:	930e      	str	r3, [sp, #56]	; 0x38
    5b6e:	2300      	movs	r3, #0
    5b70:	9307      	str	r3, [sp, #28]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    5b72:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5b76:	930f      	str	r3, [sp, #60]	; 0x3c
    5b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b7a:	9a03      	ldr	r2, [sp, #12]
    5b7c:	3301      	adds	r3, #1
    5b7e:	fa13 f382 	uxtah	r3, r3, r2
    5b82:	9310      	str	r3, [sp, #64]	; 0x40
    5b84:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    5b88:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
        for(i = 0; i < seg_size; i++) {
    5b8c:	930c      	str	r3, [sp, #48]	; 0x30
    5b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5b90:	428b      	cmp	r3, r1
    5b92:	f300 84e7 	bgt.w	6564 <lv_draw_rect+0x12a8>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
    5b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5b98:	9b03      	ldr	r3, [sp, #12]
    5b9a:	1a9b      	subs	r3, r3, r2
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5ba0:	bfb8      	it	lt
    5ba2:	425b      	neglt	r3, r3
    5ba4:	4293      	cmp	r3, r2
    5ba6:	d147      	bne.n	5c38 <lv_draw_rect+0x97c>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
    5ba8:	9b03      	ldr	r3, [sp, #12]
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
    5baa:	4621      	mov	r1, r4
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
    5bac:	ebc3 2203 	rsb	r2, r3, r3, lsl #8
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
    5bb0:	4640      	mov	r0, r8
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
    5bb2:	9b02      	ldr	r3, [sp, #8]
    5bb4:	fbb2 f2f3 	udiv	r2, r2, r3
    5bb8:	b2d2      	uxtb	r2, r2
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
    5bba:	9202      	str	r2, [sp, #8]
    5bbc:	f7ff fb18 	bl	51f0 <lv_color_mix>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
    5bc0:	4641      	mov	r1, r8
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
    5bc2:	ee08 0a10 	vmov	s16, r0
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
    5bc6:	9a02      	ldr	r2, [sp, #8]
    5bc8:	4620      	mov	r0, r4
    5bca:	f7ff fb11 	bl	51f0 <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
    5bce:	9b03      	ldr	r3, [sp, #12]
    5bd0:	9a05      	ldr	r2, [sp, #20]
    5bd2:	f8bd 400c 	ldrh.w	r4, [sp, #12]
    5bd6:	fa12 f683 	uxtah	r6, r2, r3
    5bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
            lv_opa_t aa_opa = opa >> 1;
    5bdc:	086f      	lsrs	r7, r5, #1
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
    5bde:	fa12 f183 	uxtah	r1, r2, r3
    5be2:	b236      	sxth	r6, r6
    5be4:	b209      	sxth	r1, r1
    5be6:	4603      	mov	r3, r0
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
    5be8:	ee08 0a90 	vmov	s17, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
    5bec:	465a      	mov	r2, fp
    5bee:	4630      	mov	r0, r6
    5bf0:	9700      	str	r7, [sp, #0]
    5bf2:	9102      	str	r1, [sp, #8]
    5bf4:	f001 fd69 	bl	76ca <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
    5bf8:	9b04      	ldr	r3, [sp, #16]
    5bfa:	9902      	ldr	r1, [sp, #8]
    5bfc:	9700      	str	r7, [sp, #0]
    5bfe:	1b18      	subs	r0, r3, r4
    5c00:	b200      	sxth	r0, r0
    5c02:	ee18 3a90 	vmov	r3, s17
    5c06:	465a      	mov	r2, fp
    5c08:	9003      	str	r0, [sp, #12]
    5c0a:	f001 fd5e 	bl	76ca <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
    5c0e:	9b08      	ldr	r3, [sp, #32]
    5c10:	9803      	ldr	r0, [sp, #12]
    5c12:	9700      	str	r7, [sp, #0]
    5c14:	eba3 0804 	sub.w	r8, r3, r4
    5c18:	fa0f f188 	sxth.w	r1, r8
    5c1c:	ee18 3a10 	vmov	r3, s16
    5c20:	465a      	mov	r2, fp
    5c22:	9102      	str	r1, [sp, #8]
    5c24:	f001 fd51 	bl	76ca <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
    5c28:	ee18 3a10 	vmov	r3, s16
    5c2c:	9902      	ldr	r1, [sp, #8]
    5c2e:	9700      	str	r7, [sp, #0]
    5c30:	465a      	mov	r2, fp
    5c32:	4630      	mov	r0, r6
    5c34:	f001 fd49 	bl	76ca <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
    5c38:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	f000 81c9 	beq.w	5fd4 <lv_draw_rect+0xd18>
    5c42:	f899 300e 	ldrb.w	r3, [r9, #14]
    5c46:	2b00      	cmp	r3, #0
    5c48:	f000 81c4 	beq.w	5fd4 <lv_draw_rect+0xd18>
    5c4c:	f899 300f 	ldrb.w	r3, [r9, #15]
    5c50:	2b0f      	cmp	r3, #15
    5c52:	f240 81bf 	bls.w	5fd4 <lv_draw_rect+0xd18>
    uint16_t radius = style->body.radius;
    5c56:	f8b9 4006 	ldrh.w	r4, [r9, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    5c5a:	f004 fbb9 	bl	a3d0 <lv_refr_get_disp_refreshing>
    5c5e:	f002 fa77 	bl	8150 <lv_disp_get_antialiasing>
    5c62:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    5c66:	f8ba 3000 	ldrh.w	r3, [sl]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    5c6a:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    5c6e:	9004      	str	r0, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5c70:	3101      	adds	r1, #1
    5c72:	1ac9      	subs	r1, r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    5c74:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
    5c78:	9806      	ldr	r0, [sp, #24]
    5c7a:	f899 500f 	ldrb.w	r5, [r9, #15]
    lv_border_part_t part = style->body.border.part;
    5c7e:	f899 600e 	ldrb.w	r6, [r9, #14]
    lv_color_t color      = style->body.border.color;
    5c82:	f8b9 800a 	ldrh.w	r8, [r9, #10]
    5c86:	3201      	adds	r2, #1
    5c88:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
    5c8a:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
    bwidth--;
    5c8e:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
    5c90:	28ff      	cmp	r0, #255	; 0xff
    bwidth--;
    5c92:	9303      	str	r3, [sp, #12]
    5c94:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
    5c98:	bf18      	it	ne
    5c9a:	4345      	mulne	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5c9c:	b209      	sxth	r1, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    5c9e:	b212      	sxth	r2, r2
    bwidth--;
    5ca0:	b29f      	uxth	r7, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
    5ca2:	4620      	mov	r0, r4
    bwidth--;
    5ca4:	b21b      	sxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
    5ca6:	bf18      	it	ne
    5ca8:	0a2d      	lsrne	r5, r5, #8
    bwidth--;
    5caa:	9305      	str	r3, [sp, #20]
    radius = lv_draw_cont_radius_corr(radius, width, height);
    5cac:	f7ff fac3 	bl	5236 <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
    5cb0:	9b05      	ldr	r3, [sp, #20]
    5cb2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    radius = lv_draw_cont_radius_corr(radius, width, height);
    5cb6:	9002      	str	r0, [sp, #8]
    if(radius < bwidth) {
    5cb8:	4298      	cmp	r0, r3
    5cba:	4602      	mov	r2, r0
        length_corr = bwidth - radius - aa;
    5cbc:	bfbf      	itttt	lt
    5cbe:	4601      	movlt	r1, r0
    5cc0:	1b3a      	sublt	r2, r7, r4
    5cc2:	1a52      	sublt	r2, r2, r1
    5cc4:	b212      	sxthlt	r2, r2
    lv_coord_t length_corr = 0;
    5cc6:	bfa4      	itt	ge
    5cc8:	2200      	movge	r2, #0
        corner_size = radius + aa;
    5cca:	9b02      	ldrge	r3, [sp, #8]
    lv_coord_t length_corr = 0;
    5ccc:	9205      	str	r2, [sp, #20]
    5cce:	f006 0202 	and.w	r2, r6, #2
    5cd2:	9204      	str	r2, [sp, #16]
    if(style->body.radius == 0) {
    5cd4:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
        corner_size = radius + aa;
    5cd8:	bfa4      	itt	ge
    5cda:	191b      	addge	r3, r3, r4
    5cdc:	b21b      	sxthge	r3, r3
    if(style->body.radius == 0) {
    5cde:	2a00      	cmp	r2, #0
    5ce0:	f040 84cb 	bne.w	667a <lv_draw_rect+0x13be>
        if(part & LV_BORDER_TOP) {
    5ce4:	9b04      	ldr	r3, [sp, #16]
    5ce6:	b1a3      	cbz	r3, 5d12 <lv_draw_rect+0xa56>
            work_area.x1 = coords->x1;
    5ce8:	f8ba 3000 	ldrh.w	r3, [sl]
    5cec:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            work_area.x2 = coords->x2;
    5cf0:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    5cf4:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.y1 = coords->y1;
    5cf8:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    5cfc:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            work_area.y2 = coords->y1 + bwidth;
    5d00:	443b      	add	r3, r7
    5d02:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    5d06:	4642      	mov	r2, r8
    5d08:	462b      	mov	r3, r5
    5d0a:	4659      	mov	r1, fp
    5d0c:	a822      	add	r0, sp, #136	; 0x88
    5d0e:	f001 fd29 	bl	7764 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
    5d12:	0731      	lsls	r1, r6, #28
    5d14:	d520      	bpl.n	5d58 <lv_draw_rect+0xa9c>
            work_area.x1 = coords->x2 - bwidth;
    5d16:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
    5d1a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.x1 = coords->x2 - bwidth;
    5d1e:	1bda      	subs	r2, r3, r7
    5d20:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
    5d24:	9a04      	ldr	r2, [sp, #16]
    5d26:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    5d2a:	2a00      	cmp	r2, #0
    5d2c:	9a03      	ldr	r2, [sp, #12]
    5d2e:	bf08      	it	eq
    5d30:	2200      	moveq	r2, #0
    5d32:	4413      	add	r3, r2
    5d34:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
    5d38:	9a03      	ldr	r2, [sp, #12]
    5d3a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    5d3e:	f016 0f01 	tst.w	r6, #1
    5d42:	bf08      	it	eq
    5d44:	2200      	moveq	r2, #0
    5d46:	1a9b      	subs	r3, r3, r2
    5d48:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    5d4c:	4642      	mov	r2, r8
    5d4e:	462b      	mov	r3, r5
    5d50:	4659      	mov	r1, fp
    5d52:	a822      	add	r0, sp, #136	; 0x88
    5d54:	f001 fd06 	bl	7764 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
    5d58:	f016 0f04 	tst.w	r6, #4
    5d5c:	f006 0601 	and.w	r6, r6, #1
    5d60:	d020      	beq.n	5da4 <lv_draw_rect+0xae8>
            work_area.x1 = coords->x1;
    5d62:	f9ba 3000 	ldrsh.w	r3, [sl]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
    5d66:	9a04      	ldr	r2, [sp, #16]
            work_area.x1 = coords->x1;
    5d68:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            work_area.x2 = coords->x1 + bwidth;
    5d6c:	443b      	add	r3, r7
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
    5d6e:	2a00      	cmp	r2, #0
            work_area.x2 = coords->x1 + bwidth;
    5d70:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
    5d74:	9a03      	ldr	r2, [sp, #12]
    5d76:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    5d7a:	bf08      	it	eq
    5d7c:	2200      	moveq	r2, #0
    5d7e:	4413      	add	r3, r2
    5d80:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
    5d84:	9a03      	ldr	r2, [sp, #12]
    5d86:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    5d8a:	2e00      	cmp	r6, #0
    5d8c:	bf08      	it	eq
    5d8e:	2200      	moveq	r2, #0
    5d90:	1a9b      	subs	r3, r3, r2
    5d92:	9203      	str	r2, [sp, #12]
    5d94:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    5d98:	4642      	mov	r2, r8
    5d9a:	462b      	mov	r3, r5
    5d9c:	4659      	mov	r1, fp
    5d9e:	a822      	add	r0, sp, #136	; 0x88
    5da0:	f001 fce0 	bl	7764 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
    5da4:	b1a6      	cbz	r6, 5dd0 <lv_draw_rect+0xb14>
            work_area.x1 = coords->x1;
    5da6:	f8ba 3000 	ldrh.w	r3, [sl]
    5daa:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            work_area.x2 = coords->x2;
    5dae:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    5db2:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.y1 = coords->y2 - bwidth;
    5db6:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    5dba:	1bdf      	subs	r7, r3, r7
    5dbc:	f8ad 708a 	strh.w	r7, [sp, #138]	; 0x8a
            work_area.y2 = coords->y2;
    5dc0:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    5dc4:	4642      	mov	r2, r8
    5dc6:	462b      	mov	r3, r5
    5dc8:	4659      	mov	r1, fp
    5dca:	a822      	add	r0, sp, #136	; 0x88
    5dcc:	f001 fcca 	bl	7764 <lv_draw_fill>
        if(style->body.radius != 0) {
    5dd0:	f9b9 5006 	ldrsh.w	r5, [r9, #6]
    5dd4:	2d00      	cmp	r5, #0
    5dd6:	f000 80fd 	beq.w	5fd4 <lv_draw_rect+0xd18>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    5dda:	f004 faf9 	bl	a3d0 <lv_refr_get_disp_refreshing>
    5dde:	f002 f9b7 	bl	8150 <lv_disp_get_antialiasing>
    lv_border_part_t part = style->body.border.part;
    5de2:	f899 300e 	ldrb.w	r3, [r9, #14]
    5de6:	9302      	str	r3, [sp, #8]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
    5de8:	9b06      	ldr	r3, [sp, #24]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
    5dea:	9009      	str	r0, [sp, #36]	; 0x24
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
    5dec:	2bff      	cmp	r3, #255	; 0xff
    5dee:	bf18      	it	ne
    5df0:	9a06      	ldrne	r2, [sp, #24]
    5df2:	f899 300f 	ldrb.w	r3, [r9, #15]
    lv_coord_t bwidth     = style->body.border.width;
    5df6:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
    lv_color_t color      = style->body.border.color;
    5dfa:	f8b9 700a 	ldrh.w	r7, [r9, #10]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
    5dfe:	bf16      	itet	ne
    5e00:	4353      	mulne	r3, r2
    5e02:	4698      	moveq	r8, r3
    5e04:	ea4f 2813 	movne.w	r8, r3, lsr #8
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
    5e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    uint16_t radius       = style->body.radius;
    5e0a:	b2ad      	uxth	r5, r5
    bwidth--;
    5e0c:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
    5e0e:	2b00      	cmp	r3, #0
    5e10:	f040 8570 	bne.w	68f4 <lv_draw_rect+0x1638>
    bwidth--;
    5e14:	3c01      	subs	r4, #1
    5e16:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    5e1a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5e1e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    5e22:	3201      	adds	r2, #1
    5e24:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5e26:	f8ba 3000 	ldrh.w	r3, [sl]
    5e2a:	3101      	adds	r1, #1
    5e2c:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
    5e2e:	b212      	sxth	r2, r2
    5e30:	b209      	sxth	r1, r1
    5e32:	4628      	mov	r0, r5
    5e34:	f7ff f9ff 	bl	5236 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
    5e38:	9909      	ldr	r1, [sp, #36]	; 0x24
    5e3a:	f8ba 3000 	ldrh.w	r3, [sl]
    5e3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    5e42:	fa13 f381 	uxtah	r3, r3, r1
    5e46:	4403      	add	r3, r0
    5e48:	b29b      	uxth	r3, r3
    5e4a:	9303      	str	r3, [sp, #12]
    lt_origo.y = coords->y1 + radius + aa;
    5e4c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    5e50:	fa13 f381 	uxtah	r3, r3, r1
    5e54:	4403      	add	r3, r0
    5e56:	b299      	uxth	r1, r3
    5e58:	b21b      	sxth	r3, r3
    5e5a:	9311      	str	r3, [sp, #68]	; 0x44
    lb_origo.y = coords->y2 - radius - aa;
    5e5c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    lt_origo.y = coords->y1 + radius + aa;
    5e60:	9104      	str	r1, [sp, #16]
    lb_origo.y = coords->y2 - radius - aa;
    5e62:	1a9b      	subs	r3, r3, r2
    5e64:	1a1b      	subs	r3, r3, r0
    5e66:	b299      	uxth	r1, r3
    5e68:	b21b      	sxth	r3, r3
    5e6a:	9312      	str	r3, [sp, #72]	; 0x48
    rt_origo.x = coords->x2 - radius - aa;
    5e6c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    lb_origo.y = coords->y2 - radius - aa;
    5e70:	9105      	str	r1, [sp, #20]
    rt_origo.x = coords->x2 - radius - aa;
    5e72:	1a9b      	subs	r3, r3, r2
    5e74:	1a1b      	subs	r3, r3, r0
    5e76:	b29b      	uxth	r3, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
    5e78:	4605      	mov	r5, r0
    rt_origo.x = coords->x2 - radius - aa;
    5e7a:	9307      	str	r3, [sp, #28]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
    5e7c:	b2a4      	uxth	r4, r4
    lv_circ_init(&cir_out, &tmp_out, radius);
    5e7e:	b203      	sxth	r3, r0
    5e80:	461a      	mov	r2, r3
    5e82:	a91a      	add	r1, sp, #104	; 0x68
    5e84:	a81e      	add	r0, sp, #120	; 0x78
    lv_coord_t radius_in = radius - bwidth;
    5e86:	1b2c      	subs	r4, r5, r4
    lv_circ_init(&cir_out, &tmp_out, radius);
    5e88:	9308      	str	r3, [sp, #32]
    5e8a:	f7fc ff6f 	bl	2d6c <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
    5e8e:	b223      	sxth	r3, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
    5e90:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
    5e94:	a91c      	add	r1, sp, #112	; 0x70
    5e96:	a820      	add	r0, sp, #128	; 0x80
    lv_coord_t radius_in = radius - bwidth;
    5e98:	9306      	str	r3, [sp, #24]
    lv_circ_init(&cir_in, &tmp_in, radius_in);
    5e9a:	f7fc ff67 	bl	2d6c <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
    5e9e:	2300      	movs	r3, #0
    5ea0:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_coord_t out_y_seg_start = 0;
    5ea2:	930e      	str	r3, [sp, #56]	; 0x38
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    5ea4:	9b07      	ldr	r3, [sp, #28]
    5ea6:	3b01      	subs	r3, #1
    5ea8:	9316      	str	r3, [sp, #88]	; 0x58
    5eaa:	9b02      	ldr	r3, [sp, #8]
    5eac:	f003 0309 	and.w	r3, r3, #9
    5eb0:	9310      	str	r3, [sp, #64]	; 0x40
    while(cir_out.y <= cir_out.x) {
    5eb2:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    5eb6:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
    5eba:	930c      	str	r3, [sp, #48]	; 0x30
    5ebc:	4299      	cmp	r1, r3
    5ebe:	f280 851c 	bge.w	68fa <lv_draw_rect+0x163e>
    if(aa) {
    5ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	f000 8085 	beq.w	5fd4 <lv_draw_rect+0xd18>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
    5eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5ecc:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
    5ed0:	1b9d      	subs	r5, r3, r6
    5ed2:	b22b      	sxth	r3, r5
    5ed4:	930a      	str	r3, [sp, #40]	; 0x28
        for(i = 0; i < seg_size; i++) {
    5ed6:	2300      	movs	r3, #0
    5ed8:	9309      	str	r3, [sp, #36]	; 0x24
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    5eda:	9b07      	ldr	r3, [sp, #28]
    5edc:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    5ee0:	f103 0a01 	add.w	sl, r3, #1
    5ee4:	9b08      	ldr	r3, [sp, #32]
    5ee6:	fa1a fa83 	uxtah	sl, sl, r3
    5eea:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
        for(i = 0; i < seg_size; i++) {
    5eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ef0:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    5ef4:	428b      	cmp	r3, r1
    5ef6:	f300 8799 	bgt.w	6e2c <lv_draw_rect+0x1b70>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
    5efa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5efc:	9b08      	ldr	r3, [sp, #32]
    5efe:	1a9b      	subs	r3, r3, r2
    5f00:	2b00      	cmp	r3, #0
    5f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5f04:	bfb8      	it	lt
    5f06:	425b      	neglt	r3, r3
    5f08:	4293      	cmp	r3, r2
    5f0a:	d14f      	bne.n	5fac <lv_draw_rect+0xcf0>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    5f0c:	9b02      	ldr	r3, [sp, #8]
    5f0e:	f003 0309 	and.w	r3, r3, #9
    5f12:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = opa >> 1;
    5f14:	ea4f 0458 	mov.w	r4, r8, lsr #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    5f18:	d10e      	bne.n	5f38 <lv_draw_rect+0xc7c>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
    5f1a:	9b08      	ldr	r3, [sp, #32]
    5f1c:	9a05      	ldr	r2, [sp, #20]
    5f1e:	9400      	str	r4, [sp, #0]
    5f20:	fa12 f183 	uxtah	r1, r2, r3
    5f24:	9a07      	ldr	r2, [sp, #28]
    5f26:	fa12 f083 	uxtah	r0, r2, r3
    5f2a:	b209      	sxth	r1, r1
    5f2c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    5f30:	465a      	mov	r2, fp
    5f32:	b200      	sxth	r0, r0
    5f34:	f001 fbc9 	bl	76ca <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
    5f38:	9b02      	ldr	r3, [sp, #8]
    5f3a:	f003 0305 	and.w	r3, r3, #5
    5f3e:	2b05      	cmp	r3, #5
    5f40:	d10e      	bne.n	5f60 <lv_draw_rect+0xca4>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
    5f42:	9b08      	ldr	r3, [sp, #32]
    5f44:	9a05      	ldr	r2, [sp, #20]
    5f46:	9400      	str	r4, [sp, #0]
    5f48:	fa12 f183 	uxtah	r1, r2, r3
    5f4c:	9b03      	ldr	r3, [sp, #12]
    5f4e:	9a08      	ldr	r2, [sp, #32]
    5f50:	1a98      	subs	r0, r3, r2
    5f52:	b209      	sxth	r1, r1
    5f54:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    5f58:	465a      	mov	r2, fp
    5f5a:	b200      	sxth	r0, r0
    5f5c:	f001 fbb5 	bl	76ca <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
    5f60:	9b02      	ldr	r3, [sp, #8]
    5f62:	f003 0306 	and.w	r3, r3, #6
    5f66:	2b06      	cmp	r3, #6
    5f68:	d10d      	bne.n	5f86 <lv_draw_rect+0xcca>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
    5f6a:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    5f6e:	9b04      	ldr	r3, [sp, #16]
    5f70:	9400      	str	r4, [sp, #0]
    5f72:	1a19      	subs	r1, r3, r0
    5f74:	9b03      	ldr	r3, [sp, #12]
    5f76:	1a18      	subs	r0, r3, r0
    5f78:	465a      	mov	r2, fp
    5f7a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    5f7e:	b209      	sxth	r1, r1
    5f80:	b200      	sxth	r0, r0
    5f82:	f001 fba2 	bl	76ca <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
    5f86:	9b02      	ldr	r3, [sp, #8]
    5f88:	f003 030a 	and.w	r3, r3, #10
    5f8c:	2b0a      	cmp	r3, #10
    5f8e:	d10d      	bne.n	5fac <lv_draw_rect+0xcf0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
    5f90:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    5f94:	9b04      	ldr	r3, [sp, #16]
    5f96:	9400      	str	r4, [sp, #0]
    5f98:	1a19      	subs	r1, r3, r0
    5f9a:	9b07      	ldr	r3, [sp, #28]
    5f9c:	4418      	add	r0, r3
    5f9e:	465a      	mov	r2, fp
    5fa0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    5fa4:	b209      	sxth	r1, r1
    5fa6:	b200      	sxth	r0, r0
    5fa8:	f001 fb8f 	bl	76ca <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
    5fac:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    5fb0:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    5fb4:	9a06      	ldr	r2, [sp, #24]
        seg_size     = in_y_seg_end - in_y_seg_start;
    5fb6:	1b5b      	subs	r3, r3, r5
    5fb8:	b21b      	sxth	r3, r3
    5fba:	9308      	str	r3, [sp, #32]
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    5fbc:	9b07      	ldr	r3, [sp, #28]
    5fbe:	3b01      	subs	r3, #1
    5fc0:	4413      	add	r3, r2
        for(i = 0; i < seg_size; i++) {
    5fc2:	2700      	movs	r7, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    5fc4:	fa0f fa83 	sxth.w	sl, r3
        for(i = 0; i < seg_size; i++) {
    5fc8:	9b08      	ldr	r3, [sp, #32]
    5fca:	b239      	sxth	r1, r7
    5fcc:	428b      	cmp	r3, r1
    5fce:	b2be      	uxth	r6, r7
    5fd0:	f300 87b8 	bgt.w	6f44 <lv_draw_rect+0x1c88>
}
    5fd4:	b025      	add	sp, #148	; 0x94
    5fd6:	ecbd 8b06 	vpop	{d8-d10}
    5fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
    5fde:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
    5fe2:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
    5fe6:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
    5fea:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
    5fee:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
    5ff2:	a91e      	add	r1, sp, #120	; 0x78
    5ff4:	4638      	mov	r0, r7
    5ff6:	f7fc fec9 	bl	2d8c <lv_circ_next>
    5ffa:	f7ff bbfd 	b.w	57f8 <lv_draw_rect+0x53c>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
    5ffe:	0848      	lsrs	r0, r1, #1
    6000:	1ac9      	subs	r1, r1, r3
    6002:	fbb0 f0f8 	udiv	r0, r0, r8
    6006:	54a8      	strb	r0, [r5, r2]
    for(col = 0; col < swidth; col++) {
    6008:	3201      	adds	r2, #1
    600a:	e405      	b.n	5818 <lv_draw_rect+0x55c>
        point_l.x = ofs_l.x - col;
    600c:	9a07      	ldr	r2, [sp, #28]
        point_l.y = ofs_l.y + curve_x[col];
    600e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6010:	1ad3      	subs	r3, r2, r3
    6012:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
    6016:	4411      	add	r1, r2
    6018:	b289      	uxth	r1, r1
    601a:	b21b      	sxth	r3, r3
    601c:	910d      	str	r1, [sp, #52]	; 0x34
        point_r.x = ofs_r.x + col;
    601e:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
    6022:	9109      	str	r1, [sp, #36]	; 0x24
    6024:	ee08 3a10 	vmov	s16, r3
        point_l.y = ofs_l.y + curve_x[col];
    6028:	0063      	lsls	r3, r4, #1
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
    602a:	b124      	cbz	r4, 6036 <lv_draw_rect+0xd7a>
    602c:	4433      	add	r3, r6
    602e:	f833 4c02 	ldrh.w	r4, [r3, #-2]
    6032:	1aa4      	subs	r4, r4, r2
    6034:	b224      	sxth	r4, r4
        for(d = 0; d < swidth; d++) {
    6036:	2300      	movs	r3, #0
    6038:	9303      	str	r3, [sp, #12]
    603a:	9a03      	ldr	r2, [sp, #12]
    603c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    603e:	1899      	adds	r1, r3, r2
    6040:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6044:	4543      	cmp	r3, r8
    6046:	b209      	sxth	r1, r1
    6048:	db08      	blt.n	605c <lv_draw_rect+0xda0>
    for(col = 0; col <= radius; col++) {
    604a:	9b02      	ldr	r3, [sp, #8]
    604c:	3301      	adds	r3, #1
    604e:	9302      	str	r3, [sp, #8]
    6050:	9b05      	ldr	r3, [sp, #20]
    6052:	3301      	adds	r3, #1
    6054:	b29b      	uxth	r3, r3
    6056:	9305      	str	r3, [sp, #20]
    6058:	f7ff bbfc 	b.w	5854 <lv_draw_rect+0x598>
                px_opa = line_1d_blur[d];
    605c:	5cef      	ldrb	r7, [r5, r3]
            if(diff == 0) {
    605e:	b9bc      	cbnz	r4, 6090 <lv_draw_rect+0xdd4>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
    6060:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    6064:	9700      	str	r7, [sp, #0]
    6066:	465a      	mov	r2, fp
    6068:	ee18 0a10 	vmov	r0, s16
    606c:	910e      	str	r1, [sp, #56]	; 0x38
    606e:	f001 fb2c 	bl	76ca <lv_draw_px>
            if(point_r.x > ofs_l.x) {
    6072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6074:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6076:	990e      	ldr	r1, [sp, #56]	; 0x38
    6078:	4293      	cmp	r3, r2
    607a:	da06      	bge.n	608a <lv_draw_rect+0xdce>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
    607c:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    6080:	9809      	ldr	r0, [sp, #36]	; 0x24
    6082:	9700      	str	r7, [sp, #0]
    6084:	465a      	mov	r2, fp
    6086:	f001 fb20 	bl	76ca <lv_draw_px>
        for(d = 0; d < swidth; d++) {
    608a:	9b03      	ldr	r3, [sp, #12]
    608c:	3301      	adds	r3, #1
    608e:	e7d3      	b.n	6038 <lv_draw_rect+0xd7c>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
    6090:	1b1b      	subs	r3, r3, r4
    6092:	5ceb      	ldrb	r3, [r5, r3]
    6094:	441f      	add	r7, r3
    6096:	087f      	lsrs	r7, r7, #1
    6098:	e7e2      	b.n	6060 <lv_draw_rect+0xda4>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
    609a:	5ceb      	ldrb	r3, [r5, r3]
    609c:	f8b9 2010 	ldrh.w	r2, [r9, #16]
    60a0:	4659      	mov	r1, fp
    60a2:	a822      	add	r0, sp, #136	; 0x88
    60a4:	f001 fb5e 	bl	7764 <lv_draw_fill>
        area_mid.y1++;
    60a8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    60ac:	3301      	adds	r3, #1
    60ae:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        area_mid.y2++;
    60b2:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    60b6:	3301      	adds	r3, #1
    60b8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    60bc:	4623      	mov	r3, r4
    60be:	f7ff bbe0 	b.w	5882 <lv_draw_rect+0x5c6>
    work_area.x1 = coords->x1;
    60c2:	f8ba 6006 	ldrh.w	r6, [sl, #6]
    60c6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    60ca:	f8ba 3000 	ldrh.w	r3, [sl]
    60ce:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    work_area.x2 = coords->x2;
    60d2:	4401      	add	r1, r0
    60d4:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    60d8:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    if(mcolor.full == gcolor.full) {
    60dc:	1a30      	subs	r0, r6, r0
    60de:	b283      	uxth	r3, r0
    60e0:	b206      	sxth	r6, r0
    60e2:	9802      	ldr	r0, [sp, #8]
    60e4:	f9b9 c006 	ldrsh.w	ip, [r9, #6]
    60e8:	4287      	cmp	r7, r0
    60ea:	b28a      	uxth	r2, r1
    60ec:	b209      	sxth	r1, r1
    60ee:	d11a      	bne.n	6126 <lv_draw_rect+0xe6a>
        work_area.y1 = coords->y1 + radius;
    60f0:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
        work_area.y2 = coords->y2 - radius;
    60f4:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
        if(style->body.radius != 0) {
    60f8:	f1bc 0f00 	cmp.w	ip, #0
    60fc:	d006      	beq.n	610c <lv_draw_rect+0xe50>
            if(aa) {
    60fe:	b16c      	cbz	r4, 611c <lv_draw_rect+0xe60>
                work_area.y1 += 2;
    6100:	3202      	adds	r2, #2
    6102:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
                work_area.y2 -= 2;
    6106:	3b02      	subs	r3, #2
                work_area.y2 -= 1;
    6108:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        lv_draw_fill(&work_area, mask, mcolor, opa);
    610c:	4643      	mov	r3, r8
    610e:	463a      	mov	r2, r7
    6110:	4659      	mov	r1, fp
    6112:	a822      	add	r0, sp, #136	; 0x88
    6114:	f001 fb26 	bl	7764 <lv_draw_fill>
    6118:	f7ff bbf4 	b.w	5904 <lv_draw_rect+0x648>
                work_area.y1 += 1;
    611c:	3201      	adds	r2, #1
    611e:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
                work_area.y2 -= 1;
    6122:	3b01      	subs	r3, #1
    6124:	e7f0      	b.n	6108 <lv_draw_rect+0xe4c>
        if(style->body.radius != 0) {
    6126:	f1bc 0f00 	cmp.w	ip, #0
    612a:	d004      	beq.n	6136 <lv_draw_rect+0xe7a>
            if(aa) {
    612c:	b314      	cbz	r4, 6174 <lv_draw_rect+0xeb8>
                row_start += 2;
    612e:	3202      	adds	r2, #2
    6130:	b211      	sxth	r1, r2
                row_end -= 2;
    6132:	1e9e      	subs	r6, r3, #2
                row_end -= 1;
    6134:	b236      	sxth	r6, r6
        if(row_start < 0) row_start = 0;
    6136:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
        for(row = row_start; row <= row_end; row++) {
    613a:	42b4      	cmp	r4, r6
    613c:	f73f abe2 	bgt.w	5904 <lv_draw_rect+0x648>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
    6140:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            act_color    = lv_color_mix(mcolor, gcolor, mix);
    6144:	f8bd 1008 	ldrh.w	r1, [sp, #8]
            work_area.y1 = row;
    6148:	f8ad 408a 	strh.w	r4, [sp, #138]	; 0x8a
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
    614c:	1b12      	subs	r2, r2, r4
    614e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
            act_color    = lv_color_mix(mcolor, gcolor, mix);
    6152:	4638      	mov	r0, r7
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
    6154:	fbb2 f2f5 	udiv	r2, r2, r5
            act_color    = lv_color_mix(mcolor, gcolor, mix);
    6158:	b2d2      	uxtb	r2, r2
            work_area.y2 = row;
    615a:	f8ad 408e 	strh.w	r4, [sp, #142]	; 0x8e
            act_color    = lv_color_mix(mcolor, gcolor, mix);
    615e:	f7ff f847 	bl	51f0 <lv_color_mix>
            lv_draw_fill(&work_area, mask, act_color, opa);
    6162:	3401      	adds	r4, #1
            act_color    = lv_color_mix(mcolor, gcolor, mix);
    6164:	4602      	mov	r2, r0
            lv_draw_fill(&work_area, mask, act_color, opa);
    6166:	4643      	mov	r3, r8
    6168:	4659      	mov	r1, fp
    616a:	a822      	add	r0, sp, #136	; 0x88
    616c:	f001 fafa 	bl	7764 <lv_draw_fill>
        for(row = row_start; row <= row_end; row++) {
    6170:	b224      	sxth	r4, r4
    6172:	e7e2      	b.n	613a <lv_draw_rect+0xe7e>
                row_start += 1;
    6174:	3201      	adds	r2, #1
    6176:	b211      	sxth	r1, r2
                row_end -= 1;
    6178:	1e5e      	subs	r6, r3, #1
    617a:	e7db      	b.n	6134 <lv_draw_rect+0xe78>
        if(aa) {
    617c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    617e:	2b00      	cmp	r3, #0
    6180:	d044      	beq.n	620c <lv_draw_rect+0xf50>
    6182:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
            if(out_x_last != cir.x) {
    6186:	9a03      	ldr	r2, [sp, #12]
    6188:	429a      	cmp	r2, r3
    618a:	d03f      	beq.n	620c <lv_draw_rect+0xf50>
    618c:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
    6190:	9312      	str	r3, [sp, #72]	; 0x48
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
    6192:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6196:	930c      	str	r3, [sp, #48]	; 0x30
    6198:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    619a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    619c:	1a9b      	subs	r3, r3, r2
    619e:	b21b      	sxth	r3, r3
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
    61a0:	9a03      	ldr	r2, [sp, #12]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
    61a2:	930d      	str	r3, [sp, #52]	; 0x34
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
    61a4:	9b07      	ldr	r3, [sp, #28]
    61a6:	1a9a      	subs	r2, r3, r2
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
    61a8:	4621      	mov	r1, r4
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
    61aa:	9b02      	ldr	r3, [sp, #8]
    61ac:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
    61b0:	4640      	mov	r0, r8
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
    61b2:	fbb2 f2f3 	udiv	r2, r2, r3
    61b6:	b2d2      	uxtb	r2, r2
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
    61b8:	920e      	str	r2, [sp, #56]	; 0x38
    61ba:	f7ff f819 	bl	51f0 <lv_color_mix>
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
    61be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
    61c0:	ee08 0a10 	vmov	s16, r0
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
    61c4:	4641      	mov	r1, r8
    61c6:	4620      	mov	r0, r4
    61c8:	f7ff f812 	bl	51f0 <lv_color_mix>
    61cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    61ce:	9b07      	ldr	r3, [sp, #28]
    61d0:	1a9b      	subs	r3, r3, r2
    61d2:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    61d6:	930e      	str	r3, [sp, #56]	; 0x38
                for(i = 0; i < seg_size; i++) {
    61d8:	2300      	movs	r3, #0
    61da:	930a      	str	r3, [sp, #40]	; 0x28
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    61dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    61e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    61e2:	930f      	str	r3, [sp, #60]	; 0x3c
    61e4:	9b03      	ldr	r3, [sp, #12]
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
    61e6:	ee08 0a90 	vmov	s17, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    61ea:	fa12 f383 	uxtah	r3, r2, r3
    61ee:	9313      	str	r3, [sp, #76]	; 0x4c
    61f0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    61f4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
                for(i = 0; i < seg_size; i++) {
    61f8:	9303      	str	r3, [sp, #12]
    61fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    61fc:	428b      	cmp	r3, r1
    61fe:	f300 8098 	bgt.w	6332 <lv_draw_rect+0x1076>
                out_x_last      = cir.x;
    6202:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    6206:	9303      	str	r3, [sp, #12]
                out_y_seg_start = out_y_seg_end;
    6208:	9b12      	ldr	r3, [sp, #72]	; 0x48
    620a:	930a      	str	r3, [sp, #40]	; 0x28
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
    620c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    6210:	9b11      	ldr	r3, [sp, #68]	; 0x44
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
    6212:	9911      	ldr	r1, [sp, #68]	; 0x44
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
    6214:	f9bd 7082 	ldrsh.w	r7, [sp, #130]	; 0x82
    6218:	18d6      	adds	r6, r2, r3
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
    621a:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
    621e:	930c      	str	r3, [sp, #48]	; 0x30
    6220:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    6224:	4419      	add	r1, r3
    6226:	910d      	str	r1, [sp, #52]	; 0x34
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
    6228:	f9bd 107a 	ldrsh.w	r1, [sp, #122]	; 0x7a
    622c:	910e      	str	r1, [sp, #56]	; 0x38
    622e:	9910      	ldr	r1, [sp, #64]	; 0x40
    6230:	1a8a      	subs	r2, r1, r2
    6232:	920f      	str	r2, [sp, #60]	; 0x3c
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
    6234:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6236:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
    623a:	1ad3      	subs	r3, r2, r3
    623c:	4299      	cmp	r1, r3
    623e:	d008      	beq.n	6252 <lv_draw_rect+0xf96>
            if(mcolor.full == gcolor.full)
    6240:	4544      	cmp	r4, r8
    6242:	f040 8109 	bne.w	6458 <lv_draw_rect+0x119c>
                act_color = mcolor;
    6246:	4622      	mov	r2, r4
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
    6248:	462b      	mov	r3, r5
    624a:	4659      	mov	r1, fp
    624c:	a81c      	add	r0, sp, #112	; 0x70
    624e:	f001 fa89 	bl	7764 <lv_draw_fill>
        if(mid_top_refr != 0) {
    6252:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
    6256:	4293      	cmp	r3, r2
    6258:	d008      	beq.n	626c <lv_draw_rect+0xfb0>
            if(mcolor.full == gcolor.full)
    625a:	4544      	cmp	r4, r8
    625c:	f040 810b 	bne.w	6476 <lv_draw_rect+0x11ba>
                act_color = mcolor;
    6260:	4622      	mov	r2, r4
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
    6262:	462b      	mov	r3, r5
    6264:	4659      	mov	r1, fp
    6266:	a81e      	add	r0, sp, #120	; 0x78
    6268:	f001 fa7c 	bl	7764 <lv_draw_fill>
        if(mid_bot_refr != 0) {
    626c:	42b7      	cmp	r7, r6
    626e:	d008      	beq.n	6282 <lv_draw_rect+0xfc6>
            if(mcolor.full == gcolor.full)
    6270:	4544      	cmp	r4, r8
    6272:	f040 8111 	bne.w	6498 <lv_draw_rect+0x11dc>
                act_color = mcolor;
    6276:	4622      	mov	r2, r4
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
    6278:	462b      	mov	r3, r5
    627a:	4659      	mov	r1, fp
    627c:	a820      	add	r0, sp, #128	; 0x80
    627e:	f001 fa71 	bl	7764 <lv_draw_fill>
        if(edge_bot_refr != 0) {
    6282:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
    6286:	4293      	cmp	r3, r2
    6288:	d008      	beq.n	629c <lv_draw_rect+0xfe0>
            if(mcolor.full == gcolor.full)
    628a:	4544      	cmp	r4, r8
    628c:	f040 8115 	bne.w	64ba <lv_draw_rect+0x11fe>
                act_color = mcolor;
    6290:	4622      	mov	r2, r4
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
    6292:	462b      	mov	r3, r5
    6294:	4659      	mov	r1, fp
    6296:	a822      	add	r0, sp, #136	; 0x88
    6298:	f001 fa64 	bl	7764 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
    629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    629e:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    62a2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
    62a6:	9804      	ldr	r0, [sp, #16]
    62a8:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
    62aa:	9b05      	ldr	r3, [sp, #20]
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
    62ac:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
    62ae:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
    62b0:	1a41      	subs	r1, r0, r1
    62b2:	9200      	str	r2, [sp, #0]
    62b4:	a820      	add	r0, sp, #128	; 0x80
    62b6:	b21b      	sxth	r3, r3
    62b8:	b209      	sxth	r1, r1
    62ba:	f7fd fba6 	bl	3a0a <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
    62be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    62c0:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    62c4:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    62c8:	9804      	ldr	r0, [sp, #16]
    62ca:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
    62cc:	9b05      	ldr	r3, [sp, #20]
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
    62ce:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
    62d0:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
    62d2:	1a41      	subs	r1, r0, r1
    62d4:	9200      	str	r2, [sp, #0]
    62d6:	a822      	add	r0, sp, #136	; 0x88
    62d8:	b21b      	sxth	r3, r3
    62da:	b209      	sxth	r1, r1
    62dc:	f7fd fb95 	bl	3a0a <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
    62e0:	9b08      	ldr	r3, [sp, #32]
    62e2:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    62e6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
    62ea:	9804      	ldr	r0, [sp, #16]
    62ec:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
    62ee:	9b05      	ldr	r3, [sp, #20]
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
    62f0:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
    62f2:	440b      	add	r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
    62f4:	1a41      	subs	r1, r0, r1
    62f6:	9200      	str	r2, [sp, #0]
    62f8:	a81e      	add	r0, sp, #120	; 0x78
    62fa:	b21b      	sxth	r3, r3
    62fc:	b209      	sxth	r1, r1
    62fe:	f7fd fb84 	bl	3a0a <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
    6302:	9b08      	ldr	r3, [sp, #32]
    6304:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    6308:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    630c:	9804      	ldr	r0, [sp, #16]
    630e:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
    6310:	9b05      	ldr	r3, [sp, #20]
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
    6312:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
    6314:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
    6316:	1a41      	subs	r1, r0, r1
    6318:	9200      	str	r2, [sp, #0]
    631a:	a81c      	add	r0, sp, #112	; 0x70
    631c:	b21b      	sxth	r3, r3
    631e:	b209      	sxth	r1, r1
    6320:	f7fd fb73 	bl	3a0a <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
    6324:	ee1a 0a10 	vmov	r0, s20
    6328:	a919      	add	r1, sp, #100	; 0x64
    632a:	f7fc fd2f 	bl	2d8c <lv_circ_next>
    632e:	f7ff bb96 	b.w	5a5e <lv_draw_rect+0x7a2>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
    6332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6334:	2b01      	cmp	r3, #1
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
    6336:	462a      	mov	r2, r5
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
    6338:	f000 8088 	beq.w	644c <lv_draw_rect+0x1190>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
    633c:	4618      	mov	r0, r3
    633e:	f7fe ff99 	bl	5274 <antialias_get_opa_circ>
    6342:	4606      	mov	r6, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    6344:	9b05      	ldr	r3, [sp, #20]
    6346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6348:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
    634c:	9600      	str	r6, [sp, #0]
    634e:	189f      	adds	r7, r3, r2
    6350:	9b03      	ldr	r3, [sp, #12]
    6352:	9115      	str	r1, [sp, #84]	; 0x54
    6354:	441f      	add	r7, r3
    6356:	b23f      	sxth	r7, r7
    6358:	4638      	mov	r0, r7
    635a:	ee18 3a90 	vmov	r3, s17
    635e:	465a      	mov	r2, fp
    6360:	f001 f9b3 	bl	76ca <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
    6364:	9b04      	ldr	r3, [sp, #16]
    6366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6368:	9915      	ldr	r1, [sp, #84]	; 0x54
    636a:	9600      	str	r6, [sp, #0]
    636c:	1a98      	subs	r0, r3, r2
    636e:	9b03      	ldr	r3, [sp, #12]
    6370:	1ac0      	subs	r0, r0, r3
    6372:	b200      	sxth	r0, r0
    6374:	ee18 3a90 	vmov	r3, s17
    6378:	465a      	mov	r2, fp
    637a:	9016      	str	r0, [sp, #88]	; 0x58
    637c:	f001 f9a5 	bl	76ca <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
    6380:	9b08      	ldr	r3, [sp, #32]
    6382:	9816      	ldr	r0, [sp, #88]	; 0x58
    6384:	9600      	str	r6, [sp, #0]
    6386:	1e59      	subs	r1, r3, #1
    6388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    638a:	1ac9      	subs	r1, r1, r3
    638c:	b209      	sxth	r1, r1
    638e:	ee18 3a10 	vmov	r3, s16
    6392:	465a      	mov	r2, fp
    6394:	9115      	str	r1, [sp, #84]	; 0x54
    6396:	f001 f998 	bl	76ca <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
    639a:	4638      	mov	r0, r7
    639c:	ee18 3a10 	vmov	r3, s16
    63a0:	9915      	ldr	r1, [sp, #84]	; 0x54
    63a2:	9600      	str	r6, [sp, #0]
    63a4:	465a      	mov	r2, fp
    63a6:	f001 f990 	bl	76ca <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
    63aa:	9a02      	ldr	r2, [sp, #8]
    63ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    63ae:	fbb3 f3f2 	udiv	r3, r3, r2
    63b2:	b2db      	uxtb	r3, r3
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
    63b4:	461a      	mov	r2, r3
    63b6:	4641      	mov	r1, r8
    63b8:	4620      	mov	r0, r4
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
    63ba:	ee09 3a10 	vmov	s18, r3
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
    63be:	f7fe ff17 	bl	51f0 <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    63c2:	9a05      	ldr	r2, [sp, #20]
    63c4:	990c      	ldr	r1, [sp, #48]	; 0x30
    63c6:	9600      	str	r6, [sp, #0]
    63c8:	1c57      	adds	r7, r2, #1
    63ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    63cc:	4417      	add	r7, r2
    63ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    63d0:	1851      	adds	r1, r2, r1
    63d2:	9a03      	ldr	r2, [sp, #12]
    63d4:	b23f      	sxth	r7, r7
    63d6:	4411      	add	r1, r2
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
    63d8:	4603      	mov	r3, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    63da:	b209      	sxth	r1, r1
    63dc:	465a      	mov	r2, fp
    63de:	4638      	mov	r0, r7
    63e0:	9316      	str	r3, [sp, #88]	; 0x58
    63e2:	9115      	str	r1, [sp, #84]	; 0x54
    63e4:	f001 f971 	bl	76ca <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
    63e8:	9b04      	ldr	r3, [sp, #16]
    63ea:	9915      	ldr	r1, [sp, #84]	; 0x54
    63ec:	9600      	str	r6, [sp, #0]
    63ee:	1e5a      	subs	r2, r3, #1
    63f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    63f2:	1ad2      	subs	r2, r2, r3
    63f4:	b213      	sxth	r3, r2
    63f6:	ee09 3a90 	vmov	s19, r3
    63fa:	465a      	mov	r2, fp
    63fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    63fe:	ee19 0a90 	vmov	r0, s19
    6402:	f001 f962 	bl	76ca <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
    6406:	ee19 2a10 	vmov	r2, s18
    640a:	4621      	mov	r1, r4
    640c:	4640      	mov	r0, r8
    640e:	f7fe feef 	bl	51f0 <lv_color_mix>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
    6412:	9a08      	ldr	r2, [sp, #32]
    6414:	990c      	ldr	r1, [sp, #48]	; 0x30
    6416:	9600      	str	r6, [sp, #0]
    6418:	1a51      	subs	r1, r2, r1
    641a:	9a03      	ldr	r2, [sp, #12]
    641c:	1a89      	subs	r1, r1, r2
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
    641e:	4603      	mov	r3, r0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
    6420:	b209      	sxth	r1, r1
    6422:	ee19 0a90 	vmov	r0, s19
    6426:	465a      	mov	r2, fp
    6428:	9315      	str	r3, [sp, #84]	; 0x54
    642a:	9103      	str	r1, [sp, #12]
    642c:	f001 f94d 	bl	76ca <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
    6430:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6432:	9903      	ldr	r1, [sp, #12]
    6434:	9600      	str	r6, [sp, #0]
    6436:	465a      	mov	r2, fp
    6438:	4638      	mov	r0, r7
    643a:	f001 f946 	bl	76ca <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
    643e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6440:	3301      	adds	r3, #1
    6442:	930a      	str	r3, [sp, #40]	; 0x28
    6444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6446:	33ff      	adds	r3, #255	; 0xff
    6448:	930e      	str	r3, [sp, #56]	; 0x38
    644a:	e6d1      	b.n	61f0 <lv_draw_rect+0xf34>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
    644c:	980d      	ldr	r0, [sp, #52]	; 0x34
    644e:	f001 fccd 	bl	7dec <lv_draw_aa_get_opa>
    6452:	1a28      	subs	r0, r5, r0
    6454:	b2c6      	uxtb	r6, r0
    6456:	e775      	b.n	6344 <lv_draw_rect+0x1088>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
    6458:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
    645c:	9b02      	ldr	r3, [sp, #8]
    645e:	1a52      	subs	r2, r2, r1
    6460:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
                act_color = lv_color_mix(mcolor, gcolor, mix);
    6464:	4641      	mov	r1, r8
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
    6466:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
    646a:	4620      	mov	r0, r4
    646c:	b2d2      	uxtb	r2, r2
    646e:	f7fe febf 	bl	51f0 <lv_color_mix>
    6472:	4602      	mov	r2, r0
    6474:	e6e8      	b.n	6248 <lv_draw_rect+0xf8c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
    6476:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    647a:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
    647e:	1ad2      	subs	r2, r2, r3
    6480:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    6484:	9b02      	ldr	r3, [sp, #8]
    6486:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
    648a:	4641      	mov	r1, r8
    648c:	b2d2      	uxtb	r2, r2
    648e:	4620      	mov	r0, r4
    6490:	f7fe feae 	bl	51f0 <lv_color_mix>
    6494:	4602      	mov	r2, r0
    6496:	e6e4      	b.n	6262 <lv_draw_rect+0xfa6>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
    6498:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
    649c:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
    64a0:	1ad2      	subs	r2, r2, r3
    64a2:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    64a6:	9b02      	ldr	r3, [sp, #8]
    64a8:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
    64ac:	4641      	mov	r1, r8
    64ae:	b2d2      	uxtb	r2, r2
    64b0:	4620      	mov	r0, r4
    64b2:	f7fe fe9d 	bl	51f0 <lv_color_mix>
    64b6:	4602      	mov	r2, r0
    64b8:	e6de      	b.n	6278 <lv_draw_rect+0xfbc>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
    64ba:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
    64be:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
    64c2:	1ad2      	subs	r2, r2, r3
    64c4:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    64c8:	9b02      	ldr	r3, [sp, #8]
    64ca:	fbb2 f2f3 	udiv	r2, r2, r3
                act_color = lv_color_mix(mcolor, gcolor, mix);
    64ce:	4641      	mov	r1, r8
    64d0:	b2d2      	uxtb	r2, r2
    64d2:	4620      	mov	r0, r4
    64d4:	f7fe fe8c 	bl	51f0 <lv_color_mix>
    64d8:	4602      	mov	r2, r0
    64da:	e6da      	b.n	6292 <lv_draw_rect+0xfd6>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
    64dc:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
    64e0:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
    64e4:	1ad2      	subs	r2, r2, r3
    64e6:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    64ea:	9b02      	ldr	r3, [sp, #8]
    64ec:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
    64f0:	4641      	mov	r1, r8
    64f2:	b2d2      	uxtb	r2, r2
    64f4:	4620      	mov	r0, r4
    64f6:	f7fe fe7b 	bl	51f0 <lv_color_mix>
    64fa:	4602      	mov	r2, r0
    64fc:	f7ff baba 	b.w	5a74 <lv_draw_rect+0x7b8>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
    6500:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
    6504:	1ad2      	subs	r2, r2, r3
    6506:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    650a:	9b02      	ldr	r3, [sp, #8]
    650c:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
    6510:	4641      	mov	r1, r8
    6512:	b2d2      	uxtb	r2, r2
    6514:	4620      	mov	r0, r4
    6516:	f7fe fe6b 	bl	51f0 <lv_color_mix>
    651a:	4602      	mov	r2, r0
    651c:	f7ff bab9 	b.w	5a92 <lv_draw_rect+0x7d6>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
    6520:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
    6524:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
    6528:	1ad2      	subs	r2, r2, r3
    652a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    652e:	9b02      	ldr	r3, [sp, #8]
    6530:	fbb2 f2f3 	udiv	r2, r2, r3
        act_color = lv_color_mix(mcolor, gcolor, mix);
    6534:	4641      	mov	r1, r8
    6536:	b2d2      	uxtb	r2, r2
    6538:	4620      	mov	r0, r4
    653a:	f7fe fe59 	bl	51f0 <lv_color_mix>
    653e:	4602      	mov	r2, r0
    6540:	f7ff bab0 	b.w	5aa4 <lv_draw_rect+0x7e8>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
    6544:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
    6548:	1ad2      	subs	r2, r2, r3
    654a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    654e:	9b02      	ldr	r3, [sp, #8]
    6550:	fbb2 f2f3 	udiv	r2, r2, r3
            act_color = lv_color_mix(mcolor, gcolor, mix);
    6554:	4641      	mov	r1, r8
    6556:	b2d2      	uxtb	r2, r2
    6558:	4620      	mov	r0, r4
    655a:	f7fe fe49 	bl	51f0 <lv_color_mix>
    655e:	4602      	mov	r2, r0
    6560:	f7ff baaf 	b.w	5ac2 <lv_draw_rect+0x806>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
    6564:	462a      	mov	r2, r5
    6566:	980d      	ldr	r0, [sp, #52]	; 0x34
    6568:	f001 fc40 	bl	7dec <lv_draw_aa_get_opa>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    656c:	9b05      	ldr	r3, [sp, #20]
    656e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6570:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
    6574:	9111      	str	r1, [sp, #68]	; 0x44
    6576:	189f      	adds	r7, r3, r2
    6578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
    657a:	1a28      	subs	r0, r5, r0
    657c:	441f      	add	r7, r3
    657e:	b2c6      	uxtb	r6, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    6580:	b23f      	sxth	r7, r7
    6582:	4638      	mov	r0, r7
    6584:	ee18 3a10 	vmov	r3, s16
    6588:	465a      	mov	r2, fp
    658a:	9600      	str	r6, [sp, #0]
    658c:	f001 f89d 	bl	76ca <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
    6590:	9b04      	ldr	r3, [sp, #16]
    6592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6594:	9911      	ldr	r1, [sp, #68]	; 0x44
    6596:	9600      	str	r6, [sp, #0]
    6598:	1a98      	subs	r0, r3, r2
    659a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    659c:	1ac0      	subs	r0, r0, r3
    659e:	b200      	sxth	r0, r0
    65a0:	ee18 3a10 	vmov	r3, s16
    65a4:	465a      	mov	r2, fp
    65a6:	9012      	str	r0, [sp, #72]	; 0x48
    65a8:	f001 f88f 	bl	76ca <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
    65ac:	9b08      	ldr	r3, [sp, #32]
    65ae:	9812      	ldr	r0, [sp, #72]	; 0x48
    65b0:	9600      	str	r6, [sp, #0]
    65b2:	1e59      	subs	r1, r3, #1
    65b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    65b6:	1ac9      	subs	r1, r1, r3
    65b8:	b209      	sxth	r1, r1
    65ba:	ee18 3a90 	vmov	r3, s17
    65be:	465a      	mov	r2, fp
    65c0:	9111      	str	r1, [sp, #68]	; 0x44
    65c2:	f001 f882 	bl	76ca <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
    65c6:	4638      	mov	r0, r7
    65c8:	ee18 3a90 	vmov	r3, s17
    65cc:	9911      	ldr	r1, [sp, #68]	; 0x44
    65ce:	9600      	str	r6, [sp, #0]
    65d0:	465a      	mov	r2, fp
    65d2:	f001 f87a 	bl	76ca <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
    65d6:	9a02      	ldr	r2, [sp, #8]
    65d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    65da:	fbb3 f3f2 	udiv	r3, r3, r2
    65de:	b2db      	uxtb	r3, r3
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
    65e0:	461a      	mov	r2, r3
    65e2:	4641      	mov	r1, r8
    65e4:	4620      	mov	r0, r4
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
    65e6:	ee09 3a10 	vmov	s18, r3
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
    65ea:	f7fe fe01 	bl	51f0 <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
    65ee:	9a05      	ldr	r2, [sp, #20]
    65f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    65f2:	9600      	str	r6, [sp, #0]
    65f4:	1c57      	adds	r7, r2, #1
    65f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    65f8:	4417      	add	r7, r2
    65fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    65fc:	1851      	adds	r1, r2, r1
    65fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6600:	b23f      	sxth	r7, r7
    6602:	4411      	add	r1, r2
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
    6604:	4603      	mov	r3, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
    6606:	b209      	sxth	r1, r1
    6608:	465a      	mov	r2, fp
    660a:	4638      	mov	r0, r7
    660c:	9312      	str	r3, [sp, #72]	; 0x48
    660e:	9111      	str	r1, [sp, #68]	; 0x44
    6610:	f001 f85b 	bl	76ca <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
    6614:	9b04      	ldr	r3, [sp, #16]
    6616:	9911      	ldr	r1, [sp, #68]	; 0x44
    6618:	9600      	str	r6, [sp, #0]
    661a:	1e5a      	subs	r2, r3, #1
    661c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    661e:	1ad2      	subs	r2, r2, r3
    6620:	b213      	sxth	r3, r2
    6622:	ee09 3a90 	vmov	s19, r3
    6626:	465a      	mov	r2, fp
    6628:	9b12      	ldr	r3, [sp, #72]	; 0x48
    662a:	ee19 0a90 	vmov	r0, s19
    662e:	f001 f84c 	bl	76ca <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
    6632:	ee19 2a10 	vmov	r2, s18
    6636:	4621      	mov	r1, r4
    6638:	4640      	mov	r0, r8
    663a:	f7fe fdd9 	bl	51f0 <lv_color_mix>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
    663e:	9a08      	ldr	r2, [sp, #32]
    6640:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6642:	9600      	str	r6, [sp, #0]
    6644:	1a51      	subs	r1, r2, r1
    6646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6648:	1a89      	subs	r1, r1, r2
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
    664a:	4603      	mov	r3, r0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
    664c:	b209      	sxth	r1, r1
    664e:	ee19 0a90 	vmov	r0, s19
    6652:	465a      	mov	r2, fp
    6654:	9311      	str	r3, [sp, #68]	; 0x44
    6656:	910c      	str	r1, [sp, #48]	; 0x30
    6658:	f001 f837 	bl	76ca <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
    665c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    665e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6660:	9600      	str	r6, [sp, #0]
    6662:	465a      	mov	r2, fp
    6664:	4638      	mov	r0, r7
    6666:	f001 f830 	bl	76ca <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
    666a:	9b07      	ldr	r3, [sp, #28]
    666c:	3301      	adds	r3, #1
    666e:	9307      	str	r3, [sp, #28]
    6670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6672:	33ff      	adds	r3, #255	; 0xff
    6674:	930e      	str	r3, [sp, #56]	; 0x38
    6676:	f7ff ba85 	b.w	5b84 <lv_draw_rect+0x8c8>
    corner_size++;
    667a:	3301      	adds	r3, #1
    if(part & LV_BORDER_TOP)
    667c:	9a04      	ldr	r2, [sp, #16]
    corner_size++;
    667e:	b29b      	uxth	r3, r3
    6680:	9303      	str	r3, [sp, #12]
    if(part & LV_BORDER_TOP)
    6682:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    6686:	2a00      	cmp	r2, #0
    6688:	f000 8132 	beq.w	68f0 <lv_draw_rect+0x1634>
        work_area.y1 = coords->y1 + corner_size;
    668c:	9a03      	ldr	r2, [sp, #12]
        work_area.y1 = coords->y1 + radius;
    668e:	4413      	add	r3, r2
    6690:	b21b      	sxth	r3, r3
    if(part & LV_BORDER_BOTTOM)
    6692:	f016 0201 	ands.w	r2, r6, #1
    6696:	9207      	str	r2, [sp, #28]
    6698:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        work_area.y2 = coords->y2 - corner_size;
    669c:	bf14      	ite	ne
    669e:	9a03      	ldrne	r2, [sp, #12]
        work_area.y2 = coords->y2 - radius;
    66a0:	9a02      	ldreq	r2, [sp, #8]
    66a2:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    66a6:	1a9b      	subs	r3, r3, r2
    66a8:	b21b      	sxth	r3, r3
    if(part & LV_BORDER_LEFT) {
    66aa:	0772      	lsls	r2, r6, #29
    66ac:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    66b0:	d50c      	bpl.n	66cc <lv_draw_rect+0x1410>
        work_area.x1 = coords->x1;
    66b2:	f9ba 3000 	ldrsh.w	r3, [sl]
    66b6:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        work_area.x2 = work_area.x1 + bwidth;
    66ba:	443b      	add	r3, r7
    66bc:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        lv_draw_fill(&work_area, mask, color, opa);
    66c0:	4642      	mov	r2, r8
    66c2:	462b      	mov	r3, r5
    66c4:	4659      	mov	r1, fp
    66c6:	a822      	add	r0, sp, #136	; 0x88
    66c8:	f001 f84c 	bl	7764 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
    66cc:	0733      	lsls	r3, r6, #28
    66ce:	d50c      	bpl.n	66ea <lv_draw_rect+0x142e>
    66d0:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
        work_area.x2 = coords->x2;
    66d4:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        work_area.x1 = work_area.x2 - bwidth;
    66d8:	1bdb      	subs	r3, r3, r7
    66da:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        lv_draw_fill(&work_area, mask, color, opa);
    66de:	4642      	mov	r2, r8
    66e0:	462b      	mov	r3, r5
    66e2:	4659      	mov	r1, fp
    66e4:	a822      	add	r0, sp, #136	; 0x88
    66e6:	f001 f83d 	bl	7764 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
    66ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    66ee:	9a03      	ldr	r2, [sp, #12]
    66f0:	f8ba 1000 	ldrh.w	r1, [sl]
    66f4:	1ad2      	subs	r2, r2, r3
    66f6:	440a      	add	r2, r1
    66f8:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    work_area.x2 = coords->x2 - corner_size + length_corr;
    66fc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
    6700:	4413      	add	r3, r2
    6702:	9a03      	ldr	r2, [sp, #12]
    6704:	1a9b      	subs	r3, r3, r2
    6706:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    if(part & LV_BORDER_TOP) {
    670a:	9b04      	ldr	r3, [sp, #16]
    670c:	b163      	cbz	r3, 6728 <lv_draw_rect+0x146c>
        work_area.y1 = coords->y1;
    670e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    6712:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        work_area.y2 = coords->y1 + bwidth;
    6716:	443b      	add	r3, r7
    6718:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        lv_draw_fill(&work_area, mask, color, opa);
    671c:	4642      	mov	r2, r8
    671e:	462b      	mov	r3, r5
    6720:	4659      	mov	r1, fp
    6722:	a822      	add	r0, sp, #136	; 0x88
    6724:	f001 f81e 	bl	7764 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
    6728:	9b07      	ldr	r3, [sp, #28]
    672a:	b163      	cbz	r3, 6746 <lv_draw_rect+0x148a>
        work_area.y2 = coords->y2;
    672c:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    6730:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        work_area.y1 = work_area.y2 - bwidth;
    6734:	1bdb      	subs	r3, r3, r7
    6736:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        lv_draw_fill(&work_area, mask, color, opa);
    673a:	4642      	mov	r2, r8
    673c:	462b      	mov	r3, r5
    673e:	4659      	mov	r1, fp
    6740:	a822      	add	r0, sp, #136	; 0x88
    6742:	f001 f80f 	bl	7764 <lv_draw_fill>
    if(length_corr != 0) {
    6746:	9b05      	ldr	r3, [sp, #20]
    6748:	2b00      	cmp	r3, #0
    674a:	d075      	beq.n	6838 <lv_draw_rect+0x157c>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
    674c:	f006 0306 	and.w	r3, r6, #6
    6750:	2b06      	cmp	r3, #6
    6752:	d119      	bne.n	6788 <lv_draw_rect+0x14cc>
            work_area.x1 = coords->x1;
    6754:	f9ba 3000 	ldrsh.w	r3, [sl]
            work_area.x2 = coords->x1 + radius + aa;
    6758:	9a02      	ldr	r2, [sp, #8]
            work_area.x1 = coords->x1;
    675a:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            work_area.x2 = coords->x1 + radius + aa;
    675e:	4423      	add	r3, r4
    6760:	4413      	add	r3, r2
            work_area.y1 = coords->y1 + radius + 1 + aa;
    6762:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    6766:	9902      	ldr	r1, [sp, #8]
            work_area.x2 = coords->x1 + radius + aa;
    6768:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.y1 = coords->y1 + radius + 1 + aa;
    676c:	1c53      	adds	r3, r2, #1
    676e:	4423      	add	r3, r4
    6770:	440b      	add	r3, r1
            work_area.y2 = coords->y1 + bwidth;
    6772:	443a      	add	r2, r7
            work_area.y1 = coords->y1 + radius + 1 + aa;
    6774:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            work_area.y2 = coords->y1 + bwidth;
    6778:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    677c:	462b      	mov	r3, r5
    677e:	4642      	mov	r2, r8
    6780:	4659      	mov	r1, fp
    6782:	a822      	add	r0, sp, #136	; 0x88
    6784:	f000 ffee 	bl	7764 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
    6788:	f006 030a 	and.w	r3, r6, #10
    678c:	2b0a      	cmp	r3, #10
    678e:	d118      	bne.n	67c2 <lv_draw_rect+0x1506>
            work_area.x1 = coords->x2 - radius - aa;
    6790:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
    6794:	9902      	ldr	r1, [sp, #8]
            work_area.x2 = coords->x2;
    6796:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
            work_area.x1 = coords->x2 - radius - aa;
    679a:	1b13      	subs	r3, r2, r4
            work_area.y1 = coords->y1 + radius + 1 + aa;
    679c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
            work_area.x1 = coords->x2 - radius - aa;
    67a0:	1a5b      	subs	r3, r3, r1
    67a2:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            work_area.y1 = coords->y1 + radius + 1 + aa;
    67a6:	1c53      	adds	r3, r2, #1
    67a8:	4423      	add	r3, r4
    67aa:	440b      	add	r3, r1
            work_area.y2 = coords->y1 + bwidth;
    67ac:	443a      	add	r2, r7
            work_area.y1 = coords->y1 + radius + 1 + aa;
    67ae:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            work_area.y2 = coords->y1 + bwidth;
    67b2:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    67b6:	462b      	mov	r3, r5
    67b8:	4642      	mov	r2, r8
    67ba:	4659      	mov	r1, fp
    67bc:	a822      	add	r0, sp, #136	; 0x88
    67be:	f000 ffd1 	bl	7764 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
    67c2:	f006 0305 	and.w	r3, r6, #5
    67c6:	2b05      	cmp	r3, #5
    67c8:	d119      	bne.n	67fe <lv_draw_rect+0x1542>
            work_area.x1 = coords->x1;
    67ca:	f9ba 3000 	ldrsh.w	r3, [sl]
            work_area.x2 = coords->x1 + radius + aa;
    67ce:	9a02      	ldr	r2, [sp, #8]
            work_area.x1 = coords->x1;
    67d0:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            work_area.x2 = coords->x1 + radius + aa;
    67d4:	4423      	add	r3, r4
    67d6:	4413      	add	r3, r2
    67d8:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.y1 = coords->y2 - bwidth;
    67dc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    67e0:	1bda      	subs	r2, r3, r7
    67e2:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            work_area.y2 = coords->y2 - radius - 1 - aa;
    67e6:	3b01      	subs	r3, #1
    67e8:	9a02      	ldr	r2, [sp, #8]
    67ea:	1b1b      	subs	r3, r3, r4
    67ec:	1a9b      	subs	r3, r3, r2
    67ee:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    67f2:	4642      	mov	r2, r8
    67f4:	462b      	mov	r3, r5
    67f6:	4659      	mov	r1, fp
    67f8:	a822      	add	r0, sp, #136	; 0x88
    67fa:	f000 ffb3 	bl	7764 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    67fe:	f006 0309 	and.w	r3, r6, #9
    6802:	2b09      	cmp	r3, #9
    6804:	d118      	bne.n	6838 <lv_draw_rect+0x157c>
            work_area.x1 = coords->x2 - radius - aa;
    6806:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
    680a:	9902      	ldr	r1, [sp, #8]
            work_area.x2 = coords->x2;
    680c:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
            work_area.x1 = coords->x2 - radius - aa;
    6810:	1b13      	subs	r3, r2, r4
    6812:	1a5b      	subs	r3, r3, r1
    6814:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            work_area.y1 = coords->y2 - bwidth;
    6818:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    681c:	1bdf      	subs	r7, r3, r7
            work_area.y2 = coords->y2 - radius - 1 - aa;
    681e:	3b01      	subs	r3, #1
    6820:	1b1b      	subs	r3, r3, r4
    6822:	1a5b      	subs	r3, r3, r1
    6824:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    6828:	4642      	mov	r2, r8
    682a:	462b      	mov	r3, r5
    682c:	4659      	mov	r1, fp
    682e:	a822      	add	r0, sp, #136	; 0x88
            work_area.y1 = coords->y2 - bwidth;
    6830:	f8ad 708a 	strh.w	r7, [sp, #138]	; 0x8a
            lv_draw_fill(&work_area, mask, color, opa);
    6834:	f000 ff96 	bl	7764 <lv_draw_fill>
    if(style->body.radius == 0) {
    6838:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
    683c:	2b00      	cmp	r3, #0
    683e:	f47f aac7 	bne.w	5dd0 <lv_draw_rect+0xb14>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
    6842:	f016 0f06 	tst.w	r6, #6
    6846:	d013      	beq.n	6870 <lv_draw_rect+0x15b4>
            work_area.x1 = coords->x1;
    6848:	f9ba 3000 	ldrsh.w	r3, [sl]
    684c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            work_area.x2 = coords->x1 + aa;
    6850:	4423      	add	r3, r4
    6852:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.y1 = coords->y1;
    6856:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    685a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            work_area.y2 = coords->y1 + aa;
    685e:	4423      	add	r3, r4
    6860:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    6864:	4642      	mov	r2, r8
    6866:	462b      	mov	r3, r5
    6868:	4659      	mov	r1, fp
    686a:	a822      	add	r0, sp, #136	; 0x88
    686c:	f000 ff7a 	bl	7764 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
    6870:	f016 0f0a 	tst.w	r6, #10
    6874:	d013      	beq.n	689e <lv_draw_rect+0x15e2>
            work_area.x1 = coords->x2 - aa;
    6876:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
    687a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.x1 = coords->x2 - aa;
    687e:	1b1a      	subs	r2, r3, r4
            work_area.y1 = coords->y1;
    6880:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    6884:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            work_area.y2 = coords->y1 + aa;
    6888:	4423      	add	r3, r4
            work_area.x1 = coords->x2 - aa;
    688a:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
            work_area.y2 = coords->y1 + aa;
    688e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&work_area, mask, color, opa);
    6892:	4642      	mov	r2, r8
    6894:	462b      	mov	r3, r5
    6896:	4659      	mov	r1, fp
    6898:	a822      	add	r0, sp, #136	; 0x88
    689a:	f000 ff63 	bl	7764 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
    689e:	f016 0f05 	tst.w	r6, #5
    68a2:	d013      	beq.n	68cc <lv_draw_rect+0x1610>
            work_area.x1 = coords->x1;
    68a4:	f9ba 3000 	ldrsh.w	r3, [sl]
    68a8:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            work_area.x2 = coords->x1 + aa;
    68ac:	4423      	add	r3, r4
    68ae:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.y1 = coords->y2 - aa;
    68b2:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.y2 = coords->y2;
    68b6:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            work_area.y1 = coords->y2 - aa;
    68ba:	1b1a      	subs	r2, r3, r4
    68bc:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            lv_draw_fill(&work_area, mask, color, opa);
    68c0:	462b      	mov	r3, r5
    68c2:	4642      	mov	r2, r8
    68c4:	4659      	mov	r1, fp
    68c6:	a822      	add	r0, sp, #136	; 0x88
    68c8:	f000 ff4c 	bl	7764 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
    68cc:	f016 0f09 	tst.w	r6, #9
    68d0:	f43f aa7e 	beq.w	5dd0 <lv_draw_rect+0xb14>
            work_area.x1 = coords->x2 - aa;
    68d4:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
    68d8:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            work_area.x1 = coords->x2 - aa;
    68dc:	1b1a      	subs	r2, r3, r4
            work_area.y1 = coords->y2 - aa;
    68de:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.x1 = coords->x2 - aa;
    68e2:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
            work_area.y1 = coords->y2 - aa;
    68e6:	1b1c      	subs	r4, r3, r4
    68e8:	f8ad 408a 	strh.w	r4, [sp, #138]	; 0x8a
            work_area.y2 = coords->y2;
    68ec:	f7ff ba68 	b.w	5dc0 <lv_draw_rect+0xb04>
        work_area.y1 = coords->y1 + radius;
    68f0:	9a02      	ldr	r2, [sp, #8]
    68f2:	e6cc      	b.n	668e <lv_draw_rect+0x13d2>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
    68f4:	3c02      	subs	r4, #2
    68f6:	f7ff ba8e 	b.w	5e16 <lv_draw_rect+0xb5a>
        if(cir_in.y < cir_in.x) {
    68fa:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
    68fe:	f9bd 0082 	ldrsh.w	r0, [sp, #130]	; 0x82
    6902:	4290      	cmp	r0, r2
    6904:	b28b      	uxth	r3, r1
    6906:	f280 8147 	bge.w	6b98 <lv_draw_rect+0x18dc>
            act_w1 = cir_out.x - cir_in.x;
    690a:	1a9b      	subs	r3, r3, r2
    690c:	b21b      	sxth	r3, r3
    690e:	930a      	str	r3, [sp, #40]	; 0x28
            act_w2 = act_w1 - 1;
    6910:	930d      	str	r3, [sp, #52]	; 0x34
        if(aa) {
    6912:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6914:	2b00      	cmp	r3, #0
    6916:	d040      	beq.n	699a <lv_draw_rect+0x16de>
            if(out_x_last != cir_out.x) {
    6918:	9b08      	ldr	r3, [sp, #32]
    691a:	4299      	cmp	r1, r3
    691c:	d01c      	beq.n	6958 <lv_draw_rect+0x169c>
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
    691e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    6922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    6924:	9a08      	ldr	r2, [sp, #32]
    6926:	f8bd a020 	ldrh.w	sl, [sp, #32]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
    692a:	1b5b      	subs	r3, r3, r5
    692c:	b21b      	sxth	r3, r3
    692e:	930f      	str	r3, [sp, #60]	; 0x3c
                for(i = 0; i < seg_size; i++) {
    6930:	2300      	movs	r3, #0
    6932:	930e      	str	r3, [sp, #56]	; 0x38
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    6934:	9b07      	ldr	r3, [sp, #28]
    6936:	3301      	adds	r3, #1
    6938:	fa13 f382 	uxtah	r3, r3, r2
    693c:	9308      	str	r3, [sp, #32]
    693e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
                for(i = 0; i < seg_size; i++) {
    6942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6944:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
    6948:	4299      	cmp	r1, r3
    694a:	f2c0 812c 	blt.w	6ba6 <lv_draw_rect+0x18ea>
                out_x_last      = cir_out.x;
    694e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    6952:	9308      	str	r3, [sp, #32]
    6954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6956:	930e      	str	r3, [sp, #56]	; 0x38
            if(in_x_last != cir_in.x) {
    6958:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
    695c:	9a06      	ldr	r2, [sp, #24]
    695e:	4293      	cmp	r3, r2
    6960:	d01b      	beq.n	699a <lv_draw_rect+0x16de>
                in_y_seg_end        = cir_out.y;
    6962:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
    6966:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
                in_y_seg_end        = cir_out.y;
    696a:	930f      	str	r3, [sp, #60]	; 0x3c
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
    696c:	eba3 0a05 	sub.w	sl, r3, r5
                for(i = 0; i < seg_size; i++) {
    6970:	2300      	movs	r3, #0
    6972:	930c      	str	r3, [sp, #48]	; 0x30
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    6974:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6976:	4413      	add	r3, r2
    6978:	b21b      	sxth	r3, r3
    697a:	ee08 3a10 	vmov	s16, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
    697e:	fa0f fa8a 	sxth.w	sl, sl
                for(i = 0; i < seg_size; i++) {
    6982:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
    6986:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
    698a:	4551      	cmp	r1, sl
    698c:	f2c0 81a1 	blt.w	6cd2 <lv_draw_rect+0x1a16>
                in_x_last      = cir_in.x;
    6990:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
    6994:	9306      	str	r3, [sp, #24]
                in_y_seg_start = in_y_seg_end;
    6996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6998:	930b      	str	r3, [sp, #44]	; 0x2c
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    699a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    699c:	2b09      	cmp	r3, #9
    699e:	d133      	bne.n	6a08 <lv_draw_rect+0x174c>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
    69a0:	9a07      	ldr	r2, [sp, #28]
    69a2:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    69a6:	4413      	add	r3, r2
    69a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    69aa:	b29b      	uxth	r3, r3
    69ac:	1a9a      	subs	r2, r3, r2
    69ae:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
    69b2:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
    69b6:	9a05      	ldr	r2, [sp, #20]
    69b8:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    69bc:	4413      	add	r3, r2
    69be:	b21b      	sxth	r3, r3
    69c0:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
    69c4:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&circ_area, mask, color, opa);
    69c8:	463a      	mov	r2, r7
    69ca:	4643      	mov	r3, r8
    69cc:	4659      	mov	r1, fp
    69ce:	a822      	add	r0, sp, #136	; 0x88
    69d0:	f000 fec8 	bl	7764 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
    69d4:	9a07      	ldr	r2, [sp, #28]
    69d6:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    69da:	4413      	add	r3, r2
    69dc:	b21b      	sxth	r3, r3
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
    69de:	9a05      	ldr	r2, [sp, #20]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
    69e0:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
    69e4:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
    69e8:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    69ec:	4413      	add	r3, r2
    69ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    69f0:	b29b      	uxth	r3, r3
    69f2:	1a9a      	subs	r2, r3, r2
    69f4:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
    69f8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&circ_area, mask, color, opa);
    69fc:	463a      	mov	r2, r7
    69fe:	4643      	mov	r3, r8
    6a00:	4659      	mov	r1, fp
    6a02:	a822      	add	r0, sp, #136	; 0x88
    6a04:	f000 feae 	bl	7764 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
    6a08:	9b02      	ldr	r3, [sp, #8]
    6a0a:	f003 0305 	and.w	r3, r3, #5
    6a0e:	2b05      	cmp	r3, #5
    6a10:	d133      	bne.n	6a7a <lv_draw_rect+0x17be>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
    6a12:	9a03      	ldr	r2, [sp, #12]
    6a14:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    6a18:	1ad3      	subs	r3, r2, r3
    6a1a:	b21b      	sxth	r3, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
    6a1c:	9a05      	ldr	r2, [sp, #20]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
    6a1e:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
    6a22:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
    6a26:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    6a2a:	4413      	add	r3, r2
    6a2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6a2e:	b29b      	uxth	r3, r3
    6a30:	1a9a      	subs	r2, r3, r2
    6a32:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
    6a36:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&circ_area, mask, color, opa);
    6a3a:	463a      	mov	r2, r7
    6a3c:	4643      	mov	r3, r8
    6a3e:	4659      	mov	r1, fp
    6a40:	a822      	add	r0, sp, #136	; 0x88
    6a42:	f000 fe8f 	bl	7764 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
    6a46:	9a03      	ldr	r2, [sp, #12]
    6a48:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    6a4c:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
    6a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
    6a50:	b29b      	uxth	r3, r3
    6a52:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
    6a56:	4413      	add	r3, r2
    6a58:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
    6a5c:	9a05      	ldr	r2, [sp, #20]
    6a5e:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    6a62:	4413      	add	r3, r2
    6a64:	b21b      	sxth	r3, r3
    6a66:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
    6a6a:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&circ_area, mask, color, opa);
    6a6e:	463a      	mov	r2, r7
    6a70:	4643      	mov	r3, r8
    6a72:	4659      	mov	r1, fp
    6a74:	a822      	add	r0, sp, #136	; 0x88
    6a76:	f000 fe75 	bl	7764 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
    6a7a:	9b02      	ldr	r3, [sp, #8]
    6a7c:	f003 0306 	and.w	r3, r3, #6
    6a80:	2b06      	cmp	r3, #6
    6a82:	d139      	bne.n	6af8 <lv_draw_rect+0x183c>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
    6a84:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    6a88:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6a8a:	18d1      	adds	r1, r2, r3
    6a8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6a8e:	1ad2      	subs	r2, r2, r3
    6a90:	4291      	cmp	r1, r2
    6a92:	dd17      	ble.n	6ac4 <lv_draw_rect+0x1808>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
    6a94:	9903      	ldr	r1, [sp, #12]
    6a96:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    6a9a:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
    6a9c:	990d      	ldr	r1, [sp, #52]	; 0x34
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
    6a9e:	b292      	uxth	r2, r2
    6aa0:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
    6aa4:	440a      	add	r2, r1
    6aa6:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
    6aaa:	9a04      	ldr	r2, [sp, #16]
    6aac:	1ad3      	subs	r3, r2, r3
    6aae:	b21b      	sxth	r3, r3
    6ab0:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
    6ab4:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
                lv_draw_fill(&circ_area, mask, color, opa);
    6ab8:	463a      	mov	r2, r7
    6aba:	4643      	mov	r3, r8
    6abc:	4659      	mov	r1, fp
    6abe:	a822      	add	r0, sp, #136	; 0x88
    6ac0:	f000 fe50 	bl	7764 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
    6ac4:	9a03      	ldr	r2, [sp, #12]
    6ac6:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    6aca:	1ad3      	subs	r3, r2, r3
    6acc:	b21b      	sxth	r3, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
    6ace:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
    6ad0:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
    6ad4:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
    6ad8:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    6adc:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
    6ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
    6ae0:	b29b      	uxth	r3, r3
    6ae2:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
    6ae6:	4413      	add	r3, r2
    6ae8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&circ_area, mask, color, opa);
    6aec:	463a      	mov	r2, r7
    6aee:	4643      	mov	r3, r8
    6af0:	4659      	mov	r1, fp
    6af2:	a822      	add	r0, sp, #136	; 0x88
    6af4:	f000 fe36 	bl	7764 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
    6af8:	9b02      	ldr	r3, [sp, #8]
    6afa:	f003 030a 	and.w	r3, r3, #10
    6afe:	2b0a      	cmp	r3, #10
    6b00:	d139      	bne.n	6b76 <lv_draw_rect+0x18ba>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
    6b02:	9a07      	ldr	r2, [sp, #28]
    6b04:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    6b08:	4413      	add	r3, r2
    6b0a:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
    6b0c:	9a04      	ldr	r2, [sp, #16]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
    6b0e:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
    6b12:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
    6b16:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    6b1a:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
    6b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
    6b1e:	b29b      	uxth	r3, r3
    6b20:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
    6b24:	4413      	add	r3, r2
    6b26:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_draw_fill(&circ_area, mask, color, opa);
    6b2a:	463a      	mov	r2, r7
    6b2c:	4643      	mov	r3, r8
    6b2e:	4659      	mov	r1, fp
    6b30:	a822      	add	r0, sp, #136	; 0x88
    6b32:	f000 fe17 	bl	7764 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
    6b36:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    6b3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6b3c:	18d1      	adds	r1, r2, r3
    6b3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6b40:	1ad2      	subs	r2, r2, r3
    6b42:	4291      	cmp	r1, r2
    6b44:	dd17      	ble.n	6b76 <lv_draw_rect+0x18ba>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
    6b46:	9a07      	ldr	r2, [sp, #28]
    6b48:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
    6b4c:	4411      	add	r1, r2
    6b4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6b50:	b289      	uxth	r1, r1
    6b52:	1a8a      	subs	r2, r1, r2
    6b54:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
    6b58:	9a04      	ldr	r2, [sp, #16]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
    6b5a:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
    6b5e:	1ad3      	subs	r3, r2, r3
    6b60:	b21b      	sxth	r3, r3
    6b62:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
    6b66:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
                lv_draw_fill(&circ_area, mask, color, opa);
    6b6a:	463a      	mov	r2, r7
    6b6c:	4643      	mov	r3, r8
    6b6e:	4659      	mov	r1, fp
    6b70:	a822      	add	r0, sp, #136	; 0x88
    6b72:	f000 fdf7 	bl	7764 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
    6b76:	a91a      	add	r1, sp, #104	; 0x68
    6b78:	a81e      	add	r0, sp, #120	; 0x78
    6b7a:	f7fc f907 	bl	2d8c <lv_circ_next>
        if(cir_in.y < cir_in.x) {
    6b7e:	f9bd 2082 	ldrsh.w	r2, [sp, #130]	; 0x82
    6b82:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
    6b86:	429a      	cmp	r2, r3
    6b88:	f6bf a993 	bge.w	5eb2 <lv_draw_rect+0xbf6>
            lv_circ_next(&cir_in, &tmp_in);
    6b8c:	a91c      	add	r1, sp, #112	; 0x70
    6b8e:	a820      	add	r0, sp, #128	; 0x80
    6b90:	f7fc f8fc 	bl	2d8c <lv_circ_next>
    6b94:	f7ff b98d 	b.w	5eb2 <lv_draw_rect+0xbf6>
            act_w1 = cir_out.x - cir_out.y;
    6b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6b9a:	1a9b      	subs	r3, r3, r2
    6b9c:	b21a      	sxth	r2, r3
            act_w2 = act_w1 - 1;
    6b9e:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
    6ba0:	920a      	str	r2, [sp, #40]	; 0x28
            act_w2 = act_w1 - 1;
    6ba2:	b21b      	sxth	r3, r3
    6ba4:	e6b4      	b.n	6910 <lv_draw_rect+0x1654>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
    6ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6ba8:	2b01      	cmp	r3, #1
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
    6baa:	4642      	mov	r2, r8
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
    6bac:	f000 808a 	beq.w	6cc4 <lv_draw_rect+0x1a08>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
    6bb0:	4618      	mov	r0, r3
    6bb2:	f7fe fb5f 	bl	5274 <antialias_get_opa_circ>
    6bb6:	4604      	mov	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    6bb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6bba:	2b09      	cmp	r3, #9
    6bbc:	d119      	bne.n	6bf2 <lv_draw_rect+0x1936>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    6bbe:	9b05      	ldr	r3, [sp, #20]
    6bc0:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
    6bc4:	9400      	str	r4, [sp, #0]
    6bc6:	1959      	adds	r1, r3, r5
    6bc8:	4431      	add	r1, r6
    6bca:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6bce:	465a      	mov	r2, fp
    6bd0:	b209      	sxth	r1, r1
    6bd2:	f000 fd7a 	bl	76ca <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    6bd6:	9b05      	ldr	r3, [sp, #20]
    6bd8:	9400      	str	r4, [sp, #0]
    6bda:	1c59      	adds	r1, r3, #1
    6bdc:	9b07      	ldr	r3, [sp, #28]
    6bde:	1958      	adds	r0, r3, r5
    6be0:	4451      	add	r1, sl
    6be2:	4430      	add	r0, r6
    6be4:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6be8:	465a      	mov	r2, fp
    6bea:	b209      	sxth	r1, r1
    6bec:	b200      	sxth	r0, r0
    6bee:	f000 fd6c 	bl	76ca <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
    6bf2:	9b02      	ldr	r3, [sp, #8]
    6bf4:	f003 0305 	and.w	r3, r3, #5
    6bf8:	2b05      	cmp	r3, #5
    6bfa:	d11c      	bne.n	6c36 <lv_draw_rect+0x197a>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
    6bfc:	9b05      	ldr	r3, [sp, #20]
    6bfe:	9400      	str	r4, [sp, #0]
    6c00:	1c59      	adds	r1, r3, #1
    6c02:	9b03      	ldr	r3, [sp, #12]
    6c04:	1b58      	subs	r0, r3, r5
    6c06:	4451      	add	r1, sl
    6c08:	1b80      	subs	r0, r0, r6
    6c0a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6c0e:	465a      	mov	r2, fp
    6c10:	b209      	sxth	r1, r1
    6c12:	b200      	sxth	r0, r0
    6c14:	f000 fd59 	bl	76ca <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
    6c18:	9b05      	ldr	r3, [sp, #20]
    6c1a:	9400      	str	r4, [sp, #0]
    6c1c:	1959      	adds	r1, r3, r5
    6c1e:	9b03      	ldr	r3, [sp, #12]
    6c20:	1e58      	subs	r0, r3, #1
    6c22:	4431      	add	r1, r6
    6c24:	eba0 000a 	sub.w	r0, r0, sl
    6c28:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6c2c:	465a      	mov	r2, fp
    6c2e:	b209      	sxth	r1, r1
    6c30:	b200      	sxth	r0, r0
    6c32:	f000 fd4a 	bl	76ca <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
    6c36:	9b02      	ldr	r3, [sp, #8]
    6c38:	f003 0306 	and.w	r3, r3, #6
    6c3c:	2b06      	cmp	r3, #6
    6c3e:	d11d      	bne.n	6c7c <lv_draw_rect+0x19c0>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
    6c40:	9b04      	ldr	r3, [sp, #16]
    6c42:	9400      	str	r4, [sp, #0]
    6c44:	1b59      	subs	r1, r3, r5
    6c46:	9b03      	ldr	r3, [sp, #12]
    6c48:	1e58      	subs	r0, r3, #1
    6c4a:	1b89      	subs	r1, r1, r6
    6c4c:	eba0 000a 	sub.w	r0, r0, sl
    6c50:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6c54:	465a      	mov	r2, fp
    6c56:	b209      	sxth	r1, r1
    6c58:	b200      	sxth	r0, r0
    6c5a:	f000 fd36 	bl	76ca <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
    6c5e:	9b04      	ldr	r3, [sp, #16]
    6c60:	9400      	str	r4, [sp, #0]
    6c62:	1e59      	subs	r1, r3, #1
    6c64:	9b03      	ldr	r3, [sp, #12]
    6c66:	1b58      	subs	r0, r3, r5
    6c68:	eba1 010a 	sub.w	r1, r1, sl
    6c6c:	1b80      	subs	r0, r0, r6
    6c6e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6c72:	465a      	mov	r2, fp
    6c74:	b209      	sxth	r1, r1
    6c76:	b200      	sxth	r0, r0
    6c78:	f000 fd27 	bl	76ca <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
    6c7c:	9b02      	ldr	r3, [sp, #8]
    6c7e:	f003 030a 	and.w	r3, r3, #10
    6c82:	2b0a      	cmp	r3, #10
    6c84:	d11a      	bne.n	6cbc <lv_draw_rect+0x1a00>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
    6c86:	9b04      	ldr	r3, [sp, #16]
    6c88:	9400      	str	r4, [sp, #0]
    6c8a:	1e59      	subs	r1, r3, #1
    6c8c:	9b07      	ldr	r3, [sp, #28]
    6c8e:	1958      	adds	r0, r3, r5
    6c90:	eba1 010a 	sub.w	r1, r1, sl
    6c94:	4430      	add	r0, r6
    6c96:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6c9a:	465a      	mov	r2, fp
    6c9c:	b209      	sxth	r1, r1
    6c9e:	b200      	sxth	r0, r0
    6ca0:	f000 fd13 	bl	76ca <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
    6ca4:	9b04      	ldr	r3, [sp, #16]
    6ca6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
    6caa:	9400      	str	r4, [sp, #0]
    6cac:	1b59      	subs	r1, r3, r5
    6cae:	1b89      	subs	r1, r1, r6
    6cb0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6cb4:	465a      	mov	r2, fp
    6cb6:	b209      	sxth	r1, r1
    6cb8:	f000 fd07 	bl	76ca <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
    6cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6cbe:	3301      	adds	r3, #1
    6cc0:	930e      	str	r3, [sp, #56]	; 0x38
    6cc2:	e63c      	b.n	693e <lv_draw_rect+0x1682>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
    6cc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6cc6:	f001 f891 	bl	7dec <lv_draw_aa_get_opa>
    6cca:	eba8 0000 	sub.w	r0, r8, r0
    6cce:	b2c4      	uxtb	r4, r0
    6cd0:	e772      	b.n	6bb8 <lv_draw_rect+0x18fc>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
    6cd2:	f1ba 0f01 	cmp.w	sl, #1
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
    6cd6:	4642      	mov	r2, r8
    6cd8:	4650      	mov	r0, sl
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
    6cda:	f000 80a3 	beq.w	6e24 <lv_draw_rect+0x1b68>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
    6cde:	f7fe fac9 	bl	5274 <antialias_get_opa_circ>
    6ce2:	eba8 0000 	sub.w	r0, r8, r0
    6ce6:	b2c4      	uxtb	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    6ce8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6cea:	2b09      	cmp	r3, #9
    6cec:	d10b      	bne.n	6d06 <lv_draw_rect+0x1a4a>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    6cee:	9b05      	ldr	r3, [sp, #20]
    6cf0:	9400      	str	r4, [sp, #0]
    6cf2:	1959      	adds	r1, r3, r5
    6cf4:	4431      	add	r1, r6
    6cf6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6cfa:	ee18 0a10 	vmov	r0, s16
    6cfe:	465a      	mov	r2, fp
    6d00:	b209      	sxth	r1, r1
    6d02:	f000 fce2 	bl	76ca <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
    6d06:	9b02      	ldr	r3, [sp, #8]
    6d08:	f003 0305 	and.w	r3, r3, #5
    6d0c:	2b05      	cmp	r3, #5
    6d0e:	9313      	str	r3, [sp, #76]	; 0x4c
    6d10:	d10e      	bne.n	6d30 <lv_draw_rect+0x1a74>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
    6d12:	9b05      	ldr	r3, [sp, #20]
    6d14:	9400      	str	r4, [sp, #0]
    6d16:	1e59      	subs	r1, r3, #1
    6d18:	9b06      	ldr	r3, [sp, #24]
    6d1a:	4419      	add	r1, r3
    6d1c:	9b03      	ldr	r3, [sp, #12]
    6d1e:	1b58      	subs	r0, r3, r5
    6d20:	1b80      	subs	r0, r0, r6
    6d22:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6d26:	465a      	mov	r2, fp
    6d28:	b209      	sxth	r1, r1
    6d2a:	b200      	sxth	r0, r0
    6d2c:	f000 fccd 	bl	76ca <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
    6d30:	9b02      	ldr	r3, [sp, #8]
    6d32:	f003 0306 	and.w	r3, r3, #6
    6d36:	2b06      	cmp	r3, #6
    6d38:	9314      	str	r3, [sp, #80]	; 0x50
    6d3a:	d10e      	bne.n	6d5a <lv_draw_rect+0x1a9e>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
    6d3c:	9b04      	ldr	r3, [sp, #16]
    6d3e:	9400      	str	r4, [sp, #0]
    6d40:	1b59      	subs	r1, r3, r5
    6d42:	9b03      	ldr	r3, [sp, #12]
    6d44:	1c58      	adds	r0, r3, #1
    6d46:	9b06      	ldr	r3, [sp, #24]
    6d48:	1b89      	subs	r1, r1, r6
    6d4a:	1ac0      	subs	r0, r0, r3
    6d4c:	465a      	mov	r2, fp
    6d4e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6d52:	b209      	sxth	r1, r1
    6d54:	b200      	sxth	r0, r0
    6d56:	f000 fcb8 	bl	76ca <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
    6d5a:	9b02      	ldr	r3, [sp, #8]
    6d5c:	f003 030a 	and.w	r3, r3, #10
    6d60:	2b0a      	cmp	r3, #10
    6d62:	9315      	str	r3, [sp, #84]	; 0x54
    6d64:	d10e      	bne.n	6d84 <lv_draw_rect+0x1ac8>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
    6d66:	9b04      	ldr	r3, [sp, #16]
    6d68:	9400      	str	r4, [sp, #0]
    6d6a:	1c59      	adds	r1, r3, #1
    6d6c:	9b06      	ldr	r3, [sp, #24]
    6d6e:	1ac9      	subs	r1, r1, r3
    6d70:	9b07      	ldr	r3, [sp, #28]
    6d72:	1958      	adds	r0, r3, r5
    6d74:	4430      	add	r0, r6
    6d76:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6d7a:	465a      	mov	r2, fp
    6d7c:	b209      	sxth	r1, r1
    6d7e:	b200      	sxth	r0, r0
    6d80:	f000 fca3 	bl	76ca <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
    6d84:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
    6d88:	4413      	add	r3, r2
    6d8a:	9a06      	ldr	r2, [sp, #24]
    6d8c:	3a01      	subs	r2, #1
    6d8e:	4293      	cmp	r3, r2
    6d90:	d044      	beq.n	6e1c <lv_draw_rect+0x1b60>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    6d92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d94:	2b09      	cmp	r3, #9
    6d96:	d10e      	bne.n	6db6 <lv_draw_rect+0x1afa>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
    6d98:	9b05      	ldr	r3, [sp, #20]
    6d9a:	9400      	str	r4, [sp, #0]
    6d9c:	1e59      	subs	r1, r3, #1
    6d9e:	9b06      	ldr	r3, [sp, #24]
    6da0:	4419      	add	r1, r3
    6da2:	9b07      	ldr	r3, [sp, #28]
    6da4:	1958      	adds	r0, r3, r5
    6da6:	4430      	add	r0, r6
    6da8:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6dac:	465a      	mov	r2, fp
    6dae:	b209      	sxth	r1, r1
    6db0:	b200      	sxth	r0, r0
    6db2:	f000 fc8a 	bl	76ca <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
    6db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6db8:	2b05      	cmp	r3, #5
    6dba:	d10e      	bne.n	6dda <lv_draw_rect+0x1b1e>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
    6dbc:	9b05      	ldr	r3, [sp, #20]
    6dbe:	9400      	str	r4, [sp, #0]
    6dc0:	1959      	adds	r1, r3, r5
    6dc2:	9b03      	ldr	r3, [sp, #12]
    6dc4:	1c58      	adds	r0, r3, #1
    6dc6:	9b06      	ldr	r3, [sp, #24]
    6dc8:	4431      	add	r1, r6
    6dca:	1ac0      	subs	r0, r0, r3
    6dcc:	465a      	mov	r2, fp
    6dce:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6dd2:	b209      	sxth	r1, r1
    6dd4:	b200      	sxth	r0, r0
    6dd6:	f000 fc78 	bl	76ca <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
    6dda:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6ddc:	2b06      	cmp	r3, #6
    6dde:	d10e      	bne.n	6dfe <lv_draw_rect+0x1b42>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
    6de0:	9b04      	ldr	r3, [sp, #16]
    6de2:	9400      	str	r4, [sp, #0]
    6de4:	1c59      	adds	r1, r3, #1
    6de6:	9b06      	ldr	r3, [sp, #24]
    6de8:	1ac9      	subs	r1, r1, r3
    6dea:	9b03      	ldr	r3, [sp, #12]
    6dec:	1b58      	subs	r0, r3, r5
    6dee:	1b80      	subs	r0, r0, r6
    6df0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6df4:	465a      	mov	r2, fp
    6df6:	b209      	sxth	r1, r1
    6df8:	b200      	sxth	r0, r0
    6dfa:	f000 fc66 	bl	76ca <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
    6dfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6e00:	2b0a      	cmp	r3, #10
    6e02:	d10b      	bne.n	6e1c <lv_draw_rect+0x1b60>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
    6e04:	9b04      	ldr	r3, [sp, #16]
    6e06:	9400      	str	r4, [sp, #0]
    6e08:	1b59      	subs	r1, r3, r5
    6e0a:	1b89      	subs	r1, r1, r6
    6e0c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6e10:	ee18 0a10 	vmov	r0, s16
    6e14:	465a      	mov	r2, fp
    6e16:	b209      	sxth	r1, r1
    6e18:	f000 fc57 	bl	76ca <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
    6e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6e1e:	3301      	adds	r3, #1
    6e20:	930c      	str	r3, [sp, #48]	; 0x30
    6e22:	e5ae      	b.n	6982 <lv_draw_rect+0x16c6>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
    6e24:	f000 ffe2 	bl	7dec <lv_draw_aa_get_opa>
    6e28:	4604      	mov	r4, r0
    6e2a:	e75d      	b.n	6ce8 <lv_draw_rect+0x1a2c>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
    6e2c:	980a      	ldr	r0, [sp, #40]	; 0x28
    6e2e:	4642      	mov	r2, r8
    6e30:	f000 ffdc 	bl	7dec <lv_draw_aa_get_opa>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    6e34:	9b02      	ldr	r3, [sp, #8]
    6e36:	f003 0309 	and.w	r3, r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
    6e3a:	eba8 0000 	sub.w	r0, r8, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    6e3e:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
    6e40:	b2c4      	uxtb	r4, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    6e42:	d119      	bne.n	6e78 <lv_draw_rect+0x1bbc>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    6e44:	9b05      	ldr	r3, [sp, #20]
    6e46:	9400      	str	r4, [sp, #0]
    6e48:	1999      	adds	r1, r3, r6
    6e4a:	4439      	add	r1, r7
    6e4c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6e50:	465a      	mov	r2, fp
    6e52:	b209      	sxth	r1, r1
    6e54:	fa0f f08a 	sxth.w	r0, sl
    6e58:	f000 fc37 	bl	76ca <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
    6e5c:	9b05      	ldr	r3, [sp, #20]
    6e5e:	9400      	str	r4, [sp, #0]
    6e60:	1c59      	adds	r1, r3, #1
    6e62:	9b07      	ldr	r3, [sp, #28]
    6e64:	1998      	adds	r0, r3, r6
    6e66:	4429      	add	r1, r5
    6e68:	4438      	add	r0, r7
    6e6a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6e6e:	465a      	mov	r2, fp
    6e70:	b209      	sxth	r1, r1
    6e72:	b200      	sxth	r0, r0
    6e74:	f000 fc29 	bl	76ca <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
    6e78:	9b02      	ldr	r3, [sp, #8]
    6e7a:	f003 0305 	and.w	r3, r3, #5
    6e7e:	2b05      	cmp	r3, #5
    6e80:	d11b      	bne.n	6eba <lv_draw_rect+0x1bfe>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
    6e82:	9b05      	ldr	r3, [sp, #20]
    6e84:	9400      	str	r4, [sp, #0]
    6e86:	1c59      	adds	r1, r3, #1
    6e88:	9b03      	ldr	r3, [sp, #12]
    6e8a:	1b98      	subs	r0, r3, r6
    6e8c:	4429      	add	r1, r5
    6e8e:	1bc0      	subs	r0, r0, r7
    6e90:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6e94:	465a      	mov	r2, fp
    6e96:	b209      	sxth	r1, r1
    6e98:	b200      	sxth	r0, r0
    6e9a:	f000 fc16 	bl	76ca <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
    6e9e:	9b05      	ldr	r3, [sp, #20]
    6ea0:	9400      	str	r4, [sp, #0]
    6ea2:	1999      	adds	r1, r3, r6
    6ea4:	9b03      	ldr	r3, [sp, #12]
    6ea6:	1e58      	subs	r0, r3, #1
    6ea8:	4439      	add	r1, r7
    6eaa:	1b40      	subs	r0, r0, r5
    6eac:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6eb0:	465a      	mov	r2, fp
    6eb2:	b209      	sxth	r1, r1
    6eb4:	b200      	sxth	r0, r0
    6eb6:	f000 fc08 	bl	76ca <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
    6eba:	9b02      	ldr	r3, [sp, #8]
    6ebc:	f003 0306 	and.w	r3, r3, #6
    6ec0:	2b06      	cmp	r3, #6
    6ec2:	d11b      	bne.n	6efc <lv_draw_rect+0x1c40>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
    6ec4:	9b04      	ldr	r3, [sp, #16]
    6ec6:	9400      	str	r4, [sp, #0]
    6ec8:	1b99      	subs	r1, r3, r6
    6eca:	9b03      	ldr	r3, [sp, #12]
    6ecc:	1e58      	subs	r0, r3, #1
    6ece:	1bc9      	subs	r1, r1, r7
    6ed0:	1b40      	subs	r0, r0, r5
    6ed2:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6ed6:	465a      	mov	r2, fp
    6ed8:	b209      	sxth	r1, r1
    6eda:	b200      	sxth	r0, r0
    6edc:	f000 fbf5 	bl	76ca <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
    6ee0:	9b04      	ldr	r3, [sp, #16]
    6ee2:	9400      	str	r4, [sp, #0]
    6ee4:	1e59      	subs	r1, r3, #1
    6ee6:	9b03      	ldr	r3, [sp, #12]
    6ee8:	1b98      	subs	r0, r3, r6
    6eea:	1b49      	subs	r1, r1, r5
    6eec:	1bc0      	subs	r0, r0, r7
    6eee:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6ef2:	465a      	mov	r2, fp
    6ef4:	b209      	sxth	r1, r1
    6ef6:	b200      	sxth	r0, r0
    6ef8:	f000 fbe7 	bl	76ca <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
    6efc:	9b02      	ldr	r3, [sp, #8]
    6efe:	f003 030a 	and.w	r3, r3, #10
    6f02:	2b0a      	cmp	r3, #10
    6f04:	d119      	bne.n	6f3a <lv_draw_rect+0x1c7e>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
    6f06:	9b04      	ldr	r3, [sp, #16]
    6f08:	9400      	str	r4, [sp, #0]
    6f0a:	1e59      	subs	r1, r3, #1
    6f0c:	9b07      	ldr	r3, [sp, #28]
    6f0e:	1998      	adds	r0, r3, r6
    6f10:	1b49      	subs	r1, r1, r5
    6f12:	4438      	add	r0, r7
    6f14:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6f18:	465a      	mov	r2, fp
    6f1a:	b209      	sxth	r1, r1
    6f1c:	b200      	sxth	r0, r0
    6f1e:	f000 fbd4 	bl	76ca <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
    6f22:	9b04      	ldr	r3, [sp, #16]
    6f24:	9400      	str	r4, [sp, #0]
    6f26:	1b99      	subs	r1, r3, r6
    6f28:	1bc9      	subs	r1, r1, r7
    6f2a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6f2e:	465a      	mov	r2, fp
    6f30:	b209      	sxth	r1, r1
    6f32:	fa0f f08a 	sxth.w	r0, sl
    6f36:	f000 fbc8 	bl	76ca <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
    6f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6f3c:	3301      	adds	r3, #1
    6f3e:	9309      	str	r3, [sp, #36]	; 0x24
    6f40:	f7fe bfd3 	b.w	5eea <lv_draw_rect+0xc2e>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
    6f44:	9808      	ldr	r0, [sp, #32]
    6f46:	4642      	mov	r2, r8
    6f48:	f000 ff50 	bl	7dec <lv_draw_aa_get_opa>
    6f4c:	9b02      	ldr	r3, [sp, #8]
    6f4e:	f003 0309 	and.w	r3, r3, #9
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    6f52:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
    6f54:	4604      	mov	r4, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    6f56:	9309      	str	r3, [sp, #36]	; 0x24
    6f58:	d10a      	bne.n	6f70 <lv_draw_rect+0x1cb4>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
    6f5a:	9b05      	ldr	r3, [sp, #20]
    6f5c:	9000      	str	r0, [sp, #0]
    6f5e:	1959      	adds	r1, r3, r5
    6f60:	4431      	add	r1, r6
    6f62:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6f66:	465a      	mov	r2, fp
    6f68:	b209      	sxth	r1, r1
    6f6a:	4650      	mov	r0, sl
    6f6c:	f000 fbad 	bl	76ca <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
    6f70:	9b02      	ldr	r3, [sp, #8]
    6f72:	f003 0305 	and.w	r3, r3, #5
    6f76:	2b05      	cmp	r3, #5
    6f78:	930a      	str	r3, [sp, #40]	; 0x28
    6f7a:	d10e      	bne.n	6f9a <lv_draw_rect+0x1cde>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
    6f7c:	9b05      	ldr	r3, [sp, #20]
    6f7e:	9400      	str	r4, [sp, #0]
    6f80:	1e59      	subs	r1, r3, #1
    6f82:	9b06      	ldr	r3, [sp, #24]
    6f84:	4419      	add	r1, r3
    6f86:	9b03      	ldr	r3, [sp, #12]
    6f88:	1b58      	subs	r0, r3, r5
    6f8a:	1b80      	subs	r0, r0, r6
    6f8c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6f90:	465a      	mov	r2, fp
    6f92:	b209      	sxth	r1, r1
    6f94:	b200      	sxth	r0, r0
    6f96:	f000 fb98 	bl	76ca <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
    6f9a:	9b02      	ldr	r3, [sp, #8]
    6f9c:	f003 0306 	and.w	r3, r3, #6
    6fa0:	2b06      	cmp	r3, #6
    6fa2:	930c      	str	r3, [sp, #48]	; 0x30
    6fa4:	d10e      	bne.n	6fc4 <lv_draw_rect+0x1d08>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
    6fa6:	9b04      	ldr	r3, [sp, #16]
    6fa8:	9400      	str	r4, [sp, #0]
    6faa:	1b59      	subs	r1, r3, r5
    6fac:	9b03      	ldr	r3, [sp, #12]
    6fae:	1c58      	adds	r0, r3, #1
    6fb0:	9b06      	ldr	r3, [sp, #24]
    6fb2:	1b89      	subs	r1, r1, r6
    6fb4:	1ac0      	subs	r0, r0, r3
    6fb6:	465a      	mov	r2, fp
    6fb8:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6fbc:	b209      	sxth	r1, r1
    6fbe:	b200      	sxth	r0, r0
    6fc0:	f000 fb83 	bl	76ca <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
    6fc4:	9b02      	ldr	r3, [sp, #8]
    6fc6:	f003 030a 	and.w	r3, r3, #10
    6fca:	2b0a      	cmp	r3, #10
    6fcc:	930d      	str	r3, [sp, #52]	; 0x34
    6fce:	d10e      	bne.n	6fee <lv_draw_rect+0x1d32>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
    6fd0:	9b04      	ldr	r3, [sp, #16]
    6fd2:	9400      	str	r4, [sp, #0]
    6fd4:	1c59      	adds	r1, r3, #1
    6fd6:	9b06      	ldr	r3, [sp, #24]
    6fd8:	1ac9      	subs	r1, r1, r3
    6fda:	9b07      	ldr	r3, [sp, #28]
    6fdc:	1958      	adds	r0, r3, r5
    6fde:	4430      	add	r0, r6
    6fe0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6fe4:	465a      	mov	r2, fp
    6fe6:	b209      	sxth	r1, r1
    6fe8:	b200      	sxth	r0, r0
    6fea:	f000 fb6e 	bl	76ca <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
    6fee:	9b06      	ldr	r3, [sp, #24]
    6ff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6ff2:	3b01      	subs	r3, #1
    6ff4:	443a      	add	r2, r7
    6ff6:	4293      	cmp	r3, r2
    6ff8:	d043      	beq.n	7082 <lv_draw_rect+0x1dc6>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
    6ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6ffc:	2b09      	cmp	r3, #9
    6ffe:	d10e      	bne.n	701e <lv_draw_rect+0x1d62>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
    7000:	9b05      	ldr	r3, [sp, #20]
    7002:	9400      	str	r4, [sp, #0]
    7004:	1e59      	subs	r1, r3, #1
    7006:	9b06      	ldr	r3, [sp, #24]
    7008:	4419      	add	r1, r3
    700a:	9b07      	ldr	r3, [sp, #28]
    700c:	1958      	adds	r0, r3, r5
    700e:	4430      	add	r0, r6
    7010:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    7014:	465a      	mov	r2, fp
    7016:	b209      	sxth	r1, r1
    7018:	b200      	sxth	r0, r0
    701a:	f000 fb56 	bl	76ca <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
    701e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7020:	2b05      	cmp	r3, #5
    7022:	d10e      	bne.n	7042 <lv_draw_rect+0x1d86>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
    7024:	9b05      	ldr	r3, [sp, #20]
    7026:	9400      	str	r4, [sp, #0]
    7028:	1959      	adds	r1, r3, r5
    702a:	9b03      	ldr	r3, [sp, #12]
    702c:	1c58      	adds	r0, r3, #1
    702e:	9b06      	ldr	r3, [sp, #24]
    7030:	4431      	add	r1, r6
    7032:	1ac0      	subs	r0, r0, r3
    7034:	465a      	mov	r2, fp
    7036:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    703a:	b209      	sxth	r1, r1
    703c:	b200      	sxth	r0, r0
    703e:	f000 fb44 	bl	76ca <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
    7042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7044:	2b06      	cmp	r3, #6
    7046:	d10e      	bne.n	7066 <lv_draw_rect+0x1daa>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
    7048:	9b04      	ldr	r3, [sp, #16]
    704a:	9400      	str	r4, [sp, #0]
    704c:	1c59      	adds	r1, r3, #1
    704e:	9b06      	ldr	r3, [sp, #24]
    7050:	1ac9      	subs	r1, r1, r3
    7052:	9b03      	ldr	r3, [sp, #12]
    7054:	1b58      	subs	r0, r3, r5
    7056:	1b80      	subs	r0, r0, r6
    7058:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    705c:	465a      	mov	r2, fp
    705e:	b209      	sxth	r1, r1
    7060:	b200      	sxth	r0, r0
    7062:	f000 fb32 	bl	76ca <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
    7066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7068:	2b0a      	cmp	r3, #10
    706a:	d10a      	bne.n	7082 <lv_draw_rect+0x1dc6>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
    706c:	9b04      	ldr	r3, [sp, #16]
    706e:	9400      	str	r4, [sp, #0]
    7070:	1b59      	subs	r1, r3, r5
    7072:	1b89      	subs	r1, r1, r6
    7074:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    7078:	465a      	mov	r2, fp
    707a:	b209      	sxth	r1, r1
    707c:	4650      	mov	r0, sl
    707e:	f000 fb24 	bl	76ca <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
    7082:	3701      	adds	r7, #1
    7084:	f7fe bfa0 	b.w	5fc8 <lv_draw_rect+0xd0c>

00007088 <tri_draw_flat>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

void tri_draw_flat(const lv_point_t * points, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa)
{
    7088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    708c:	ed2d 8b02 	vpush	{d8}
    7090:	b099      	sub	sp, #100	; 0x64
    7092:	ee08 3a10 	vmov	s16, r3
    7096:	9210      	str	r2, [sp, #64]	; 0x40
    /*Return if the points are out of the mask*/
    if(points[0].x < mask->x1 && points[1].x < mask->x1 && points[2].x < mask->x1) {
    7098:	f9b1 3000 	ldrsh.w	r3, [r1]
    709c:	f9b0 2000 	ldrsh.w	r2, [r0]
    70a0:	429a      	cmp	r2, r3
{
    70a2:	468a      	mov	sl, r1
    if(points[0].x < mask->x1 && points[1].x < mask->x1 && points[2].x < mask->x1) {
    70a4:	da08      	bge.n	70b8 <tri_draw_flat+0x30>
    70a6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    70aa:	4299      	cmp	r1, r3
    70ac:	da04      	bge.n	70b8 <tri_draw_flat+0x30>
    70ae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
    70b2:	4299      	cmp	r1, r3
    70b4:	f2c0 8151 	blt.w	735a <tri_draw_flat+0x2d2>
        return;
    }

    if(points[0].x > mask->x2 && points[1].x > mask->x2 && points[2].x > mask->x2) {
    70b8:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    70bc:	429a      	cmp	r2, r3
    70be:	dd08      	ble.n	70d2 <tri_draw_flat+0x4a>
    70c0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    70c4:	429a      	cmp	r2, r3
    70c6:	dd04      	ble.n	70d2 <tri_draw_flat+0x4a>
    70c8:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
    70cc:	429a      	cmp	r2, r3
    70ce:	f300 8144 	bgt.w	735a <tri_draw_flat+0x2d2>
        return;
    }

    if(points[0].y < mask->y1 && points[1].y < mask->y1 && points[2].y < mask->y1) {
    70d2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    70d6:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    70da:	429a      	cmp	r2, r3
    70dc:	da08      	bge.n	70f0 <tri_draw_flat+0x68>
    70de:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    70e2:	4299      	cmp	r1, r3
    70e4:	da04      	bge.n	70f0 <tri_draw_flat+0x68>
    70e6:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
    70ea:	4299      	cmp	r1, r3
    70ec:	f2c0 8135 	blt.w	735a <tri_draw_flat+0x2d2>
        return;
    }

    if(points[0].y > mask->y2 && points[1].y > mask->y2 && points[2].y > mask->y2) {
    70f0:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    70f4:	429a      	cmp	r2, r3
    70f6:	dd08      	ble.n	710a <tri_draw_flat+0x82>
    70f8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    70fc:	429a      	cmp	r2, r3
    70fe:	dd04      	ble.n	710a <tri_draw_flat+0x82>
    7100:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    7104:	429a      	cmp	r2, r3
    7106:	f300 8128 	bgt.w	735a <tri_draw_flat+0x2d2>
        return;
    }

    lv_point_t tri[3];

    memcpy(tri, points, sizeof(tri));
    710a:	4601      	mov	r1, r0
    710c:	220c      	movs	r2, #12
    710e:	a815      	add	r0, sp, #84	; 0x54
    7110:	f00d f8d0 	bl	142b4 <memcpy>

    /*Sort the vertices according to their y coordinate (0: y max, 1: y mid, 2:y min)*/
    if(tri[1].y < tri[0].y) point_swap(&tri[1], &tri[0]);
    7114:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
    7118:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
    711c:	429a      	cmp	r2, r3
{
    lv_point_t tmp;
    tmp.x = p1->x;
    tmp.y = p1->y;

    p1->x = p2->x;
    711e:	bfbc      	itt	lt
    7120:	e9dd 2315 	ldrdlt	r2, r3, [sp, #84]	; 0x54
    p1->y = p2->y;

    p2->x = tmp.x;
    7124:	e9cd 3215 	strdlt	r3, r2, [sp, #84]	; 0x54
    if(tri[2].y < tri[1].y) point_swap(&tri[2], &tri[1]);
    7128:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    712c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    7130:	429a      	cmp	r2, r3
    p1->x = p2->x;
    7132:	bfbc      	itt	lt
    7134:	e9dd 2316 	ldrdlt	r2, r3, [sp, #88]	; 0x58
    p2->x = tmp.x;
    7138:	e9cd 3216 	strdlt	r3, r2, [sp, #88]	; 0x58
    if(tri[1].y < tri[0].y) point_swap(&tri[1], &tri[0]);
    713c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
    7140:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
    7144:	429a      	cmp	r2, r3
    p1->x = p2->x;
    7146:	bfbc      	itt	lt
    7148:	e9dd 2315 	ldrdlt	r2, r3, [sp, #84]	; 0x54
    p2->x = tmp.x;
    714c:	e9cd 3215 	strdlt	r3, r2, [sp, #84]	; 0x54
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
    7150:	f9bd 6054 	ldrsh.w	r6, [sp, #84]	; 0x54
    7154:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
    7158:	f9bd 9056 	ldrsh.w	r9, [sp, #86]	; 0x56
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    715c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
    7160:	1af7      	subs	r7, r6, r3
    7162:	2f00      	cmp	r7, #0
    7164:	bfb8      	it	lt
    7166:	427f      	neglt	r7, r7
    lv_coord_t sx1  = tri[0].x < tri[1].x ? 1 : -1;
    7168:	429e      	cmp	r6, r3
    716a:	bfb4      	ite	lt
    716c:	2301      	movlt	r3, #1
    716e:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    7172:	9303      	str	r3, [sp, #12]
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
    7174:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    7178:	eba9 0803 	sub.w	r8, r9, r3
    717c:	f1b8 0f00 	cmp.w	r8, #0
    7180:	bfb8      	it	lt
    7182:	f1c8 0800 	rsblt	r8, r8, #0
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
    7186:	b23f      	sxth	r7, r7
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
    7188:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t sy1  = tri[0].y < tri[1].y ? 1 : -1;
    718c:	4599      	cmp	r9, r3
    718e:	bfb4      	ite	lt
    7190:	2301      	movlt	r3, #1
    7192:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    lv_coord_t err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    7196:	4547      	cmp	r7, r8
    7198:	bfdc      	itt	le
    719a:	eb08 75d8 	addle.w	r5, r8, r8, lsr #31
    719e:	106d      	asrle	r5, r5, #1
    lv_coord_t sy1  = tri[0].y < tri[1].y ? 1 : -1;
    71a0:	9304      	str	r3, [sp, #16]
    lv_coord_t err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    71a2:	bfc8      	it	gt
    71a4:	eb07 75d7 	addgt.w	r5, r7, r7, lsr #31
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    71a8:	eba6 0302 	sub.w	r3, r6, r2
    lv_coord_t err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    71ac:	bfd6      	itet	le
    71ae:	426d      	negle	r5, r5
    71b0:	106d      	asrgt	r5, r5, #1
    71b2:	b22d      	sxthle	r5, r5
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    71b4:	2b00      	cmp	r3, #0
    71b6:	bfb8      	it	lt
    71b8:	425b      	neglt	r3, r3
    lv_coord_t sx2  = tri[0].x < tri[2].x ? 1 : -1;
    71ba:	4296      	cmp	r6, r2
    71bc:	bfb4      	ite	lt
    71be:	2201      	movlt	r2, #1
    71c0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    71c4:	920c      	str	r2, [sp, #48]	; 0x30
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
    71c6:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    71ca:	9308      	str	r3, [sp, #32]
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
    71cc:	eba9 0102 	sub.w	r1, r9, r2
    71d0:	2900      	cmp	r1, #0
    71d2:	bfb8      	it	lt
    71d4:	4249      	neglt	r1, r1
    71d6:	9109      	str	r1, [sp, #36]	; 0x24
    71d8:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    71dc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
    71e0:	9105      	str	r1, [sp, #20]
    lv_coord_t sy2  = tri[0].y < tri[2].y ? 1 : -1;
    71e2:	4591      	cmp	r9, r2
    71e4:	bfb4      	ite	lt
    71e6:	2201      	movlt	r2, #1
    71e8:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
    71ec:	428f      	cmp	r7, r1
    lv_coord_t sy2  = tri[0].y < tri[2].y ? 1 : -1;
    71ee:	920d      	str	r2, [sp, #52]	; 0x34
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
    71f0:	460a      	mov	r2, r1
    71f2:	bfd8      	it	le
    71f4:	9a05      	ldrle	r2, [sp, #20]
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
    71f6:	f8cd 9004 	str.w	r9, [sp, #4]
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
    71fa:	bfdb      	ittet	le
    71fc:	eb02 74d2 	addle.w	r4, r2, r2, lsr #31
    7200:	1064      	asrle	r4, r4, #1
    7202:	eb03 74d3 	addgt.w	r4, r3, r3, lsr #31
    7206:	4264      	negle	r4, r4
            if(err_tmp2 > -dx2) {
    7208:	f1c3 0300 	rsb	r3, r3, #0
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
    720c:	bfcc      	ite	gt
    720e:	1064      	asrgt	r4, r4, #1
    7210:	b224      	sxthle	r4, r4
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
    7212:	46b3      	mov	fp, r6
            if(err_tmp2 > -dx2) {
    7214:	9311      	str	r3, [sp, #68]	; 0x44
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2) + 1;
    7216:	45b3      	cmp	fp, r6
    7218:	465b      	mov	r3, fp
    721a:	bfa8      	it	ge
    721c:	4633      	movge	r3, r6
    721e:	3301      	adds	r3, #1
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
    7220:	45b3      	cmp	fp, r6
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2) + 1;
    7222:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
    7226:	465b      	mov	r3, fp
    7228:	bfb8      	it	lt
    722a:	4633      	movlt	r3, r6
    722c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2) - 1;
    7230:	9b01      	ldr	r3, [sp, #4]
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
    7232:	9a10      	ldr	r2, [sp, #64]	; 0x40
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2) - 1;
    7234:	454b      	cmp	r3, r9
    7236:	bfa8      	it	ge
    7238:	464b      	movge	r3, r9
    723a:	3b01      	subs	r3, #1
    723c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2) - 1;
    7240:	9b01      	ldr	r3, [sp, #4]
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
    7242:	8852      	ldrh	r2, [r2, #2]
        draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2) - 1;
    7244:	454b      	cmp	r3, r9
    7246:	bfb8      	it	lt
    7248:	464b      	movlt	r3, r9
    724a:	3b01      	subs	r3, #1
    724c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
    7250:	4651      	mov	r1, sl
    7252:	ee18 3a10 	vmov	r3, s16
    7256:	a813      	add	r0, sp, #76	; 0x4c
    7258:	f000 fa84 	bl	7764 <lv_draw_fill>
            if(edge1.x == tri[1].x && edge1.y == tri[1].y) {
    725c:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
            } else if(edge1.x == tri[2].x && edge1.y == tri[2].y) {
    7260:	f9bd e05c 	ldrsh.w	lr, [sp, #92]	; 0x5c
    7264:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
    7268:	9302      	str	r3, [sp, #8]
                dx1  = LV_MATH_ABS(tri[1].x - tri[2].x);
    726a:	eba0 020e 	sub.w	r2, r0, lr
    726e:	2a00      	cmp	r2, #0
    7270:	bfb8      	it	lt
    7272:	4252      	neglt	r2, r2
    7274:	b213      	sxth	r3, r2
    7276:	9306      	str	r3, [sp, #24]
    7278:	4570      	cmp	r0, lr
    727a:	bfb4      	ite	lt
    727c:	2301      	movlt	r3, #1
    727e:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
            if(edge1.x == tri[1].x && edge1.y == tri[1].y) {
    7282:	f9bd c05a 	ldrsh.w	ip, [sp, #90]	; 0x5a
    7286:	930a      	str	r3, [sp, #40]	; 0x28
                dy1  = LV_MATH_ABS(tri[1].y - tri[2].y);
    7288:	9b02      	ldr	r3, [sp, #8]
    728a:	ebac 0303 	sub.w	r3, ip, r3
    728e:	2b00      	cmp	r3, #0
    7290:	bfb8      	it	lt
    7292:	425b      	neglt	r3, r3
    7294:	b219      	sxth	r1, r3
    7296:	9107      	str	r1, [sp, #28]
    7298:	9902      	ldr	r1, [sp, #8]
    729a:	458c      	cmp	ip, r1
    729c:	bfb4      	ite	lt
    729e:	2101      	movlt	r1, #1
    72a0:	f04f 31ff 	movge.w	r1, #4294967295	; 0xffffffff
    72a4:	910b      	str	r1, [sp, #44]	; 0x2c
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    72a6:	f3c3 31c0 	ubfx	r1, r3, #15, #1
    72aa:	fa01 f383 	sxtah	r3, r1, r3
    72ae:	105b      	asrs	r3, r3, #1
    72b0:	425b      	negs	r3, r3
    72b2:	b21b      	sxth	r3, r3
    72b4:	930e      	str	r3, [sp, #56]	; 0x38
    72b6:	f3c2 33c0 	ubfx	r3, r2, #15, #1
    72ba:	fa03 f282 	sxtah	r2, r3, r2
    72be:	1053      	asrs	r3, r2, #1
    72c0:	930f      	str	r3, [sp, #60]	; 0x3c
    72c2:	464b      	mov	r3, r9
            if(edge1.x == tri[1].x && edge1.y == tri[1].y) {
    72c4:	4286      	cmp	r6, r0
    72c6:	d143      	bne.n	7350 <tri_draw_flat+0x2c8>
    72c8:	4563      	cmp	r3, ip
    72ca:	d141      	bne.n	7350 <tri_draw_flat+0x2c8>
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    72cc:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    72d0:	428a      	cmp	r2, r1
    72d2:	dd47      	ble.n	7364 <tri_draw_flat+0x2dc>
                sy1  = tri[1].y < tri[2].y ? 1 : -1;
    72d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    72d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
                sy1  = tri[1].y < tri[2].y ? 1 : -1;
    72d8:	9204      	str	r2, [sp, #16]
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    72da:	4688      	mov	r8, r1
                sx1  = tri[1].x < tri[2].x ? 1 : -1;
    72dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    72de:	9f06      	ldr	r7, [sp, #24]
    72e0:	9203      	str	r2, [sp, #12]
            if(err_tmp1 > -dx1) {
    72e2:	427a      	negs	r2, r7
    72e4:	4295      	cmp	r5, r2
                edge1.x += sx1;
    72e6:	bfc1      	itttt	gt
    72e8:	9903      	ldrgt	r1, [sp, #12]
                err1 -= dy1;
    72ea:	eba5 0208 	subgt.w	r2, r5, r8
                edge1.x += sx1;
    72ee:	1876      	addgt	r6, r6, r1
                err1 -= dy1;
    72f0:	b212      	sxthgt	r2, r2
                edge1.x += sx1;
    72f2:	bfd4      	ite	le
    72f4:	462a      	movle	r2, r5
    72f6:	b236      	sxthgt	r6, r6
            if(err_tmp1 < dy1) {
    72f8:	45a8      	cmp	r8, r5
                err1 += dx1;
    72fa:	bfc1      	itttt	gt
    72fc:	19d5      	addgt	r5, r2, r7
                edge1.y += sy1;
    72fe:	9a04      	ldrgt	r2, [sp, #16]
    7300:	189b      	addgt	r3, r3, r2
    7302:	b21b      	sxthgt	r3, r3
                err1 += dx1;
    7304:	bfcc      	ite	gt
    7306:	b22d      	sxthgt	r5, r5
                edge1.y += sy1;
    7308:	4615      	movle	r5, r2
        } while(edge1.y == y1_tmp);
    730a:	454b      	cmp	r3, r9
    730c:	d0da      	beq.n	72c4 <tri_draw_flat+0x23c>
    730e:	9a01      	ldr	r2, [sp, #4]
            if(edge2.x == tri[2].x && edge2.y == tri[2].y) return;
    7310:	45f3      	cmp	fp, lr
    7312:	4620      	mov	r0, r4
    7314:	d102      	bne.n	731c <tri_draw_flat+0x294>
    7316:	9902      	ldr	r1, [sp, #8]
    7318:	4291      	cmp	r1, r2
    731a:	d01e      	beq.n	735a <tri_draw_flat+0x2d2>
            if(err_tmp2 > -dx2) {
    731c:	9911      	ldr	r1, [sp, #68]	; 0x44
    731e:	428c      	cmp	r4, r1
    7320:	dd07      	ble.n	7332 <tri_draw_flat+0x2aa>
                err2 -= dy2;
    7322:	9909      	ldr	r1, [sp, #36]	; 0x24
    7324:	1a64      	subs	r4, r4, r1
                edge2.x += sx2;
    7326:	990c      	ldr	r1, [sp, #48]	; 0x30
    7328:	eb0b 0c01 	add.w	ip, fp, r1
                err2 -= dy2;
    732c:	b224      	sxth	r4, r4
                edge2.x += sx2;
    732e:	fa0f fb8c 	sxth.w	fp, ip
            if(err_tmp2 < dy2) {
    7332:	9905      	ldr	r1, [sp, #20]
    7334:	4288      	cmp	r0, r1
    7336:	da05      	bge.n	7344 <tri_draw_flat+0x2bc>
                err2 += dx2;
    7338:	9908      	ldr	r1, [sp, #32]
    733a:	440c      	add	r4, r1
                edge2.y += sy2;
    733c:	990d      	ldr	r1, [sp, #52]	; 0x34
    733e:	440a      	add	r2, r1
                err2 += dx2;
    7340:	b224      	sxth	r4, r4
                edge2.y += sy2;
    7342:	b212      	sxth	r2, r2
        } while(edge2.y == y2_tmp);
    7344:	9901      	ldr	r1, [sp, #4]
    7346:	4291      	cmp	r1, r2
    7348:	d0e2      	beq.n	7310 <tri_draw_flat+0x288>
    734a:	9201      	str	r2, [sp, #4]
    734c:	4699      	mov	r9, r3
    734e:	e762      	b.n	7216 <tri_draw_flat+0x18e>
            } else if(edge1.x == tri[2].x && edge1.y == tri[2].y) {
    7350:	4576      	cmp	r6, lr
    7352:	d1c6      	bne.n	72e2 <tri_draw_flat+0x25a>
    7354:	9a02      	ldr	r2, [sp, #8]
    7356:	4293      	cmp	r3, r2
    7358:	d1c3      	bne.n	72e2 <tri_draw_flat+0x25a>
}
    735a:	b019      	add	sp, #100	; 0x64
    735c:	ecbd 8b02 	vpop	{d8}
    7360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                sy1  = tri[1].y < tri[2].y ? 1 : -1;
    7364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    7366:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7368:	f8dd 801c 	ldr.w	r8, [sp, #28]
                sy1  = tri[1].y < tri[2].y ? 1 : -1;
    736c:	9204      	str	r2, [sp, #16]
    736e:	e7b5      	b.n	72dc <tri_draw_flat+0x254>

00007370 <tri_draw_tall>:
{
    7370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7374:	ed2d 8b02 	vpush	{d8}
    7378:	b093      	sub	sp, #76	; 0x4c
    737a:	ee08 1a10 	vmov	s16, r1
    737e:	9209      	str	r2, [sp, #36]	; 0x24
    memcpy(tri, points, sizeof(tri));
    7380:	4601      	mov	r1, r0
    7382:	220c      	movs	r2, #12
    7384:	a80f      	add	r0, sp, #60	; 0x3c
{
    7386:	ee08 3a90 	vmov	s17, r3
    memcpy(tri, points, sizeof(tri));
    738a:	f00c ff93 	bl	142b4 <memcpy>
    if(tri[1].x < tri[0].x) point_swap(&tri[1], &tri[0]);
    738e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    7392:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    7396:	429a      	cmp	r2, r3
    p1->x = p2->x;
    7398:	bfbc      	itt	lt
    739a:	e9dd 230f 	ldrdlt	r2, r3, [sp, #60]	; 0x3c
    p2->x = tmp.x;
    739e:	e9cd 320f 	strdlt	r3, r2, [sp, #60]	; 0x3c
    if(tri[2].x < tri[1].x) point_swap(&tri[2], &tri[1]);
    73a2:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
    73a6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    73aa:	429a      	cmp	r2, r3
    p1->x = p2->x;
    73ac:	bfbc      	itt	lt
    73ae:	e9dd 2310 	ldrdlt	r2, r3, [sp, #64]	; 0x40
    p2->x = tmp.x;
    73b2:	e9cd 3210 	strdlt	r3, r2, [sp, #64]	; 0x40
    if(tri[1].x < tri[0].x) point_swap(&tri[1], &tri[0]);
    73b6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    73ba:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    73be:	429a      	cmp	r2, r3
    p1->x = p2->x;
    73c0:	bfbc      	itt	lt
    73c2:	e9dd 230f 	ldrdlt	r2, r3, [sp, #60]	; 0x3c
    p2->x = tmp.x;
    73c6:	e9cd 320f 	strdlt	r3, r2, [sp, #60]	; 0x3c
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
    73ca:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
    73ce:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
    73d2:	f9bd 703e 	ldrsh.w	r7, [sp, #62]	; 0x3e
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    73d6:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
    73da:	eba9 0803 	sub.w	r8, r9, r3
    73de:	f1b8 0f00 	cmp.w	r8, #0
    73e2:	bfb8      	it	lt
    73e4:	f1c8 0800 	rsblt	r8, r8, #0
    lv_coord_t sx1  = tri[0].x < tri[1].x ? 1 : -1;
    73e8:	4599      	cmp	r9, r3
    73ea:	bfb4      	ite	lt
    73ec:	2301      	movlt	r3, #1
    73ee:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    73f2:	9304      	str	r3, [sp, #16]
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
    73f4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
    73f8:	1afe      	subs	r6, r7, r3
    73fa:	2e00      	cmp	r6, #0
    73fc:	bfb8      	it	lt
    73fe:	4276      	neglt	r6, r6
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
    7400:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
    7404:	b236      	sxth	r6, r6
    lv_coord_t sy1  = tri[0].y < tri[1].y ? 1 : -1;
    7406:	429f      	cmp	r7, r3
    7408:	bfb4      	ite	lt
    740a:	2301      	movlt	r3, #1
    740c:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    lv_coord_t err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    7410:	45b0      	cmp	r8, r6
    7412:	bfdc      	itt	le
    7414:	eb06 74d6 	addle.w	r4, r6, r6, lsr #31
    7418:	1064      	asrle	r4, r4, #1
    lv_coord_t sy1  = tri[0].y < tri[1].y ? 1 : -1;
    741a:	9305      	str	r3, [sp, #20]
    lv_coord_t err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    741c:	bfc8      	it	gt
    741e:	eb08 74d8 	addgt.w	r4, r8, r8, lsr #31
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    7422:	eba9 0302 	sub.w	r3, r9, r2
    lv_coord_t err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    7426:	bfd6      	itet	le
    7428:	4264      	negle	r4, r4
    742a:	1064      	asrgt	r4, r4, #1
    742c:	b224      	sxthle	r4, r4
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    742e:	2b00      	cmp	r3, #0
    7430:	bfb8      	it	lt
    7432:	425b      	neglt	r3, r3
    lv_coord_t sx2  = tri[0].x < tri[2].x ? 1 : -1;
    7434:	4591      	cmp	r9, r2
    7436:	bfb4      	ite	lt
    7438:	2201      	movlt	r2, #1
    743a:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    743e:	9207      	str	r2, [sp, #28]
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
    7440:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    7444:	9302      	str	r3, [sp, #8]
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
    7446:	1ab9      	subs	r1, r7, r2
    7448:	2900      	cmp	r1, #0
    744a:	bfb8      	it	lt
    744c:	4249      	neglt	r1, r1
    744e:	9103      	str	r1, [sp, #12]
    7450:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
    lv_coord_t dx2  = LV_MATH_ABS(tri[0].x - tri[2].x);
    7454:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
    lv_coord_t dy2  = LV_MATH_ABS(tri[0].y - tri[2].y);
    7458:	9101      	str	r1, [sp, #4]
    lv_coord_t sy2  = tri[0].y < tri[2].y ? 1 : -1;
    745a:	4297      	cmp	r7, r2
    745c:	bfb4      	ite	lt
    745e:	2201      	movlt	r2, #1
    7460:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
    7464:	4588      	cmp	r8, r1
    lv_coord_t sy2  = tri[0].y < tri[2].y ? 1 : -1;
    7466:	9208      	str	r2, [sp, #32]
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
    7468:	460a      	mov	r2, r1
    746a:	bfdd      	ittte	le
    746c:	9a01      	ldrle	r2, [sp, #4]
    746e:	eb02 75d2 	addle.w	r5, r2, r2, lsr #31
    7472:	106d      	asrle	r5, r5, #1
    7474:	eb03 75d3 	addgt.w	r5, r3, r3, lsr #31
    7478:	bfd8      	it	le
    747a:	426d      	negle	r5, r5
            if(err_tmp2 > -dx2) {
    747c:	f1c3 0300 	rsb	r3, r3, #0
    lv_coord_t err2 = (dx1 > dy2 ? dx2 : -dy2) / 2;
    7480:	bfcc      	ite	gt
    7482:	106d      	asrgt	r5, r5, #1
    7484:	b22d      	sxthle	r5, r5
    lv_coord_t dy1  = LV_MATH_ABS(tri[0].y - tri[1].y);
    7486:	46bb      	mov	fp, r7
    lv_coord_t dx1  = LV_MATH_ABS(tri[0].x - tri[1].x);
    7488:	46ca      	mov	sl, r9
            if(err_tmp2 > -dx2) {
    748a:	930b      	str	r3, [sp, #44]	; 0x2c
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
    748c:	45d1      	cmp	r9, sl
    748e:	464b      	mov	r3, r9
    7490:	bfa8      	it	ge
    7492:	4653      	movge	r3, sl
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
    7494:	45d1      	cmp	r9, sl
        draw_area.x1 = LV_MATH_MIN(act_area.x1, act_area.x2);
    7496:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
    749a:	464b      	mov	r3, r9
    749c:	bfb8      	it	lt
    749e:	4653      	movlt	r3, sl
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
    74a0:	455f      	cmp	r7, fp
        draw_area.x2 = LV_MATH_MAX(act_area.x1, act_area.x2);
    74a2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
    74a6:	463b      	mov	r3, r7
    74a8:	bfa8      	it	ge
    74aa:	465b      	movge	r3, fp
        draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2) - 1;
    74ac:	455f      	cmp	r7, fp
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
    74ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
        draw_area.y1 = LV_MATH_MIN(act_area.y1, act_area.y2);
    74b0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2) - 1;
    74b4:	463b      	mov	r3, r7
    74b6:	bfb8      	it	lt
    74b8:	465b      	movlt	r3, fp
    74ba:	3b01      	subs	r3, #1
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
    74bc:	8852      	ldrh	r2, [r2, #2]
        draw_area.y2 = LV_MATH_MAX(act_area.y1, act_area.y2) - 1;
    74be:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        lv_draw_fill(&draw_area, mask, style->body.main_color, opa);
    74c2:	ee18 1a10 	vmov	r1, s16
    74c6:	ee18 3a90 	vmov	r3, s17
    74ca:	a80d      	add	r0, sp, #52	; 0x34
    74cc:	f000 f94a 	bl	7764 <lv_draw_fill>
            if(edge1.y == tri[1].y && edge1.x == tri[1].x) {
    74d0:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
            } else if(edge1.y == tri[2].y && edge1.x == tri[2].x) {
    74d4:	f9bd 0044 	ldrsh.w	r0, [sp, #68]	; 0x44
    74d8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
            if(edge1.y == tri[1].y && edge1.x == tri[1].x) {
    74dc:	f9bd c042 	ldrsh.w	ip, [sp, #66]	; 0x42
            } else if(edge1.y == tri[2].y && edge1.x == tri[2].x) {
    74e0:	9300      	str	r3, [sp, #0]
                dx1  = LV_MATH_ABS(tri[1].x - tri[2].x);
    74e2:	ebae 0200 	sub.w	r2, lr, r0
    74e6:	2a00      	cmp	r2, #0
    74e8:	bfb8      	it	lt
    74ea:	4252      	neglt	r2, r2
    74ec:	b211      	sxth	r1, r2
    74ee:	9106      	str	r1, [sp, #24]
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    74f0:	f3c2 31c0 	ubfx	r1, r2, #15, #1
    74f4:	fa01 f282 	sxtah	r2, r1, r2
    74f8:	1052      	asrs	r2, r2, #1
                dy1  = LV_MATH_ABS(tri[1].y - tri[2].y);
    74fa:	464b      	mov	r3, r9
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    74fc:	920a      	str	r2, [sp, #40]	; 0x28
            if(edge1.y == tri[1].y && edge1.x == tri[1].x) {
    74fe:	45bc      	cmp	ip, r7
    7500:	d156      	bne.n	75b0 <tri_draw_tall+0x240>
    7502:	459e      	cmp	lr, r3
    7504:	d154      	bne.n	75b0 <tri_draw_tall+0x240>
                sx1  = tri[1].x < tri[2].x ? 1 : -1;
    7506:	4570      	cmp	r0, lr
    7508:	bfd4      	ite	le
    750a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
    750e:	2201      	movgt	r2, #1
    7510:	9204      	str	r2, [sp, #16]
                dy1  = LV_MATH_ABS(tri[1].y - tri[2].y);
    7512:	9a00      	ldr	r2, [sp, #0]
                dx1  = LV_MATH_ABS(tri[1].x - tri[2].x);
    7514:	f8dd 8018 	ldr.w	r8, [sp, #24]
                dy1  = LV_MATH_ABS(tri[1].y - tri[2].y);
    7518:	ebac 0602 	sub.w	r6, ip, r2
    751c:	2e00      	cmp	r6, #0
    751e:	bfb8      	it	lt
    7520:	4276      	neglt	r6, r6
    7522:	b236      	sxth	r6, r6
                sy1  = tri[1].y < tri[2].y ? 1 : -1;
    7524:	4562      	cmp	r2, ip
    7526:	bfd4      	ite	le
    7528:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
    752c:	2201      	movgt	r2, #1
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    752e:	45b0      	cmp	r8, r6
    7530:	bfdd      	ittte	le
    7532:	eb06 74d6 	addle.w	r4, r6, r6, lsr #31
    7536:	1064      	asrle	r4, r4, #1
    7538:	4264      	negle	r4, r4
    753a:	9c0a      	ldrgt	r4, [sp, #40]	; 0x28
                sy1  = tri[1].y < tri[2].y ? 1 : -1;
    753c:	9205      	str	r2, [sp, #20]
                err1 = (dx1 > dy1 ? dx1 : -dy1) / 2;
    753e:	bfd8      	it	le
    7540:	b224      	sxthle	r4, r4
            if(err_tmp1 > -dx1) {
    7542:	f1c8 0200 	rsb	r2, r8, #0
    7546:	4294      	cmp	r4, r2
                edge1.x += sx1;
    7548:	bfc1      	itttt	gt
    754a:	9904      	ldrgt	r1, [sp, #16]
                err1 -= dy1;
    754c:	1ba2      	subgt	r2, r4, r6
                edge1.x += sx1;
    754e:	185b      	addgt	r3, r3, r1
                err1 -= dy1;
    7550:	b212      	sxthgt	r2, r2
                edge1.x += sx1;
    7552:	bfcc      	ite	gt
    7554:	b21b      	sxthgt	r3, r3
    7556:	4622      	movle	r2, r4
            if(err_tmp1 < dy1) {
    7558:	42a6      	cmp	r6, r4
                err1 += dx1;
    755a:	bfc1      	itttt	gt
    755c:	eb02 0408 	addgt.w	r4, r2, r8
                edge1.y += sy1;
    7560:	9a05      	ldrgt	r2, [sp, #20]
    7562:	18bf      	addgt	r7, r7, r2
                err1 += dx1;
    7564:	b224      	sxthgt	r4, r4
                edge1.y += sy1;
    7566:	bfcc      	ite	gt
    7568:	b23f      	sxthgt	r7, r7
    756a:	4614      	movle	r4, r2
        } while(edge1.x == x1_tmp);
    756c:	4599      	cmp	r9, r3
    756e:	d0c6      	beq.n	74fe <tri_draw_tall+0x18e>
    7570:	4652      	mov	r2, sl
            if(edge2.y == tri[2].y && edge2.x == tri[2].x) {
    7572:	9900      	ldr	r1, [sp, #0]
    7574:	4559      	cmp	r1, fp
    7576:	46ac      	mov	ip, r5
    7578:	d101      	bne.n	757e <tri_draw_tall+0x20e>
    757a:	4290      	cmp	r0, r2
    757c:	d01d      	beq.n	75ba <tri_draw_tall+0x24a>
            if(err_tmp2 > -dx2) {
    757e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7580:	428d      	cmp	r5, r1
    7582:	dd05      	ble.n	7590 <tri_draw_tall+0x220>
                err2 -= dy2;
    7584:	9903      	ldr	r1, [sp, #12]
    7586:	1a6d      	subs	r5, r5, r1
                edge2.x += sx2;
    7588:	9907      	ldr	r1, [sp, #28]
    758a:	440a      	add	r2, r1
                err2 -= dy2;
    758c:	b22d      	sxth	r5, r5
                edge2.x += sx2;
    758e:	b212      	sxth	r2, r2
            if(err_tmp2 < dy2) {
    7590:	9901      	ldr	r1, [sp, #4]
    7592:	458c      	cmp	ip, r1
    7594:	da07      	bge.n	75a6 <tri_draw_tall+0x236>
                err2 += dx2;
    7596:	9902      	ldr	r1, [sp, #8]
    7598:	440d      	add	r5, r1
                edge2.y += sy2;
    759a:	9908      	ldr	r1, [sp, #32]
    759c:	eb0b 0c01 	add.w	ip, fp, r1
                err2 += dx2;
    75a0:	b22d      	sxth	r5, r5
                edge2.y += sy2;
    75a2:	fa0f fb8c 	sxth.w	fp, ip
        } while(edge2.x == x2_tmp);
    75a6:	4592      	cmp	sl, r2
    75a8:	d0e3      	beq.n	7572 <tri_draw_tall+0x202>
    75aa:	4692      	mov	sl, r2
    75ac:	4699      	mov	r9, r3
    75ae:	e76d      	b.n	748c <tri_draw_tall+0x11c>
            } else if(edge1.y == tri[2].y && edge1.x == tri[2].x) {
    75b0:	9a00      	ldr	r2, [sp, #0]
    75b2:	42ba      	cmp	r2, r7
    75b4:	d1c5      	bne.n	7542 <tri_draw_tall+0x1d2>
    75b6:	4298      	cmp	r0, r3
    75b8:	d1c3      	bne.n	7542 <tri_draw_tall+0x1d2>
}
    75ba:	b013      	add	sp, #76	; 0x4c
    75bc:	ecbd 8b02 	vpop	{d8}
    75c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000075c4 <lv_draw_triangle>:
{
    75c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(points[0].x == points[1].x && points[0].y == points[1].y) return;
    75c8:	f9b0 4000 	ldrsh.w	r4, [r0]
    75cc:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
    75d0:	4544      	cmp	r4, r8
{
    75d2:	461e      	mov	r6, r3
    if(points[0].x == points[1].x && points[0].y == points[1].y) return;
    75d4:	d105      	bne.n	75e2 <lv_draw_triangle+0x1e>
    75d6:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    75da:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
    75de:	429d      	cmp	r5, r3
    75e0:	d04e      	beq.n	7680 <lv_draw_triangle+0xbc>
    if(points[1].x == points[2].x && points[1].y == points[2].y) return;
    75e2:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
    75e6:	45e0      	cmp	r8, ip
    75e8:	d105      	bne.n	75f6 <lv_draw_triangle+0x32>
    75ea:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
    75ee:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    75f2:	429d      	cmp	r5, r3
    75f4:	d044      	beq.n	7680 <lv_draw_triangle+0xbc>
    if(points[0].x == points[2].x && points[0].y == points[2].y) return;
    75f6:	4564      	cmp	r4, ip
    75f8:	d105      	bne.n	7606 <lv_draw_triangle+0x42>
    75fa:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    75fe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    7602:	429d      	cmp	r5, r3
    7604:	d03c      	beq.n	7680 <lv_draw_triangle+0xbc>
    if(points[0].x == points[1].x && points[1].x == points[2].x) return;
    7606:	4544      	cmp	r4, r8
    7608:	d101      	bne.n	760e <lv_draw_triangle+0x4a>
    760a:	4564      	cmp	r4, ip
    760c:	d038      	beq.n	7680 <lv_draw_triangle+0xbc>
    if(points[0].y == points[1].y && points[1].y == points[2].y) return;
    760e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    7612:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
    7616:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
    761a:	4575      	cmp	r5, lr
    761c:	d101      	bne.n	7622 <lv_draw_triangle+0x5e>
    761e:	42bd      	cmp	r5, r7
    7620:	d02e      	beq.n	7680 <lv_draw_triangle+0xbc>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
    7622:	7a13      	ldrb	r3, [r2, #8]
    7624:	2eff      	cmp	r6, #255	; 0xff
    7626:	bf1c      	itt	ne
    7628:	4373      	mulne	r3, r6
    762a:	0a1b      	lsrne	r3, r3, #8
    lv_coord_t x_max = LV_MATH_MAX(LV_MATH_MAX(points[0].x, points[1].x), points[2].x);
    762c:	4544      	cmp	r4, r8
    762e:	4626      	mov	r6, r4
    7630:	bfb8      	it	lt
    7632:	4646      	movlt	r6, r8
    lv_coord_t x_min = LV_MATH_MIN(LV_MATH_MIN(points[0].x, points[1].x), points[2].x);
    7634:	4544      	cmp	r4, r8
    7636:	bfa8      	it	ge
    7638:	4644      	movge	r4, r8
    if(x_max - x_min < y_max - y_min) {
    763a:	4564      	cmp	r4, ip
    763c:	bfa8      	it	ge
    763e:	4664      	movge	r4, ip
    7640:	4566      	cmp	r6, ip
    7642:	bfac      	ite	ge
    7644:	ebc4 0406 	rsbge	r4, r4, r6
    7648:	ebc4 040c 	rsblt	r4, r4, ip
    lv_coord_t y_max = LV_MATH_MAX(LV_MATH_MAX(points[0].y, points[1].y), points[2].y);
    764c:	4575      	cmp	r5, lr
    764e:	462e      	mov	r6, r5
    7650:	bfb8      	it	lt
    7652:	4676      	movlt	r6, lr
    lv_coord_t y_min = LV_MATH_MIN(LV_MATH_MIN(points[0].y, points[1].y), points[2].y);
    7654:	4575      	cmp	r5, lr
    7656:	bfa8      	it	ge
    7658:	4675      	movge	r5, lr
    if(x_max - x_min < y_max - y_min) {
    765a:	42bd      	cmp	r5, r7
    765c:	bfa8      	it	ge
    765e:	463d      	movge	r5, r7
    7660:	42be      	cmp	r6, r7
    7662:	bfac      	ite	ge
    7664:	ebc5 0506 	rsbge	r5, r5, r6
    7668:	ebc5 0507 	rsblt	r5, r5, r7
    766c:	42ac      	cmp	r4, r5
    766e:	da03      	bge.n	7678 <lv_draw_triangle+0xb4>
}
    7670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        tri_draw_tall(points, mask, style, opa);
    7674:	f7ff be7c 	b.w	7370 <tri_draw_tall>
}
    7678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        tri_draw_flat(points, mask, style, opa);
    767c:	f7ff bd04 	b.w	7088 <tri_draw_flat>
}
    7680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007684 <lv_color_mix>:
{
    7684:	b570      	push	{r4, r5, r6, lr}
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    7686:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    768a:	f3c1 1445 	ubfx	r4, r1, #5, #6
    768e:	436c      	muls	r4, r5
    7690:	f3c0 1345 	ubfx	r3, r0, #5, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
    7694:	f001 061f 	and.w	r6, r1, #31
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    7698:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
    769c:	436e      	muls	r6, r5
    769e:	f000 041f 	and.w	r4, r0, #31
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    76a2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
    76a6:	fb04 6402 	mla	r4, r4, r2, r6
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    76aa:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    76ae:	4369      	muls	r1, r5
    return ret;
    76b0:	08db      	lsrs	r3, r3, #3
    76b2:	f3c4 2404 	ubfx	r4, r4, #8, #5
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    76b6:	fb00 1202 	mla	r2, r0, r2, r1
    return ret;
    76ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
    76be:	4323      	orrs	r3, r4
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    76c0:	f3c2 2007 	ubfx	r0, r2, #8, #8
}
    76c4:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
    76c8:	bd70      	pop	{r4, r5, r6, pc}

000076ca <lv_draw_px>:
 * @param mask_p fill only on this mask (truncated to VDB area)
 * @param color pixel color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
    76ca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    76ce:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28

    if(opa < LV_OPA_MIN) return;
    76d2:	f1b8 0f0f 	cmp.w	r8, #15
{
    76d6:	4604      	mov	r4, r0
    76d8:	460f      	mov	r7, r1
    76da:	461d      	mov	r5, r3
    if(opa < LV_OPA_MIN) return;
    76dc:	d92d      	bls.n	773a <lv_draw_px+0x70>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;

    /*Pixel out of the mask*/
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
    76de:	f9b2 3000 	ldrsh.w	r3, [r2]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    76e2:	f1b8 0ffc 	cmp.w	r8, #252	; 0xfc
    76e6:	bf28      	it	cs
    76e8:	f04f 08ff 	movcs.w	r8, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
    76ec:	4283      	cmp	r3, r0
    76ee:	dc24      	bgt.n	773a <lv_draw_px+0x70>
    76f0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
    76f4:	4283      	cmp	r3, r0
    76f6:	db20      	blt.n	773a <lv_draw_px+0x70>
    76f8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    76fc:	428b      	cmp	r3, r1
    76fe:	dc1c      	bgt.n	773a <lv_draw_px+0x70>
    7700:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
    7704:	428b      	cmp	r3, r1
    7706:	db18      	blt.n	773a <lv_draw_px+0x70>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
    7708:	f002 fe62 	bl	a3d0 <lv_refr_get_disp_refreshing>
    770c:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    770e:	f000 fd39 	bl	8184 <lv_disp_get_buf>
    7712:	8a03      	ldrh	r3, [r0, #16]
    7714:	8a82      	ldrh	r2, [r0, #20]
    uint32_t vdb_width  = lv_area_get_width(&vdb->area);

    /*Make the coordinates relative to VDB*/
    x -= vdb->area.x1;
    y -= vdb->area.y1;
    7716:	8a41      	ldrh	r1, [r0, #18]
    x -= vdb->area.x1;
    7718:	1ae4      	subs	r4, r4, r3
    771a:	3201      	adds	r2, #1
    771c:	1ad2      	subs	r2, r2, r3
    771e:	b223      	sxth	r3, r4

    if(disp->driver.set_px_cb) {
    7720:	6974      	ldr	r4, [r6, #20]
    y -= vdb->area.y1;
    7722:	1a79      	subs	r1, r7, r1
    7724:	b212      	sxth	r2, r2
    7726:	b209      	sxth	r1, r1
    if(disp->driver.set_px_cb) {
    7728:	b154      	cbz	r4, 7740 <lv_draw_px+0x76>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
    772a:	f8cd 8008 	str.w	r8, [sp, #8]
    772e:	f8ad 5004 	strh.w	r5, [sp, #4]
    7732:	9100      	str	r1, [sp, #0]
    7734:	6881      	ldr	r1, [r0, #8]
    7736:	4630      	mov	r0, r6
    7738:	47a0      	blx	r4
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            *vdb_px_p = color_mix_2_alpha(*vdb_px_p, (*vdb_px_p).ch.alpha, color, opa);
#endif
        }
    }
}
    773a:	b004      	add	sp, #16
    773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(opa == LV_OPA_COVER) {
    7740:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
        lv_color_t * vdb_px_p = vdb->buf_act;
    7744:	6886      	ldr	r6, [r0, #8]
        vdb_px_p += y * vdb_width + x;
    7746:	fb01 3402 	mla	r4, r1, r2, r3
            if(opa == LV_OPA_COVER) {
    774a:	d102      	bne.n	7752 <lv_draw_px+0x88>
                *vdb_px_p = color;
    774c:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
    7750:	e7f3      	b.n	773a <lv_draw_px+0x70>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
    7752:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
    7756:	4642      	mov	r2, r8
    7758:	4628      	mov	r0, r5
    775a:	f7ff ff93 	bl	7684 <lv_color_mix>
    775e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
        }
    7762:	e7ea      	b.n	773a <lv_draw_px+0x70>

00007764 <lv_draw_fill>:
 * @param mask_p fill only o this mask  (truncated to VDB area)
 * @param color fill color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
    7764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
    7768:	2b0f      	cmp	r3, #15
{
    776a:	b08b      	sub	sp, #44	; 0x2c
    776c:	4691      	mov	r9, r2
    776e:	4698      	mov	r8, r3
    if(opa < LV_OPA_MIN) return;
    7770:	d95e      	bls.n	7830 <lv_draw_fill+0xcc>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    7772:	2bfc      	cmp	r3, #252	; 0xfc
    bool union_ok;

    /*Get the union of cord and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
    7774:	460a      	mov	r2, r1
    7776:	4601      	mov	r1, r0
    7778:	a808      	add	r0, sp, #32
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    777a:	bf34      	ite	cc
    777c:	4698      	movcc	r8, r3
    777e:	f04f 08ff 	movcs.w	r8, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
    7782:	f7fc f96f 	bl	3a64 <lv_area_intersect>

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) {
    7786:	2800      	cmp	r0, #0
    7788:	d052      	beq.n	7830 <lv_draw_fill+0xcc>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
    778a:	f002 fe21 	bl	a3d0 <lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    778e:	f000 fcf9 	bl	8184 <lv_disp_get_buf>

    lv_area_t vdb_rel_a; /*Stores relative coordinates on vdb*/
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
    7792:	f8bd 6022 	ldrh.w	r6, [sp, #34]	; 0x22
    7796:	8a42      	ldrh	r2, [r0, #18]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
    7798:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
    779c:	8a01      	ldrh	r1, [r0, #16]
    779e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
    77a2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
    77a6:	1ab6      	subs	r6, r6, r2
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
    77a8:	1a9b      	subs	r3, r3, r2
    77aa:	8a82      	ldrh	r2, [r0, #20]
    77ac:	3201      	adds	r2, #1
    77ae:	1a52      	subs	r2, r2, r1
    77b0:	b21b      	sxth	r3, r3
    77b2:	b212      	sxth	r2, r2
    77b4:	9305      	str	r3, [sp, #20]

    lv_color_t * vdb_buf_tmp = vdb->buf_act;
    77b6:	6883      	ldr	r3, [r0, #8]
    77b8:	9207      	str	r2, [sp, #28]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
    77ba:	1a64      	subs	r4, r4, r1
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
    77bc:	1a6d      	subs	r5, r5, r1
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
    77be:	9306      	str	r3, [sp, #24]
{
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    77c0:	f002 fe06 	bl	a3d0 <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
    77c4:	6941      	ldr	r1, [r0, #20]
    77c6:	9a07      	ldr	r2, [sp, #28]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
    77c8:	fa1f fa86 	uxth.w	sl, r6
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
    77cc:	b224      	sxth	r4, r4
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
    77ce:	b236      	sxth	r6, r6
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
    77d0:	b22d      	sxth	r5, r5
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    77d2:	4683      	mov	fp, r0
    if(disp->driver.set_px_cb) {
    77d4:	bb51      	cbnz	r1, 782c <lv_draw_fill+0xc8>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
            }
        }
    } else {
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
    77d6:	9806      	ldr	r0, [sp, #24]
    77d8:	fb06 f302 	mul.w	r3, r6, r2

        /*Run simpler function without opacity*/
        if(opa == LV_OPA_COVER) {
    77dc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
    77e0:	eb00 0743 	add.w	r7, r0, r3, lsl #1
        if(opa == LV_OPA_COVER) {
    77e4:	ea4f 0b42 	mov.w	fp, r2, lsl #1
    77e8:	d048      	beq.n	787c <lv_draw_fill+0x118>
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
            scr_transp = disp->driver.screen_transp;
#endif

            lv_color_t bg_tmp  = LV_COLOR_BLACK;
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
    77ea:	4642      	mov	r2, r8
    77ec:	4648      	mov	r0, r9
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
    77ee:	468a      	mov	sl, r1
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
    77f0:	f7ff ff48 	bl	7684 <lv_color_mix>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
    77f4:	9b05      	ldr	r3, [sp, #20]
    77f6:	42b3      	cmp	r3, r6
    77f8:	db1a      	blt.n	7830 <lv_draw_fill+0xcc>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
    77fa:	4623      	mov	r3, r4
    77fc:	e054      	b.n	78a8 <lv_draw_fill+0x144>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
    77fe:	f8cd a000 	str.w	sl, [sp]
    7802:	f8cd 8008 	str.w	r8, [sp, #8]
    7806:	f8ad 9004 	strh.w	r9, [sp, #4]
    780a:	9906      	ldr	r1, [sp, #24]
    780c:	f8db 7014 	ldr.w	r7, [fp, #20]
    7810:	9207      	str	r2, [sp, #28]
    7812:	4623      	mov	r3, r4
    7814:	4658      	mov	r0, fp
    7816:	47b8      	blx	r7
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
    7818:	f10a 0a01 	add.w	sl, sl, #1
    781c:	9a07      	ldr	r2, [sp, #28]
    781e:	fa0f fa8a 	sxth.w	sl, sl
    7822:	9b05      	ldr	r3, [sp, #20]
    7824:	4553      	cmp	r3, sl
    7826:	daea      	bge.n	77fe <lv_draw_fill+0x9a>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
    7828:	3401      	adds	r4, #1
    782a:	b224      	sxth	r4, r4
    782c:	42a5      	cmp	r5, r4
    782e:	da02      	bge.n	7836 <lv_draw_fill+0xd2>
}
    7830:	b00b      	add	sp, #44	; 0x2c
    7832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
    7836:	46b2      	mov	sl, r6
    7838:	e7f3      	b.n	7822 <lv_draw_fill+0xbe>
                mem[col] = color;
    783a:	f827 9013 	strh.w	r9, [r7, r3, lsl #1]
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
    783e:	3301      	adds	r3, #1
    7840:	b21b      	sxth	r3, r3
    7842:	429d      	cmp	r5, r3
    7844:	daf9      	bge.n	783a <lv_draw_fill+0xd6>
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
    7846:	1b2d      	subs	r5, r5, r4
    7848:	3501      	adds	r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
    784a:	eb07 0644 	add.w	r6, r7, r4, lsl #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
    784e:	006d      	lsls	r5, r5, #1
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
    7850:	f10a 0a01 	add.w	sl, sl, #1
    7854:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
    7858:	b22d      	sxth	r5, r5
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
    785a:	fa0f fa8a 	sxth.w	sl, sl
    785e:	4427      	add	r7, r4
    7860:	9b05      	ldr	r3, [sp, #20]
    7862:	4553      	cmp	r3, sl
    7864:	dbe4      	blt.n	7830 <lv_draw_fill+0xcc>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
    7866:	4638      	mov	r0, r7
    7868:	462a      	mov	r2, r5
    786a:	4631      	mov	r1, r6
    786c:	f10a 0a01 	add.w	sl, sl, #1
    7870:	f00c fd20 	bl	142b4 <memcpy>
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
    7874:	fa0f fa8a 	sxth.w	sl, sl
    7878:	445f      	add	r7, fp
    787a:	e7f1      	b.n	7860 <lv_draw_fill+0xfc>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
    787c:	4623      	mov	r3, r4
    787e:	e7e0      	b.n	7842 <lv_draw_fill+0xde>
                    if(scr_transp == false) {
                        /*If the bg color changed recalculate the result color*/
                        if(mem[col].full != bg_tmp.full) {
    7880:	eb07 0243 	add.w	r2, r7, r3, lsl #1
    7884:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
    7888:	9206      	str	r2, [sp, #24]
    788a:	fa1f f28a 	uxth.w	r2, sl
    788e:	4291      	cmp	r1, r2
    7890:	d006      	beq.n	78a0 <lv_draw_fill+0x13c>
                            bg_tmp  = mem[col];
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
    7892:	4642      	mov	r2, r8
    7894:	4648      	mov	r0, r9
    7896:	9307      	str	r3, [sp, #28]
                            bg_tmp  = mem[col];
    7898:	468a      	mov	sl, r1
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
    789a:	f7ff fef3 	bl	7684 <lv_color_mix>
    789e:	9b07      	ldr	r3, [sp, #28]
                        }

                        mem[col] = opa_tmp;
    78a0:	9a06      	ldr	r2, [sp, #24]
    78a2:	3301      	adds	r3, #1
    78a4:	8010      	strh	r0, [r2, #0]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
    78a6:	b21b      	sxth	r3, r3
    78a8:	429d      	cmp	r5, r3
    78aa:	dae9      	bge.n	7880 <lv_draw_fill+0x11c>
#if LV_COLOR_DEPTH == 32 && LV_COLOR_SCREEN_TRANSP
                        mem[col] = color_mix_2_alpha(mem[col], mem[col].ch.alpha, color, opa);
#endif
                    }
                }
                mem += mem_width;
    78ac:	3601      	adds	r6, #1
    78ae:	445f      	add	r7, fp
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
    78b0:	b236      	sxth	r6, r6
    78b2:	e79f      	b.n	77f4 <lv_draw_fill+0x90>

000078b4 <lv_draw_letter>:
{
    78b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78b8:	b0a3      	sub	sp, #140	; 0x8c
    78ba:	4699      	mov	r9, r3
    78bc:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
    78c0:	f8ad 301c 	strh.w	r3, [sp, #28]
    78c4:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
    78c8:	9308      	str	r3, [sp, #32]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
    78ca:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    78ce:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    78d2:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
    78d6:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
    78da:	931b      	str	r3, [sp, #108]	; 0x6c
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
    78dc:	4bbb      	ldr	r3, [pc, #748]	; (7bcc <lv_draw_letter+0x318>)
{
    78de:	4617      	mov	r7, r2
    78e0:	4604      	mov	r4, r0
    78e2:	468b      	mov	fp, r1
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
    78e4:	aa1e      	add	r2, sp, #120	; 0x78
    78e6:	f103 0610 	add.w	r6, r3, #16
    78ea:	6818      	ldr	r0, [r3, #0]
    78ec:	6859      	ldr	r1, [r3, #4]
    78ee:	4615      	mov	r5, r2
    78f0:	c503      	stmia	r5!, {r0, r1}
    78f2:	3308      	adds	r3, #8
    78f4:	42b3      	cmp	r3, r6
    78f6:	462a      	mov	r2, r5
    78f8:	d1f7      	bne.n	78ea <lv_draw_letter+0x36>
    if(opa < LV_OPA_MIN) return;
    78fa:	9b08      	ldr	r3, [sp, #32]
    78fc:	2b0f      	cmp	r3, #15
    78fe:	f240 810c 	bls.w	7b1a <lv_draw_letter+0x266>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    7902:	2bfc      	cmp	r3, #252	; 0xfc
    7904:	bf28      	it	cs
    7906:	23ff      	movcs	r3, #255	; 0xff
    7908:	9308      	str	r3, [sp, #32]
    if(font_p == NULL) {
    790a:	2f00      	cmp	r7, #0
    790c:	f000 8105 	beq.w	7b1a <lv_draw_letter+0x266>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
    7910:	2300      	movs	r3, #0
    7912:	464a      	mov	r2, r9
    7914:	a91c      	add	r1, sp, #112	; 0x70
    7916:	4638      	mov	r0, r7
    7918:	f001 fdd4 	bl	94c4 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
    791c:	2800      	cmp	r0, #0
    791e:	f000 80fc 	beq.w	7b1a <lv_draw_letter+0x266>
    if(g.bpp == 3) g.bpp = 4;
    7922:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
    7926:	f9b4 8000 	ldrsh.w	r8, [r4]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
    792a:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
    792e:	f99d 2074 	ldrsb.w	r2, [sp, #116]	; 0x74
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
    7932:	7a3b      	ldrb	r3, [r7, #8]
    7934:	7a7d      	ldrb	r5, [r7, #9]
    7936:	f89d 4073 	ldrb.w	r4, [sp, #115]	; 0x73
    793a:	f99d a075 	ldrsb.w	sl, [sp, #117]	; 0x75
    if(g.bpp == 3) g.bpp = 4;
    793e:	2903      	cmp	r1, #3
    7940:	d106      	bne.n	7950 <lv_draw_letter+0x9c>
    7942:	2104      	movs	r1, #4
    7944:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
            bitmask_init  = 0xF0;
    7948:	21f0      	movs	r1, #240	; 0xf0
    794a:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = bpp4_opa_table;
    794c:	a91e      	add	r1, sp, #120	; 0x78
    794e:	e01a      	b.n	7986 <lv_draw_letter+0xd2>
    switch(g.bpp) {
    7950:	3901      	subs	r1, #1
    7952:	2907      	cmp	r1, #7
    7954:	f200 80e1 	bhi.w	7b1a <lv_draw_letter+0x266>
    7958:	a001      	add	r0, pc, #4	; (adr r0, 7960 <lv_draw_letter+0xac>)
    795a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    795e:	bf00      	nop
    7960:	00007b29 	.word	0x00007b29
    7964:	00007981 	.word	0x00007981
    7968:	00007b1b 	.word	0x00007b1b
    796c:	00007949 	.word	0x00007949
    7970:	00007b1b 	.word	0x00007b1b
    7974:	00007b1b 	.word	0x00007b1b
    7978:	00007b1b 	.word	0x00007b1b
    797c:	00007b21 	.word	0x00007b21
    if(g.bpp == 3) g.bpp = 4;
    7980:	21c0      	movs	r1, #192	; 0xc0
    7982:	9109      	str	r1, [sp, #36]	; 0x24
    7984:	a91b      	add	r1, sp, #108	; 0x6c
    7986:	e9cd 1305 	strd	r1, r3, [sp, #20]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
    798a:	4638      	mov	r0, r7
    798c:	4649      	mov	r1, r9
    798e:	9204      	str	r2, [sp, #16]
    7990:	f001 fd96 	bl	94c0 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
    7994:	900e      	str	r0, [sp, #56]	; 0x38
    7996:	2800      	cmp	r0, #0
    7998:	f000 80bf 	beq.w	7b1a <lv_draw_letter+0x266>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
    799c:	9a04      	ldr	r2, [sp, #16]
    799e:	4490      	add	r8, r2
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
    79a0:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
    79a4:	fa1f f388 	uxth.w	r3, r8
    79a8:	fa0f f988 	sxth.w	r9, r8
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
    79ac:	fa02 f888 	sxtah	r8, r2, r8
    79b0:	f9bb 2000 	ldrsh.w	r2, [fp]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
    79b4:	930f      	str	r3, [sp, #60]	; 0x3c
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
    79b6:	4590      	cmp	r8, r2
    79b8:	f2c0 80af 	blt.w	7b1a <lv_draw_letter+0x266>
    79bc:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
    79c0:	454a      	cmp	r2, r9
    79c2:	f2c0 80aa 	blt.w	7b1a <lv_draw_letter+0x266>
    79c6:	9b06      	ldr	r3, [sp, #24]
    79c8:	441e      	add	r6, r3
    79ca:	b2b6      	uxth	r6, r6
    79cc:	4454      	add	r4, sl
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
    79ce:	fa1f f885 	uxth.w	r8, r5
    79d2:	b2a4      	uxth	r4, r4
    79d4:	1b75      	subs	r5, r6, r5
    79d6:	1b2d      	subs	r5, r5, r4
    79d8:	b2ab      	uxth	r3, r5
    79da:	9311      	str	r3, [sp, #68]	; 0x44
    79dc:	b22b      	sxth	r3, r5
    79de:	9304      	str	r3, [sp, #16]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
    79e0:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
    79e4:	fa03 f585 	sxtah	r5, r3, r5
    79e8:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    79ec:	429d      	cmp	r5, r3
    79ee:	f2c0 8094 	blt.w	7b1a <lv_draw_letter+0x266>
    79f2:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
    79f6:	9a04      	ldr	r2, [sp, #16]
    79f8:	4293      	cmp	r3, r2
    79fa:	f2c0 808e 	blt.w	7b1a <lv_draw_letter+0x266>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
    79fe:	f002 fce7 	bl	a3d0 <lv_refr_get_disp_refreshing>
    7a02:	9010      	str	r0, [sp, #64]	; 0x40
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    7a04:	f000 fbbe 	bl	8184 <lv_disp_get_buf>
    7a08:	8a83      	ldrh	r3, [r0, #20]
    7a0a:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    7a0e:	9006      	str	r0, [sp, #24]
    7a10:	3301      	adds	r3, #1
    7a12:	1a5b      	subs	r3, r3, r1
    7a14:	b21b      	sxth	r3, r3
    7a16:	930a      	str	r3, [sp, #40]	; 0x28
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
    7a18:	6883      	ldr	r3, [r0, #8]
    7a1a:	9312      	str	r3, [sp, #72]	; 0x48
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
    7a1c:	f89d 0072 	ldrb.w	r0, [sp, #114]	; 0x72
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
    7a20:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
    7a24:	930c      	str	r3, [sp, #48]	; 0x30
    7a26:	fb00 fe03 	mul.w	lr, r0, r3
    bool subpx = font_p->subpx == LV_FONT_SUBPX_NONE ? false : true;
    7a2a:	7abb      	ldrb	r3, [r7, #10]
    if(subpx == false) {
    7a2c:	f9bb 7000 	ldrsh.w	r7, [fp]
    7a30:	f013 0303 	ands.w	r3, r3, #3
    7a34:	930b      	str	r3, [sp, #44]	; 0x2c
    7a36:	f040 8081 	bne.w	7b3c <lv_draw_letter+0x288>
        col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
    7a3a:	454f      	cmp	r7, r9
    7a3c:	bfca      	itet	gt
    7a3e:	9b0f      	ldrgt	r3, [sp, #60]	; 0x3c
    7a40:	9f0b      	ldrle	r7, [sp, #44]	; 0x2c
    7a42:	1aff      	subgt	r7, r7, r3
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
    7a44:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
    7a48:	eb00 0509 	add.w	r5, r0, r9
        col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
    7a4c:	bfc8      	it	gt
    7a4e:	b23f      	sxthgt	r7, r7
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
    7a50:	429d      	cmp	r5, r3
    7a52:	dc6d      	bgt.n	7b30 <lv_draw_letter+0x27c>
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
    7a54:	fa0f fa80 	sxth.w	sl, r0
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
    7a58:	f9bb 5002 	ldrsh.w	r5, [fp, #2]
    7a5c:	9b04      	ldr	r3, [sp, #16]
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
    7a5e:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
    7a62:	9a04      	ldr	r2, [sp, #16]
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
    7a64:	429d      	cmp	r5, r3
    7a66:	bfc8      	it	gt
    7a68:	192d      	addgt	r5, r5, r4
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
    7a6a:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
    7a6e:	bfc8      	it	gt
    7a70:	4445      	addgt	r5, r8
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
    7a72:	eb00 0c02 	add.w	ip, r0, r2
        row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
    7a76:	bfc6      	itte	gt
    7a78:	1bad      	subgt	r5, r5, r6
    7a7a:	b22d      	sxthgt	r5, r5
    7a7c:	2500      	movle	r5, #0
        row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
    7a7e:	459c      	cmp	ip, r3
    7a80:	bfc1      	itttt	gt
    7a82:	3401      	addgt	r4, #1
    7a84:	18e4      	addgt	r4, r4, r3
    7a86:	eb08 0004 	addgt.w	r0, r8, r4
    7a8a:	1b80      	subgt	r0, r0, r6
    7a8c:	b203      	sxth	r3, r0
    7a8e:	930d      	str	r3, [sp, #52]	; 0x34
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
    7a90:	9b06      	ldr	r3, [sp, #24]
    7a92:	9a04      	ldr	r2, [sp, #16]
    7a94:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    7a98:	eba2 0b03 	sub.w	fp, r2, r3
    7a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7a9e:	fb03 940b 	mla	r4, r3, fp, r9
    7aa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7aa4:	1a64      	subs	r4, r4, r1
    7aa6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    if(subpx) vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    7aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7aac:	fb03 f105 	mul.w	r1, r3, r5
    7ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7ab2:	2b00      	cmp	r3, #0
    7ab4:	d05c      	beq.n	7b70 <lv_draw_letter+0x2bc>
    7ab6:	2303      	movs	r3, #3
    7ab8:	fb97 f3f3 	sdiv	r3, r7, r3
    7abc:	440b      	add	r3, r1
    else vdb_buf_tmp += (row_start * vdb_width) + col_start;
    7abe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
    7ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
    7ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
    7ac6:	fb13 f607 	smulbb	r6, r3, r7
    map_p += bit_ofs >> 3;
    7aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
    7acc:	fb05 660e 	mla	r6, r5, lr, r6
    map_p += bit_ofs >> 3;
    7ad0:	eb03 0bd6 	add.w	fp, r3, r6, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    7ad4:	f006 0307 	and.w	r3, r6, #7
    7ad8:	9304      	str	r3, [sp, #16]
    uint8_t txt_rgb[3] = {LV_COLOR_GET_R(color), LV_COLOR_GET_G(color), LV_COLOR_GET_B(color)};
    7ada:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7ade:	0adb      	lsrs	r3, r3, #11
    7ae0:	9312      	str	r3, [sp, #72]	; 0x48
    7ae2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7ae6:	f3c3 1345 	ubfx	r3, r3, #5, #6
    7aea:	9313      	str	r3, [sp, #76]	; 0x4c
    7aec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7af0:	f003 031f 	and.w	r3, r3, #31
    7af4:	9314      	str	r3, [sp, #80]	; 0x50
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
    7af6:	eba7 030a 	sub.w	r3, r7, sl
    7afa:	4413      	add	r3, r2
    7afc:	005b      	lsls	r3, r3, #1
        if(subpx) vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    7afe:	f06f 0202 	mvn.w	r2, #2
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
    7b02:	9316      	str	r3, [sp, #88]	; 0x58
    7b04:	ebaa 0307 	sub.w	r3, sl, r7
        if(subpx) vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    7b08:	fb93 f3f2 	sdiv	r3, r3, r2
    7b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7b0e:	4413      	add	r3, r2
    7b10:	005b      	lsls	r3, r3, #1
    7b12:	9315      	str	r3, [sp, #84]	; 0x54
    for(row = row_start; row < row_end; row++) {
    7b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7b16:	429d      	cmp	r5, r3
    7b18:	db2c      	blt.n	7b74 <lv_draw_letter+0x2c0>
}
    7b1a:	b023      	add	sp, #140	; 0x8c
    7b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
    7b20:	21ff      	movs	r1, #255	; 0xff
    7b22:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = NULL;
    7b24:	2100      	movs	r1, #0
    7b26:	e72e      	b.n	7986 <lv_draw_letter+0xd2>
            bitmask_init  = 0x80;
    7b28:	2180      	movs	r1, #128	; 0x80
    7b2a:	9109      	str	r1, [sp, #36]	; 0x24
            bpp_opa_table = bpp1_opa_table;
    7b2c:	a919      	add	r1, sp, #100	; 0x64
    7b2e:	e72a      	b.n	7986 <lv_draw_letter+0xd2>
        col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
    7b30:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7b32:	3301      	adds	r3, #1
    7b34:	1a1b      	subs	r3, r3, r0
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
    7b36:	fa0f fa83 	sxth.w	sl, r3
    7b3a:	e78d      	b.n	7a58 <lv_draw_letter+0x1a4>
        col_start = pos_x >= mask_p->x1 ? 0 : (mask_p->x1 - pos_x) * 3;
    7b3c:	454f      	cmp	r7, r9
    7b3e:	bfc8      	it	gt
    7b40:	eba7 0709 	subgt.w	r7, r7, r9
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
    7b44:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
        col_start = pos_x >= mask_p->x1 ? 0 : (mask_p->x1 - pos_x) * 3;
    7b48:	bfc8      	it	gt
    7b4a:	eb07 0747 	addgt.w	r7, r7, r7, lsl #1
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
    7b4e:	f04f 0503 	mov.w	r5, #3
    7b52:	fbb0 f5f5 	udiv	r5, r0, r5
    7b56:	444d      	add	r5, r9
        col_start = pos_x >= mask_p->x1 ? 0 : (mask_p->x1 - pos_x) * 3;
    7b58:	bfcc      	ite	gt
    7b5a:	b23f      	sxthgt	r7, r7
    7b5c:	2700      	movle	r7, #0
        col_end   = pos_x + g.box_w / 3 <= mask_p->x2 ? g.box_w : (mask_p->x2 - pos_x + 1) * 3;
    7b5e:	429d      	cmp	r5, r3
    7b60:	f77f af78 	ble.w	7a54 <lv_draw_letter+0x1a0>
    7b64:	eba3 0309 	sub.w	r3, r3, r9
    7b68:	3301      	adds	r3, #1
    7b6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7b6e:	e7e2      	b.n	7b36 <lv_draw_letter+0x282>
    else vdb_buf_tmp += (row_start * vdb_width) + col_start;
    7b70:	19cb      	adds	r3, r1, r7
    7b72:	e7a4      	b.n	7abe <lv_draw_letter+0x20a>
        bitmask = bitmask_init >> col_bit;
    7b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b76:	9a04      	ldr	r2, [sp, #16]
        for(col = col_start; col < col_end; col++) {
    7b78:	970c      	str	r7, [sp, #48]	; 0x30
        bitmask = bitmask_init >> col_bit;
    7b7a:	fa43 f902 	asr.w	r9, r3, r2
    7b7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    7b82:	930e      	str	r3, [sp, #56]	; 0x38
                    } else if(vdb_buf_tmp->full != color.full) {
    7b84:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7b88:	9317      	str	r3, [sp, #92]	; 0x5c
        bitmask = bitmask_init >> col_bit;
    7b8a:	fa5f f989 	uxtb.w	r9, r9
        uint8_t sub_px_cnt = 0;
    7b8e:	f04f 0800 	mov.w	r8, #0
        for(col = col_start; col < col_end; col++) {
    7b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b94:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
    7b98:	4553      	cmp	r3, sl
    7b9a:	db19      	blt.n	7bd0 <lv_draw_letter+0x31c>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
    7b9c:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
    7ba0:	9a04      	ldr	r2, [sp, #16]
    7ba2:	eba3 030a 	sub.w	r3, r3, sl
    7ba6:	443b      	add	r3, r7
    7ba8:	fb13 f301 	smulbb	r3, r3, r1
    7bac:	441a      	add	r2, r3
        map_p += (col_bit >> 3);
    7bae:	f3c2 03cc 	ubfx	r3, r2, #3, #13
    7bb2:	449b      	add	fp, r3
        col_bit = col_bit & 0x7;
    7bb4:	f002 0307 	and.w	r3, r2, #7
    7bb8:	9304      	str	r3, [sp, #16]
        if(subpx) vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    7bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	f000 80c6 	beq.w	7d4e <lv_draw_letter+0x49a>
    7bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7bc4:	3501      	adds	r5, #1
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
    7bc6:	441c      	add	r4, r3
    for(row = row_start; row < row_end; row++) {
    7bc8:	b22d      	sxth	r5, r5
    7bca:	e7a3      	b.n	7b14 <lv_draw_letter+0x260>
    7bcc:	00014770 	.word	0x00014770
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
    7bd0:	9b04      	ldr	r3, [sp, #16]
    7bd2:	f89b 2000 	ldrb.w	r2, [fp]
    7bd6:	f1c3 0308 	rsb	r3, r3, #8
    7bda:	1a5b      	subs	r3, r3, r1
    7bdc:	ea09 0202 	and.w	r2, r9, r2
    7be0:	411a      	asrs	r2, r3
            if(subpx == false) {
    7be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
    7be4:	b2d2      	uxtb	r2, r2
            if(subpx == false) {
    7be6:	2b00      	cmp	r3, #0
    7be8:	d155      	bne.n	7c96 <lv_draw_letter+0x3e2>
                if(letter_px != 0) {
    7bea:	b31a      	cbz	r2, 7c34 <lv_draw_letter+0x380>
                    if(opa == LV_OPA_COVER) {
    7bec:	9b08      	ldr	r3, [sp, #32]
    7bee:	2bff      	cmp	r3, #255	; 0xff
    7bf0:	d135      	bne.n	7c5e <lv_draw_letter+0x3aa>
                        px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
    7bf2:	2908      	cmp	r1, #8
    7bf4:	d001      	beq.n	7bfa <lv_draw_letter+0x346>
    7bf6:	9b05      	ldr	r3, [sp, #20]
    7bf8:	5c9a      	ldrb	r2, [r3, r2]
                    if(disp->driver.set_px_cb) {
    7bfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7bfc:	695b      	ldr	r3, [r3, #20]
    7bfe:	461e      	mov	r6, r3
    7c00:	2b00      	cmp	r3, #0
    7c02:	d036      	beq.n	7c72 <lv_draw_letter+0x3be>
                                (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
    7c04:	9b06      	ldr	r3, [sp, #24]
    7c06:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7c08:	8a1b      	ldrh	r3, [r3, #16]
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
    7c0a:	9202      	str	r2, [sp, #8]
    7c0c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7c10:	f8ad 2004 	strh.w	r2, [sp, #4]
                                (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
    7c14:	1acb      	subs	r3, r1, r3
    7c16:	9a06      	ldr	r2, [sp, #24]
    7c18:	990c      	ldr	r1, [sp, #48]	; 0x30
    7c1a:	8a52      	ldrh	r2, [r2, #18]
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
    7c1c:	9810      	ldr	r0, [sp, #64]	; 0x40
                                (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
    7c1e:	440b      	add	r3, r1
    7c20:	9911      	ldr	r1, [sp, #68]	; 0x44
    7c22:	1a8a      	subs	r2, r1, r2
    7c24:	442a      	add	r2, r5
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
    7c26:	b212      	sxth	r2, r2
    7c28:	9906      	ldr	r1, [sp, #24]
    7c2a:	9200      	str	r2, [sp, #0]
    7c2c:	6889      	ldr	r1, [r1, #8]
    7c2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7c30:	b21b      	sxth	r3, r3
    7c32:	47b0      	blx	r6
                vdb_buf_tmp++;
    7c34:	3402      	adds	r4, #2
            if(col_bit < 8 - g.bpp) {
    7c36:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
    7c3a:	9904      	ldr	r1, [sp, #16]
    7c3c:	f1c3 0208 	rsb	r2, r3, #8
    7c40:	4291      	cmp	r1, r2
    7c42:	da7d      	bge.n	7d40 <lv_draw_letter+0x48c>
                col_bit += g.bpp;
    7c44:	460a      	mov	r2, r1
    7c46:	441a      	add	r2, r3
    7c48:	b292      	uxth	r2, r2
                bitmask = bitmask >> g.bpp;
    7c4a:	fa49 f903 	asr.w	r9, r9, r3
                col_bit += g.bpp;
    7c4e:	9204      	str	r2, [sp, #16]
                bitmask = bitmask >> g.bpp;
    7c50:	fa5f f989 	uxtb.w	r9, r9
        for(col = col_start; col < col_end; col++) {
    7c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7c56:	3301      	adds	r3, #1
    7c58:	b21b      	sxth	r3, r3
    7c5a:	930c      	str	r3, [sp, #48]	; 0x30
    7c5c:	e799      	b.n	7b92 <lv_draw_letter+0x2de>
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
    7c5e:	2908      	cmp	r1, #8
                                : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
    7c60:	bf1c      	itt	ne
    7c62:	9b05      	ldrne	r3, [sp, #20]
    7c64:	5c9a      	ldrbne	r2, [r3, r2]
    7c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7c68:	fb12 f203 	smulbb	r2, r2, r3
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
    7c6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
    7c70:	e7c3      	b.n	7bfa <lv_draw_letter+0x346>
                    } else if(vdb_buf_tmp->full != color.full) {
    7c72:	8821      	ldrh	r1, [r4, #0]
    7c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7c76:	4299      	cmp	r1, r3
    7c78:	d0dc      	beq.n	7c34 <lv_draw_letter+0x380>
                        if(px_opa > LV_OPA_MAX) {
    7c7a:	2afb      	cmp	r2, #251	; 0xfb
    7c7c:	d903      	bls.n	7c86 <lv_draw_letter+0x3d2>
                            *vdb_buf_tmp = color;
    7c7e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7c82:	8023      	strh	r3, [r4, #0]
    7c84:	e7d6      	b.n	7c34 <lv_draw_letter+0x380>
                        } else if(px_opa > LV_OPA_MIN) {
    7c86:	2a10      	cmp	r2, #16
    7c88:	d9d4      	bls.n	7c34 <lv_draw_letter+0x380>
                                *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
    7c8a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    7c8e:	f7ff fcf9 	bl	7684 <lv_color_mix>
    7c92:	8020      	strh	r0, [r4, #0]
    7c94:	e7ce      	b.n	7c34 <lv_draw_letter+0x380>
                if(letter_px != 0) {
    7c96:	b132      	cbz	r2, 7ca6 <lv_draw_letter+0x3f2>
                    if(opa == LV_OPA_COVER) {
    7c98:	9b08      	ldr	r3, [sp, #32]
    7c9a:	2bff      	cmp	r3, #255	; 0xff
    7c9c:	d146      	bne.n	7d2c <lv_draw_letter+0x478>
                        px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
    7c9e:	2908      	cmp	r1, #8
    7ca0:	d001      	beq.n	7ca6 <lv_draw_letter+0x3f2>
    7ca2:	9b05      	ldr	r3, [sp, #20]
    7ca4:	5c9a      	ldrb	r2, [r3, r2]
                    font_rgb[sub_px_cnt] = 0;
    7ca6:	ab22      	add	r3, sp, #136	; 0x88
    7ca8:	4443      	add	r3, r8
                sub_px_cnt ++;
    7caa:	f108 0801 	add.w	r8, r8, #1
    7cae:	fa5f f888 	uxtb.w	r8, r8
                if(sub_px_cnt == 3) {
    7cb2:	f1b8 0f03 	cmp.w	r8, #3
                    font_rgb[sub_px_cnt] = 0;
    7cb6:	f803 2c20 	strb.w	r2, [r3, #-32]
                if(sub_px_cnt == 3) {
    7cba:	d1bc      	bne.n	7c36 <lv_draw_letter+0x382>
                    if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) {
    7cbc:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
    7cc0:	f89d c069 	ldrb.w	ip, [sp, #105]	; 0x69
    7cc4:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
    7cc8:	ea41 030c 	orr.w	r3, r1, ip
    7ccc:	4303      	orrs	r3, r0
    7cce:	8823      	ldrh	r3, [r4, #0]
    7cd0:	d027      	beq.n	7d22 <lv_draw_letter+0x46e>
                        LV_COLOR_SET_G(res_color, (uint16_t)((uint16_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8);
    7cd2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    7cd4:	f1cc 02ff 	rsb	r2, ip, #255	; 0xff
    7cd8:	f3c3 1345 	ubfx	r3, r3, #5, #6
    7cdc:	fb16 fc0c 	smulbb	ip, r6, ip
    7ce0:	fb03 c302 	mla	r3, r3, r2, ip
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
    7ce4:	9e14      	ldr	r6, [sp, #80]	; 0x50
                        uint8_t bg_rgb[3] = {LV_COLOR_GET_R(*vdb_buf_tmp), LV_COLOR_GET_G(*vdb_buf_tmp), LV_COLOR_GET_B(*vdb_buf_tmp)};
    7ce6:	7822      	ldrb	r2, [r4, #0]
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
    7ce8:	f002 0c1f 	and.w	ip, r2, #31
    7cec:	f1c0 02ff 	rsb	r2, r0, #255	; 0xff
    7cf0:	fb16 f000 	smulbb	r0, r6, r0
    7cf4:	fb0c 0202 	mla	r2, ip, r2, r0
    7cf8:	08db      	lsrs	r3, r3, #3
    7cfa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
    7cfe:	f3c2 2204 	ubfx	r2, r2, #8, #5
    7d02:	ea43 0002 	orr.w	r0, r3, r2
                        uint8_t bg_rgb[3] = {LV_COLOR_GET_R(*vdb_buf_tmp), LV_COLOR_GET_G(*vdb_buf_tmp), LV_COLOR_GET_B(*vdb_buf_tmp)};
    7d06:	7863      	ldrb	r3, [r4, #1]
                        LV_COLOR_SET_R(res_color, (uint16_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8);
    7d08:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
    7d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7d0e:	f1c1 02ff 	rsb	r2, r1, #255	; 0xff
    7d12:	fb13 f301 	smulbb	r3, r3, r1
    7d16:	fb0c 3302 	mla	r3, ip, r2, r3
    7d1a:	f3c3 2307 	ubfx	r3, r3, #8, #8
                        LV_COLOR_SET_B(res_color, (uint16_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8);
    7d1e:	ea40 23c3 	orr.w	r3, r0, r3, lsl #11
                        vdb_buf_tmp->full = res_color.full;
    7d22:	f824 3b02 	strh.w	r3, [r4], #2
                    sub_px_cnt = 0;
    7d26:	f04f 0800 	mov.w	r8, #0
    7d2a:	e784      	b.n	7c36 <lv_draw_letter+0x382>
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
    7d2c:	2908      	cmp	r1, #8
                                : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
    7d2e:	bf1c      	itt	ne
    7d30:	9b05      	ldrne	r3, [sp, #20]
    7d32:	5c9a      	ldrbne	r2, [r3, r2]
    7d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7d36:	fb12 f203 	smulbb	r2, r2, r3
                        px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
    7d3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
                    font_rgb[sub_px_cnt] = px_opa;
    7d3e:	e7b2      	b.n	7ca6 <lv_draw_letter+0x3f2>
                col_bit = 0;
    7d40:	2300      	movs	r3, #0
                bitmask = bitmask_init;
    7d42:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
                col_bit = 0;
    7d46:	9304      	str	r3, [sp, #16]
                map_p++;
    7d48:	f10b 0b01 	add.w	fp, fp, #1
    7d4c:	e782      	b.n	7c54 <lv_draw_letter+0x3a0>
        else vdb_buf_tmp += vdb_width - (col_end - col_start);
    7d4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7d50:	e738      	b.n	7bc4 <lv_draw_letter+0x310>
    7d52:	bf00      	nop

00007d54 <lv_img_src_get_type>:
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;

    if(src == NULL) return img_src_type;
    7d54:	b150      	cbz	r0, 7d6c <lv_img_src_get_type+0x18>
    const uint8_t * u8_p = src;

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
    7d56:	7803      	ldrb	r3, [r0, #0]
    7d58:	f1a3 0220 	sub.w	r2, r3, #32
    7d5c:	2a5f      	cmp	r2, #95	; 0x5f
    7d5e:	d907      	bls.n	7d70 <lv_img_src_get_type+0x1c>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    } else if(u8_p[0] >= 0x80) {
    7d60:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
    7d64:	bf14      	ite	ne
    7d66:	2002      	movne	r0, #2
    7d68:	2000      	moveq	r0, #0
    7d6a:	4770      	bx	lr
    if(src == NULL) return img_src_type;
    7d6c:	2003      	movs	r0, #3
    7d6e:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    7d70:	2001      	movs	r0, #1
    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
}
    7d72:	4770      	bx	lr

00007d74 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
    7d74:	4a12      	ldr	r2, [pc, #72]	; (7dc0 <lv_draw_get_buf+0x4c>)
{
    7d76:	b538      	push	{r3, r4, r5, lr}
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
    7d78:	6815      	ldr	r5, [r2, #0]
    7d7a:	4c12      	ldr	r4, [pc, #72]	; (7dc4 <lv_draw_get_buf+0x50>)
    7d7c:	4285      	cmp	r5, r0
    7d7e:	6823      	ldr	r3, [r4, #0]
{
    7d80:	4601      	mov	r1, r0
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
    7d82:	d21b      	bcs.n	7dbc <lv_draw_get_buf+0x48>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
    7d84:	6010      	str	r0, [r2, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
    7d86:	b95b      	cbnz	r3, 7da0 <lv_draw_get_buf+0x2c>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
    7d88:	f7fb fabc 	bl	3304 <lv_mem_alloc>
    7d8c:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(LV_GC_ROOT(_lv_draw_buf));
    7d8e:	f002 fcc7 	bl	a720 <lv_debug_check_null>
    7d92:	4603      	mov	r3, r0
    7d94:	b988      	cbnz	r0, 7dba <lv_draw_get_buf+0x46>
    7d96:	6822      	ldr	r2, [r4, #0]
    7d98:	480b      	ldr	r0, [pc, #44]	; (7dc8 <lv_draw_get_buf+0x54>)
    7d9a:	f002 fcd1 	bl	a740 <lv_debug_log_error>
    7d9e:	e7fe      	b.n	7d9e <lv_draw_get_buf+0x2a>
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
    7da0:	4618      	mov	r0, r3
    7da2:	f7fb fae3 	bl	336c <lv_mem_realloc>
    7da6:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_draw_buf));
    7da8:	f002 fcba 	bl	a720 <lv_debug_check_null>
    7dac:	4603      	mov	r3, r0
    7dae:	b920      	cbnz	r0, 7dba <lv_draw_get_buf+0x46>
    7db0:	6822      	ldr	r2, [r4, #0]
    7db2:	4805      	ldr	r0, [pc, #20]	; (7dc8 <lv_draw_get_buf+0x54>)
    7db4:	f002 fcc4 	bl	a740 <lv_debug_log_error>
    7db8:	e7fe      	b.n	7db8 <lv_draw_get_buf+0x44>
    return LV_GC_ROOT(_lv_draw_buf);
    7dba:	6823      	ldr	r3, [r4, #0]
}
    7dbc:	4618      	mov	r0, r3
    7dbe:	bd38      	pop	{r3, r4, r5, pc}
    7dc0:	20004ca4 	.word	0x20004ca4
    7dc4:	20005f28 	.word	0x20005f28
    7dc8:	0001a9b8 	.word	0x0001a9b8

00007dcc <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
    7dcc:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
    7dce:	4c05      	ldr	r4, [pc, #20]	; (7de4 <lv_draw_free_buf+0x18>)
    7dd0:	6820      	ldr	r0, [r4, #0]
    7dd2:	b128      	cbz	r0, 7de0 <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
    7dd4:	f7fb faac 	bl	3330 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
    7dd8:	4a03      	ldr	r2, [pc, #12]	; (7de8 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
    7dda:	2300      	movs	r3, #0
    7ddc:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
    7dde:	6013      	str	r3, [r2, #0]
    }
}
    7de0:	bd10      	pop	{r4, pc}
    7de2:	bf00      	nop
    7de4:	20005f28 	.word	0x20005f28
    7de8:	20004ca4 	.word	0x20004ca4

00007dec <lv_draw_aa_get_opa>:
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
    7dec:	b188      	cbz	r0, 7e12 <lv_draw_aa_get_opa+0x26>
        return LV_OPA_TRANSP;
    else if(seg < 8)
    7dee:	2807      	cmp	r0, #7
    7df0:	dc08      	bgt.n	7e04 <lv_draw_aa_get_opa+0x18>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
    7df2:	1e43      	subs	r3, r0, #1
    7df4:	4807      	ldr	r0, [pc, #28]	; (7e14 <lv_draw_aa_get_opa+0x28>)
    7df6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    7dfa:	5c5b      	ldrb	r3, [r3, r1]
    7dfc:	fb13 f002 	smulbb	r0, r3, r2
    7e00:	0a00      	lsrs	r0, r0, #8
    7e02:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
    7e04:	0049      	lsls	r1, r1, #1
    7e06:	fb01 2202 	mla	r2, r1, r2, r2
    7e0a:	0040      	lsls	r0, r0, #1
    7e0c:	fb92 f0f0 	sdiv	r0, r2, r0
    7e10:	b2c0      	uxtb	r0, r0
    }
}
    7e12:	4770      	bx	lr
    7e14:	0001a9fc 	.word	0x0001a9fc

00007e18 <lv_draw_aa_ver_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_ver_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
    7e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool aa_inv = false;
    if(length < 0) {
    7e1c:	1e14      	subs	r4, r2, #0
        aa_inv = true;
        length = -length;
    7e1e:	bfb8      	it	lt
    7e20:	4264      	neglt	r4, r4
{
    7e22:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    7e26:	4606      	mov	r6, r0
    7e28:	460f      	mov	r7, r1
    7e2a:	4698      	mov	r8, r3
        length = -length;
    7e2c:	bfba      	itte	lt
    7e2e:	b224      	sxthlt	r4, r4
        aa_inv = true;
    7e30:	f04f 0901 	movlt.w	r9, #1
    bool aa_inv = false;
    7e34:	f04f 0900 	movge.w	r9, #0
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
    7e38:	2500      	movs	r5, #0
    7e3a:	b229      	sxth	r1, r5
    7e3c:	428c      	cmp	r4, r1
    7e3e:	fa1f fb85 	uxth.w	fp, r5
    7e42:	dc02      	bgt.n	7e4a <lv_draw_aa_ver_seg+0x32>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
        if(aa_inv) px_opa = opa - px_opa;
        lv_draw_px(x, y + i, mask, color, px_opa);
    }
}
    7e44:	b003      	add	sp, #12
    7e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
    7e4a:	4652      	mov	r2, sl
    7e4c:	4620      	mov	r0, r4
    7e4e:	f7ff ffcd 	bl	7dec <lv_draw_aa_get_opa>
        if(aa_inv) px_opa = opa - px_opa;
    7e52:	f1b9 0f00 	cmp.w	r9, #0
    7e56:	d002      	beq.n	7e5e <lv_draw_aa_ver_seg+0x46>
    7e58:	ebaa 0000 	sub.w	r0, sl, r0
    7e5c:	b2c0      	uxtb	r0, r0
        lv_draw_px(x, y + i, mask, color, px_opa);
    7e5e:	eb0b 0107 	add.w	r1, fp, r7
    7e62:	9000      	str	r0, [sp, #0]
    7e64:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    7e68:	4642      	mov	r2, r8
    7e6a:	b209      	sxth	r1, r1
    7e6c:	4630      	mov	r0, r6
    7e6e:	f7ff fc2c 	bl	76ca <lv_draw_px>
    for(i = 0; i < length; i++) {
    7e72:	3501      	adds	r5, #1
    7e74:	e7e1      	b.n	7e3a <lv_draw_aa_ver_seg+0x22>

00007e76 <lv_draw_aa_hor_seg>:
 * @param color color of pixels
 * @param opa maximum opacity
 */
void lv_draw_aa_hor_seg(lv_coord_t x, lv_coord_t y, lv_coord_t length, const lv_area_t * mask, lv_color_t color,
                        lv_opa_t opa)
{
    7e76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool aa_inv = false;
    if(length < 0) {
    7e7a:	1e14      	subs	r4, r2, #0
        aa_inv = true;
        length = -length;
    7e7c:	bfb8      	it	lt
    7e7e:	4264      	neglt	r4, r4
{
    7e80:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    7e84:	4606      	mov	r6, r0
    7e86:	460f      	mov	r7, r1
    7e88:	4698      	mov	r8, r3
        length = -length;
    7e8a:	bfba      	itte	lt
    7e8c:	b224      	sxthlt	r4, r4
        aa_inv = true;
    7e8e:	f04f 0901 	movlt.w	r9, #1
    bool aa_inv = false;
    7e92:	f04f 0900 	movge.w	r9, #0
    }

    lv_coord_t i;
    for(i = 0; i < length; i++) {
    7e96:	2500      	movs	r5, #0
    7e98:	b229      	sxth	r1, r5
    7e9a:	428c      	cmp	r4, r1
    7e9c:	fa1f fb85 	uxth.w	fp, r5
    7ea0:	dc02      	bgt.n	7ea8 <lv_draw_aa_hor_seg+0x32>
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
        if(aa_inv) px_opa = opa - px_opa;
        lv_draw_px(x + i, y, mask, color, px_opa);
    }
}
    7ea2:	b003      	add	sp, #12
    7ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_opa_t px_opa = lv_draw_aa_get_opa(length, i, opa);
    7ea8:	4652      	mov	r2, sl
    7eaa:	4620      	mov	r0, r4
    7eac:	f7ff ff9e 	bl	7dec <lv_draw_aa_get_opa>
        if(aa_inv) px_opa = opa - px_opa;
    7eb0:	f1b9 0f00 	cmp.w	r9, #0
    7eb4:	d002      	beq.n	7ebc <lv_draw_aa_hor_seg+0x46>
    7eb6:	ebaa 0000 	sub.w	r0, sl, r0
    7eba:	b2c0      	uxtb	r0, r0
        lv_draw_px(x + i, y, mask, color, px_opa);
    7ebc:	44b3      	add	fp, r6
    7ebe:	9000      	str	r0, [sp, #0]
    7ec0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    7ec4:	4642      	mov	r2, r8
    7ec6:	4639      	mov	r1, r7
    7ec8:	fa0f f08b 	sxth.w	r0, fp
    7ecc:	f7ff fbfd 	bl	76ca <lv_draw_px>
    for(i = 0; i < length; i++) {
    7ed0:	3501      	adds	r5, #1
    7ed2:	e7e1      	b.n	7e98 <lv_draw_aa_hor_seg+0x22>

00007ed4 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
    7ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    7ed8:	4b12      	ldr	r3, [pc, #72]	; (7f24 <lv_img_cache_invalidate_src+0x50>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
    7eda:	4f13      	ldr	r7, [pc, #76]	; (7f28 <lv_img_cache_invalidate_src+0x54>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    7edc:	f8d3 8000 	ldr.w	r8, [r3]
{
    7ee0:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
    7ee2:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
    7ee4:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
    7ee8:	883a      	ldrh	r2, [r7, #0]
    7eea:	b2ab      	uxth	r3, r5
    7eec:	429a      	cmp	r2, r3
    7eee:	d801      	bhi.n	7ef4 <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
    7ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
    7ef4:	b2ac      	uxth	r4, r5
    7ef6:	fb09 8404 	mla	r4, r9, r4, r8
    7efa:	6863      	ldr	r3, [r4, #4]
    7efc:	42b3      	cmp	r3, r6
    7efe:	d000      	beq.n	7f02 <lv_img_cache_invalidate_src+0x2e>
    7f00:	b96e      	cbnz	r6, 7f1e <lv_img_cache_invalidate_src+0x4a>
            if(cache[i].dec_dsc.src != NULL) {
    7f02:	b113      	cbz	r3, 7f0a <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
    7f04:	4620      	mov	r0, r4
    7f06:	f7fc feaf 	bl	4c68 <lv_img_decoder_close>
            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
    7f0a:	2224      	movs	r2, #36	; 0x24
    7f0c:	2100      	movs	r1, #0
    7f0e:	4620      	mov	r0, r4
    7f10:	f00c f9de 	bl	142d0 <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
    7f14:	2228      	movs	r2, #40	; 0x28
    7f16:	2100      	movs	r1, #0
    7f18:	4620      	mov	r0, r4
    7f1a:	f00c f9d9 	bl	142d0 <memset>
    for(i = 0; i < entry_cnt; i++) {
    7f1e:	3501      	adds	r5, #1
    7f20:	e7e2      	b.n	7ee8 <lv_img_cache_invalidate_src+0x14>
    7f22:	bf00      	nop
    7f24:	20005f54 	.word	0x20005f54
    7f28:	20004ca8 	.word	0x20004ca8

00007f2c <lv_img_cache_set_size>:
{
    7f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
    7f30:	4c1c      	ldr	r4, [pc, #112]	; (7fa4 <lv_img_cache_set_size+0x78>)
    7f32:	6823      	ldr	r3, [r4, #0]
{
    7f34:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
    7f36:	b12b      	cbz	r3, 7f44 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
    7f38:	2000      	movs	r0, #0
    7f3a:	f7ff ffcb 	bl	7ed4 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
    7f3e:	6820      	ldr	r0, [r4, #0]
    7f40:	f7fb f9f6 	bl	3330 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
    7f44:	2728      	movs	r7, #40	; 0x28
    7f46:	fb07 f005 	mul.w	r0, r7, r5
    7f4a:	f7fb f9db 	bl	3304 <lv_mem_alloc>
    7f4e:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    7f50:	f002 fbe6 	bl	a720 <lv_debug_check_null>
    7f54:	4603      	mov	r3, r0
    7f56:	b920      	cbnz	r0, 7f62 <lv_img_cache_set_size+0x36>
    7f58:	6822      	ldr	r2, [r4, #0]
    7f5a:	4813      	ldr	r0, [pc, #76]	; (7fa8 <lv_img_cache_set_size+0x7c>)
    7f5c:	f002 fbf0 	bl	a740 <lv_debug_log_error>
    7f60:	e7fe      	b.n	7f60 <lv_img_cache_set_size+0x34>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
    7f62:	6823      	ldr	r3, [r4, #0]
    7f64:	f8df 8044 	ldr.w	r8, [pc, #68]	; 7fac <lv_img_cache_set_size+0x80>
    7f68:	b91b      	cbnz	r3, 7f72 <lv_img_cache_set_size+0x46>
        entry_cnt = 0;
    7f6a:	f8a8 3000 	strh.w	r3, [r8]
}
    7f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
    7f72:	f8a8 5000 	strh.w	r5, [r8]
    for(i = 0; i < entry_cnt; i++) {
    7f76:	2500      	movs	r5, #0
    7f78:	f8b8 2000 	ldrh.w	r2, [r8]
    7f7c:	b2ab      	uxth	r3, r5
    7f7e:	429a      	cmp	r2, r3
    7f80:	d9f5      	bls.n	7f6e <lv_img_cache_set_size+0x42>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
    7f82:	6820      	ldr	r0, [r4, #0]
    7f84:	b2ae      	uxth	r6, r5
    7f86:	437e      	muls	r6, r7
    7f88:	2224      	movs	r2, #36	; 0x24
    7f8a:	2100      	movs	r1, #0
    7f8c:	4430      	add	r0, r6
    7f8e:	f00c f99f 	bl	142d0 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
    7f92:	6820      	ldr	r0, [r4, #0]
    7f94:	2228      	movs	r2, #40	; 0x28
    7f96:	2100      	movs	r1, #0
    7f98:	4430      	add	r0, r6
    7f9a:	f00c f999 	bl	142d0 <memset>
    for(i = 0; i < entry_cnt; i++) {
    7f9e:	3501      	adds	r5, #1
    7fa0:	e7ea      	b.n	7f78 <lv_img_cache_set_size+0x4c>
    7fa2:	bf00      	nop
    7fa4:	20005f54 	.word	0x20005f54
    7fa8:	0001a9b8 	.word	0x0001a9b8
    7fac:	20004ca8 	.word	0x20004ca8

00007fb0 <lv_tick_get>:
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
                                Continue until make a non interrupted cycle */

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
    7fb0:	4b01      	ldr	r3, [pc, #4]	; (7fb8 <lv_tick_get+0x8>)
    7fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
#endif
}
    7fb6:	4770      	bx	lr
    7fb8:	20005ef8 	.word	0x20005ef8

00007fbc <lv_tick_elaps>:
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
    7fbc:	4b02      	ldr	r3, [pc, #8]	; (7fc8 <lv_tick_elaps+0xc>)
    7fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
    7fc2:	1a10      	subs	r0, r2, r0
    7fc4:	4770      	bx	lr
    7fc6:	bf00      	nop
    7fc8:	20005ef8 	.word	0x20005ef8

00007fcc <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
    7fcc:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
    7fce:	2220      	movs	r2, #32
{
    7fd0:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
    7fd2:	2100      	movs	r1, #0
    7fd4:	f00c f97c 	bl	142d0 <memset>
    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
    driver->ver_res          = LV_VER_RES_MAX;
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
    7fd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
    7fdc:	83a3      	strh	r3, [r4, #28]
    driver->hor_res          = LV_HOR_RES_MAX;
    7fde:	4b06      	ldr	r3, [pc, #24]	; (7ff8 <lv_disp_drv_init+0x2c>)
    driver->flush_cb         = NULL;
    7fe0:	2200      	movs	r2, #0
    driver->buffer           = NULL;
    7fe2:	e9c4 3200 	strd	r3, r2, [r4]

#if LV_ANTIALIAS
    driver->antialiasing = true;
    7fe6:	7a23      	ldrb	r3, [r4, #8]
    driver->flush_cb         = NULL;
    7fe8:	60e2      	str	r2, [r4, #12]
    driver->antialiasing = true;
    7fea:	f023 0303 	bic.w	r3, r3, #3
    7fee:	f043 0301 	orr.w	r3, r3, #1
    7ff2:	7223      	strb	r3, [r4, #8]

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
    7ff4:	6162      	str	r2, [r4, #20]
}
    7ff6:	bd10      	pop	{r4, pc}
    7ff8:	014001e0 	.word	0x014001e0

00007ffc <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
    7ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ffe:	4604      	mov	r4, r0
    8000:	460d      	mov	r5, r1
    8002:	4617      	mov	r7, r2
    8004:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
    8006:	221c      	movs	r2, #28
    8008:	2100      	movs	r1, #0
    800a:	f00c f961 	bl	142d0 <memset>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
    800e:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->buf_act = disp_buf->buf1;
    disp_buf->size    = size_in_px_cnt;
    8012:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
    8016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008018 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
    8018:	b573      	push	{r0, r1, r4, r5, r6, lr}
    801a:	9001      	str	r0, [sp, #4]
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
    801c:	4832      	ldr	r0, [pc, #200]	; (80e8 <lv_disp_drv_register+0xd0>)
    801e:	f7fb fa1a 	bl	3456 <lv_ll_ins_head>
    if(!disp) {
    8022:	9901      	ldr	r1, [sp, #4]
    8024:	4604      	mov	r4, r0
    8026:	b960      	cbnz	r0, 8042 <lv_disp_drv_register+0x2a>
        LV_ASSERT_MEM(disp);
    8028:	f002 fb7a 	bl	a720 <lv_debug_check_null>
    802c:	b118      	cbz	r0, 8036 <lv_disp_drv_register+0x1e>
        return NULL;
    802e:	2400      	movs	r4, #0
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/

    return disp;
}
    8030:	4620      	mov	r0, r4
    8032:	b002      	add	sp, #8
    8034:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MEM(disp);
    8036:	482d      	ldr	r0, [pc, #180]	; (80ec <lv_disp_drv_register+0xd4>)
    8038:	2200      	movs	r2, #0
    803a:	2300      	movs	r3, #0
    803c:	f002 fb80 	bl	a740 <lv_debug_log_error>
    8040:	e7fe      	b.n	8040 <lv_disp_drv_register+0x28>
    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
    8042:	2220      	movs	r2, #32
    8044:	f00c f936 	bl	142b4 <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
    8048:	2220      	movs	r2, #32
    804a:	2100      	movs	r1, #0
    804c:	f504 709e 	add.w	r0, r4, #316	; 0x13c
    8050:	f00c f93e 	bl	142d0 <memset>
    if(disp_def == NULL) disp_def = disp;
    8054:	4d26      	ldr	r5, [pc, #152]	; (80f0 <lv_disp_drv_register+0xd8>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
    8056:	f44f 7280 	mov.w	r2, #256	; 0x100
    805a:	2100      	movs	r1, #0
    805c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    8060:	f00c f936 	bl	142d0 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
    8064:	2140      	movs	r1, #64	; 0x40
    8066:	f104 0024 	add.w	r0, r4, #36	; 0x24
    806a:	f7fb f9ea 	bl	3442 <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
    806e:	682b      	ldr	r3, [r5, #0]
    8070:	b903      	cbnz	r3, 8074 <lv_disp_drv_register+0x5c>
    8072:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
    8074:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
    lv_disp_t * disp_def_tmp = disp_def;
    8078:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
    807a:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
    807c:	f36f 0309 	bfc	r3, #0, #10
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
    8080:	2100      	movs	r1, #0
    disp->inv_p = 0;
    8082:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
    8086:	4608      	mov	r0, r1
    8088:	f003 fa26 	bl	b4d8 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
    808c:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
    808e:	6320      	str	r0, [r4, #48]	; 0x30
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
    8090:	4608      	mov	r0, r1
    8092:	f003 fa21 	bl	b4d8 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
    8096:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
    8098:	6360      	str	r0, [r4, #52]	; 0x34
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
    809a:	4608      	mov	r0, r1
    809c:	f003 fa1c 	bl	b4d8 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
    80a0:	4914      	ldr	r1, [pc, #80]	; (80f4 <lv_disp_drv_register+0xdc>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
    80a2:	63a0      	str	r0, [r4, #56]	; 0x38
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
    80a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    80a6:	f003 f997 	bl	b3d8 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
    80aa:	4912      	ldr	r1, [pc, #72]	; (80f4 <lv_disp_drv_register+0xdc>)
    80ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    80ae:	f003 f993 	bl	b3d8 <lv_obj_set_style>
    lv_obj_invalidate(disp->act_scr);
    80b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    80b4:	f002 fdf0 	bl	ac98 <lv_obj_invalidate>
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
    80b8:	4623      	mov	r3, r4
    80ba:	2203      	movs	r2, #3
    80bc:	2121      	movs	r1, #33	; 0x21
    80be:	480e      	ldr	r0, [pc, #56]	; (80f8 <lv_disp_drv_register+0xe0>)
    disp_def = disp_def_tmp; /*Revert the default display*/
    80c0:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
    80c2:	f7fb fc7b 	bl	39bc <lv_task_create>
    80c6:	6220      	str	r0, [r4, #32]
    LV_ASSERT_MEM(disp->refr_task);
    80c8:	f002 fb2a 	bl	a720 <lv_debug_check_null>
    80cc:	6a22      	ldr	r2, [r4, #32]
    80ce:	4603      	mov	r3, r0
    80d0:	b918      	cbnz	r0, 80da <lv_disp_drv_register+0xc2>
    80d2:	4806      	ldr	r0, [pc, #24]	; (80ec <lv_disp_drv_register+0xd4>)
    80d4:	f002 fb34 	bl	a740 <lv_debug_log_error>
    80d8:	e7fe      	b.n	80d8 <lv_disp_drv_register+0xc0>
    if(disp->refr_task == NULL) return NULL;
    80da:	2a00      	cmp	r2, #0
    80dc:	d0a7      	beq.n	802e <lv_disp_drv_register+0x16>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
    80de:	4610      	mov	r0, r2
    80e0:	f7fb fc8a 	bl	39f8 <lv_task_ready>
    return disp;
    80e4:	e7a4      	b.n	8030 <lv_disp_drv_register+0x18>
    80e6:	bf00      	nop
    80e8:	20005f2c 	.word	0x20005f2c
    80ec:	0001a9b8 	.word	0x0001a9b8
    80f0:	20004cac 	.word	0x20004cac
    80f4:	20005fbc 	.word	0x20005fbc
    80f8:	0000a3dd 	.word	0x0000a3dd

000080fc <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
    80fc:	4b01      	ldr	r3, [pc, #4]	; (8104 <lv_disp_get_default+0x8>)
    80fe:	6818      	ldr	r0, [r3, #0]
    8100:	4770      	bx	lr
    8102:	bf00      	nop
    8104:	20004cac 	.word	0x20004cac

00008108 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
    8108:	b910      	cbnz	r0, 8110 <lv_disp_get_hor_res+0x8>
    return disp_def;
    810a:	4b07      	ldr	r3, [pc, #28]	; (8128 <lv_disp_get_hor_res+0x20>)
    810c:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
    810e:	b138      	cbz	r0, 8120 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
    8110:	7a03      	ldrb	r3, [r0, #8]
    8112:	079b      	lsls	r3, r3, #30
    8114:	bf54      	ite	pl
    8116:	f9b0 0000 	ldrshpl.w	r0, [r0]
    811a:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
    811e:	4770      	bx	lr
        return LV_HOR_RES_MAX;
    8120:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
    8124:	4770      	bx	lr
    8126:	bf00      	nop
    8128:	20004cac 	.word	0x20004cac

0000812c <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
    812c:	b910      	cbnz	r0, 8134 <lv_disp_get_ver_res+0x8>
    return disp_def;
    812e:	4b07      	ldr	r3, [pc, #28]	; (814c <lv_disp_get_ver_res+0x20>)
    8130:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
    8132:	b138      	cbz	r0, 8144 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
    8134:	7a03      	ldrb	r3, [r0, #8]
    8136:	079b      	lsls	r3, r3, #30
    8138:	bf54      	ite	pl
    813a:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
    813e:	f9b0 0000 	ldrshmi.w	r0, [r0]
    8142:	4770      	bx	lr
        return LV_VER_RES_MAX;
    8144:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
    8148:	4770      	bx	lr
    814a:	bf00      	nop
    814c:	20004cac 	.word	0x20004cac

00008150 <lv_disp_get_antialiasing>:
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
    8150:	b910      	cbnz	r0, 8158 <lv_disp_get_antialiasing+0x8>
    return disp_def;
    8152:	4b03      	ldr	r3, [pc, #12]	; (8160 <lv_disp_get_antialiasing+0x10>)
    8154:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return false;
    8156:	b110      	cbz	r0, 815e <lv_disp_get_antialiasing+0xe>

    return disp->driver.antialiasing ? true : false;
    8158:	7a00      	ldrb	r0, [r0, #8]
    815a:	f000 0001 	and.w	r0, r0, #1
#endif
}
    815e:	4770      	bx	lr
    8160:	20004cac 	.word	0x20004cac

00008164 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
    8164:	6842      	ldr	r2, [r0, #4]
    8166:	7e13      	ldrb	r3, [r2, #24]
    8168:	f36f 0300 	bfc	r3, #0, #1
    816c:	7613      	strb	r3, [r2, #24]
}
    816e:	4770      	bx	lr

00008170 <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
    8170:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    8172:	4803      	ldr	r0, [pc, #12]	; (8180 <lv_disp_get_next+0x10>)
    if(disp == NULL)
    8174:	b909      	cbnz	r1, 817a <lv_disp_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    8176:	f7fb b9aa 	b.w	34ce <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
    817a:	f7fb b9ae 	b.w	34da <lv_ll_get_next>
    817e:	bf00      	nop
    8180:	20005f2c 	.word	0x20005f2c

00008184 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
    8184:	6840      	ldr	r0, [r0, #4]
    8186:	4770      	bx	lr

00008188 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
    8188:	f8b0 015c 	ldrh.w	r0, [r0, #348]	; 0x15c
}
    818c:	f3c0 0009 	ubfx	r0, r0, #0, #10
    8190:	4770      	bx	lr

00008192 <lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
    8192:	f8b0 215c 	ldrh.w	r2, [r0, #348]	; 0x15c
    8196:	f3c2 0309 	ubfx	r3, r2, #0, #10
    819a:	428b      	cmp	r3, r1
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
    819c:	bfa8      	it	ge
    819e:	1a59      	subge	r1, r3, r1
    81a0:	f8b0 315c 	ldrh.w	r3, [r0, #348]	; 0x15c
    81a4:	bfac      	ite	ge
    81a6:	f3c1 0109 	ubfxge	r1, r1, #0, #10
        disp->inv_p = 0;
    81aa:	2100      	movlt	r1, #0
    81ac:	f361 0309 	bfi	r3, r1, #0, #10
    81b0:	f8a0 315c 	strh.w	r3, [r0, #348]	; 0x15c
}
    81b4:	4770      	bx	lr

000081b6 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
    81b6:	6843      	ldr	r3, [r0, #4]
    81b8:	6818      	ldr	r0, [r3, #0]
    81ba:	b118      	cbz	r0, 81c4 <lv_disp_is_double_buf+0xe>
    81bc:	6858      	ldr	r0, [r3, #4]
    81be:	3800      	subs	r0, #0
    81c0:	bf18      	it	ne
    81c2:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
    81c4:	4770      	bx	lr

000081c6 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
    81c6:	b508      	push	{r3, lr}
    81c8:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
    81ca:	f7ff fff4 	bl	81b6 <lv_disp_is_double_buf>
    81ce:	b140      	cbz	r0, 81e2 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
    81d0:	8850      	ldrh	r0, [r2, #2]
    81d2:	8813      	ldrh	r3, [r2, #0]
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
    81d4:	6852      	ldr	r2, [r2, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
    81d6:	fb13 f300 	smulbb	r3, r3, r0
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
    81da:	68d0      	ldr	r0, [r2, #12]
    81dc:	1a1b      	subs	r3, r3, r0
    81de:	4258      	negs	r0, r3
    81e0:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
    81e2:	bd08      	pop	{r3, pc}

000081e4 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
    81e4:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_indev_drv_t));
    81e6:	221c      	movs	r2, #28
{
    81e8:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_indev_drv_t));
    81ea:	2100      	movs	r1, #0
    81ec:	f00c f870 	bl	142d0 <memset>

    driver->type                = LV_INDEV_TYPE_NONE;
    81f0:	2300      	movs	r3, #0
    81f2:	7023      	strb	r3, [r4, #0]
    driver->drag_limit          = LV_INDEV_DEF_DRAG_LIMIT;
    81f4:	4b02      	ldr	r3, [pc, #8]	; (8200 <lv_indev_drv_init+0x1c>)
    81f6:	6163      	str	r3, [r4, #20]
    driver->drag_throw          = LV_INDEV_DEF_DRAG_THROW;
    driver->long_press_time     = LV_INDEV_DEF_LONG_PRESS_TIME;
    driver->long_press_rep_time = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    81f8:	2364      	movs	r3, #100	; 0x64
    81fa:	8323      	strh	r3, [r4, #24]
}
    81fc:	bd10      	pop	{r4, pc}
    81fe:	bf00      	nop
    8200:	0190140a 	.word	0x0190140a

00008204 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
    8204:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
    8206:	68c3      	ldr	r3, [r0, #12]
{
    8208:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
    820a:	b16b      	cbz	r3, 8228 <lv_indev_drv_register+0x24>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attache the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
    820c:	4818      	ldr	r0, [pc, #96]	; (8270 <lv_indev_drv_register+0x6c>)
    820e:	f7fb f922 	bl	3456 <lv_ll_ins_head>
    if(!indev) {
    8212:	4604      	mov	r4, r0
    8214:	b980      	cbnz	r0, 8238 <lv_indev_drv_register+0x34>
        LV_ASSERT_MEM(indev);
    8216:	f002 fa83 	bl	a720 <lv_debug_check_null>
    821a:	b950      	cbnz	r0, 8232 <lv_indev_drv_register+0x2e>
    821c:	4815      	ldr	r0, [pc, #84]	; (8274 <lv_indev_drv_register+0x70>)
    821e:	2200      	movs	r2, #0
    8220:	2300      	movs	r3, #0
    8222:	f002 fa8d 	bl	a740 <lv_debug_log_error>
    8226:	e7fe      	b.n	8226 <lv_indev_drv_register+0x22>
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
    8228:	f7ff ff68 	bl	80fc <lv_disp_get_default>
    822c:	60e8      	str	r0, [r5, #12]
    if(driver->disp == NULL) {
    822e:	2800      	cmp	r0, #0
    8230:	d1ec      	bne.n	820c <lv_indev_drv_register+0x8>
        return NULL;
    8232:	2400      	movs	r4, #0
    indev->btn_points       = NULL;

    indev->driver.read_task = lv_task_create(lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_MID, indev);

    return indev;
}
    8234:	4620      	mov	r0, r4
    8236:	bd38      	pop	{r3, r4, r5, pc}
    memset(indev, 0, sizeof(lv_indev_t));
    8238:	225c      	movs	r2, #92	; 0x5c
    823a:	2100      	movs	r1, #0
    823c:	f00c f848 	bl	142d0 <memset>
    memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
    8240:	221c      	movs	r2, #28
    8242:	4629      	mov	r1, r5
    8244:	4620      	mov	r0, r4
    8246:	f00c f835 	bl	142b4 <memcpy>
    indev->proc.reset_query = 1;
    824a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    indev->driver.read_task = lv_task_create(lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_MID, indev);
    824e:	480a      	ldr	r0, [pc, #40]	; (8278 <lv_indev_drv_register+0x74>)
    indev->proc.reset_query = 1;
    8250:	f043 0302 	orr.w	r3, r3, #2
    8254:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    indev->cursor           = NULL;
    8258:	2300      	movs	r3, #0
    indev->group            = NULL;
    825a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
    indev->btn_points       = NULL;
    825e:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->driver.read_task = lv_task_create(lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_MID, indev);
    8260:	2203      	movs	r2, #3
    8262:	4623      	mov	r3, r4
    8264:	2121      	movs	r1, #33	; 0x21
    8266:	f7fb fba9 	bl	39bc <lv_task_create>
    826a:	6120      	str	r0, [r4, #16]
    return indev;
    826c:	e7e2      	b.n	8234 <lv_indev_drv_register+0x30>
    826e:	bf00      	nop
    8270:	20005f1c 	.word	0x20005f1c
    8274:	0001a9b8 	.word	0x0001a9b8
    8278:	00009f89 	.word	0x00009f89

0000827c <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
    827c:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    827e:	4803      	ldr	r0, [pc, #12]	; (828c <lv_indev_get_next+0x10>)
    if(indev == NULL)
    8280:	b909      	cbnz	r1, 8286 <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    8282:	f7fb b924 	b.w	34ce <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
    8286:	f7fb b928 	b.w	34da <lv_ll_get_next>
    828a:	bf00      	nop
    828c:	20005f1c 	.word	0x20005f1c

00008290 <lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
    8290:	b570      	push	{r4, r5, r6, lr}
    8292:	4604      	mov	r4, r0
    8294:	460d      	mov	r5, r1
    bool cont = false;

    memset(data, 0, sizeof(lv_indev_data_t));
    8296:	2210      	movs	r2, #16
    8298:	2100      	movs	r1, #0
    829a:	4628      	mov	r0, r5
    829c:	f00c f818 	bl	142d0 <memset>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
    82a0:	7823      	ldrb	r3, [r4, #0]
    82a2:	2b01      	cmp	r3, #1
    82a4:	d10a      	bne.n	82bc <lv_indev_read+0x2c>
        data->point.x = indev->proc.types.pointer.act_point.x;
    82a6:	8c23      	ldrh	r3, [r4, #32]
    82a8:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
    82aa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    82ac:	806b      	strh	r3, [r5, #2]
    /*Similarly set at least the last key in case of the  the user doesn't set it  on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
        data->key = indev->proc.types.keypad.last_key;
    }

    if(indev->driver.read_cb) {
    82ae:	6863      	ldr	r3, [r4, #4]
    82b0:	b14b      	cbz	r3, 82c6 <lv_indev_read+0x36>
        LV_LOG_TRACE("idnev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
    82b2:	4629      	mov	r1, r5
    82b4:	4620      	mov	r0, r4
    } else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
    82b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        cont = indev->driver.read_cb(&indev->driver, data);
    82ba:	4718      	bx	r3
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
    82bc:	2b02      	cmp	r3, #2
        data->key = indev->proc.types.keypad.last_key;
    82be:	bf04      	itt	eq
    82c0:	6a63      	ldreq	r3, [r4, #36]	; 0x24
    82c2:	606b      	streq	r3, [r5, #4]
    82c4:	e7f3      	b.n	82ae <lv_indev_read+0x1e>
}
    82c6:	4618      	mov	r0, r3
    82c8:	bd70      	pop	{r4, r5, r6, pc}

000082ca <lv_color_hex3>:
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
}

static inline lv_color_t lv_color_hex3(uint32_t c)
{
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
    82ca:	f3c0 1303 	ubfx	r3, r0, #4, #4
{
    82ce:	b510      	push	{r4, lr}
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
    82d0:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
    82d4:	b2c4      	uxtb	r4, r0
    82d6:	f3c0 1207 	ubfx	r2, r0, #4, #8
    return LV_COLOR_MAKE(r, g, b);
    82da:	4319      	orrs	r1, r3
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
    82dc:	f000 030f 	and.w	r3, r0, #15
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
    82e0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    82e4:	f022 020f 	bic.w	r2, r2, #15
    82e8:	0889      	lsrs	r1, r1, #2
    82ea:	ea42 2010 	orr.w	r0, r2, r0, lsr #8
    82ee:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    82f2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    82f6:	f3c0 00c4 	ubfx	r0, r0, #3, #5
}
    82fa:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
    82fe:	bd10      	pop	{r4, pc}

00008300 <lv_theme_material_init>:
 * @param hue [0..360] hue value from HSV color space to define the theme's base color
 * @param font pointer to a font (NULL to use the default)
 * @return pointer to the initialized theme
 */
lv_theme_t * lv_theme_material_init(uint16_t hue, lv_font_t * font)
{
    8300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(font == NULL) font = LV_FONT_DEFAULT;
    8304:	4bc9      	ldr	r3, [pc, #804]	; (862c <lv_theme_material_init+0x32c>)

    _hue  = hue;
    _font = font;
    8306:	4aca      	ldr	r2, [pc, #808]	; (8630 <lv_theme_material_init+0x330>)

    /*For backward compatibility initialize all theme elements with a default style */
    uint16_t i;
    lv_style_t ** style_p = (lv_style_t **)&theme.style;
    for(i = 0; i < LV_THEME_STYLE_COUNT; i++) {
        *style_p = &def;
    8308:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8640 <lv_theme_material_init+0x340>
    830c:	9200      	str	r2, [sp, #0]
    if(font == NULL) font = LV_FONT_DEFAULT;
    830e:	2900      	cmp	r1, #0
    8310:	bf08      	it	eq
    8312:	4619      	moveq	r1, r3
    _hue  = hue;
    8314:	4bc7      	ldr	r3, [pc, #796]	; (8634 <lv_theme_material_init+0x334>)
    _font = font;
    8316:	6011      	str	r1, [r2, #0]
    _hue  = hue;
    8318:	8018      	strh	r0, [r3, #0]
    lv_style_t ** style_p = (lv_style_t **)&theme.style;
    831a:	4bc7      	ldr	r3, [pc, #796]	; (8638 <lv_theme_material_init+0x338>)
    _font = font;
    831c:	2569      	movs	r5, #105	; 0x69
        *style_p = &def;
    831e:	3d01      	subs	r5, #1
    8320:	b2ad      	uxth	r5, r5
    8322:	f843 8b04 	str.w	r8, [r3], #4
    for(i = 0; i < LV_THEME_STYLE_COUNT; i++) {
    8326:	2d00      	cmp	r5, #0
    8328:	d1f9      	bne.n	831e <lv_theme_material_init+0x1e>
    lv_style_copy(&def, &lv_style_plain); /*Initialize the default style*/
    832a:	49c4      	ldr	r1, [pc, #784]	; (863c <lv_theme_material_init+0x33c>)
    832c:	48c4      	ldr	r0, [pc, #784]	; (8640 <lv_theme_material_init+0x340>)
    lv_style_copy(&bg, &def);
    832e:	f8df 9354 	ldr.w	r9, [pc, #852]	; 8684 <lv_theme_material_init+0x384>
    lv_style_copy(&scr, &bg);
    8332:	f8df a354 	ldr.w	sl, [pc, #852]	; 8688 <lv_theme_material_init+0x388>
    lv_style_copy(&panel, &def);
    8336:	4ec3      	ldr	r6, [pc, #780]	; (8644 <lv_theme_material_init+0x344>)
    rel.body.main_color     = lv_color_hsv_to_rgb(_hue, 90, 70);
    8338:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 8634 <lv_theme_material_init+0x334>
    lv_style_copy(&def, &lv_style_plain); /*Initialize the default style*/
    833c:	f001 f8f3 	bl	9526 <lv_style_copy>
    def.text.font   = _font;
    8340:	9b00      	ldr	r3, [sp, #0]
    lv_style_copy(&bg, &def);
    8342:	49bf      	ldr	r1, [pc, #764]	; (8640 <lv_theme_material_init+0x340>)
    def.text.font   = _font;
    8344:	681b      	ldr	r3, [r3, #0]
    8346:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    def.body.radius = DEF_RADIUS;
    834a:	f04f 0404 	mov.w	r4, #4
    lv_style_copy(&bg, &def);
    834e:	4648      	mov	r0, r9
    def.body.radius = DEF_RADIUS;
    8350:	f8a8 4006 	strh.w	r4, [r8, #6]
    lv_style_copy(&bg, &def);
    8354:	f001 f8e7 	bl	9526 <lv_style_copy>
    bg.body.main_color = lv_color_hex(0xf0f0f0);
    8358:	f24f 739e 	movw	r3, #63390	; 0xf79e
    835c:	f8a9 3002 	strh.w	r3, [r9, #2]
    lv_style_copy(&scr, &bg);
    8360:	4649      	mov	r1, r9
    8362:	4650      	mov	r0, sl
    bg.body.grad_color = bg.body.main_color;
    8364:	f8a9 3004 	strh.w	r3, [r9, #4]
    bg.body.radius     = 0;
    8368:	f8a9 5006 	strh.w	r5, [r9, #6]
    lv_style_copy(&scr, &bg);
    836c:	f001 f8db 	bl	9526 <lv_style_copy>
    lv_style_copy(&panel, &def);
    8370:	49b3      	ldr	r1, [pc, #716]	; (8640 <lv_theme_material_init+0x340>)
    scr.body.padding.bottom = 0;
    8372:	f8ca 5018 	str.w	r5, [sl, #24]
    lv_style_copy(&panel, &def);
    8376:	4630      	mov	r0, r6
    scr.body.padding.top    = 0;
    8378:	f8aa 5016 	strh.w	r5, [sl, #22]
    scr.body.padding.right  = 0;
    837c:	f8aa 501c 	strh.w	r5, [sl, #28]
    lv_style_copy(&panel, &def);
    8380:	f001 f8d1 	bl	9526 <lv_style_copy>
    panel.body.main_color     = LV_COLOR_WHITE;
    8384:	4bb0      	ldr	r3, [pc, #704]	; (8648 <lv_theme_material_init+0x348>)
    panel.body.radius         = DEF_RADIUS;
    8386:	80f4      	strh	r4, [r6, #6]
    panel.body.main_color     = LV_COLOR_WHITE;
    8388:	881b      	ldrh	r3, [r3, #0]
    838a:	f8ad 3006 	strh.w	r3, [sp, #6]
    838e:	b29b      	uxth	r3, r3
    8390:	8073      	strh	r3, [r6, #2]
    panel.body.grad_color     = LV_COLOR_WHITE;
    8392:	80b3      	strh	r3, [r6, #4]
    panel.body.border.color   = lv_color_hex3(0xbbb);
    8394:	f640 30bb 	movw	r0, #3003	; 0xbbb
    panel.body.border.width   = 1;
    8398:	f04f 0301 	mov.w	r3, #1
    839c:	81b3      	strh	r3, [r6, #12]
    panel.body.border.color   = lv_color_hex3(0xbbb);
    839e:	f7ff ff94 	bl	82ca <lv_color_hex3>
    panel.body.border.opa     = LV_OPA_COVER;
    83a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    panel.body.border.color   = lv_color_hex3(0xbbb);
    83a6:	8170      	strh	r0, [r6, #10]
    panel.body.shadow.color   = DEF_SHADOW_COLOR;
    83a8:	f640 20aa 	movw	r0, #2730	; 0xaaa
    panel.body.border.opa     = LV_OPA_COVER;
    83ac:	73f3      	strb	r3, [r6, #15]
    panel.body.shadow.color   = DEF_SHADOW_COLOR;
    83ae:	f7ff ff8c 	bl	82ca <lv_color_hex3>
    panel.body.padding.top    = LV_DPI / 8;
    83b2:	f04f 0314 	mov.w	r3, #20
    83b6:	82f3      	strh	r3, [r6, #22]
    panel.body.padding.bottom = LV_DPI / 8;
    83b8:	f04f 1314 	mov.w	r3, #1310740	; 0x140014
    83bc:	61b3      	str	r3, [r6, #24]
    panel.body.padding.right  = LV_DPI / 8;
    83be:	f5a3 23e0 	sub.w	r3, r3, #458752	; 0x70000
    83c2:	61f3      	str	r3, [r6, #28]
    panel.body.shadow.color   = DEF_SHADOW_COLOR;
    83c4:	8230      	strh	r0, [r6, #16]
    panel.text.color          = lv_color_hex3(0x333);
    83c6:	f240 3033 	movw	r0, #819	; 0x333
    panel.body.shadow.type    = LV_SHADOW_BOTTOM;
    83ca:	7535      	strb	r5, [r6, #20]
    panel.body.shadow.width   = 4;
    83cc:	8274      	strh	r4, [r6, #18]
    panel.text.color          = lv_color_hex3(0x333);
    83ce:	f7ff ff7c 	bl	82ca <lv_color_hex3>
    83d2:	8430      	strh	r0, [r6, #32]
    panel.image.color         = lv_color_hex3(0x333);
    83d4:	f240 3033 	movw	r0, #819	; 0x333
    83d8:	f7ff ff77 	bl	82ca <lv_color_hex3>
    theme.style.bg    = &bg;
    83dc:	4c96      	ldr	r4, [pc, #600]	; (8638 <lv_theme_material_init+0x338>)
    panel.image.color         = lv_color_hex3(0x333);
    83de:	8630      	strh	r0, [r6, #48]	; 0x30
    lv_style_copy(&sb, &def);
    83e0:	4997      	ldr	r1, [pc, #604]	; (8640 <lv_theme_material_init+0x340>)
    83e2:	489a      	ldr	r0, [pc, #616]	; (864c <lv_theme_material_init+0x34c>)
    83e4:	f001 f89f 	bl	9526 <lv_style_copy>
    sb.body.main_color     = LV_COLOR_BLACK;
    83e8:	4a98      	ldr	r2, [pc, #608]	; (864c <lv_theme_material_init+0x34c>)
    lv_style_copy(&rel, &def);
    83ea:	4995      	ldr	r1, [pc, #596]	; (8640 <lv_theme_material_init+0x340>)
    sb.body.main_color     = LV_COLOR_BLACK;
    83ec:	8055      	strh	r5, [r2, #2]
    theme.style.cont = theme.style.panel;
    83ee:	e9c4 6602 	strd	r6, r6, [r4, #8]
    lv_style_copy(&rel, &def);
    83f2:	4e97      	ldr	r6, [pc, #604]	; (8650 <lv_theme_material_init+0x350>)
    sb.body.grad_color     = LV_COLOR_BLACK;
    83f4:	8095      	strh	r5, [r2, #4]
    sb.body.opa            = LV_OPA_40;
    83f6:	2366      	movs	r3, #102	; 0x66
    sb.body.padding.right  = LV_DPI / 25;
    83f8:	2706      	movs	r7, #6
    lv_style_copy(&rel, &def);
    83fa:	4630      	mov	r0, r6
    theme.style.scr   = &scr;
    83fc:	e9c4 a900 	strd	sl, r9, [r4]
    sb.body.opa            = LV_OPA_40;
    8400:	7213      	strb	r3, [r2, #8]
    sb.body.padding.right  = LV_DPI / 25;
    8402:	8397      	strh	r7, [r2, #28]
    sb.body.padding.bottom = LV_DPI / 25;
    8404:	8317      	strh	r7, [r2, #24]
    lv_style_copy(&rel, &def);
    8406:	f001 f88e 	bl	9526 <lv_style_copy>
    rel.body.main_color     = lv_color_hsv_to_rgb(_hue, 90, 70);
    840a:	215a      	movs	r1, #90	; 0x5a
    840c:	f8bb 0000 	ldrh.w	r0, [fp]
    8410:	2246      	movs	r2, #70	; 0x46
    8412:	f7fb fcf7 	bl	3e04 <lv_color_hsv_to_rgb>
    rel.body.padding.top    = LV_DPI / 8;
    8416:	f04f 0314 	mov.w	r3, #20
    rel.body.padding.right  = LV_DPI / 6;
    841a:	4a8e      	ldr	r2, [pc, #568]	; (8654 <lv_theme_material_init+0x354>)
    rel.body.padding.top    = LV_DPI / 8;
    841c:	82f3      	strh	r3, [r6, #22]
    rel.body.padding.right  = LV_DPI / 6;
    841e:	4b8e      	ldr	r3, [pc, #568]	; (8658 <lv_theme_material_init+0x358>)
    rel.body.main_color     = lv_color_hsv_to_rgb(_hue, 90, 70);
    8420:	8070      	strh	r0, [r6, #2]
    rel.body.padding.right  = LV_DPI / 6;
    8422:	e9c6 2306 	strd	r2, r3, [r6, #24]
    rel.body.radius         = DEF_RADIUS;
    8426:	f04f 0904 	mov.w	r9, #4
    rel.body.grad_color     = rel.body.main_color;
    842a:	80b0      	strh	r0, [r6, #4]
    rel.body.shadow.color   = DEF_SHADOW_COLOR;
    842c:	f640 20aa 	movw	r0, #2730	; 0xaaa
    rel.body.radius         = DEF_RADIUS;
    8430:	f8a6 9006 	strh.w	r9, [r6, #6]
    rel.body.shadow.color   = DEF_SHADOW_COLOR;
    8434:	f7ff ff49 	bl	82ca <lv_color_hex3>
    rel.text.color          = lv_color_hsv_to_rgb(_hue, 5, 95);
    8438:	225f      	movs	r2, #95	; 0x5f
    rel.body.shadow.color   = DEF_SHADOW_COLOR;
    843a:	8230      	strh	r0, [r6, #16]
    rel.text.color          = lv_color_hsv_to_rgb(_hue, 5, 95);
    843c:	2105      	movs	r1, #5
    843e:	f8bb 0000 	ldrh.w	r0, [fp]
    rel.body.shadow.type    = LV_SHADOW_BOTTOM;
    8442:	7535      	strb	r5, [r6, #20]
    rel.body.shadow.width   = 6;
    8444:	8277      	strh	r7, [r6, #18]
    rel.text.color          = lv_color_hsv_to_rgb(_hue, 5, 95);
    8446:	f7fb fcdd 	bl	3e04 <lv_color_hsv_to_rgb>
    rel.image.color         = lv_color_hsv_to_rgb(_hue, 5, 95);
    844a:	225f      	movs	r2, #95	; 0x5f
    rel.text.color          = lv_color_hsv_to_rgb(_hue, 5, 95);
    844c:	8430      	strh	r0, [r6, #32]
    rel.image.color         = lv_color_hsv_to_rgb(_hue, 5, 95);
    844e:	2105      	movs	r1, #5
    8450:	f8bb 0000 	ldrh.w	r0, [fp]
    lv_style_copy(&ina, &rel);
    8454:	4f81      	ldr	r7, [pc, #516]	; (865c <lv_theme_material_init+0x35c>)
    rel.image.color         = lv_color_hsv_to_rgb(_hue, 5, 95);
    8456:	f7fb fcd5 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&pr, &rel);
    845a:	4b81      	ldr	r3, [pc, #516]	; (8660 <lv_theme_material_init+0x360>)
    rel.image.color         = lv_color_hsv_to_rgb(_hue, 5, 95);
    845c:	8630      	strh	r0, [r6, #48]	; 0x30
    lv_style_copy(&pr, &rel);
    845e:	4631      	mov	r1, r6
    8460:	4618      	mov	r0, r3
    8462:	f001 f860 	bl	9526 <lv_style_copy>
    pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 90, 60);
    8466:	223c      	movs	r2, #60	; 0x3c
    8468:	f8bb 0000 	ldrh.w	r0, [fp]
    846c:	215a      	movs	r1, #90	; 0x5a
    846e:	f7fb fcc9 	bl	3e04 <lv_color_hsv_to_rgb>
    8472:	4b7b      	ldr	r3, [pc, #492]	; (8660 <lv_theme_material_init+0x360>)
    pr.body.shadow.width = 4;
    8474:	46ca      	mov	sl, r9
    8476:	f8a3 9012 	strh.w	r9, [r3, #18]
    lv_style_copy(&tgl_rel, &rel);
    847a:	f8df 9210 	ldr.w	r9, [pc, #528]	; 868c <lv_theme_material_init+0x38c>
    pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 90, 60);
    847e:	8058      	strh	r0, [r3, #2]
    pr.body.grad_color   = pr.body.main_color;
    8480:	8098      	strh	r0, [r3, #4]
    lv_style_copy(&tgl_rel, &rel);
    8482:	4631      	mov	r1, r6
    8484:	4648      	mov	r0, r9
    8486:	f001 f84e 	bl	9526 <lv_style_copy>
    tgl_rel.body.main_color   = lv_color_hsv_to_rgb(_hue, 95, 50);
    848a:	2232      	movs	r2, #50	; 0x32
    848c:	f8bb 0000 	ldrh.w	r0, [fp]
    8490:	215f      	movs	r1, #95	; 0x5f
    8492:	f7fb fcb7 	bl	3e04 <lv_color_hsv_to_rgb>
    tgl_rel.body.shadow.width = 4;
    8496:	f8a9 a012 	strh.w	sl, [r9, #18]
    lv_style_copy(&tgl_pr, &tgl_rel);
    849a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8690 <lv_theme_material_init+0x390>
    tgl_rel.body.main_color   = lv_color_hsv_to_rgb(_hue, 95, 50);
    849e:	f8a9 0002 	strh.w	r0, [r9, #2]
    tgl_rel.body.grad_color   = tgl_rel.body.main_color;
    84a2:	f8a9 0004 	strh.w	r0, [r9, #4]
    lv_style_copy(&tgl_pr, &tgl_rel);
    84a6:	4649      	mov	r1, r9
    84a8:	4650      	mov	r0, sl
    84aa:	f001 f83c 	bl	9526 <lv_style_copy>
    tgl_pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 95, 40);
    84ae:	2228      	movs	r2, #40	; 0x28
    84b0:	f8bb 0000 	ldrh.w	r0, [fp]
    84b4:	215f      	movs	r1, #95	; 0x5f
    84b6:	f7fb fca5 	bl	3e04 <lv_color_hsv_to_rgb>
    84ba:	f8aa 0002 	strh.w	r0, [sl, #2]
    tgl_pr.body.grad_color   = tgl_pr.body.main_color;
    84be:	f8aa 0004 	strh.w	r0, [sl, #4]
    tgl_pr.body.shadow.width = 2;
    84c2:	f04f 0002 	mov.w	r0, #2
    lv_style_copy(&ina, &rel);
    84c6:	4631      	mov	r1, r6
    tgl_pr.body.shadow.width = 2;
    84c8:	f8aa 0012 	strh.w	r0, [sl, #18]
    lv_style_copy(&ina, &rel);
    84cc:	4638      	mov	r0, r7
    84ce:	f001 f82a 	bl	9526 <lv_style_copy>
    ina.body.main_color   = lv_color_hex3(0xccc);
    84d2:	f640 40cc 	movw	r0, #3276	; 0xccc
    84d6:	f7ff fef8 	bl	82ca <lv_color_hex3>
    ina.text.color        = lv_color_hsv_to_rgb(_hue, 95, 5);
    84da:	2205      	movs	r2, #5
    ina.body.main_color   = lv_color_hex3(0xccc);
    84dc:	8078      	strh	r0, [r7, #2]
    ina.body.grad_color   = ina.body.main_color;
    84de:	80b8      	strh	r0, [r7, #4]
    ina.text.color        = lv_color_hsv_to_rgb(_hue, 95, 5);
    84e0:	215f      	movs	r1, #95	; 0x5f
    84e2:	f8bb 0000 	ldrh.w	r0, [fp]
    ina.body.shadow.width = 0;
    84e6:	827d      	strh	r5, [r7, #18]
    ina.text.color        = lv_color_hsv_to_rgb(_hue, 95, 5);
    84e8:	f7fb fc8c 	bl	3e04 <lv_color_hsv_to_rgb>
    ina.image.color       = lv_color_hsv_to_rgb(_hue, 95, 5);
    84ec:	2205      	movs	r2, #5
    ina.text.color        = lv_color_hsv_to_rgb(_hue, 95, 5);
    84ee:	8438      	strh	r0, [r7, #32]
    ina.image.color       = lv_color_hsv_to_rgb(_hue, 95, 5);
    84f0:	215f      	movs	r1, #95	; 0x5f
    84f2:	f8bb 0000 	ldrh.w	r0, [fp]
    84f6:	f7fb fc85 	bl	3e04 <lv_color_hsv_to_rgb>
    theme.style.btn.rel     = &rel;
    84fa:	6126      	str	r6, [r4, #16]
    lv_style_copy(&prim, &def);
    84fc:	4e59      	ldr	r6, [pc, #356]	; (8664 <lv_theme_material_init+0x364>)
    theme.style.btn.pr      = &pr;
    84fe:	4b58      	ldr	r3, [pc, #352]	; (8660 <lv_theme_material_init+0x360>)
    ina.image.color       = lv_color_hsv_to_rgb(_hue, 95, 5);
    8500:	8638      	strh	r0, [r7, #48]	; 0x30
    lv_style_copy(&prim, &def);
    8502:	494f      	ldr	r1, [pc, #316]	; (8640 <lv_theme_material_init+0x340>)
    8504:	4630      	mov	r0, r6
    theme.style.btn.tgl_rel = &tgl_rel;
    8506:	e9c4 3905 	strd	r3, r9, [r4, #20]
    theme.style.btn.ina     = &ina;
    850a:	e9c4 a707 	strd	sl, r7, [r4, #28]
    lv_style_copy(&prim, &def);
    850e:	f001 f80a 	bl	9526 <lv_style_copy>
    prim.text.font  = _font;
    8512:	9b00      	ldr	r3, [sp, #0]
    prim.text.color = lv_color_hsv_to_rgb(_hue, 80, 10);
    8514:	f8bb 0000 	ldrh.w	r0, [fp]
    prim.text.font  = _font;
    8518:	681a      	ldr	r2, [r3, #0]
    851a:	6272      	str	r2, [r6, #36]	; 0x24
    prim.text.color = lv_color_hsv_to_rgb(_hue, 80, 10);
    851c:	2150      	movs	r1, #80	; 0x50
    851e:	220a      	movs	r2, #10
    8520:	f7fb fc70 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&sec, &prim);
    8524:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8694 <lv_theme_material_init+0x394>
    prim.text.color = lv_color_hsv_to_rgb(_hue, 80, 10);
    8528:	8430      	strh	r0, [r6, #32]
    lv_style_copy(&sec, &prim);
    852a:	4631      	mov	r1, r6
    852c:	4648      	mov	r0, r9
    852e:	f000 fffa 	bl	9526 <lv_style_copy>
    sec.text.color = lv_color_hsv_to_rgb(_hue, 80, 75);
    8532:	224b      	movs	r2, #75	; 0x4b
    8534:	f8bb 0000 	ldrh.w	r0, [fp]
    lv_style_copy(&hint, &prim);
    8538:	4f4b      	ldr	r7, [pc, #300]	; (8668 <lv_theme_material_init+0x368>)
    lv_style_copy(&sw_bg, theme.style.slider.bg);
    853a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8698 <lv_theme_material_init+0x398>
    sec.text.color = lv_color_hsv_to_rgb(_hue, 80, 75);
    853e:	2150      	movs	r1, #80	; 0x50
    8540:	f7fb fc60 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&hint, &prim);
    8544:	4631      	mov	r1, r6
    sec.text.color = lv_color_hsv_to_rgb(_hue, 80, 75);
    8546:	f8a9 0020 	strh.w	r0, [r9, #32]
    lv_style_copy(&hint, &prim);
    854a:	4638      	mov	r0, r7
    854c:	f000 ffeb 	bl	9526 <lv_style_copy>
    hint.text.color = lv_color_hsv_to_rgb(_hue, 40, 90);
    8550:	225a      	movs	r2, #90	; 0x5a
    8552:	f8bb 0000 	ldrh.w	r0, [fp]
    8556:	2128      	movs	r1, #40	; 0x28
    8558:	f7fb fc54 	bl	3e04 <lv_color_hsv_to_rgb>
    theme.style.label.sec  = &sec;
    855c:	e9c4 690e 	strd	r6, r9, [r4, #56]	; 0x38
    lv_style_copy(&img_light, &def);
    8560:	4e42      	ldr	r6, [pc, #264]	; (866c <lv_theme_material_init+0x36c>)
    hint.text.color = lv_color_hsv_to_rgb(_hue, 40, 90);
    8562:	8438      	strh	r0, [r7, #32]
    lv_style_copy(&img_light, &def);
    8564:	4936      	ldr	r1, [pc, #216]	; (8640 <lv_theme_material_init+0x340>)
    theme.style.label.hint = &hint;
    8566:	6427      	str	r7, [r4, #64]	; 0x40
    lv_style_copy(&img_light, &def);
    8568:	4630      	mov	r0, r6
    856a:	f000 ffdc 	bl	9526 <lv_style_copy>
    img_light.image.color   = lv_color_hsv_to_rgb(_hue, 15, 85);
    856e:	2255      	movs	r2, #85	; 0x55
    8570:	f8bb 0000 	ldrh.w	r0, [fp]
    lv_style_copy(&sw_indic, theme.style.slider.bg);
    8574:	f8df 9124 	ldr.w	r9, [pc, #292]	; 869c <lv_theme_material_init+0x39c>
    img_light.image.color   = lv_color_hsv_to_rgb(_hue, 15, 85);
    8578:	210f      	movs	r1, #15
    857a:	f7fb fc43 	bl	3e04 <lv_color_hsv_to_rgb>
    img_light.image.intense = LV_OPA_80;
    857e:	27cc      	movs	r7, #204	; 0xcc
    img_light.image.color   = lv_color_hsv_to_rgb(_hue, 15, 85);
    8580:	8630      	strh	r0, [r6, #48]	; 0x30
    lv_style_copy(&img_dark, &def);
    8582:	492f      	ldr	r1, [pc, #188]	; (8640 <lv_theme_material_init+0x340>)
    8584:	483a      	ldr	r0, [pc, #232]	; (8670 <lv_theme_material_init+0x370>)
    img_light.image.intense = LV_OPA_80;
    8586:	f886 7032 	strb.w	r7, [r6, #50]	; 0x32
    lv_style_copy(&img_dark, &def);
    858a:	f000 ffcc 	bl	9526 <lv_style_copy>
    img_light.image.color   = lv_color_hsv_to_rgb(_hue, 85, 65);
    858e:	2241      	movs	r2, #65	; 0x41
    8590:	f8bb 0000 	ldrh.w	r0, [fp]
    8594:	2155      	movs	r1, #85	; 0x55
    8596:	f7fb fc35 	bl	3e04 <lv_color_hsv_to_rgb>
    img_light.image.intense = LV_OPA_80;
    859a:	f886 7032 	strb.w	r7, [r6, #50]	; 0x32
    img_light.image.color   = lv_color_hsv_to_rgb(_hue, 85, 65);
    859e:	8630      	strh	r0, [r6, #48]	; 0x30
    lv_style_copy(&bar_bg, &def);
    85a0:	4e34      	ldr	r6, [pc, #208]	; (8674 <lv_theme_material_init+0x374>)
    85a2:	4927      	ldr	r1, [pc, #156]	; (8640 <lv_theme_material_init+0x340>)
    theme.style.line.decor = &def;
    85a4:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    lv_style_copy(&bar_bg, &def);
    85a8:	4630      	mov	r0, r6
    theme.style.img.dark  = &def;
    85aa:	e9c4 8811 	strd	r8, r8, [r4, #68]	; 0x44
    lv_style_copy(&bar_bg, &def);
    85ae:	f000 ffba 	bl	9526 <lv_style_copy>
    bar_bg.body.main_color     = lv_color_hsv_to_rgb(_hue, 15, 95);
    85b2:	f8bb 0000 	ldrh.w	r0, [fp]
    lv_style_copy(&bar_indic, &bar_bg);
    85b6:	4f30      	ldr	r7, [pc, #192]	; (8678 <lv_theme_material_init+0x378>)
    bar_bg.body.main_color     = lv_color_hsv_to_rgb(_hue, 15, 95);
    85b8:	225f      	movs	r2, #95	; 0x5f
    85ba:	210f      	movs	r1, #15
    85bc:	f7fb fc22 	bl	3e04 <lv_color_hsv_to_rgb>
    bar_bg.body.padding.bottom = LV_DPI / 16;
    85c0:	f04f 120a 	mov.w	r2, #655370	; 0xa000a
    bar_bg.body.main_color     = lv_color_hsv_to_rgb(_hue, 15, 95);
    85c4:	8070      	strh	r0, [r6, #2]
    bar_bg.body.grad_color     = bar_bg.body.main_color;
    85c6:	80b0      	strh	r0, [r6, #4]
    bar_bg.body.padding.top    = LV_DPI / 16;
    85c8:	f04f 000a 	mov.w	r0, #10
    bar_bg.body.radius         = 3;
    85cc:	f04f 0803 	mov.w	r8, #3
    bar_bg.body.padding.top    = LV_DPI / 16;
    85d0:	82f0      	strh	r0, [r6, #22]
    bar_bg.body.padding.bottom = LV_DPI / 16;
    85d2:	61b2      	str	r2, [r6, #24]
    bar_bg.body.padding.right  = LV_DPI / 16;
    85d4:	83b0      	strh	r0, [r6, #28]
    lv_style_copy(&bar_indic, &bar_bg);
    85d6:	4631      	mov	r1, r6
    85d8:	4638      	mov	r0, r7
    bar_bg.body.radius         = 3;
    85da:	f8a6 8006 	strh.w	r8, [r6, #6]
    bar_bg.body.border.width   = 0;
    85de:	81b5      	strh	r5, [r6, #12]
    lv_style_copy(&bar_indic, &bar_bg);
    85e0:	f000 ffa1 	bl	9526 <lv_style_copy>
    bar_indic.body.main_color     = lv_color_hsv_to_rgb(_hue, 85, 70);
    85e4:	2246      	movs	r2, #70	; 0x46
    85e6:	f8bb 0000 	ldrh.w	r0, [fp]
    85ea:	2155      	movs	r1, #85	; 0x55
    85ec:	f7fb fc0a 	bl	3e04 <lv_color_hsv_to_rgb>
    theme.style.bar.indic = &bar_indic;
    85f0:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
    bar_indic.body.main_color     = lv_color_hsv_to_rgb(_hue, 85, 70);
    85f4:	8078      	strh	r0, [r7, #2]
    bar_indic.body.grad_color     = bar_indic.body.main_color;
    85f6:	80b8      	strh	r0, [r7, #4]
    bar_indic.body.padding.top    = 0;
    85f8:	82fd      	strh	r5, [r7, #22]
    bar_indic.body.padding.bottom = 0;
    85fa:	61bd      	str	r5, [r7, #24]
    bar_indic.body.padding.right  = 0;
    85fc:	83bd      	strh	r5, [r7, #28]
    lv_style_copy(&knob, &def);
    85fe:	4f1f      	ldr	r7, [pc, #124]	; (867c <lv_theme_material_init+0x37c>)
    8600:	490f      	ldr	r1, [pc, #60]	; (8640 <lv_theme_material_init+0x340>)
    8602:	4638      	mov	r0, r7
    8604:	f000 ff8f 	bl	9526 <lv_style_copy>
    knob.body.main_color   = theme.style.bar.indic->body.main_color;
    8608:	6d62      	ldr	r2, [r4, #84]	; 0x54
    knob.body.border.width = 0;
    860a:	81bd      	strh	r5, [r7, #12]
    knob.body.main_color   = theme.style.bar.indic->body.main_color;
    860c:	8851      	ldrh	r1, [r2, #2]
    860e:	8079      	strh	r1, [r7, #2]
    knob.body.radius       = LV_RADIUS_CIRCLE;
    8610:	f647 4618 	movw	r6, #31768	; 0x7c18
    knob.body.grad_color   = knob.body.main_color;
    8614:	80b9      	strh	r1, [r7, #4]
    theme.style.slider.bg    = theme.style.bar.bg;
    8616:	6d21      	ldr	r1, [r4, #80]	; 0x50
    knob.body.radius       = LV_RADIUS_CIRCLE;
    8618:	80fe      	strh	r6, [r7, #6]
    theme.style.slider.knob  = &knob;
    861a:	6627      	str	r7, [r4, #96]	; 0x60
    lv_style_copy(&sw_bg, theme.style.slider.bg);
    861c:	4650      	mov	r0, sl
    lv_style_copy(&sw_knob_on, theme.style.slider.knob);
    861e:	4f18      	ldr	r7, [pc, #96]	; (8680 <lv_theme_material_init+0x380>)
    theme.style.slider.indic = theme.style.bar.indic;
    8620:	e9c4 1216 	strd	r1, r2, [r4, #88]	; 0x58
    lv_style_copy(&sw_bg, theme.style.slider.bg);
    8624:	f000 ff7f 	bl	9526 <lv_style_copy>
    8628:	e03a      	b.n	86a0 <lv_theme_material_init+0x3a0>
    862a:	bf00      	nop
    862c:	20000038 	.word	0x20000038
    8630:	20004cb0 	.word	0x20004cb0
    8634:	20004cb4 	.word	0x20004cb4
    8638:	20005bf8 	.word	0x20005bf8
    863c:	2000617c 	.word	0x2000617c
    8640:	20004eb8 	.word	0x20004eb8
    8644:	200052f8 	.word	0x200052f8
    8648:	00014780 	.word	0x00014780
    864c:	20005778 	.word	0x20005778
    8650:	20005538 	.word	0x20005538
    8654:	001b0014 	.word	0x001b0014
    8658:	0010001b 	.word	0x0010001b
    865c:	20005078 	.word	0x20005078
    8660:	20005338 	.word	0x20005338
    8664:	200054f8 	.word	0x200054f8
    8668:	20004fb8 	.word	0x20004fb8
    866c:	20005038 	.word	0x20005038
    8670:	20004ff8 	.word	0x20004ff8
    8674:	20004cf8 	.word	0x20004cf8
    8678:	20004d38 	.word	0x20004d38
    867c:	200051f8 	.word	0x200051f8
    8680:	20005938 	.word	0x20005938
    8684:	20004d78 	.word	0x20004d78
    8688:	200057b8 	.word	0x200057b8
    868c:	20005ab8 	.word	0x20005ab8
    8690:	20005978 	.word	0x20005978
    8694:	200057f8 	.word	0x200057f8
    8698:	20005878 	.word	0x20005878
    869c:	200058b8 	.word	0x200058b8
    lv_style_copy(&sw_indic, theme.style.slider.bg);
    86a0:	6da1      	ldr	r1, [r4, #88]	; 0x58
    sw_bg.body.radius = LV_RADIUS_CIRCLE;
    86a2:	f8aa 6006 	strh.w	r6, [sl, #6]
    lv_style_copy(&sw_indic, theme.style.slider.bg);
    86a6:	4648      	mov	r0, r9
    86a8:	f000 ff3d 	bl	9526 <lv_style_copy>
    lv_style_copy(&sw_knob_on, theme.style.slider.knob);
    86ac:	6e21      	ldr	r1, [r4, #96]	; 0x60
    sw_indic.body.radius = LV_RADIUS_CIRCLE;
    86ae:	f8a9 6006 	strh.w	r6, [r9, #6]
    lv_style_copy(&sw_knob_on, theme.style.slider.knob);
    86b2:	4638      	mov	r0, r7
    86b4:	f000 ff37 	bl	9526 <lv_style_copy>
    sw_knob_on.body.shadow.color = DEF_SHADOW_COLOR;
    86b8:	f640 20aa 	movw	r0, #2730	; 0xaaa
    sw_knob_on.body.shadow.width = 3;
    86bc:	f8a7 8012 	strh.w	r8, [r7, #18]
    sw_knob_on.body.shadow.type  = LV_SHADOW_BOTTOM;
    86c0:	753d      	strb	r5, [r7, #20]
    sw_knob_on.body.shadow.color = DEF_SHADOW_COLOR;
    86c2:	f7ff fe02 	bl	82ca <lv_color_hex3>
    lv_style_copy(&sw_knob_off, &sw_knob_on);
    86c6:	4ed7      	ldr	r6, [pc, #860]	; (8a24 <lv_theme_material_init+0x724>)
    sw_knob_on.body.shadow.color = DEF_SHADOW_COLOR;
    86c8:	8238      	strh	r0, [r7, #16]
    lv_style_copy(&sw_knob_off, &sw_knob_on);
    86ca:	4639      	mov	r1, r7
    86cc:	4630      	mov	r0, r6
    86ce:	f000 ff2a 	bl	9526 <lv_style_copy>
    sw_knob_off.body.main_color   = lv_color_hex(0xfafafa);
    86d2:	f64f 72df 	movw	r2, #65503	; 0xffdf
    sw_knob_off.body.border.width = 1;
    86d6:	f04f 0e01 	mov.w	lr, #1
    sw_knob_off.body.main_color   = lv_color_hex(0xfafafa);
    86da:	8072      	strh	r2, [r6, #2]
    sw_knob_off.body.border.color = lv_color_hex3(0x999);
    86dc:	f640 1099 	movw	r0, #2457	; 0x999
    sw_knob_off.body.border.width = 1;
    86e0:	f8a6 e00c 	strh.w	lr, [r6, #12]
    sw_knob_off.body.grad_color   = sw_knob_off.body.main_color;
    86e4:	80b2      	strh	r2, [r6, #4]
    sw_knob_off.body.border.color = lv_color_hex3(0x999);
    86e6:	f7ff fdf0 	bl	82ca <lv_color_hex3>
    sw_knob_off.body.border.opa   = LV_OPA_COVER;
    86ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    theme.style.sw.knob_on  = &sw_knob_on;
    86ee:	e9c4 671f 	strd	r6, r7, [r4, #124]	; 0x7c
    sw_knob_off.body.border.color = lv_color_hex3(0x999);
    86f2:	8170      	strh	r0, [r6, #10]
    sw_knob_off.body.border.opa   = LV_OPA_COVER;
    86f4:	73f1      	strb	r1, [r6, #15]
    lv_style_copy(&lmeter, &def);
    86f6:	4ecc      	ldr	r6, [pc, #816]	; (8a28 <lv_theme_material_init+0x728>)
    86f8:	49cc      	ldr	r1, [pc, #816]	; (8a2c <lv_theme_material_init+0x72c>)
    lv_style_copy(&high_days, &def);
    86fa:	4fcd      	ldr	r7, [pc, #820]	; (8a30 <lv_theme_material_init+0x730>)
    lv_style_copy(&lmeter, &def);
    86fc:	4630      	mov	r0, r6
    theme.style.sw.indic    = &sw_indic;
    86fe:	e9c4 a91d 	strd	sl, r9, [r4, #116]	; 0x74
    lv_style_copy(&lmeter, &def);
    8702:	f000 ff10 	bl	9526 <lv_style_copy>
    lmeter.body.main_color   = lv_color_hsv_to_rgb(_hue, 75, 90);
    8706:	214b      	movs	r1, #75	; 0x4b
    8708:	f8bb 0000 	ldrh.w	r0, [fp]
    lv_style_copy(&today_box, &def);
    870c:	f8df a354 	ldr.w	sl, [pc, #852]	; 8a64 <lv_theme_material_init+0x764>
    lmeter.body.main_color   = lv_color_hsv_to_rgb(_hue, 75, 90);
    8710:	225a      	movs	r2, #90	; 0x5a
    8712:	f7fb fb77 	bl	3e04 <lv_color_hsv_to_rgb>
    lmeter.body.padding.left = LV_DPI / 10; /*Scale line length*/
    8716:	2210      	movs	r2, #16
    lmeter.body.main_color   = lv_color_hsv_to_rgb(_hue, 75, 90);
    8718:	8070      	strh	r0, [r6, #2]
    lmeter.body.grad_color   = lmeter.body.main_color;
    871a:	80b0      	strh	r0, [r6, #4]
    lmeter.line.color        = lv_color_hex3(0x999);
    871c:	f640 1099 	movw	r0, #2457	; 0x999
    lmeter.body.padding.left = LV_DPI / 10; /*Scale line length*/
    8720:	8372      	strh	r2, [r6, #26]
    lmeter.line.color        = lv_color_hex3(0x999);
    8722:	f7ff fdd2 	bl	82ca <lv_color_hex3>
    lmeter.line.width        = 2;
    8726:	f04f 0e02 	mov.w	lr, #2
    872a:	f8a6 e036 	strh.w	lr, [r6, #54]	; 0x36
    lmeter.line.color        = lv_color_hex3(0x999);
    872e:	86b0      	strh	r0, [r6, #52]	; 0x34
    theme.style.lmeter = &lmeter;
    8730:	6666      	str	r6, [r4, #100]	; 0x64
    lv_style_copy(&gauge, &def);
    8732:	4ec0      	ldr	r6, [pc, #768]	; (8a34 <lv_theme_material_init+0x734>)
    8734:	49bd      	ldr	r1, [pc, #756]	; (8a2c <lv_theme_material_init+0x72c>)
    8736:	4630      	mov	r0, r6
    8738:	f000 fef5 	bl	9526 <lv_style_copy>
    gauge.body.main_color    = lv_color_hsv_to_rgb(_hue, 10, 60);
    873c:	223c      	movs	r2, #60	; 0x3c
    873e:	210a      	movs	r1, #10
    8740:	f8bb 0000 	ldrh.w	r0, [fp]
    8744:	f7fb fb5e 	bl	3e04 <lv_color_hsv_to_rgb>
    gauge.body.padding.left  = LV_DPI / 16; /*Scale line length*/
    8748:	f04f 0c0a 	mov.w	ip, #10
    gauge.body.padding.inner = LV_DPI / 8;
    874c:	f04f 0314 	mov.w	r3, #20
    gauge.body.main_color    = lv_color_hsv_to_rgb(_hue, 10, 60);
    8750:	8070      	strh	r0, [r6, #2]
    gauge.body.grad_color    = gauge.body.main_color;
    8752:	80b0      	strh	r0, [r6, #4]
    gauge.body.border.color  = lv_color_hex3(0x999);
    8754:	f640 1099 	movw	r0, #2457	; 0x999
    gauge.body.padding.left  = LV_DPI / 16; /*Scale line length*/
    8758:	46e1      	mov	r9, ip
    875a:	f8a6 c01a 	strh.w	ip, [r6, #26]
    gauge.body.padding.inner = LV_DPI / 8;
    875e:	83f3      	strh	r3, [r6, #30]
    gauge.body.border.color  = lv_color_hex3(0x999);
    8760:	f7ff fdb3 	bl	82ca <lv_color_hex3>
    8764:	8170      	strh	r0, [r6, #10]
    gauge.text.color         = lv_color_hex3(0x333);
    8766:	f240 3033 	movw	r0, #819	; 0x333
    876a:	f7ff fdae 	bl	82ca <lv_color_hex3>
    gauge.line.color         = lv_color_hsv_to_rgb(_hue, 95, 70);
    876e:	2246      	movs	r2, #70	; 0x46
    gauge.text.color         = lv_color_hex3(0x333);
    8770:	8430      	strh	r0, [r6, #32]
    gauge.line.color         = lv_color_hsv_to_rgb(_hue, 95, 70);
    8772:	215f      	movs	r1, #95	; 0x5f
    8774:	f8bb 0000 	ldrh.w	r0, [fp]
    gauge.line.width         = 3;
    8778:	f8a6 8036 	strh.w	r8, [r6, #54]	; 0x36
    gauge.line.color         = lv_color_hsv_to_rgb(_hue, 95, 70);
    877c:	f7fb fb42 	bl	3e04 <lv_color_hsv_to_rgb>
    theme.style.gauge = &gauge;
    8780:	66a6      	str	r6, [r4, #104]	; 0x68
    gauge.line.color         = lv_color_hsv_to_rgb(_hue, 95, 70);
    8782:	86b0      	strh	r0, [r6, #52]	; 0x34
    lv_style_copy(&arc, &def);
    8784:	4eac      	ldr	r6, [pc, #688]	; (8a38 <lv_theme_material_init+0x738>)
    theme.style.chart = theme.style.panel;
    8786:	68a3      	ldr	r3, [r4, #8]
    lv_style_copy(&arc, &def);
    8788:	49a8      	ldr	r1, [pc, #672]	; (8a2c <lv_theme_material_init+0x72c>)
    theme.style.chart = theme.style.panel;
    878a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    lv_style_copy(&arc, &def);
    878e:	4630      	mov	r0, r6
    8790:	f000 fec9 	bl	9526 <lv_style_copy>
    arc.line.color = lv_color_hsv_to_rgb(_hue, 90, 90);
    8794:	225a      	movs	r2, #90	; 0x5a
    8796:	4611      	mov	r1, r2
    8798:	f8bb 0000 	ldrh.w	r0, [fp]
    arc.line.width = 10;
    879c:	f8a6 9036 	strh.w	r9, [r6, #54]	; 0x36
    arc.line.color = lv_color_hsv_to_rgb(_hue, 90, 90);
    87a0:	f7fb fb30 	bl	3e04 <lv_color_hsv_to_rgb>
    arc.body.border.color   = lv_color_hsv_to_rgb(_hue, 30, 90);
    87a4:	225a      	movs	r2, #90	; 0x5a
    arc.line.color = lv_color_hsv_to_rgb(_hue, 90, 90);
    87a6:	86b0      	strh	r0, [r6, #52]	; 0x34
    arc.body.border.color   = lv_color_hsv_to_rgb(_hue, 30, 90);
    87a8:	211e      	movs	r1, #30
    87aa:	f8bb 0000 	ldrh.w	r0, [fp]
    arc.body.border.width   = 10;
    87ae:	f8a6 900c 	strh.w	r9, [r6, #12]
    arc.body.border.color   = lv_color_hsv_to_rgb(_hue, 30, 90);
    87b2:	f7fb fb27 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&ina_days, &def);
    87b6:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8a68 <lv_theme_material_init+0x768>
    arc.body.border.color   = lv_color_hsv_to_rgb(_hue, 30, 90);
    87ba:	8170      	strh	r0, [r6, #10]
    arc.body.padding.bottom = 0;
    87bc:	61b5      	str	r5, [r6, #24]
    lv_style_copy(&ina_days, &def);
    87be:	4648      	mov	r0, r9
    87c0:	499a      	ldr	r1, [pc, #616]	; (8a2c <lv_theme_material_init+0x72c>)
    arc.body.padding.top    = 0;
    87c2:	82f5      	strh	r5, [r6, #22]
    theme.style.preload = theme.style.arc;
    87c4:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
    arc.body.padding.right  = 0;
    87c8:	83b5      	strh	r5, [r6, #28]
    lv_style_copy(&ina_days, &def);
    87ca:	f000 feac 	bl	9526 <lv_style_copy>
    ina_days.text.color = lv_color_hsv_to_rgb(_hue, 0, 70);
    87ce:	2246      	movs	r2, #70	; 0x46
    87d0:	4629      	mov	r1, r5
    87d2:	f8bb 0000 	ldrh.w	r0, [fp]
    lv_style_copy(&week_box, &def);
    87d6:	4e99      	ldr	r6, [pc, #612]	; (8a3c <lv_theme_material_init+0x73c>)
    ina_days.text.color = lv_color_hsv_to_rgb(_hue, 0, 70);
    87d8:	f7fb fb14 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&high_days, &def);
    87dc:	4993      	ldr	r1, [pc, #588]	; (8a2c <lv_theme_material_init+0x72c>)
    ina_days.text.color = lv_color_hsv_to_rgb(_hue, 0, 70);
    87de:	f8a9 0020 	strh.w	r0, [r9, #32]
    lv_style_copy(&high_days, &def);
    87e2:	4638      	mov	r0, r7
    87e4:	f000 fe9f 	bl	9526 <lv_style_copy>
    high_days.text.color = lv_color_hsv_to_rgb(_hue, 80, 90);
    87e8:	225a      	movs	r2, #90	; 0x5a
    87ea:	f8bb 0000 	ldrh.w	r0, [fp]
    87ee:	2150      	movs	r1, #80	; 0x50
    87f0:	f7fb fb08 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&week_box, &def);
    87f4:	498d      	ldr	r1, [pc, #564]	; (8a2c <lv_theme_material_init+0x72c>)
    high_days.text.color = lv_color_hsv_to_rgb(_hue, 80, 90);
    87f6:	8438      	strh	r0, [r7, #32]
    lv_style_copy(&week_box, &def);
    87f8:	4630      	mov	r0, r6
    87fa:	f000 fe94 	bl	9526 <lv_style_copy>
    week_box.body.main_color     = lv_color_hsv_to_rgb(_hue, 40, 100);
    87fe:	f8bb 0000 	ldrh.w	r0, [fp]
    8802:	2264      	movs	r2, #100	; 0x64
    8804:	2128      	movs	r1, #40	; 0x28
    8806:	f7fb fafd 	bl	3e04 <lv_color_hsv_to_rgb>
    week_box.body.grad_color     = lv_color_hsv_to_rgb(_hue, 40, 100);
    880a:	2264      	movs	r2, #100	; 0x64
    week_box.body.main_color     = lv_color_hsv_to_rgb(_hue, 40, 100);
    880c:	8070      	strh	r0, [r6, #2]
    week_box.body.grad_color     = lv_color_hsv_to_rgb(_hue, 40, 100);
    880e:	2128      	movs	r1, #40	; 0x28
    8810:	f8bb 0000 	ldrh.w	r0, [fp]
    8814:	f7fb faf6 	bl	3e04 <lv_color_hsv_to_rgb>
    week_box.body.padding.left   = theme.style.panel->body.padding.left;
    8818:	68a3      	ldr	r3, [r4, #8]
    week_box.body.grad_color     = lv_color_hsv_to_rgb(_hue, 40, 100);
    881a:	80b0      	strh	r0, [r6, #4]
    week_box.body.padding.left   = theme.style.panel->body.padding.left;
    881c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    8820:	8372      	strh	r2, [r6, #26]
    week_box.body.padding.right  = theme.style.panel->body.padding.right;
    8822:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
    8826:	83b2      	strh	r2, [r6, #28]
    week_box.body.border.color   = theme.style.panel->body.border.color;
    8828:	895a      	ldrh	r2, [r3, #10]
    week_box.body.border.width   = theme.style.panel->body.border.width;
    882a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    882e:	81b3      	strh	r3, [r6, #12]
    week_box.body.padding.top    = LV_DPI / 20;
    8830:	f04f 0e08 	mov.w	lr, #8
    week_box.body.border.part    = LV_BORDER_LEFT | LV_BORDER_RIGHT;
    8834:	230c      	movs	r3, #12
    lv_style_copy(&today_box, &def);
    8836:	4650      	mov	r0, sl
    8838:	497c      	ldr	r1, [pc, #496]	; (8a2c <lv_theme_material_init+0x72c>)
    week_box.body.border.color   = theme.style.panel->body.border.color;
    883a:	8172      	strh	r2, [r6, #10]
    week_box.body.padding.top    = LV_DPI / 20;
    883c:	f8a6 e016 	strh.w	lr, [r6, #22]
    week_box.body.padding.bottom = LV_DPI / 20;
    8840:	f8a6 e018 	strh.w	lr, [r6, #24]
    week_box.body.border.part    = LV_BORDER_LEFT | LV_BORDER_RIGHT;
    8844:	73b3      	strb	r3, [r6, #14]
    week_box.body.radius         = 0;
    8846:	80f5      	strh	r5, [r6, #6]
    lv_style_copy(&today_box, &def);
    8848:	f000 fe6d 	bl	9526 <lv_style_copy>
    theme.style.calendar.highlighted_days = &high_days;
    884c:	e9c4 7926 	strd	r7, r9, [r4, #152]	; 0x98
    lv_style_copy(&rel, theme.style.panel);
    8850:	4f7b      	ldr	r7, [pc, #492]	; (8a40 <lv_theme_material_init+0x740>)
    lv_style_copy(&pr, &rel);
    8852:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8a6c <lv_theme_material_init+0x76c>
    today_box.body.main_color     = LV_COLOR_WHITE;
    8856:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    theme.style.calendar.header           = &lv_style_transp;
    885a:	4b7a      	ldr	r3, [pc, #488]	; (8a44 <lv_theme_material_init+0x744>)
    today_box.body.main_color     = LV_COLOR_WHITE;
    885c:	f8aa 1002 	strh.w	r1, [sl, #2]
    today_box.body.padding.top    = LV_DPI / 20;
    8860:	f04f 0e08 	mov.w	lr, #8
    today_box.body.grad_color     = LV_COLOR_WHITE;
    8864:	f8aa 1004 	strh.w	r1, [sl, #4]
    lv_style_copy(&rel, theme.style.panel);
    8868:	4638      	mov	r0, r7
    theme.style.calendar.bg               = theme.style.panel;
    886a:	68a1      	ldr	r1, [r4, #8]
    today_box.body.padding.top    = LV_DPI / 20;
    886c:	f8aa e016 	strh.w	lr, [sl, #22]
    today_box.body.padding.bottom = LV_DPI / 20;
    8870:	f8aa e018 	strh.w	lr, [sl, #24]
    theme.style.calendar.header           = &lv_style_transp;
    8874:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    theme.style.calendar.today_box        = &today_box;
    8878:	e9c4 6a28 	strd	r6, sl, [r4, #160]	; 0xa0
    today_box.body.radius         = 0;
    887c:	f8aa 5006 	strh.w	r5, [sl, #6]
    theme.style.calendar.bg               = theme.style.panel;
    8880:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    lv_style_copy(&rel, theme.style.panel);
    8884:	f000 fe4f 	bl	9526 <lv_style_copy>
    lv_style_copy(&pr, &rel);
    8888:	4639      	mov	r1, r7
    888a:	4648      	mov	r0, r9
    rel.body.shadow.type  = LV_SHADOW_BOTTOM;
    888c:	753d      	strb	r5, [r7, #20]
    rel.body.shadow.width = 3;
    888e:	f8a7 8012 	strh.w	r8, [r7, #18]
    lv_style_copy(&pr, &rel);
    8892:	f000 fe48 	bl	9526 <lv_style_copy>
    pr.body.main_color   = lv_color_hex3(0xccc);
    8896:	f640 40cc 	movw	r0, #3276	; 0xccc
    889a:	f7ff fd16 	bl	82ca <lv_color_hex3>
    lv_style_copy(&tgl_rel, &rel);
    889e:	4e6a      	ldr	r6, [pc, #424]	; (8a48 <lv_theme_material_init+0x748>)
    pr.body.main_color   = lv_color_hex3(0xccc);
    88a0:	f8a9 0002 	strh.w	r0, [r9, #2]
    pr.body.grad_color   = pr.body.main_color;
    88a4:	f8a9 0004 	strh.w	r0, [r9, #4]
    lv_style_copy(&tgl_rel, &rel);
    88a8:	4639      	mov	r1, r7
    88aa:	4630      	mov	r0, r6
    pr.body.shadow.width = 0;
    88ac:	f8a9 5012 	strh.w	r5, [r9, #18]
    lv_style_copy(&tgl_rel, &rel);
    88b0:	f000 fe39 	bl	9526 <lv_style_copy>
    tgl_rel.body.main_color   = lv_color_hsv_to_rgb(_hue, 75, 85);
    88b4:	2255      	movs	r2, #85	; 0x55
    88b6:	f8bb 0000 	ldrh.w	r0, [fp]
    lv_style_copy(&ina, theme.style.btn.ina);
    88ba:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8a70 <lv_theme_material_init+0x770>
    tgl_rel.body.main_color   = lv_color_hsv_to_rgb(_hue, 75, 85);
    88be:	214b      	movs	r1, #75	; 0x4b
    88c0:	f7fb faa0 	bl	3e04 <lv_color_hsv_to_rgb>
    tgl_rel.body.shadow.type  = LV_SHADOW_FULL;
    88c4:	f04f 0801 	mov.w	r8, #1
    88c8:	f886 8014 	strb.w	r8, [r6, #20]
    lv_style_copy(&tgl_pr, &tgl_rel);
    88cc:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8a74 <lv_theme_material_init+0x774>
    tgl_rel.body.main_color   = lv_color_hsv_to_rgb(_hue, 75, 85);
    88d0:	8070      	strh	r0, [r6, #2]
    tgl_rel.body.grad_color   = tgl_rel.body.main_color;
    88d2:	80b0      	strh	r0, [r6, #4]
    lv_style_copy(&tgl_pr, &tgl_rel);
    88d4:	4631      	mov	r1, r6
    88d6:	4640      	mov	r0, r8
    tgl_rel.body.shadow.width = 0;
    88d8:	8275      	strh	r5, [r6, #18]
    lv_style_copy(&tgl_pr, &tgl_rel);
    88da:	f000 fe24 	bl	9526 <lv_style_copy>
    tgl_pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 75, 65);
    88de:	2241      	movs	r2, #65	; 0x41
    88e0:	f8bb 0000 	ldrh.w	r0, [fp]
    88e4:	214b      	movs	r1, #75	; 0x4b
    88e6:	f7fb fa8d 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&ina, theme.style.btn.ina);
    88ea:	6a21      	ldr	r1, [r4, #32]
    tgl_pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 75, 65);
    88ec:	f8a8 0002 	strh.w	r0, [r8, #2]
    tgl_pr.body.grad_color   = tgl_pr.body.main_color;
    88f0:	f8a8 0004 	strh.w	r0, [r8, #4]
    lv_style_copy(&ina, theme.style.btn.ina);
    88f4:	4650      	mov	r0, sl
    tgl_pr.body.shadow.width = 0;
    88f6:	f8a8 5012 	strh.w	r5, [r8, #18]
    lv_style_copy(&ina, theme.style.btn.ina);
    88fa:	f000 fe14 	bl	9526 <lv_style_copy>
    theme.style.cb.box.tgl_rel = &tgl_rel;
    88fe:	e9c4 962c 	strd	r9, r6, [r4, #176]	; 0xb0
    lv_style_copy(&bg, theme.style.panel);
    8902:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8a78 <lv_theme_material_init+0x778>
    theme.style.cb.bg          = &lv_style_transp;
    8906:	4b4f      	ldr	r3, [pc, #316]	; (8a44 <lv_theme_material_init+0x744>)
    lv_style_copy(&bg, theme.style.panel);
    8908:	68a1      	ldr	r1, [r4, #8]
    890a:	4648      	mov	r0, r9
    theme.style.cb.box.rel     = &rel;
    890c:	e9c4 372a 	strd	r3, r7, [r4, #168]	; 0xa8
    theme.style.cb.box.ina     = &ina;
    8910:	e9c4 8a2e 	strd	r8, sl, [r4, #184]	; 0xb8
    lv_style_copy(&bg, theme.style.panel);
    8914:	f000 fe07 	bl	9526 <lv_style_copy>
    bg.body.padding.right  = 0;
    8918:	e9c9 5506 	strd	r5, r5, [r9, #24]
    bg.text.color          = lv_color_hex3(0x555);
    891c:	f240 5055 	movw	r0, #1365	; 0x555
    bg.body.padding.top    = 0;
    8920:	f8a9 5016 	strh.w	r5, [r9, #22]
    bg.text.color          = lv_color_hex3(0x555);
    8924:	f7ff fcd1 	bl	82ca <lv_color_hex3>
    lv_style_copy(&rel, theme.style.panel);
    8928:	4f48      	ldr	r7, [pc, #288]	; (8a4c <lv_theme_material_init+0x74c>)
    892a:	68a1      	ldr	r1, [r4, #8]
    bg.text.color          = lv_color_hex3(0x555);
    892c:	f8a9 0020 	strh.w	r0, [r9, #32]
    lv_style_copy(&rel, theme.style.panel);
    8930:	4638      	mov	r0, r7
    8932:	f000 fdf8 	bl	9526 <lv_style_copy>
    rel.body.border.width = 1;
    8936:	f04f 0601 	mov.w	r6, #1
    rel.body.border.part  = LV_BORDER_FULL | LV_BORDER_INTERNAL;
    893a:	231f      	movs	r3, #31
    rel.body.border.color = lv_color_hex3(0xbbb);
    893c:	f640 30bb 	movw	r0, #3003	; 0xbbb
    rel.body.border.part  = LV_BORDER_FULL | LV_BORDER_INTERNAL;
    8940:	73bb      	strb	r3, [r7, #14]
    rel.body.border.width = 1;
    8942:	81be      	strh	r6, [r7, #12]
    rel.body.border.color = lv_color_hex3(0xbbb);
    8944:	f7ff fcc1 	bl	82ca <lv_color_hex3>
    lv_style_copy(&pr, &rel);
    8948:	4e41      	ldr	r6, [pc, #260]	; (8a50 <lv_theme_material_init+0x750>)
    rel.body.border.color = lv_color_hex3(0xbbb);
    894a:	8178      	strh	r0, [r7, #10]
    lv_style_copy(&pr, &rel);
    894c:	4639      	mov	r1, r7
    894e:	4630      	mov	r0, r6
    rel.body.opa          = LV_OPA_TRANSP;
    8950:	723d      	strb	r5, [r7, #8]
    rel.body.shadow.width = 0;
    8952:	827d      	strh	r5, [r7, #18]
    lv_style_copy(&pr, &rel);
    8954:	f000 fde7 	bl	9526 <lv_style_copy>
    pr.glass             = 0;
    8958:	7833      	ldrb	r3, [r6, #0]
    lv_style_copy(&tgl_rel, &pr);
    895a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8a7c <lv_theme_material_init+0x77c>
    lv_style_copy(&tgl_pr, &tgl_rel);
    895e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8a80 <lv_theme_material_init+0x780>
    pr.glass             = 0;
    8962:	f365 0300 	bfi	r3, r5, #0, #1
    pr.body.main_color   = lv_color_hex3(0xddd);
    8966:	f640 50dd 	movw	r0, #3549	; 0xddd
    pr.glass             = 0;
    896a:	7033      	strb	r3, [r6, #0]
    pr.body.main_color   = lv_color_hex3(0xddd);
    896c:	f7ff fcad 	bl	82ca <lv_color_hex3>
    8970:	8070      	strh	r0, [r6, #2]
    pr.body.grad_color   = pr.body.main_color;
    8972:	80b0      	strh	r0, [r6, #4]
    pr.body.opa          = LV_OPA_COVER;
    8974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8978:	7230      	strb	r0, [r6, #8]
    lv_style_copy(&tgl_rel, &pr);
    897a:	4631      	mov	r1, r6
    897c:	4640      	mov	r0, r8
    pr.body.border.width = 0;
    897e:	81b5      	strh	r5, [r6, #12]
    lv_style_copy(&tgl_rel, &pr);
    8980:	f000 fdd1 	bl	9526 <lv_style_copy>
    tgl_rel.body.main_color = lv_color_hsv_to_rgb(_hue, 90, 70);
    8984:	f8bb 0000 	ldrh.w	r0, [fp]
    8988:	2246      	movs	r2, #70	; 0x46
    898a:	215a      	movs	r1, #90	; 0x5a
    898c:	f7fb fa3a 	bl	3e04 <lv_color_hsv_to_rgb>
    tgl_rel.text.color      = lv_color_hsv_to_rgb(_hue, 5, 95);
    8990:	225f      	movs	r2, #95	; 0x5f
    tgl_rel.body.main_color = lv_color_hsv_to_rgb(_hue, 90, 70);
    8992:	f8a8 0002 	strh.w	r0, [r8, #2]
    tgl_rel.body.grad_color = tgl_rel.body.main_color;
    8996:	f8a8 0004 	strh.w	r0, [r8, #4]
    tgl_rel.text.color      = lv_color_hsv_to_rgb(_hue, 5, 95);
    899a:	2105      	movs	r1, #5
    899c:	f8bb 0000 	ldrh.w	r0, [fp]
    89a0:	f7fb fa30 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&tgl_pr, &tgl_rel);
    89a4:	4641      	mov	r1, r8
    tgl_rel.text.color      = lv_color_hsv_to_rgb(_hue, 5, 95);
    89a6:	f8a8 0020 	strh.w	r0, [r8, #32]
    lv_style_copy(&tgl_pr, &tgl_rel);
    89aa:	4650      	mov	r0, sl
    89ac:	f000 fdbb 	bl	9526 <lv_style_copy>
    tgl_pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 95, 65);
    89b0:	2241      	movs	r2, #65	; 0x41
    89b2:	f8bb 0000 	ldrh.w	r0, [fp]
    89b6:	215f      	movs	r1, #95	; 0x5f
    89b8:	f7fb fa24 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&ina, &pr);
    89bc:	4b25      	ldr	r3, [pc, #148]	; (8a54 <lv_theme_material_init+0x754>)
    tgl_pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 95, 65);
    89be:	f8aa 0002 	strh.w	r0, [sl, #2]
    lv_style_copy(&ina, &pr);
    89c2:	4631      	mov	r1, r6
    tgl_pr.body.grad_color   = tgl_pr.body.main_color;
    89c4:	f8aa 0004 	strh.w	r0, [sl, #4]
    lv_style_copy(&ina, &pr);
    89c8:	4618      	mov	r0, r3
    tgl_pr.body.border.width = 0;
    89ca:	f8aa 500c 	strh.w	r5, [sl, #12]
    lv_style_copy(&ina, &pr);
    89ce:	f000 fdaa 	bl	9526 <lv_style_copy>
    ina.body.main_color = lv_color_hex3(0xccc);
    89d2:	f640 40cc 	movw	r0, #3276	; 0xccc
    89d6:	f7ff fc78 	bl	82ca <lv_color_hex3>
    theme.style.btnm.btn.tgl_rel = &tgl_rel;
    89da:	e9c4 6832 	strd	r6, r8, [r4, #200]	; 0xc8
    ina.body.main_color = lv_color_hex3(0xccc);
    89de:	4b1d      	ldr	r3, [pc, #116]	; (8a54 <lv_theme_material_init+0x754>)
    lv_style_copy(&rel, &lv_style_transp);
    89e0:	4e1d      	ldr	r6, [pc, #116]	; (8a58 <lv_theme_material_init+0x758>)
    theme.style.btnm.btn.ina     = &def;
    89e2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8a2c <lv_theme_material_init+0x72c>
    ina.body.main_color = lv_color_hex3(0xccc);
    89e6:	8058      	strh	r0, [r3, #2]
    ina.body.grad_color = ina.body.main_color;
    89e8:	8098      	strh	r0, [r3, #4]
    lv_style_copy(&rel, &lv_style_transp);
    89ea:	4916      	ldr	r1, [pc, #88]	; (8a44 <lv_theme_material_init+0x744>)
    theme.style.btnm.btn.tgl_pr  = &tgl_pr;
    89ec:	f8c4 a0d0 	str.w	sl, [r4, #208]	; 0xd0
    lv_style_copy(&rel, &lv_style_transp);
    89f0:	4630      	mov	r0, r6
    theme.style.btnm.btn.rel     = &rel;
    89f2:	e9c4 9730 	strd	r9, r7, [r4, #192]	; 0xc0
    theme.style.btnm.btn.ina     = &def;
    89f6:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
    lv_style_copy(&rel, &lv_style_transp);
    89fa:	f000 fd94 	bl	9526 <lv_style_copy>
    rel.text.font = _font;
    89fe:	9800      	ldr	r0, [sp, #0]
    lv_style_copy(&rel, &lv_style_transp);
    8a00:	4910      	ldr	r1, [pc, #64]	; (8a44 <lv_theme_material_init+0x744>)
    rel.text.font = _font;
    8a02:	6803      	ldr	r3, [r0, #0]
    8a04:	6273      	str	r3, [r6, #36]	; 0x24
    theme.style.kb.bg          = theme.style.btnm.bg;
    8a06:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    lv_style_copy(&pr, theme.style.btnm.btn.pr);
    8a0a:	4f14      	ldr	r7, [pc, #80]	; (8a5c <lv_theme_material_init+0x75c>)
    theme.style.kb.btn.rel     = &rel;
    8a0c:	e9c4 3636 	strd	r3, r6, [r4, #216]	; 0xd8
    theme.style.kb.btn.pr      = theme.style.btnm.btn.pr;
    8a10:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    lv_style_copy(&rel, &lv_style_transp);
    8a14:	4e12      	ldr	r6, [pc, #72]	; (8a60 <lv_theme_material_init+0x760>)
    theme.style.kb.btn.pr      = theme.style.btnm.btn.pr;
    8a16:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    theme.style.kb.btn.tgl_rel = theme.style.btnm.btn.tgl_rel;
    8a1a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    8a1e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    8a22:	e02f      	b.n	8a84 <lv_theme_material_init+0x784>
    8a24:	200058f8 	.word	0x200058f8
    8a28:	20005278 	.word	0x20005278
    8a2c:	20004eb8 	.word	0x20004eb8
    8a30:	20004f78 	.word	0x20004f78
    8a34:	20004ef8 	.word	0x20004ef8
    8a38:	20004cb8 	.word	0x20004cb8
    8a3c:	20005ddc 	.word	0x20005ddc
    8a40:	20005578 	.word	0x20005578
    8a44:	20005fbc 	.word	0x20005fbc
    8a48:	20005af8 	.word	0x20005af8
    8a4c:	200055b8 	.word	0x200055b8
    8a50:	200053b8 	.word	0x200053b8
    8a54:	200050f8 	.word	0x200050f8
    8a58:	200055f8 	.word	0x200055f8
    8a5c:	200053f8 	.word	0x200053f8
    8a60:	20005638 	.word	0x20005638
    8a64:	20005d9c 	.word	0x20005d9c
    8a68:	20005178 	.word	0x20005178
    8a6c:	20005378 	.word	0x20005378
    8a70:	200050b8 	.word	0x200050b8
    8a74:	200059b8 	.word	0x200059b8
    8a78:	20004db8 	.word	0x20004db8
    8a7c:	20005b38 	.word	0x20005b38
    8a80:	200059f8 	.word	0x200059f8
    theme.style.kb.btn.tgl_pr  = theme.style.btnm.btn.tgl_pr;
    8a84:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    8a88:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    lv_style_copy(&rel, &lv_style_transp);
    8a8c:	4630      	mov	r0, r6
    theme.style.kb.btn.ina     = theme.style.btnm.btn.ina;
    8a8e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    8a92:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    lv_style_copy(&rel, &lv_style_transp);
    8a96:	f000 fd46 	bl	9526 <lv_style_copy>
    rel.glass      = 0;
    8a9a:	7833      	ldrb	r3, [r6, #0]
    rel.text.font  = _font;
    8a9c:	9800      	ldr	r0, [sp, #0]
    rel.glass      = 0;
    8a9e:	f365 0300 	bfi	r3, r5, #0, #1
    8aa2:	7033      	strb	r3, [r6, #0]
    rel.text.color = lv_color_hsv_to_rgb(_hue, 85, 75);
    8aa4:	224b      	movs	r2, #75	; 0x4b
    rel.text.font  = _font;
    8aa6:	6803      	ldr	r3, [r0, #0]
    rel.text.color = lv_color_hsv_to_rgb(_hue, 85, 75);
    8aa8:	f8bb 0000 	ldrh.w	r0, [fp]
    rel.text.font  = _font;
    8aac:	6273      	str	r3, [r6, #36]	; 0x24
    rel.text.color = lv_color_hsv_to_rgb(_hue, 85, 75);
    8aae:	2155      	movs	r1, #85	; 0x55
    8ab0:	f7fb f9a8 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&pr, theme.style.btnm.btn.pr);
    8ab4:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
    rel.text.color = lv_color_hsv_to_rgb(_hue, 85, 75);
    8ab8:	8430      	strh	r0, [r6, #32]
    lv_style_copy(&pr, theme.style.btnm.btn.pr);
    8aba:	4638      	mov	r0, r7
    8abc:	f000 fd33 	bl	9526 <lv_style_copy>
    pr.text.color = lv_color_hsv_to_rgb(_hue, 85, 60);
    8ac0:	223c      	movs	r2, #60	; 0x3c
    8ac2:	f8bb 0000 	ldrh.w	r0, [fp]
    8ac6:	2155      	movs	r1, #85	; 0x55
    8ac8:	f7fb f99c 	bl	3e04 <lv_color_hsv_to_rgb>
    theme.style.mbox.btn.bg  = &lv_style_transp;
    8acc:	49ce      	ldr	r1, [pc, #824]	; (8e08 <lv_theme_material_init+0xb08>)
    theme.style.mbox.bg      = theme.style.panel;
    8ace:	68a3      	ldr	r3, [r4, #8]
    pr.text.color = lv_color_hsv_to_rgb(_hue, 85, 60);
    8ad0:	8438      	strh	r0, [r7, #32]
    theme.style.mbox.btn.rel = &rel;
    8ad2:	e9c4 163d 	strd	r1, r6, [r4, #244]	; 0xf4
    lv_style_copy(&oneline, &def);
    8ad6:	4ecd      	ldr	r6, [pc, #820]	; (8e0c <lv_theme_material_init+0xb0c>)
    theme.style.page.scrl = &lv_style_transp;
    8ad8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    theme.style.page.bg   = theme.style.panel;
    8adc:	e9c4 733f 	strd	r7, r3, [r4, #252]	; 0xfc
    lv_style_copy(&oneline, &def);
    8ae0:	4641      	mov	r1, r8
    theme.style.page.sb   = &sb;
    8ae2:	4fcb      	ldr	r7, [pc, #812]	; (8e10 <lv_theme_material_init+0xb10>)
    theme.style.mbox.bg      = theme.style.panel;
    8ae4:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    lv_style_copy(&oneline, &def);
    8ae8:	4630      	mov	r0, r6
    theme.style.page.sb   = &sb;
    8aea:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
    lv_style_copy(&oneline, &def);
    8aee:	f000 fd1a 	bl	9526 <lv_style_copy>
    oneline.body.border.color = lv_color_hex3(0x333);
    8af2:	f240 3033 	movw	r0, #819	; 0x333
    oneline.body.opa          = LV_OPA_TRANSP;
    8af6:	7235      	strb	r5, [r6, #8]
    oneline.body.radius       = 0;
    8af8:	80f5      	strh	r5, [r6, #6]
    oneline.body.border.color = lv_color_hex3(0x333);
    8afa:	f7ff fbe6 	bl	82ca <lv_color_hex3>
    oneline.body.border.width = 3;
    8afe:	4bc5      	ldr	r3, [pc, #788]	; (8e14 <lv_theme_material_init+0xb14>)
    oneline.body.border.color = lv_color_hex3(0x333);
    8b00:	8170      	strh	r0, [r6, #10]
    oneline.body.border.width = 3;
    8b02:	60f3      	str	r3, [r6, #12]
    oneline.text.color        = lv_color_hex3(0x333);
    8b04:	f240 3033 	movw	r0, #819	; 0x333
    8b08:	f7ff fbdf 	bl	82ca <lv_color_hex3>
    lv_style_copy(&list_bg, theme.style.panel);
    8b0c:	4bc2      	ldr	r3, [pc, #776]	; (8e18 <lv_theme_material_init+0xb18>)
    theme.style.ta.area    = theme.style.panel;
    8b0e:	68a1      	ldr	r1, [r4, #8]
    oneline.text.color        = lv_color_hex3(0x333);
    8b10:	8430      	strh	r0, [r6, #32]
    lv_style_copy(&list_bg, theme.style.panel);
    8b12:	4618      	mov	r0, r3
    theme.style.ta.oneline = &oneline;
    8b14:	e9c4 1643 	strd	r1, r6, [r4, #268]	; 0x10c
    theme.style.ta.sb      = &sb;
    8b18:	e9c4 5745 	strd	r5, r7, [r4, #276]	; 0x114
    theme.style.spinbox.cursor = theme.style.ta.cursor;
    8b1c:	e9c4 1547 	strd	r1, r5, [r4, #284]	; 0x11c
    theme.style.spinbox.sb     = theme.style.ta.sb;
    8b20:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
    lv_style_copy(&rel, &lv_style_transp);
    8b24:	4fbd      	ldr	r7, [pc, #756]	; (8e1c <lv_theme_material_init+0xb1c>)
    lv_style_copy(&list_bg, theme.style.panel);
    8b26:	f000 fcfe 	bl	9526 <lv_style_copy>
    list_bg.body.padding.top    = 0;
    8b2a:	4bbb      	ldr	r3, [pc, #748]	; (8e18 <lv_theme_material_init+0xb18>)
    lv_style_copy(&rel, &lv_style_transp);
    8b2c:	49b6      	ldr	r1, [pc, #728]	; (8e08 <lv_theme_material_init+0xb08>)
    list_bg.body.padding.top    = 0;
    8b2e:	82dd      	strh	r5, [r3, #22]
    list_bg.body.padding.right  = 0;
    8b30:	e9c3 5506 	strd	r5, r5, [r3, #24]
    lv_style_copy(&rel, &lv_style_transp);
    8b34:	4638      	mov	r0, r7
    8b36:	f000 fcf6 	bl	9526 <lv_style_copy>
    rel.body.padding.top    = LV_DPI / 6;
    8b3a:	f04f 021b 	mov.w	r2, #27
    8b3e:	82fa      	strh	r2, [r7, #22]
    rel.body.padding.bottom = LV_DPI / 6;
    8b40:	4ab7      	ldr	r2, [pc, #732]	; (8e20 <lv_theme_material_init+0xb20>)
    8b42:	61ba      	str	r2, [r7, #24]
    rel.body.radius         = 10;
    8b44:	f04f 0c0a 	mov.w	ip, #10
    rel.body.padding.right  = LV_DPI / 8;
    8b48:	f04f 0a14 	mov.w	sl, #20
    rel.body.border.color   = lv_color_hex3(0xbbb);
    8b4c:	f640 30bb 	movw	r0, #3003	; 0xbbb
    rel.body.radius         = 10;
    8b50:	f8a7 c006 	strh.w	ip, [r7, #6]
    rel.body.padding.right  = LV_DPI / 8;
    8b54:	f8a7 a01c 	strh.w	sl, [r7, #28]
    rel.body.border.width   = 1;
    8b58:	f04f 0601 	mov.w	r6, #1
    rel.body.border.color   = lv_color_hex3(0xbbb);
    8b5c:	f7ff fbb5 	bl	82ca <lv_color_hex3>
    rel.body.border.width   = 1;
    8b60:	81be      	strh	r6, [r7, #12]
    rel.body.border.part    = LV_BORDER_BOTTOM;
    8b62:	73be      	strb	r6, [r7, #14]
    lv_style_copy(&pr, &rel);
    8b64:	4eaf      	ldr	r6, [pc, #700]	; (8e24 <lv_theme_material_init+0xb24>)
    rel.body.border.color   = lv_color_hex3(0xbbb);
    8b66:	8178      	strh	r0, [r7, #10]
    lv_style_copy(&pr, &rel);
    8b68:	4639      	mov	r1, r7
    8b6a:	4630      	mov	r0, r6
    8b6c:	f000 fcdb 	bl	9526 <lv_style_copy>
    pr.glass             = 0;
    8b70:	7832      	ldrb	r2, [r6, #0]
    lv_style_copy(&tgl_pr, &tgl_rel);
    8b72:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8e58 <lv_theme_material_init+0xb58>
    pr.glass             = 0;
    8b76:	f365 0200 	bfi	r2, r5, #0, #1
    pr.body.main_color   = lv_color_hex3(0xddd);
    8b7a:	f640 50dd 	movw	r0, #3549	; 0xddd
    pr.glass             = 0;
    8b7e:	7032      	strb	r2, [r6, #0]
    pr.body.main_color   = lv_color_hex3(0xddd);
    8b80:	f7ff fba3 	bl	82ca <lv_color_hex3>
    pr.body.radius       = DEF_RADIUS;
    8b84:	f04f 0904 	mov.w	r9, #4
    pr.text.font         = _font;
    8b88:	9a00      	ldr	r2, [sp, #0]
    pr.body.radius       = DEF_RADIUS;
    8b8a:	f8a6 9006 	strh.w	r9, [r6, #6]
    lv_style_copy(&tgl_rel, &pr);
    8b8e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8e5c <lv_theme_material_init+0xb5c>
    pr.body.main_color   = lv_color_hex3(0xddd);
    8b92:	8070      	strh	r0, [r6, #2]
    pr.body.grad_color   = pr.body.main_color;
    8b94:	80b0      	strh	r0, [r6, #4]
    pr.body.opa          = LV_OPA_COVER;
    8b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    pr.text.font         = _font;
    8b9a:	6812      	ldr	r2, [r2, #0]
    pr.body.opa          = LV_OPA_COVER;
    8b9c:	7230      	strb	r0, [r6, #8]
    lv_style_copy(&tgl_rel, &pr);
    8b9e:	4631      	mov	r1, r6
    8ba0:	4648      	mov	r0, r9
    pr.body.border.width = 0;
    8ba2:	81b5      	strh	r5, [r6, #12]
    pr.text.font         = _font;
    8ba4:	6272      	str	r2, [r6, #36]	; 0x24
    lv_style_copy(&tgl_rel, &pr);
    8ba6:	f000 fcbe 	bl	9526 <lv_style_copy>
    tgl_rel.body.main_color = lv_color_hsv_to_rgb(_hue, 90, 70);
    8baa:	f8bb 0000 	ldrh.w	r0, [fp]
    8bae:	2246      	movs	r2, #70	; 0x46
    8bb0:	215a      	movs	r1, #90	; 0x5a
    8bb2:	f7fb f927 	bl	3e04 <lv_color_hsv_to_rgb>
    tgl_rel.text.color      = lv_color_hsv_to_rgb(_hue, 5, 95);
    8bb6:	225f      	movs	r2, #95	; 0x5f
    tgl_rel.body.main_color = lv_color_hsv_to_rgb(_hue, 90, 70);
    8bb8:	f8a9 0002 	strh.w	r0, [r9, #2]
    tgl_rel.body.grad_color = tgl_rel.body.main_color;
    8bbc:	f8a9 0004 	strh.w	r0, [r9, #4]
    tgl_rel.text.color      = lv_color_hsv_to_rgb(_hue, 5, 95);
    8bc0:	2105      	movs	r1, #5
    8bc2:	f8bb 0000 	ldrh.w	r0, [fp]
    8bc6:	f7fb f91d 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&tgl_pr, &tgl_rel);
    8bca:	4649      	mov	r1, r9
    tgl_rel.text.color      = lv_color_hsv_to_rgb(_hue, 5, 95);
    8bcc:	f8a9 0020 	strh.w	r0, [r9, #32]
    lv_style_copy(&tgl_pr, &tgl_rel);
    8bd0:	4650      	mov	r0, sl
    8bd2:	f000 fca8 	bl	9526 <lv_style_copy>
    tgl_pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 90, 60);
    8bd6:	f8bb 0000 	ldrh.w	r0, [fp]
    8bda:	223c      	movs	r2, #60	; 0x3c
    8bdc:	215a      	movs	r1, #90	; 0x5a
    8bde:	f7fb f911 	bl	3e04 <lv_color_hsv_to_rgb>
    lv_style_copy(&ina, &pr);
    8be2:	4a91      	ldr	r2, [pc, #580]	; (8e28 <lv_theme_material_init+0xb28>)
    tgl_pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 90, 60);
    8be4:	f8aa 0002 	strh.w	r0, [sl, #2]
    lv_style_copy(&ina, &pr);
    8be8:	4631      	mov	r1, r6
    tgl_pr.body.grad_color   = tgl_pr.body.main_color;
    8bea:	f8aa 0004 	strh.w	r0, [sl, #4]
    lv_style_copy(&ina, &pr);
    8bee:	4610      	mov	r0, r2
    tgl_pr.body.border.width = 0;
    8bf0:	f8aa 500c 	strh.w	r5, [sl, #12]
    lv_style_copy(&ina, &pr);
    8bf4:	f000 fc97 	bl	9526 <lv_style_copy>
    ina.body.main_color = lv_color_hex3(0xccc);
    8bf8:	f640 40cc 	movw	r0, #3276	; 0xccc
    8bfc:	f7ff fb65 	bl	82ca <lv_color_hex3>
    8c00:	4a89      	ldr	r2, [pc, #548]	; (8e28 <lv_theme_material_init+0xb28>)
    theme.style.list.sb          = &sb;
    8c02:	4b83      	ldr	r3, [pc, #524]	; (8e10 <lv_theme_material_init+0xb10>)
    ina.body.main_color = lv_color_hex3(0xccc);
    8c04:	8050      	strh	r0, [r2, #2]
    theme.style.list.btn.pr      = &pr;
    8c06:	e9c4 764d 	strd	r7, r6, [r4, #308]	; 0x134
    lv_style_copy(&bg, theme.style.panel);
    8c0a:	4f88      	ldr	r7, [pc, #544]	; (8e2c <lv_theme_material_init+0xb2c>)
    lv_style_copy(&sel, &bg);
    8c0c:	4e88      	ldr	r6, [pc, #544]	; (8e30 <lv_theme_material_init+0xb30>)
    ina.body.grad_color = ina.body.main_color;
    8c0e:	8090      	strh	r0, [r2, #4]
    theme.style.list.scrl        = &lv_style_transp_tight;
    8c10:	4888      	ldr	r0, [pc, #544]	; (8e34 <lv_theme_material_init+0xb34>)
    lv_style_copy(&bg, theme.style.panel);
    8c12:	68a1      	ldr	r1, [r4, #8]
    theme.style.list.sb          = &sb;
    8c14:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    theme.style.list.btn.tgl_pr  = &tgl_pr;
    8c18:	e9c4 9a4f 	strd	r9, sl, [r4, #316]	; 0x13c
    theme.style.list.bg          = &list_bg;
    8c1c:	4b7e      	ldr	r3, [pc, #504]	; (8e18 <lv_theme_material_init+0xb18>)
    theme.style.list.scrl        = &lv_style_transp_tight;
    8c1e:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    bg.body.padding.bottom = LV_DPI / 6;
    8c22:	f04f 191b 	mov.w	r9, #1769499	; 0x1b001b
    lv_style_copy(&bg, theme.style.panel);
    8c26:	4638      	mov	r0, r7
    theme.style.list.bg          = &list_bg;
    8c28:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    bg.text.line_space     = LV_DPI / 8;
    8c2c:	f04f 0a14 	mov.w	sl, #20
    theme.style.list.btn.ina     = &ina;
    8c30:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
    lv_style_copy(&bg, theme.style.panel);
    8c34:	f000 fc77 	bl	9526 <lv_style_copy>
    bg.body.padding.top    = LV_DPI / 6;
    8c38:	f04f 021b 	mov.w	r2, #27
    bg.body.padding.bottom = LV_DPI / 6;
    8c3c:	f8c7 9018 	str.w	r9, [r7, #24]
    lv_style_copy(&sel, &bg);
    8c40:	4639      	mov	r1, r7
    8c42:	4630      	mov	r0, r6
    bg.body.padding.top    = LV_DPI / 6;
    8c44:	82fa      	strh	r2, [r7, #22]
    bg.body.padding.right  = LV_DPI / 6;
    8c46:	83ba      	strh	r2, [r7, #28]
    bg.text.line_space     = LV_DPI / 8;
    8c48:	f8a7 a02a 	strh.w	sl, [r7, #42]	; 0x2a
    lv_style_copy(&sel, &bg);
    8c4c:	f000 fc6b 	bl	9526 <lv_style_copy>
    sel.body.main_color   = lv_color_hsv_to_rgb(_hue, 90, 70);
    8c50:	f8bb 0000 	ldrh.w	r0, [fp]
    8c54:	2246      	movs	r2, #70	; 0x46
    8c56:	215a      	movs	r1, #90	; 0x5a
    8c58:	f7fb f8d4 	bl	3e04 <lv_color_hsv_to_rgb>
    sel.text.color        = lv_color_hsv_to_rgb(_hue, 5, 95);
    8c5c:	225f      	movs	r2, #95	; 0x5f
    sel.body.main_color   = lv_color_hsv_to_rgb(_hue, 90, 70);
    8c5e:	8070      	strh	r0, [r6, #2]
    sel.body.grad_color   = sel.body.main_color;
    8c60:	80b0      	strh	r0, [r6, #4]
    sel.text.color        = lv_color_hsv_to_rgb(_hue, 5, 95);
    8c62:	2105      	movs	r1, #5
    8c64:	f8bb 0000 	ldrh.w	r0, [fp]
    sel.body.border.width = 0;
    8c68:	81b5      	strh	r5, [r6, #12]
    sel.body.shadow.width = 0;
    8c6a:	8275      	strh	r5, [r6, #18]
    sel.text.color        = lv_color_hsv_to_rgb(_hue, 5, 95);
    8c6c:	f7fb f8ca 	bl	3e04 <lv_color_hsv_to_rgb>
    theme.style.ddlist.sel = &sel;
    8c70:	e9c4 7652 	strd	r7, r6, [r4, #328]	; 0x148
    sel.text.color        = lv_color_hsv_to_rgb(_hue, 5, 95);
    8c74:	8430      	strh	r0, [r6, #32]
    lv_style_copy(&roller_bg, &lv_style_transp);
    8c76:	4e70      	ldr	r6, [pc, #448]	; (8e38 <lv_theme_material_init+0xb38>)
    theme.style.ddlist.sb  = &sb;
    8c78:	4b65      	ldr	r3, [pc, #404]	; (8e10 <lv_theme_material_init+0xb10>)
    lv_style_copy(&roller_bg, &lv_style_transp);
    8c7a:	4963      	ldr	r1, [pc, #396]	; (8e08 <lv_theme_material_init+0xb08>)
    theme.style.ddlist.sb  = &sb;
    8c7c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    lv_style_copy(&roller_bg, &lv_style_transp);
    8c80:	4630      	mov	r0, r6
    8c82:	f000 fc50 	bl	9526 <lv_style_copy>
    roller_bg.body.padding.top    = LV_DPI / 6;
    8c86:	f04f 021b 	mov.w	r2, #27
    8c8a:	82f2      	strh	r2, [r6, #22]
    roller_bg.body.padding.right  = LV_DPI / 6;
    8c8c:	83b2      	strh	r2, [r6, #28]
    roller_bg.text.font           = _font;
    8c8e:	9a00      	ldr	r2, [sp, #0]
    lv_style_copy(&roller_sel, &roller_bg);
    8c90:	4f6a      	ldr	r7, [pc, #424]	; (8e3c <lv_theme_material_init+0xb3c>)
    roller_bg.text.font           = _font;
    8c92:	6813      	ldr	r3, [r2, #0]
    8c94:	6273      	str	r3, [r6, #36]	; 0x24
    roller_bg.glass               = 0;
    8c96:	7833      	ldrb	r3, [r6, #0]
    roller_bg.body.padding.bottom = LV_DPI / 6;
    8c98:	f8c6 9018 	str.w	r9, [r6, #24]
    roller_bg.glass               = 0;
    8c9c:	f365 0300 	bfi	r3, r5, #0, #1
    lv_style_copy(&roller_sel, &roller_bg);
    8ca0:	4631      	mov	r1, r6
    8ca2:	4638      	mov	r0, r7
    roller_bg.glass               = 0;
    8ca4:	7033      	strb	r3, [r6, #0]
    roller_bg.text.line_space     = LV_DPI / 8;
    8ca6:	f8a6 a02a 	strh.w	sl, [r6, #42]	; 0x2a
    lv_style_copy(&roller_sel, &roller_bg);
    8caa:	f000 fc3c 	bl	9526 <lv_style_copy>
    roller_sel.text.color = lv_color_hsv_to_rgb(_hue, 90, 70);
    8cae:	2246      	movs	r2, #70	; 0x46
    8cb0:	f8bb 0000 	ldrh.w	r0, [fp]
    8cb4:	215a      	movs	r1, #90	; 0x5a
    8cb6:	f7fb f8a5 	bl	3e04 <lv_color_hsv_to_rgb>
    roller_bg.text.line_space     = LV_DPI / 8;
    8cba:	46d1      	mov	r9, sl
    lv_style_copy(&indic, &def);
    8cbc:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8e60 <lv_theme_material_init+0xb60>
    roller_sel.text.color = lv_color_hsv_to_rgb(_hue, 90, 70);
    8cc0:	8438      	strh	r0, [r7, #32]
    lv_style_copy(&indic, &def);
    8cc2:	4641      	mov	r1, r8
    8cc4:	4650      	mov	r0, sl
    theme.style.roller.sel = &roller_sel;
    8cc6:	e9c4 6755 	strd	r6, r7, [r4, #340]	; 0x154
    lv_style_copy(&indic, &def);
    8cca:	f000 fc2c 	bl	9526 <lv_style_copy>
    indic.body.main_color    = lv_color_hsv_to_rgb(_hue, 90, 70);
    8cce:	2246      	movs	r2, #70	; 0x46
    8cd0:	f8bb 0000 	ldrh.w	r0, [fp]
    lv_style_copy(&btn_bg, &def);
    8cd4:	4e5a      	ldr	r6, [pc, #360]	; (8e40 <lv_theme_material_init+0xb40>)
    indic.body.main_color    = lv_color_hsv_to_rgb(_hue, 90, 70);
    8cd6:	215a      	movs	r1, #90	; 0x5a
    8cd8:	f7fb f894 	bl	3e04 <lv_color_hsv_to_rgb>
    indic.body.padding.inner = LV_DPI / 20;
    8cdc:	f04f 0e08 	mov.w	lr, #8
    lv_style_copy(&btn_bg, &def);
    8ce0:	4641      	mov	r1, r8
    indic.body.main_color    = lv_color_hsv_to_rgb(_hue, 90, 70);
    8ce2:	f8aa 0002 	strh.w	r0, [sl, #2]
    indic.body.grad_color    = indic.body.main_color;
    8ce6:	f8aa 0004 	strh.w	r0, [sl, #4]
    lv_style_copy(&btn_bg, &def);
    8cea:	4630      	mov	r0, r6
    indic.body.padding.inner = LV_DPI / 20;
    8cec:	f8aa e01e 	strh.w	lr, [sl, #30]
    indic.body.radius        = 0;
    8cf0:	f8aa 5006 	strh.w	r5, [sl, #6]
    indic.body.border.width  = 0;
    8cf4:	f8aa 500c 	strh.w	r5, [sl, #12]
    lv_style_copy(&btn_bg, &def);
    8cf8:	f000 fc15 	bl	9526 <lv_style_copy>
    btn_bg.body.main_color     = lv_color_hex3(0xccc);
    8cfc:	f640 40cc 	movw	r0, #3276	; 0xccc
    8d00:	f7ff fae3 	bl	82ca <lv_color_hex3>
    8d04:	8070      	strh	r0, [r6, #2]
    btn_bg.body.grad_color     = btn_bg.body.main_color;
    8d06:	80b0      	strh	r0, [r6, #4]
    btn_bg.body.border.color   = lv_color_hex3(0x888);
    8d08:	f640 0088 	movw	r0, #2184	; 0x888
    btn_bg.body.radius         = 0;
    8d0c:	80f5      	strh	r5, [r6, #6]
    btn_bg.body.border.color   = lv_color_hex3(0x888);
    8d0e:	f7ff fadc 	bl	82ca <lv_color_hex3>
    btn_bg.body.border.width   = 1;
    8d12:	4a4c      	ldr	r2, [pc, #304]	; (8e44 <lv_theme_material_init+0xb44>)
    8d14:	60f2      	str	r2, [r6, #12]
    btn_bg.body.shadow.width   = 5;
    8d16:	2305      	movs	r3, #5
    btn_bg.body.border.color   = lv_color_hex3(0x888);
    8d18:	8170      	strh	r0, [r6, #10]
    btn_bg.body.shadow.color   = DEF_SHADOW_COLOR;
    8d1a:	f640 20aa 	movw	r0, #2730	; 0xaaa
    btn_bg.body.shadow.width   = 5;
    8d1e:	8273      	strh	r3, [r6, #18]
    btn_bg.body.shadow.color   = DEF_SHADOW_COLOR;
    8d20:	f7ff fad3 	bl	82ca <lv_color_hex3>
    btn_bg.body.padding.right  = 0;
    8d24:	e9c6 5506 	strd	r5, r5, [r6, #24]
    btn_bg.body.shadow.color   = DEF_SHADOW_COLOR;
    8d28:	8230      	strh	r0, [r6, #16]
    btn_bg.text.color          = lv_color_hex3(0x333);
    8d2a:	f240 3033 	movw	r0, #819	; 0x333
    btn_bg.body.shadow.type    = LV_SHADOW_BOTTOM;
    8d2e:	7535      	strb	r5, [r6, #20]
    btn_bg.body.padding.top    = 0;
    8d30:	82f5      	strh	r5, [r6, #22]
    btn_bg.text.color          = lv_color_hex3(0x333);
    8d32:	f7ff faca 	bl	82ca <lv_color_hex3>
    lv_style_copy(&rel, &lv_style_transp);
    8d36:	4b44      	ldr	r3, [pc, #272]	; (8e48 <lv_theme_material_init+0xb48>)
    btn_bg.text.color          = lv_color_hex3(0x333);
    8d38:	8430      	strh	r0, [r6, #32]
    lv_style_copy(&rel, &lv_style_transp);
    8d3a:	4933      	ldr	r1, [pc, #204]	; (8e08 <lv_theme_material_init+0xb08>)
    8d3c:	4618      	mov	r0, r3
    8d3e:	f000 fbf2 	bl	9526 <lv_style_copy>
    rel.text.font           = _font;
    8d42:	9f00      	ldr	r7, [sp, #0]
    rel.body.padding.top    = LV_DPI / 8;
    8d44:	4b40      	ldr	r3, [pc, #256]	; (8e48 <lv_theme_material_init+0xb48>)
    rel.text.font           = _font;
    8d46:	683a      	ldr	r2, [r7, #0]
    lv_style_copy(&pr, &def);
    8d48:	4f40      	ldr	r7, [pc, #256]	; (8e4c <lv_theme_material_init+0xb4c>)
    rel.body.padding.top    = LV_DPI / 8;
    8d4a:	f8a3 9016 	strh.w	r9, [r3, #22]
    lv_style_copy(&pr, &def);
    8d4e:	4641      	mov	r1, r8
    8d50:	4638      	mov	r0, r7
    rel.body.padding.bottom = LV_DPI / 8;
    8d52:	f8a3 9018 	strh.w	r9, [r3, #24]
    rel.text.font           = _font;
    8d56:	625a      	str	r2, [r3, #36]	; 0x24
    lv_style_copy(&pr, &def);
    8d58:	f000 fbe5 	bl	9526 <lv_style_copy>
    pr.body.main_color   = lv_color_hex3(0xbbb);
    8d5c:	f640 30bb 	movw	r0, #3003	; 0xbbb
    8d60:	f7ff fab3 	bl	82ca <lv_color_hex3>
    pr.body.opa          = LV_OPA_COVER;
    8d64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    pr.body.main_color   = lv_color_hex3(0xbbb);
    8d68:	8078      	strh	r0, [r7, #2]
    pr.body.grad_color   = pr.body.main_color;
    8d6a:	80b8      	strh	r0, [r7, #4]
    pr.body.border.color = lv_color_hex3(0x888);
    8d6c:	f640 0088 	movw	r0, #2184	; 0x888
    pr.body.opa          = LV_OPA_COVER;
    8d70:	f887 c008 	strb.w	ip, [r7, #8]
    pr.body.radius       = 0;
    8d74:	80fd      	strh	r5, [r7, #6]
    pr.body.border.color = lv_color_hex3(0x888);
    8d76:	f7ff faa8 	bl	82ca <lv_color_hex3>
    pr.body.border.width = 1;
    8d7a:	4a32      	ldr	r2, [pc, #200]	; (8e44 <lv_theme_material_init+0xb44>)
    8d7c:	60fa      	str	r2, [r7, #12]
    pr.body.border.color = lv_color_hex3(0x888);
    8d7e:	8178      	strh	r0, [r7, #10]
    pr.text.color        = lv_color_hex3(0x111);
    8d80:	f240 1011 	movw	r0, #273	; 0x111
    8d84:	f7ff faa1 	bl	82ca <lv_color_hex3>
    lv_style_copy(&tgl_rel, &lv_style_transp);
    8d88:	491f      	ldr	r1, [pc, #124]	; (8e08 <lv_theme_material_init+0xb08>)
    pr.text.color        = lv_color_hex3(0x111);
    8d8a:	8438      	strh	r0, [r7, #32]
    lv_style_copy(&tgl_rel, &lv_style_transp);
    8d8c:	4830      	ldr	r0, [pc, #192]	; (8e50 <lv_theme_material_init+0xb50>)
    lv_style_copy(&tgl_pr, &def);
    8d8e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8e64 <lv_theme_material_init+0xb64>
    lv_style_copy(&tgl_rel, &lv_style_transp);
    8d92:	f000 fbc8 	bl	9526 <lv_style_copy>
    tgl_rel.glass      = 0;
    8d96:	482e      	ldr	r0, [pc, #184]	; (8e50 <lv_theme_material_init+0xb50>)
    8d98:	7802      	ldrb	r2, [r0, #0]
    8d9a:	f365 0200 	bfi	r2, r5, #0, #1
    8d9e:	7002      	strb	r2, [r0, #0]
    tgl_rel.text.font  = _font;
    8da0:	9a00      	ldr	r2, [sp, #0]
    8da2:	6812      	ldr	r2, [r2, #0]
    8da4:	6242      	str	r2, [r0, #36]	; 0x24
    tgl_rel.text.color = lv_color_hsv_to_rgb(_hue, 90, 70);
    8da6:	215a      	movs	r1, #90	; 0x5a
    8da8:	f8bb 0000 	ldrh.w	r0, [fp]
    8dac:	2246      	movs	r2, #70	; 0x46
    8dae:	f7fb f829 	bl	3e04 <lv_color_hsv_to_rgb>
    8db2:	4a27      	ldr	r2, [pc, #156]	; (8e50 <lv_theme_material_init+0xb50>)
    lv_style_copy(&tgl_pr, &def);
    8db4:	4641      	mov	r1, r8
    tgl_rel.text.color = lv_color_hsv_to_rgb(_hue, 90, 70);
    8db6:	8410      	strh	r0, [r2, #32]
    lv_style_copy(&tgl_pr, &def);
    8db8:	4648      	mov	r0, r9
    8dba:	f000 fbb4 	bl	9526 <lv_style_copy>
    tgl_pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 15, 85);
    8dbe:	f8bb 0000 	ldrh.w	r0, [fp]
    8dc2:	2255      	movs	r2, #85	; 0x55
    8dc4:	210f      	movs	r1, #15
    8dc6:	f7fb f81d 	bl	3e04 <lv_color_hsv_to_rgb>
    tgl_pr.body.opa          = LV_OPA_COVER;
    8dca:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    tgl_pr.body.main_color   = lv_color_hsv_to_rgb(_hue, 15, 85);
    8dce:	f8a9 0002 	strh.w	r0, [r9, #2]
    tgl_pr.body.grad_color   = tgl_pr.body.main_color;
    8dd2:	f8a9 0004 	strh.w	r0, [r9, #4]
    tgl_pr.text.color        = lv_color_hsv_to_rgb(_hue, 90, 60);
    8dd6:	223c      	movs	r2, #60	; 0x3c
    8dd8:	f8bb 0000 	ldrh.w	r0, [fp]
    tgl_pr.body.opa          = LV_OPA_COVER;
    8ddc:	f889 c008 	strb.w	ip, [r9, #8]
    tgl_pr.text.color        = lv_color_hsv_to_rgb(_hue, 90, 60);
    8de0:	215a      	movs	r1, #90	; 0x5a
    tgl_pr.body.border.width = 0;
    8de2:	f8a9 500c 	strh.w	r5, [r9, #12]
    tgl_pr.body.radius       = 0;
    8de6:	f8a9 5006 	strh.w	r5, [r9, #6]
    tgl_pr.text.color        = lv_color_hsv_to_rgb(_hue, 90, 60);
    8dea:	f7fb f80b 	bl	3e04 <lv_color_hsv_to_rgb>
    theme.style.tabview.bg          = theme.style.bg;
    8dee:	6862      	ldr	r2, [r4, #4]
    tgl_pr.text.color        = lv_color_hsv_to_rgb(_hue, 90, 60);
    8df0:	f8a9 0020 	strh.w	r0, [r9, #32]
    theme.style.tabview.btn.bg      = &btn_bg;
    8df4:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
    theme.style.tileview.bg   = &lv_style_transp_tight;
    8df8:	480e      	ldr	r0, [pc, #56]	; (8e34 <lv_theme_material_init+0xb34>)
    lv_style_copy(&cell, theme.style.panel);
    8dfa:	4e16      	ldr	r6, [pc, #88]	; (8e54 <lv_theme_material_init+0xb54>)
    theme.style.tabview.btn.rel     = &rel;
    8dfc:	4b12      	ldr	r3, [pc, #72]	; (8e48 <lv_theme_material_init+0xb48>)
    lv_style_copy(&cell, theme.style.panel);
    8dfe:	68a1      	ldr	r1, [r4, #8]
    theme.style.tabview.indic       = &indic;
    8e00:	e9c4 2a57 	strd	r2, sl, [r4, #348]	; 0x15c
    8e04:	e030      	b.n	8e68 <lv_theme_material_init+0xb68>
    8e06:	bf00      	nop
    8e08:	20005fbc 	.word	0x20005fbc
    8e0c:	200052b8 	.word	0x200052b8
    8e10:	20005778 	.word	0x20005778
    8e14:	ff010003 	.word	0xff010003
    8e18:	20005238 	.word	0x20005238
    8e1c:	20005678 	.word	0x20005678
    8e20:	0014001b 	.word	0x0014001b
    8e24:	20005438 	.word	0x20005438
    8e28:	20005138 	.word	0x20005138
    8e2c:	20004df8 	.word	0x20004df8
    8e30:	20005838 	.word	0x20005838
    8e34:	200060bc 	.word	0x200060bc
    8e38:	200056f8 	.word	0x200056f8
    8e3c:	20005738 	.word	0x20005738
    8e40:	20004e38 	.word	0x20004e38
    8e44:	ff010001 	.word	0xff010001
    8e48:	200056b8 	.word	0x200056b8
    8e4c:	20005478 	.word	0x20005478
    8e50:	20005bb8 	.word	0x20005bb8
    8e54:	20004e78 	.word	0x20004e78
    8e58:	20005a38 	.word	0x20005a38
    8e5c:	20005b78 	.word	0x20005b78
    8e60:	200051b8 	.word	0x200051b8
    8e64:	20005a78 	.word	0x20005a78
    theme.style.tabview.btn.tgl_rel = &tgl_rel;
    8e68:	4a32      	ldr	r2, [pc, #200]	; (8f34 <lv_theme_material_init+0xc34>)
    theme.style.tabview.btn.pr      = &pr;
    8e6a:	e9c4 375a 	strd	r3, r7, [r4, #360]	; 0x168
    theme.style.tileview.scrl = &lv_style_transp_tight;
    8e6e:	e9c4 005e 	strd	r0, r0, [r4, #376]	; 0x178
    theme.style.tileview.sb   = theme.style.page.sb;
    8e72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    8e76:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
    theme.style.tileview.bg   = &lv_style_transp_tight;
    8e7a:	4607      	mov	r7, r0
    lv_style_copy(&cell, theme.style.panel);
    8e7c:	4630      	mov	r0, r6
    theme.style.tabview.btn.tgl_pr  = &tgl_pr;
    8e7e:	e9c4 295c 	strd	r2, r9, [r4, #368]	; 0x170
    lv_style_copy(&cell, theme.style.panel);
    8e82:	f000 fb50 	bl	9526 <lv_style_copy>
    cell.body.padding.top    = LV_DPI / 12;
    8e86:	230d      	movs	r3, #13
    cell.body.border.width   = 1;
    8e88:	f04f 0e01 	mov.w	lr, #1
    cell.body.padding.bottom = LV_DPI / 12;
    8e8c:	f04f 120d 	mov.w	r2, #851981	; 0xd000d
    cell.body.border.width   = 1;
    8e90:	f8a6 e00c 	strh.w	lr, [r6, #12]
    cell.body.padding.top    = LV_DPI / 12;
    8e94:	82f3      	strh	r3, [r6, #22]
    cell.body.padding.right  = LV_DPI / 12;
    8e96:	83b3      	strh	r3, [r6, #28]
    cell.body.padding.bottom = LV_DPI / 12;
    8e98:	61b2      	str	r2, [r6, #24]
    theme.style.table.cell = &cell;
    8e9a:	e9c4 7661 	strd	r7, r6, [r4, #388]	; 0x184
    cell.body.radius         = 0;
    8e9e:	80f5      	strh	r5, [r6, #6]
    lv_style_copy(&header, &def);
    8ea0:	4e25      	ldr	r6, [pc, #148]	; (8f38 <lv_theme_material_init+0xc38>)
    lv_style_copy(&pr, &def);
    8ea2:	4f26      	ldr	r7, [pc, #152]	; (8f3c <lv_theme_material_init+0xc3c>)
    lv_style_copy(&header, &def);
    8ea4:	4641      	mov	r1, r8
    8ea6:	4630      	mov	r0, r6
    8ea8:	f000 fb3d 	bl	9526 <lv_style_copy>
    header.body.main_color     = lv_color_hex3(0xccc);
    8eac:	f640 40cc 	movw	r0, #3276	; 0xccc
    8eb0:	f7ff fa0b 	bl	82ca <lv_color_hex3>
    8eb4:	8070      	strh	r0, [r6, #2]
    header.body.grad_color     = header.body.main_color;
    8eb6:	80b0      	strh	r0, [r6, #4]
    header.body.border.color   = lv_color_hex3(0xbbb);
    8eb8:	f640 30bb 	movw	r0, #3003	; 0xbbb
    header.body.radius         = 0;
    8ebc:	80f5      	strh	r5, [r6, #6]
    header.body.border.color   = lv_color_hex3(0xbbb);
    8ebe:	f7ff fa04 	bl	82ca <lv_color_hex3>
    header.body.border.width   = 1;
    8ec2:	4a1f      	ldr	r2, [pc, #124]	; (8f40 <lv_theme_material_init+0xc40>)
    8ec4:	60f2      	str	r2, [r6, #12]
    header.body.border.color   = lv_color_hex3(0xbbb);
    8ec6:	8170      	strh	r0, [r6, #10]
    header.body.padding.right  = 0;
    8ec8:	e9c6 5506 	strd	r5, r5, [r6, #24]
    header.text.color          = lv_color_hex3(0x333);
    8ecc:	f240 3033 	movw	r0, #819	; 0x333
    header.body.padding.top    = 0;
    8ed0:	82f5      	strh	r5, [r6, #22]
    header.text.color          = lv_color_hex3(0x333);
    8ed2:	f7ff f9fa 	bl	82ca <lv_color_hex3>
    8ed6:	8430      	strh	r0, [r6, #32]
    header.image.color         = lv_color_hex3(0x333);
    8ed8:	f240 3033 	movw	r0, #819	; 0x333
    8edc:	f7ff f9f5 	bl	82ca <lv_color_hex3>
    lv_style_copy(&pr, &def);
    8ee0:	4641      	mov	r1, r8
    header.image.color         = lv_color_hex3(0x333);
    8ee2:	8630      	strh	r0, [r6, #48]	; 0x30
    lv_style_copy(&pr, &def);
    8ee4:	4638      	mov	r0, r7
    8ee6:	f000 fb1e 	bl	9526 <lv_style_copy>
    pr.body.main_color   = lv_color_hex3(0xbbb);
    8eea:	f640 30bb 	movw	r0, #3003	; 0xbbb
    8eee:	f7ff f9ec 	bl	82ca <lv_color_hex3>
    pr.body.opa          = LV_OPA_COVER;
    8ef2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    pr.body.main_color   = lv_color_hex3(0xbbb);
    8ef6:	8078      	strh	r0, [r7, #2]
    pr.body.grad_color   = pr.body.main_color;
    8ef8:	80b8      	strh	r0, [r7, #4]
    pr.text.color        = lv_color_hex3(0x111);
    8efa:	f240 1011 	movw	r0, #273	; 0x111
    pr.body.opa          = LV_OPA_COVER;
    8efe:	f887 c008 	strb.w	ip, [r7, #8]
    pr.body.border.width = 0;
    8f02:	81bd      	strh	r5, [r7, #12]
    pr.body.radius       = 0;
    8f04:	80fd      	strh	r5, [r7, #6]
    pr.text.color        = lv_color_hex3(0x111);
    8f06:	f7ff f9e0 	bl	82ca <lv_color_hex3>
    8f0a:	8438      	strh	r0, [r7, #32]
    pr.image.color       = lv_color_hex3(0x111);
    8f0c:	f240 1011 	movw	r0, #273	; 0x111
    8f10:	f7ff f9db 	bl	82ca <lv_color_hex3>
    theme.style.win.bg      = theme.style.panel;
    8f14:	68a3      	ldr	r3, [r4, #8]
    theme.style.win.content = &lv_style_transp;
    8f16:	490b      	ldr	r1, [pc, #44]	; (8f44 <lv_theme_material_init+0xc44>)
    theme.style.win.bg      = theme.style.panel;
    8f18:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
    theme.style.win.sb      = &sb;
    8f1c:	4b0a      	ldr	r3, [pc, #40]	; (8f48 <lv_theme_material_init+0xc48>)
    pr.image.color       = lv_color_hex3(0x111);
    8f1e:	8638      	strh	r0, [r7, #48]	; 0x30
    theme.group.style_mod_xcb      = style_mod;
    theme.group.style_mod_edit_xcb = style_mod_edit;
#endif

    return &theme;
}
    8f20:	4620      	mov	r0, r4
    theme.style.win.header  = &header;
    8f22:	e9c4 3664 	strd	r3, r6, [r4, #400]	; 0x190
    theme.style.win.btn.rel = &lv_style_transp;
    8f26:	e9c4 1166 	strd	r1, r1, [r4, #408]	; 0x198
    theme.style.win.btn.pr  = &pr;
    8f2a:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
}
    8f2e:	b003      	add	sp, #12
    8f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f34:	20005bb8 	.word	0x20005bb8
    8f38:	20004f38 	.word	0x20004f38
    8f3c:	200054b8 	.word	0x200054b8
    8f40:	ff010001 	.word	0xff010001
    8f44:	20005fbc 	.word	0x20005fbc
    8f48:	20005778 	.word	0x20005778

00008f4c <lv_theme_set_current>:
 * @param th pointer to theme (return value of: 'lv_theme_init_xxx()')
 */
void lv_theme_set_current(lv_theme_t * th)
{
#if LV_THEME_LIVE_UPDATE == 0
    current_theme = th;
    8f4c:	4b02      	ldr	r3, [pc, #8]	; (8f58 <lv_theme_set_current+0xc>)
    8f4e:	6018      	str	r0, [r3, #0]
    /*Copy group style modification callback functions*/
    memcpy(&current_theme->group, &th->group, sizeof(th->group));
#endif

    /*Let the object know their style might change*/
    lv_obj_report_style_mod(NULL);
    8f50:	2000      	movs	r0, #0
    8f52:	f002 ba81 	b.w	b458 <lv_obj_report_style_mod>
    8f56:	bf00      	nop
    8f58:	20005e1c 	.word	0x20005e1c

00008f5c <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
    8f5c:	4b01      	ldr	r3, [pc, #4]	; (8f64 <lv_theme_get_current+0x8>)
    8f5e:	6818      	ldr	r0, [r3, #0]
    8f60:	4770      	bx	lr
    8f62:	bf00      	nop
    8f64:	20005e1c 	.word	0x20005e1c

00008f68 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
    8f68:	7803      	ldrb	r3, [r0, #0]
    8f6a:	780a      	ldrb	r2, [r1, #0]
    8f6c:	4293      	cmp	r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
    8f6e:	bf09      	itett	eq
    8f70:	784b      	ldrbeq	r3, [r1, #1]
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
    8f72:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
    8f74:	7840      	ldrbeq	r0, [r0, #1]
    8f76:	1ac0      	subeq	r0, r0, r3

}
    8f78:	4770      	bx	lr

00008f7a <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
    8f7a:	8803      	ldrh	r3, [r0, #0]
    8f7c:	880a      	ldrh	r2, [r1, #0]
    8f7e:	4293      	cmp	r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
    8f80:	bf09      	itett	eq
    8f82:	884b      	ldrheq	r3, [r1, #2]
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
    8f84:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
    8f86:	8840      	ldrheq	r0, [r0, #2]
    8f88:	1ac0      	subeq	r0, r0, r3
}
    8f8a:	4770      	bx	lr

00008f8c <get_bits>:
 * @param bit_pos index of teh first bit to read.
 * @param len number of bits to read (must be <= 8).
 * @return the read bits
 */
static uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)
{
    8f8c:	b510      	push	{r4, lr}
    uint8_t res = 0;
    uint32_t byte_pos = bit_pos >> 3;
    8f8e:	08cb      	lsrs	r3, r1, #3
    bit_pos = bit_pos & 0x7;
    8f90:	f001 0107 	and.w	r1, r1, #7
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    8f94:	5cc4      	ldrb	r4, [r0, r3]
    8f96:	4418      	add	r0, r3

    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
    8f98:	f1c2 0310 	rsb	r3, r2, #16
    uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    8f9c:	7840      	ldrb	r0, [r0, #1]
    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
    8f9e:	1a59      	subs	r1, r3, r1
    uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    8fa0:	eb00 2004 	add.w	r0, r0, r4, lsl #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    8fa4:	2301      	movs	r3, #1
    8fa6:	fa03 f202 	lsl.w	r2, r3, r2
    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
    8faa:	b280      	uxth	r0, r0
    8fac:	4108      	asrs	r0, r1
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    8fae:	3a01      	subs	r2, #1
    res = (in16 >> (16 - bit_pos - len)) & bit_mask;
    8fb0:	4010      	ands	r0, r2
    return res;
}
    8fb2:	b2c0      	uxtb	r0, r0
    8fb4:	bd10      	pop	{r4, pc}
	...

00008fb8 <bits_write>:
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
    if(len == 3) {
    8fb8:	2b03      	cmp	r3, #3
{
    8fba:	b530      	push	{r4, r5, lr}
    if(len == 3) {
    8fbc:	d104      	bne.n	8fc8 <bits_write+0x10>
        len = 4;
        switch(val) {
    8fbe:	2a07      	cmp	r2, #7
    8fc0:	bf9c      	itt	ls
    8fc2:	4b0b      	ldrls	r3, [pc, #44]	; (8ff0 <bits_write+0x38>)
    8fc4:	5c9a      	ldrbls	r2, [r3, r2]
        len = 4;
    8fc6:	2304      	movs	r3, #4
        case 7: val = 15; break;
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
    bit_pos = bit_pos & 0x7;
    8fc8:	f001 0507 	and.w	r5, r1, #7
    bit_pos = 8 - bit_pos - len;

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    8fcc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    8fd0:	f3c1 01cf 	ubfx	r1, r1, #3, #16
    8fd4:	f1c5 0508 	rsb	r5, r5, #8
    bit_pos = 8 - bit_pos - len;
    8fd8:	1aed      	subs	r5, r5, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    8fda:	fa04 f303 	lsl.w	r3, r4, r3
    8fde:	f063 03ff 	orn	r3, r3, #255	; 0xff
    8fe2:	5c44      	ldrb	r4, [r0, r1]
    8fe4:	40ab      	lsls	r3, r5
    8fe6:	4023      	ands	r3, r4
    out[byte_pos] |= (val << bit_pos);
    8fe8:	40aa      	lsls	r2, r5
    8fea:	431a      	orrs	r2, r3
    8fec:	5442      	strb	r2, [r0, r1]
}
    8fee:	bd30      	pop	{r4, r5, pc}
    8ff0:	0001aa1c 	.word	0x0001aa1c

00008ff4 <rle_next>:
    rle_prev_v = 0;
    rle_cnt = 0;
}

static uint8_t rle_next(void)
{
    8ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t v = 0;
    uint8_t ret = 0;

    if(rle_state == RLE_STATE_SINGLE) {
    8ff8:	4e4a      	ldr	r6, [pc, #296]	; (9124 <rle_next+0x130>)
    8ffa:	f896 9000 	ldrb.w	r9, [r6]
    8ffe:	f1b9 0f00 	cmp.w	r9, #0
    9002:	d11d      	bne.n	9040 <rle_next+0x4c>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
    9004:	4b48      	ldr	r3, [pc, #288]	; (9128 <rle_next+0x134>)
    9006:	4d49      	ldr	r5, [pc, #292]	; (912c <rle_next+0x138>)
    9008:	781f      	ldrb	r7, [r3, #0]
    900a:	f8d5 8000 	ldr.w	r8, [r5]
    900e:	4b48      	ldr	r3, [pc, #288]	; (9130 <rle_next+0x13c>)
    9010:	463a      	mov	r2, r7
    9012:	6818      	ldr	r0, [r3, #0]
    9014:	4641      	mov	r1, r8
    9016:	f7ff ffb9 	bl	8f8c <get_bits>
    901a:	4b46      	ldr	r3, [pc, #280]	; (9134 <rle_next+0x140>)
    901c:	4604      	mov	r4, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
    901e:	f1b8 0f00 	cmp.w	r8, #0
    9022:	d007      	beq.n	9034 <rle_next+0x40>
    9024:	781a      	ldrb	r2, [r3, #0]
    9026:	4282      	cmp	r2, r0
            rle_cnt = 0;
    9028:	bf01      	itttt	eq
    902a:	4a43      	ldreq	r2, [pc, #268]	; (9138 <rle_next+0x144>)
    902c:	f882 9000 	strbeq.w	r9, [r2]
            rle_state = RLE_STATE_REPEATE;
    9030:	2201      	moveq	r2, #1
    9032:	7032      	strbeq	r2, [r6, #0]
        }

        rle_prev_v = ret;
        rle_rdp += rle_bpp;
    9034:	4447      	add	r7, r8
        rle_prev_v = ret;
    9036:	701c      	strb	r4, [r3, #0]
        rle_rdp += rle_bpp;
    9038:	602f      	str	r7, [r5, #0]
            rle_state = RLE_STATE_SINGLE;
        }
    }

    return ret;
}
    903a:	4620      	mov	r0, r4
    903c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(rle_state == RLE_STATE_REPEATE) {
    9040:	f1b9 0f01 	cmp.w	r9, #1
    9044:	d149      	bne.n	90da <rle_next+0xe6>
        v = get_bits(rle_in, rle_rdp, 1);
    9046:	4b3a      	ldr	r3, [pc, #232]	; (9130 <rle_next+0x13c>)
    9048:	4f38      	ldr	r7, [pc, #224]	; (912c <rle_next+0x138>)
    904a:	f8d3 8000 	ldr.w	r8, [r3]
    904e:	683d      	ldr	r5, [r7, #0]
        rle_cnt++;
    9050:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 9138 <rle_next+0x144>
        v = get_bits(rle_in, rle_rdp, 1);
    9054:	464a      	mov	r2, r9
    9056:	4629      	mov	r1, r5
    9058:	4640      	mov	r0, r8
    905a:	f7ff ff97 	bl	8f8c <get_bits>
        rle_cnt++;
    905e:	f89a 3000 	ldrb.w	r3, [sl]
    9062:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 9134 <rle_next+0x140>
    9066:	3301      	adds	r3, #1
    9068:	b2db      	uxtb	r3, r3
        rle_rdp += 1;
    906a:	f105 0b01 	add.w	fp, r5, #1
        if(v == 1) {
    906e:	2801      	cmp	r0, #1
        rle_cnt++;
    9070:	f88a 3000 	strb.w	r3, [sl]
        rle_rdp += 1;
    9074:	f8c7 b000 	str.w	fp, [r7]
        if(v == 1) {
    9078:	d121      	bne.n	90be <rle_next+0xca>
            if(rle_cnt == 11) {
    907a:	2b0b      	cmp	r3, #11
            ret = rle_prev_v;
    907c:	f899 4000 	ldrb.w	r4, [r9]
            if(rle_cnt == 11) {
    9080:	d1db      	bne.n	903a <rle_next+0x46>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
    9082:	4659      	mov	r1, fp
    9084:	2206      	movs	r2, #6
    9086:	4640      	mov	r0, r8
    9088:	f7ff ff80 	bl	8f8c <get_bits>
                rle_rdp += 6;
    908c:	3507      	adds	r5, #7
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
    908e:	4683      	mov	fp, r0
    9090:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
    9094:	603d      	str	r5, [r7, #0]
                if(rle_cnt != 0) {
    9096:	b110      	cbz	r0, 909e <rle_next+0xaa>
                    rle_state = RLE_STATE_COUNTER;
    9098:	2302      	movs	r3, #2
            rle_state = RLE_STATE_SINGLE;
    909a:	7033      	strb	r3, [r6, #0]
    909c:	e7cd      	b.n	903a <rle_next+0x46>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
    909e:	4b22      	ldr	r3, [pc, #136]	; (9128 <rle_next+0x134>)
    90a0:	f893 a000 	ldrb.w	sl, [r3]
    90a4:	4629      	mov	r1, r5
    90a6:	4652      	mov	r2, sl
    90a8:	4640      	mov	r0, r8
    90aa:	f7ff ff6f 	bl	8f8c <get_bits>
                    rle_rdp += rle_bpp;
    90ae:	4455      	add	r5, sl
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
    90b0:	4604      	mov	r4, r0
                    rle_prev_v = ret;
    90b2:	f889 0000 	strb.w	r0, [r9]
                    rle_rdp += rle_bpp;
    90b6:	603d      	str	r5, [r7, #0]
                    rle_state = RLE_STATE_SINGLE;
    90b8:	f886 b000 	strb.w	fp, [r6]
    90bc:	e7bd      	b.n	903a <rle_next+0x46>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    90be:	4b1a      	ldr	r3, [pc, #104]	; (9128 <rle_next+0x134>)
    90c0:	781d      	ldrb	r5, [r3, #0]
    90c2:	4659      	mov	r1, fp
    90c4:	462a      	mov	r2, r5
    90c6:	4640      	mov	r0, r8
    90c8:	f7ff ff60 	bl	8f8c <get_bits>
            rle_rdp += rle_bpp;
    90cc:	445d      	add	r5, fp
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    90ce:	4604      	mov	r4, r0
            rle_prev_v = ret;
    90d0:	f889 0000 	strb.w	r0, [r9]
            rle_rdp += rle_bpp;
    90d4:	603d      	str	r5, [r7, #0]
            rle_state = RLE_STATE_SINGLE;
    90d6:	2300      	movs	r3, #0
    90d8:	e7df      	b.n	909a <rle_next+0xa6>
    else if(rle_state == RLE_STATE_COUNTER) {
    90da:	f1b9 0f02 	cmp.w	r9, #2
    90de:	d11e      	bne.n	911e <rle_next+0x12a>
        rle_cnt--;
    90e0:	4b15      	ldr	r3, [pc, #84]	; (9138 <rle_next+0x144>)
        ret = rle_prev_v;
    90e2:	f8df a050 	ldr.w	sl, [pc, #80]	; 9134 <rle_next+0x140>
        rle_cnt--;
    90e6:	781d      	ldrb	r5, [r3, #0]
        ret = rle_prev_v;
    90e8:	f89a 4000 	ldrb.w	r4, [sl]
        rle_cnt--;
    90ec:	3d01      	subs	r5, #1
    90ee:	b2ed      	uxtb	r5, r5
    90f0:	701d      	strb	r5, [r3, #0]
        if(rle_cnt == 0) {
    90f2:	2d00      	cmp	r5, #0
    90f4:	d1a1      	bne.n	903a <rle_next+0x46>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    90f6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 912c <rle_next+0x138>
    90fa:	4b0b      	ldr	r3, [pc, #44]	; (9128 <rle_next+0x134>)
    90fc:	f8d8 9000 	ldr.w	r9, [r8]
    9100:	781f      	ldrb	r7, [r3, #0]
    9102:	4b0b      	ldr	r3, [pc, #44]	; (9130 <rle_next+0x13c>)
    9104:	463a      	mov	r2, r7
    9106:	6818      	ldr	r0, [r3, #0]
    9108:	4649      	mov	r1, r9
    910a:	f7ff ff3f 	bl	8f8c <get_bits>
            rle_rdp += rle_bpp;
    910e:	444f      	add	r7, r9
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    9110:	4604      	mov	r4, r0
            rle_prev_v = ret;
    9112:	f88a 0000 	strb.w	r0, [sl]
            rle_rdp += rle_bpp;
    9116:	f8c8 7000 	str.w	r7, [r8]
            rle_state = RLE_STATE_SINGLE;
    911a:	7035      	strb	r5, [r6, #0]
    911c:	e78d      	b.n	903a <rle_next+0x46>
    uint8_t ret = 0;
    911e:	2400      	movs	r4, #0
    9120:	e78b      	b.n	903a <rle_next+0x46>
    9122:	bf00      	nop
    9124:	20005e34 	.word	0x20005e34
    9128:	20005e24 	.word	0x20005e24
    912c:	20005e30 	.word	0x20005e30
    9130:	20005e28 	.word	0x20005e28
    9134:	20005e2c 	.word	0x20005e2c
    9138:	20005e25 	.word	0x20005e25

0000913c <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
    913c:	8800      	ldrh	r0, [r0, #0]
    913e:	880b      	ldrh	r3, [r1, #0]
}
    9140:	1ac0      	subs	r0, r0, r3
    9142:	4770      	bx	lr

00009144 <get_glyph_dsc_id.isra.0.part.0>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
    9144:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    9146:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
    9148:	6963      	ldr	r3, [r4, #20]
    914a:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
    914c:	b085      	sub	sp, #20
    914e:	460e      	mov	r6, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
    9150:	d145      	bne.n	91de <get_glyph_dsc_id.isra.0.part.0+0x9a>
    9152:	69a0      	ldr	r0, [r4, #24]
}
    9154:	b005      	add	sp, #20
    9156:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    9158:	68a2      	ldr	r2, [r4, #8]
    915a:	fb0c f703 	mul.w	r7, ip, r3
    915e:	19d5      	adds	r5, r2, r7
    9160:	59d2      	ldr	r2, [r2, r7]
        if(rcp > fdsc->cmaps[i].range_length) continue;
    9162:	88a9      	ldrh	r1, [r5, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    9164:	1ab2      	subs	r2, r6, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
    9166:	428a      	cmp	r2, r1
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    9168:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
    916a:	f103 0301 	add.w	r3, r3, #1
    916e:	d839      	bhi.n	91e4 <get_glyph_dsc_id.isra.0.part.0+0xa0>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
    9170:	7cab      	ldrb	r3, [r5, #18]
    9172:	b923      	cbnz	r3, 917e <get_glyph_dsc_id.isra.0.part.0+0x3a>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
    9174:	88e8      	ldrh	r0, [r5, #6]
    9176:	4410      	add	r0, r2
        fdsc->last_letter = letter;
    9178:	6166      	str	r6, [r4, #20]
    fdsc->last_glyph_id = 0;
    917a:	61a0      	str	r0, [r4, #24]
    return 0;
    917c:	e7ea      	b.n	9154 <get_glyph_dsc_id.isra.0.part.0+0x10>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
    917e:	2b01      	cmp	r3, #1
    9180:	d104      	bne.n	918c <get_glyph_dsc_id.isra.0.part.0+0x48>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
    9182:	68eb      	ldr	r3, [r5, #12]
    9184:	5c98      	ldrb	r0, [r3, r2]
    9186:	88eb      	ldrh	r3, [r5, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
    9188:	4418      	add	r0, r3
    918a:	e7f5      	b.n	9178 <get_glyph_dsc_id.isra.0.part.0+0x34>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
    918c:	2b02      	cmp	r3, #2
    918e:	d111      	bne.n	91b4 <get_glyph_dsc_id.isra.0.part.0+0x70>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
    9190:	4919      	ldr	r1, [pc, #100]	; (91f8 <get_glyph_dsc_id.isra.0.part.0+0xb4>)
    9192:	8a2a      	ldrh	r2, [r5, #16]
    9194:	9100      	str	r1, [sp, #0]
    9196:	68a9      	ldr	r1, [r5, #8]
    9198:	a803      	add	r0, sp, #12
    919a:	f7fa f90d 	bl	33b8 <lv_utils_bsearch>
            if(p) {
    919e:	b908      	cbnz	r0, 91a4 <get_glyph_dsc_id.isra.0.part.0+0x60>
        uint32_t glyph_id = 0;
    91a0:	2000      	movs	r0, #0
    91a2:	e7e9      	b.n	9178 <get_glyph_dsc_id.isra.0.part.0+0x34>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
    91a4:	68a3      	ldr	r3, [r4, #8]
    91a6:	441f      	add	r7, r3
    91a8:	68bb      	ldr	r3, [r7, #8]
    91aa:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
    91ac:	88fb      	ldrh	r3, [r7, #6]
    91ae:	eb03 0050 	add.w	r0, r3, r0, lsr #1
    91b2:	e7e1      	b.n	9178 <get_glyph_dsc_id.isra.0.part.0+0x34>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
    91b4:	2b03      	cmp	r3, #3
    91b6:	d1f3      	bne.n	91a0 <get_glyph_dsc_id.isra.0.part.0+0x5c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
    91b8:	4b0f      	ldr	r3, [pc, #60]	; (91f8 <get_glyph_dsc_id.isra.0.part.0+0xb4>)
    91ba:	8a2a      	ldrh	r2, [r5, #16]
    91bc:	9300      	str	r3, [sp, #0]
    91be:	68a9      	ldr	r1, [r5, #8]
    91c0:	2302      	movs	r3, #2
    91c2:	a803      	add	r0, sp, #12
    91c4:	f7fa f8f8 	bl	33b8 <lv_utils_bsearch>
            if(p) {
    91c8:	2800      	cmp	r0, #0
    91ca:	d0e9      	beq.n	91a0 <get_glyph_dsc_id.isra.0.part.0+0x5c>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t*) fdsc->cmaps[i].unicode_list);
    91cc:	68a3      	ldr	r3, [r4, #8]
    91ce:	441f      	add	r7, r3
    91d0:	68bb      	ldr	r3, [r7, #8]
    91d2:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
    91d4:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
    91d6:	68fb      	ldr	r3, [r7, #12]
    91d8:	5c18      	ldrb	r0, [r3, r0]
    91da:	88fb      	ldrh	r3, [r7, #6]
    91dc:	e7d4      	b.n	9188 <get_glyph_dsc_id.isra.0.part.0+0x44>
    91de:	2300      	movs	r3, #0
    91e0:	f04f 0c14 	mov.w	ip, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
    91e4:	8a62      	ldrh	r2, [r4, #18]
    91e6:	b299      	uxth	r1, r3
    91e8:	f3c2 0209 	ubfx	r2, r2, #0, #10
    91ec:	428a      	cmp	r2, r1
    91ee:	d8b3      	bhi.n	9158 <get_glyph_dsc_id.isra.0.part.0+0x14>
    fdsc->last_letter = letter;
    91f0:	6166      	str	r6, [r4, #20]
    fdsc->last_glyph_id = 0;
    91f2:	2000      	movs	r0, #0
    91f4:	e7c1      	b.n	917a <get_glyph_dsc_id.isra.0.part.0+0x36>
    91f6:	bf00      	nop
    91f8:	0000913d 	.word	0x0000913d

000091fc <lv_font_get_bitmap_fmt_txt>:
{
    91fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9200:	b087      	sub	sp, #28
    if(letter == '\0') return 0;
    9202:	b919      	cbnz	r1, 920c <lv_font_get_bitmap_fmt_txt+0x10>
    if(!gid) return NULL;
    9204:	2000      	movs	r0, #0
}
    9206:	b007      	add	sp, #28
    9208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    920c:	f850 6f0c 	ldr.w	r6, [r0, #12]!
    9210:	f7ff ff98 	bl	9144 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
    9214:	4607      	mov	r7, r0
    9216:	2800      	cmp	r0, #0
    9218:	d0f4      	beq.n	9204 <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
    921a:	7cf3      	ldrb	r3, [r6, #19]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
    921c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
    9220:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
    9224:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
    9228:	d108      	bne.n	923c <lv_font_get_bitmap_fmt_txt+0x40>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
    922a:	2d00      	cmp	r5, #0
    922c:	d0ea      	beq.n	9204 <lv_font_get_bitmap_fmt_txt+0x8>
    922e:	f859 3030 	ldr.w	r3, [r9, r0, lsl #3]
    9232:	6830      	ldr	r0, [r6, #0]
    9234:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9238:	4418      	add	r0, r3
    923a:	e7e4      	b.n	9206 <lv_font_get_bitmap_fmt_txt+0xa>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
    923c:	792c      	ldrb	r4, [r5, #4]
    923e:	7969      	ldrb	r1, [r5, #5]
    9240:	fb14 f401 	smulbb	r4, r4, r1
        if(gsize == 0) return NULL;
    9244:	2c00      	cmp	r4, #0
    9246:	d0dd      	beq.n	9204 <lv_font_get_bitmap_fmt_txt+0x8>
        switch(fdsc->bpp) {
    9248:	f3c3 0382 	ubfx	r3, r3, #2, #3
    924c:	3b01      	subs	r3, #1
    924e:	2b03      	cmp	r3, #3
    9250:	d804      	bhi.n	925c <lv_font_get_bitmap_fmt_txt+0x60>
    9252:	e8df f003 	tbb	[pc, r3]
    9256:	4b02      	.short	0x4b02
    9258:	4d4d      	.short	0x4d4d
        case 1: buf_size = gsize >> 3;  break;
    925a:	08e4      	lsrs	r4, r4, #3
        if(lv_mem_get_size(buf) < buf_size) {
    925c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 93a8 <lv_font_get_bitmap_fmt_txt+0x1ac>
    9260:	f8d8 0000 	ldr.w	r0, [r8]
    9264:	f7fa f874 	bl	3350 <lv_mem_get_size>
    9268:	42a0      	cmp	r0, r4
    926a:	46c2      	mov	sl, r8
    926c:	d342      	bcc.n	92f4 <lv_font_get_bitmap_fmt_txt+0xf8>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], buf, gdsc->box_w , gdsc->box_h, (uint8_t)fdsc->bpp);
    926e:	f859 2037 	ldr.w	r2, [r9, r7, lsl #3]
    9272:	6833      	ldr	r3, [r6, #0]
    9274:	7cf4      	ldrb	r4, [r6, #19]
    9276:	792f      	ldrb	r7, [r5, #4]
    9278:	f8da b000 	ldr.w	fp, [sl]
    927c:	f3c2 0213 	ubfx	r2, r2, #0, #20
    9280:	4413      	add	r3, r2
    9282:	796a      	ldrb	r2, [r5, #5]
    9284:	9203      	str	r2, [sp, #12]
    9286:	f3c4 0282 	ubfx	r2, r4, #2, #3
    928a:	2a03      	cmp	r2, #3
    928c:	bf14      	ite	ne
    928e:	4611      	movne	r1, r2
    9290:	2104      	moveq	r1, #4
    9292:	9100      	str	r1, [sp, #0]
    rle_in = in;
    9294:	493d      	ldr	r1, [pc, #244]	; (938c <lv_font_get_bitmap_fmt_txt+0x190>)
    9296:	600b      	str	r3, [r1, #0]
    rle_bpp = bpp;
    9298:	4b3d      	ldr	r3, [pc, #244]	; (9390 <lv_font_get_bitmap_fmt_txt+0x194>)
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], buf, gdsc->box_w , gdsc->box_h, (uint8_t)fdsc->bpp);
    929a:	4614      	mov	r4, r2
    rle_bpp = bpp;
    929c:	701a      	strb	r2, [r3, #0]
    rle_state = RLE_STATE_SINGLE;
    929e:	4a3d      	ldr	r2, [pc, #244]	; (9394 <lv_font_get_bitmap_fmt_txt+0x198>)
    92a0:	2300      	movs	r3, #0
    92a2:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
    92a4:	4a3c      	ldr	r2, [pc, #240]	; (9398 <lv_font_get_bitmap_fmt_txt+0x19c>)
    92a6:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
    92a8:	4a3c      	ldr	r2, [pc, #240]	; (939c <lv_font_get_bitmap_fmt_txt+0x1a0>)
    92aa:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
    92ac:	4a3c      	ldr	r2, [pc, #240]	; (93a0 <lv_font_get_bitmap_fmt_txt+0x1a4>)
    uint8_t * line_buf = lv_draw_get_buf(w * 2);
    92ae:	0078      	lsls	r0, r7, #1
    rle_cnt = 0;
    92b0:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf = lv_draw_get_buf(w * 2);
    92b2:	f7fe fd5f 	bl	7d74 <lv_draw_get_buf>
    92b6:	4605      	mov	r5, r0
    uint8_t * line_buf2 = line_buf + w;
    92b8:	eb00 0807 	add.w	r8, r0, r7
static void decompress_line(uint8_t * out, lv_coord_t w)
    92bc:	4681      	mov	r9, r0
    uint8_t * line_buf2 = line_buf + w;
    92be:	4606      	mov	r6, r0
    for(i = 0; i < w; i++) {
    92c0:	4546      	cmp	r6, r8
    92c2:	d12d      	bne.n	9320 <lv_font_get_bitmap_fmt_txt+0x124>
    uint32_t wrp = 0;
    92c4:	f04f 0a00 	mov.w	sl, #0
    for(x = 0; x < w; x++) {
    92c8:	45b1      	cmp	r9, r6
    92ca:	d12e      	bne.n	932a <lv_font_get_bitmap_fmt_txt+0x12e>
    92cc:	9b00      	ldr	r3, [sp, #0]
    92ce:	fb17 f303 	smulbb	r3, r7, r3
    92d2:	9302      	str	r3, [sp, #8]
    92d4:	4699      	mov	r9, r3
    92d6:	eb08 0307 	add.w	r3, r8, r7
    for(y = 1; y < h; y++) {
    92da:	2601      	movs	r6, #1
    92dc:	9304      	str	r3, [sp, #16]
    92de:	9b03      	ldr	r3, [sp, #12]
    92e0:	42b3      	cmp	r3, r6
    92e2:	dd50      	ble.n	9386 <lv_font_get_bitmap_fmt_txt+0x18a>
    92e4:	f8cd 8004 	str.w	r8, [sp, #4]
    92e8:	4647      	mov	r7, r8
    92ea:	e02c      	b.n	9346 <lv_font_get_bitmap_fmt_txt+0x14a>
        case 2: buf_size = gsize >> 2;  break;
    92ec:	08a4      	lsrs	r4, r4, #2
    92ee:	e7b5      	b.n	925c <lv_font_get_bitmap_fmt_txt+0x60>
        case 4: buf_size = gsize >> 1;  break;
    92f0:	0864      	lsrs	r4, r4, #1
    92f2:	e7b3      	b.n	925c <lv_font_get_bitmap_fmt_txt+0x60>
            buf = lv_mem_realloc(buf, buf_size);
    92f4:	4621      	mov	r1, r4
    92f6:	f8d8 0000 	ldr.w	r0, [r8]
    92fa:	f7fa f837 	bl	336c <lv_mem_realloc>
    92fe:	f8c8 0000 	str.w	r0, [r8]
            LV_ASSERT_MEM(buf);
    9302:	f001 fa0d 	bl	a720 <lv_debug_check_null>
    9306:	4603      	mov	r3, r0
    9308:	b928      	cbnz	r0, 9316 <lv_font_get_bitmap_fmt_txt+0x11a>
    930a:	f8d8 2000 	ldr.w	r2, [r8]
    930e:	4825      	ldr	r0, [pc, #148]	; (93a4 <lv_font_get_bitmap_fmt_txt+0x1a8>)
    9310:	f001 fa16 	bl	a740 <lv_debug_log_error>
    9314:	e7fe      	b.n	9314 <lv_font_get_bitmap_fmt_txt+0x118>
            if(buf == NULL) return NULL;
    9316:	f8d8 3000 	ldr.w	r3, [r8]
    931a:	2b00      	cmp	r3, #0
    931c:	d1a7      	bne.n	926e <lv_font_get_bitmap_fmt_txt+0x72>
    931e:	e771      	b.n	9204 <lv_font_get_bitmap_fmt_txt+0x8>
        out[i] = rle_next();
    9320:	f7ff fe68 	bl	8ff4 <rle_next>
    9324:	f806 0b01 	strb.w	r0, [r6], #1
    for(i = 0; i < w; i++) {
    9328:	e7ca      	b.n	92c0 <lv_font_get_bitmap_fmt_txt+0xc4>
        bits_write(out,wrp, line_buf1[x], bpp);
    932a:	4623      	mov	r3, r4
    932c:	4651      	mov	r1, sl
    932e:	f819 2b01 	ldrb.w	r2, [r9], #1
    9332:	4658      	mov	r0, fp
    9334:	f7ff fe40 	bl	8fb8 <bits_write>
        wrp += wr_size;
    9338:	9b00      	ldr	r3, [sp, #0]
    933a:	449a      	add	sl, r3
    for(x = 0; x < w; x++) {
    933c:	e7c4      	b.n	92c8 <lv_font_get_bitmap_fmt_txt+0xcc>
        out[i] = rle_next();
    933e:	f7ff fe59 	bl	8ff4 <rle_next>
    9342:	f807 0b01 	strb.w	r0, [r7], #1
    for(i = 0; i < w; i++) {
    9346:	9b04      	ldr	r3, [sp, #16]
    9348:	429f      	cmp	r7, r3
    934a:	d1f8      	bne.n	933e <lv_font_get_bitmap_fmt_txt+0x142>
    934c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
    9350:	4649      	mov	r1, r9
        for(x = 0; x < w; x++) {
    9352:	9b01      	ldr	r3, [sp, #4]
    9354:	429f      	cmp	r7, r3
    9356:	d104      	bne.n	9362 <lv_font_get_bitmap_fmt_txt+0x166>
    9358:	9b02      	ldr	r3, [sp, #8]
    935a:	3601      	adds	r6, #1
    935c:	4499      	add	r9, r3
    for(y = 1; y < h; y++) {
    935e:	b236      	sxth	r6, r6
    9360:	e7bd      	b.n	92de <lv_font_get_bitmap_fmt_txt+0xe2>
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
    9362:	9b01      	ldr	r3, [sp, #4]
            bits_write(out,wrp, line_buf1[x], bpp);
    9364:	9105      	str	r1, [sp, #20]
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
    9366:	f813 2b01 	ldrb.w	r2, [r3], #1
    936a:	9301      	str	r3, [sp, #4]
    936c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
    9370:	405a      	eors	r2, r3
    9372:	f88a 2000 	strb.w	r2, [sl]
            bits_write(out,wrp, line_buf1[x], bpp);
    9376:	4623      	mov	r3, r4
    9378:	4658      	mov	r0, fp
    937a:	f7ff fe1d 	bl	8fb8 <bits_write>
            wrp += wr_size;
    937e:	9b00      	ldr	r3, [sp, #0]
    9380:	9905      	ldr	r1, [sp, #20]
    9382:	4419      	add	r1, r3
        for(x = 0; x < w; x++) {
    9384:	e7e5      	b.n	9352 <lv_font_get_bitmap_fmt_txt+0x156>
        return buf;
    9386:	4b08      	ldr	r3, [pc, #32]	; (93a8 <lv_font_get_bitmap_fmt_txt+0x1ac>)
    9388:	6818      	ldr	r0, [r3, #0]
    938a:	e73c      	b.n	9206 <lv_font_get_bitmap_fmt_txt+0xa>
    938c:	20005e28 	.word	0x20005e28
    9390:	20005e24 	.word	0x20005e24
    9394:	20005e34 	.word	0x20005e34
    9398:	20005e30 	.word	0x20005e30
    939c:	20005e2c 	.word	0x20005e2c
    93a0:	20005e25 	.word	0x20005e25
    93a4:	0001a9b8 	.word	0x0001a9b8
    93a8:	20005e20 	.word	0x20005e20

000093ac <lv_font_get_glyph_dsc_fmt_txt>:
{
    93ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    93b0:	460c      	mov	r4, r1
    93b2:	b085      	sub	sp, #20
    93b4:	4607      	mov	r7, r0
    93b6:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
    93b8:	4611      	mov	r1, r2
    93ba:	b91a      	cbnz	r2, 93c4 <lv_font_get_glyph_dsc_fmt_txt+0x18>
    if(!gid) return false;
    93bc:	2000      	movs	r0, #0
}
    93be:	b005      	add	sp, #20
    93c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    93c4:	4680      	mov	r8, r0
    93c6:	f858 5f0c 	ldr.w	r5, [r8, #12]!
    93ca:	4640      	mov	r0, r8
    93cc:	f7ff feba 	bl	9144 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return false;
    93d0:	4606      	mov	r6, r0
    93d2:	2800      	cmp	r0, #0
    93d4:	d0f2      	beq.n	93bc <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(fdsc->kern_dsc) {
    93d6:	68eb      	ldr	r3, [r5, #12]
    93d8:	b9d3      	cbnz	r3, 9410 <lv_font_get_glyph_dsc_fmt_txt+0x64>
    int8_t kvalue = 0;
    93da:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
    93dc:	6868      	ldr	r0, [r5, #4]
    93de:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
    93e2:	8a28      	ldrh	r0, [r5, #16]
    uint32_t adv_w = gdsc->adv_w + kv;
    93e4:	8872      	ldrh	r2, [r6, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
    93e6:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w + kv;
    93e8:	0912      	lsrs	r2, r2, #4
    93ea:	eb02 1323 	add.w	r3, r2, r3, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
    93ee:	3308      	adds	r3, #8
    93f0:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
    93f2:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
    93f4:	7973      	ldrb	r3, [r6, #5]
    93f6:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
    93f8:	7933      	ldrb	r3, [r6, #4]
    93fa:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
    93fc:	79b3      	ldrb	r3, [r6, #6]
    93fe:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
    9400:	79f3      	ldrb	r3, [r6, #7]
    9402:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
    9404:	7ceb      	ldrb	r3, [r5, #19]
    9406:	f3c3 0382 	ubfx	r3, r3, #2, #3
    940a:	71a3      	strb	r3, [r4, #6]
    return true;
    940c:	2001      	movs	r0, #1
    940e:	e7d6      	b.n	93be <lv_font_get_glyph_dsc_fmt_txt+0x12>
    if(letter == '\0') return 0;
    9410:	f1b9 0f00 	cmp.w	r9, #0
    9414:	d0e1      	beq.n	93da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
    9416:	4649      	mov	r1, r9
    9418:	4640      	mov	r0, r8
    941a:	f7ff fe93 	bl	9144 <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
    941e:	2800      	cmp	r0, #0
    9420:	d0db      	beq.n	93da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            kvalue = get_kern_value(font, gid, gid_next);
    9422:	68fb      	ldr	r3, [r7, #12]
    if(fdsc->kern_classes == 0) {
    9424:	68df      	ldr	r7, [r3, #12]
    9426:	7cdb      	ldrb	r3, [r3, #19]
    9428:	069b      	lsls	r3, r3, #26
    942a:	d434      	bmi.n	9496 <lv_font_get_glyph_dsc_fmt_txt+0xea>
        if(kdsc->glyph_ids_size == 0) {
    942c:	7afb      	ldrb	r3, [r7, #11]
    942e:	f013 0303 	ands.w	r3, r3, #3
    9432:	d118      	bne.n	9466 <lv_font_get_glyph_dsc_fmt_txt+0xba>
            const uint8_t * g_ids = kdsc->glyph_ids;
    9434:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
    9438:	68ba      	ldr	r2, [r7, #8]
    943a:	4b1f      	ldr	r3, [pc, #124]	; (94b8 <lv_font_get_glyph_dsc_fmt_txt+0x10c>)
    943c:	9300      	str	r3, [sp, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
    943e:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    9442:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
    9446:	2302      	movs	r3, #2
    9448:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    944c:	4641      	mov	r1, r8
    944e:	a803      	add	r0, sp, #12
    9450:	f7f9 ffb2 	bl	33b8 <lv_utils_bsearch>
            if(kid_p) {
    9454:	4603      	mov	r3, r0
    9456:	2800      	cmp	r0, #0
    9458:	d0c0      	beq.n	93dc <lv_font_get_glyph_dsc_fmt_txt+0x30>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
    945a:	eba0 0308 	sub.w	r3, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
    945e:	085b      	lsrs	r3, r3, #1
                value = kdsc->values[ofs];
    9460:	687a      	ldr	r2, [r7, #4]
    9462:	56d3      	ldrsb	r3, [r2, r3]
    9464:	e7ba      	b.n	93dc <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
    9466:	2b01      	cmp	r3, #1
    9468:	d1b7      	bne.n	93da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            const uint16_t * g_ids = kdsc->glyph_ids;
    946a:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
    946e:	68ba      	ldr	r2, [r7, #8]
    9470:	4b12      	ldr	r3, [pc, #72]	; (94bc <lv_font_get_glyph_dsc_fmt_txt+0x110>)
    9472:	9300      	str	r3, [sp, #0]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
    9474:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    9478:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
    947a:	2304      	movs	r3, #4
    947c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9480:	4641      	mov	r1, r8
    9482:	a803      	add	r0, sp, #12
    9484:	f7f9 ff98 	bl	33b8 <lv_utils_bsearch>
            if(kid_p) {
    9488:	4603      	mov	r3, r0
    948a:	2800      	cmp	r0, #0
    948c:	d0a6      	beq.n	93dc <lv_font_get_glyph_dsc_fmt_txt+0x30>
                lv_uintptr_t ofs = (lv_uintptr_t) (kid_p - (const uint8_t *)g_ids);
    948e:	eba0 0308 	sub.w	r3, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
    9492:	091b      	lsrs	r3, r3, #4
    9494:	e7e4      	b.n	9460 <lv_font_get_glyph_dsc_fmt_txt+0xb4>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
    9496:	687a      	ldr	r2, [r7, #4]
    9498:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
    949a:	2b00      	cmp	r3, #0
    949c:	d09d      	beq.n	93da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
    949e:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
    94a0:	2900      	cmp	r1, #0
    94a2:	d09a      	beq.n	93da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
    94a4:	683a      	ldr	r2, [r7, #0]
    94a6:	7b78      	ldrb	r0, [r7, #13]
    94a8:	3b01      	subs	r3, #1
    94aa:	440a      	add	r2, r1
    94ac:	fb00 2303 	mla	r3, r0, r3, r2
    94b0:	f913 3c01 	ldrsb.w	r3, [r3, #-1]
    94b4:	e792      	b.n	93dc <lv_font_get_glyph_dsc_fmt_txt+0x30>
    94b6:	bf00      	nop
    94b8:	00008f69 	.word	0x00008f69
    94bc:	00008f7b 	.word	0x00008f7b

000094c0 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
    94c0:	6843      	ldr	r3, [r0, #4]
    94c2:	4718      	bx	r3

000094c4 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
    94c4:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
    94c6:	6804      	ldr	r4, [r0, #0]
    94c8:	46a4      	mov	ip, r4
}
    94ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
    94ce:	4760      	bx	ip

000094d0 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
    94d0:	b507      	push	{r0, r1, r2, lr}
    94d2:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
    94d4:	460a      	mov	r2, r1
    94d6:	4669      	mov	r1, sp
    94d8:	f7ff fff4 	bl	94c4 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
    94dc:	b108      	cbz	r0, 94e2 <lv_font_get_glyph_width+0x12>
    94de:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
    94e2:	b003      	add	sp, #12
    94e4:	f85d fb04 	ldr.w	pc, [sp], #4

000094e8 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
    94e8:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
    94ea:	b910      	cbnz	r0, 94f2 <lv_disp_get_scr_act+0xa>
    94ec:	f7fe fe06 	bl	80fc <lv_disp_get_default>
    if(!disp) {
    94f0:	b100      	cbz	r0, 94f4 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
    }

    return disp->act_scr;
    94f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
    94f4:	bd08      	pop	{r3, pc}

000094f6 <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
    94f6:	b510      	push	{r4, lr}
    94f8:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
    94fa:	f001 fad9 	bl	aab0 <lv_obj_get_disp>

    d->act_scr = scr;
    94fe:	6304      	str	r4, [r0, #48]	; 0x30

    lv_obj_invalidate(scr);
    9500:	4620      	mov	r0, r4
}
    9502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
    9506:	f001 bbc7 	b.w	ac98 <lv_obj_invalidate>

0000950a <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
    950a:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
    950c:	b910      	cbnz	r0, 9514 <lv_disp_get_layer_top+0xa>
    950e:	f7fe fdf5 	bl	80fc <lv_disp_get_default>
    if(!disp) {
    9512:	b100      	cbz	r0, 9516 <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
    9514:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
    9516:	bd08      	pop	{r3, pc}

00009518 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
    9518:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
    951a:	b910      	cbnz	r0, 9522 <lv_disp_get_layer_sys+0xa>
    951c:	f7fe fdee 	bl	80fc <lv_disp_get_default>
    if(!disp) {
    9520:	b100      	cbz	r0, 9524 <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
    }

    return disp->sys_layer;
    9522:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
    9524:	bd08      	pop	{r3, pc}

00009526 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
    9526:	2240      	movs	r2, #64	; 0x40
    9528:	f00a bec4 	b.w	142b4 <memcpy>

0000952c <lv_style_init>:
    lv_style_scr.glass               = 0;
    952c:	497a      	ldr	r1, [pc, #488]	; (9718 <lv_style_init+0x1ec>)
    lv_style_scr.body.border.width = 0;
    952e:	4a7b      	ldr	r2, [pc, #492]	; (971c <lv_style_init+0x1f0>)
{
    9530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_style_scr.glass               = 0;
    9534:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.border.width = 0;
    9536:	60ca      	str	r2, [r1, #12]
    lv_style_scr.glass               = 0;
    9538:	f36f 0300 	bfc	r3, #0, #1
    953c:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
    953e:	23ff      	movs	r3, #255	; 0xff
    9540:	720b      	strb	r3, [r1, #8]
    lv_style_scr.text.opa          = LV_OPA_COVER;
    9542:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
    9546:	4b76      	ldr	r3, [pc, #472]	; (9720 <lv_style_init+0x1f4>)
    9548:	630b      	str	r3, [r1, #48]	; 0x30
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
    954a:	2201      	movs	r2, #1
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
    954c:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
    9550:	750a      	strb	r2, [r1, #20]
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
    9552:	634b      	str	r3, [r1, #52]	; 0x34
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
    9554:	4a73      	ldr	r2, [pc, #460]	; (9724 <lv_style_init+0x1f8>)
    lv_style_scr.line.opa     = LV_OPA_COVER;
    9556:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
    lv_style_copy(&lv_style_plain, &lv_style_scr);
    9558:	4e73      	ldr	r6, [pc, #460]	; (9728 <lv_style_init+0x1fc>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
    955a:	4f74      	ldr	r7, [pc, #464]	; (972c <lv_style_init+0x200>)
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
    955c:	4c74      	ldr	r4, [pc, #464]	; (9730 <lv_style_init+0x204>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
    955e:	f8b7 9000 	ldrh.w	r9, [r7]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
    9562:	f8b7 8002 	ldrh.w	r8, [r7, #2]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
    9566:	f8a1 9002 	strh.w	r9, [r1, #2]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
    956a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    956e:	e9c1 0207 	strd	r0, r2, [r1, #28]
    lv_style_scr.line.opa     = LV_OPA_COVER;
    9572:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
    9576:	4a6f      	ldr	r2, [pc, #444]	; (9734 <lv_style_init+0x208>)
    9578:	624a      	str	r2, [r1, #36]	; 0x24
    lv_style_scr.body.radius         = 0;
    957a:	2500      	movs	r5, #0
    lv_style_scr.text.letter_space = 0;
    957c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    lv_style_scr.line.opa     = LV_OPA_COVER;
    9580:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
    9584:	814d      	strh	r5, [r1, #10]
    lv_style_scr.body.padding.bottom = 0;
    9586:	618d      	str	r5, [r1, #24]
    lv_style_scr.text.letter_space = 0;
    9588:	628a      	str	r2, [r1, #40]	; 0x28
    lv_style_scr.line.opa     = LV_OPA_COVER;
    958a:	870b      	strh	r3, [r1, #56]	; 0x38
    lv_style_copy(&lv_style_plain, &lv_style_scr);
    958c:	4630      	mov	r0, r6
    lv_style_scr.debug_sentinel = LV_STYLE_DEGUG_SENTINEL_VALUE;
    958e:	4b6a      	ldr	r3, [pc, #424]	; (9738 <lv_style_init+0x20c>)
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
    9590:	f8a1 9004 	strh.w	r9, [r1, #4]
    lv_style_scr.body.radius         = 0;
    9594:	80cd      	strh	r5, [r1, #6]
    lv_style_scr.body.shadow.width = 0;
    9596:	824d      	strh	r5, [r1, #18]
    lv_style_scr.body.padding.top    = 0;
    9598:	82cd      	strh	r5, [r1, #22]
    lv_style_scr.debug_sentinel = LV_STYLE_DEGUG_SENTINEL_VALUE;
    959a:	63cb      	str	r3, [r1, #60]	; 0x3c
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
    959c:	f8a1 8010 	strh.w	r8, [r1, #16]
    lv_style_copy(&lv_style_plain, &lv_style_scr);
    95a0:	f7ff ffc1 	bl	9526 <lv_style_copy>
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
    95a4:	f04f 1208 	mov.w	r2, #524296	; 0x80008
    95a8:	61b2      	str	r2, [r6, #24]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
    95aa:	2308      	movs	r3, #8
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
    95ac:	4631      	mov	r1, r6
    95ae:	4620      	mov	r0, r4
    lv_style_plain.body.padding.top    = LV_DPI / 20;
    95b0:	82f3      	strh	r3, [r6, #22]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
    95b2:	83b3      	strh	r3, [r6, #28]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
    95b4:	f7ff ffb7 	bl	9526 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
    95b8:	f24f 739e 	movw	r3, #63390	; 0xf79e
    95bc:	8423      	strh	r3, [r4, #32]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
    95be:	8623      	strh	r3, [r4, #48]	; 0x30
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
    95c0:	86a3      	strh	r3, [r4, #52]	; 0x34
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
    95c2:	f245 43bb 	movw	r3, #21691	; 0x54bb
    95c6:	8063      	strh	r3, [r4, #2]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
    95c8:	80a3      	strh	r3, [r4, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
    95ca:	4c5c      	ldr	r4, [pc, #368]	; (973c <lv_style_init+0x210>)
    95cc:	4631      	mov	r1, r6
    95ce:	4620      	mov	r0, r4
    95d0:	f7ff ffa9 	bl	9526 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
    95d4:	f242 1304 	movw	r3, #8452	; 0x2104
    95d8:	8423      	strh	r3, [r4, #32]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
    95da:	8623      	strh	r3, [r4, #48]	; 0x30
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
    95dc:	86a3      	strh	r3, [r4, #52]	; 0x34
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
    95de:	88bb      	ldrh	r3, [r7, #4]
    95e0:	80a3      	strh	r3, [r4, #4]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
    95e2:	4f57      	ldr	r7, [pc, #348]	; (9740 <lv_style_init+0x214>)
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
    95e4:	f8a4 9002 	strh.w	r9, [r4, #2]
    lv_style_pretty.body.radius       = LV_DPI / 15;
    95e8:	230b      	movs	r3, #11
    95ea:	80e3      	strh	r3, [r4, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
    95ec:	f244 2308 	movw	r3, #16904	; 0x4208
    95f0:	8163      	strh	r3, [r4, #10]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
    95f2:	4621      	mov	r1, r4
    lv_style_pretty.body.border.opa   = LV_OPA_30;
    95f4:	234c      	movs	r3, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
    95f6:	4638      	mov	r0, r7
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
    95f8:	f04f 0903 	mov.w	r9, #3
    lv_style_pretty.body.border.opa   = LV_OPA_30;
    95fc:	73e3      	strb	r3, [r4, #15]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
    95fe:	f8a4 900c 	strh.w	r9, [r4, #12]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
    9602:	f7ff ff90 	bl	9526 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
    9606:	f24e 731c 	movw	r3, #59164	; 0xe71c
    960a:	843b      	strh	r3, [r7, #32]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
    960c:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
    960e:	f24c 6318 	movw	r3, #50712	; 0xc618
    9612:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
    9614:	f646 43d8 	movw	r3, #27864	; 0x6cd8
    lv_style_copy(&lv_style_transp, &lv_style_plain);
    9618:	4c4a      	ldr	r4, [pc, #296]	; (9744 <lv_style_init+0x218>)
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
    961a:	807b      	strh	r3, [r7, #2]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
    961c:	f642 23d1 	movw	r3, #10961	; 0x2ad1
    9620:	80bb      	strh	r3, [r7, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
    9622:	f241 1368 	movw	r3, #4456	; 0x1168
    9626:	817b      	strh	r3, [r7, #10]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
    9628:	4631      	mov	r1, r6
    962a:	4620      	mov	r0, r4
    962c:	f7ff ff7b 	bl	9526 <lv_style_copy>
    lv_style_transp.glass             = 1;
    9630:	7823      	ldrb	r3, [r4, #0]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
    9632:	4f45      	ldr	r7, [pc, #276]	; (9748 <lv_style_init+0x21c>)
    lv_style_transp.body.border.width = 0;
    9634:	81a5      	strh	r5, [r4, #12]
    lv_style_transp.glass             = 1;
    9636:	f043 0301 	orr.w	r3, r3, #1
    963a:	7023      	strb	r3, [r4, #0]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
    963c:	7225      	strb	r5, [r4, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
    963e:	4621      	mov	r1, r4
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
    9640:	4c42      	ldr	r4, [pc, #264]	; (974c <lv_style_init+0x220>)
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
    9642:	4638      	mov	r0, r7
    9644:	f7ff ff6f 	bl	9526 <lv_style_copy>
    lv_style_transp_fit.body.padding.bottom = 0;
    9648:	61bd      	str	r5, [r7, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
    964a:	4639      	mov	r1, r7
    964c:	4620      	mov	r0, r4
    lv_style_transp_fit.body.padding.top    = 0;
    964e:	82fd      	strh	r5, [r7, #22]
    lv_style_transp_fit.body.padding.right  = 0;
    9650:	83bd      	strh	r5, [r7, #28]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
    9652:	f7ff ff68 	bl	9526 <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
    9656:	83e5      	strh	r5, [r4, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
    9658:	4c3d      	ldr	r4, [pc, #244]	; (9750 <lv_style_init+0x224>)
    965a:	4631      	mov	r1, r6
    965c:	4620      	mov	r0, r4
    965e:	f7ff ff62 	bl	9526 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
    9662:	f247 531a 	movw	r3, #29978	; 0x751a
    9666:	8063      	strh	r3, [r4, #2]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
    9668:	4b3a      	ldr	r3, [pc, #232]	; (9754 <lv_style_init+0x228>)
    966a:	6063      	str	r3, [r4, #4]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
    966c:	f640 03c5 	movw	r3, #2245	; 0x8c5
    9670:	8163      	strh	r3, [r4, #10]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
    9672:	23b2      	movs	r3, #178	; 0xb2
    9674:	73e3      	strb	r3, [r4, #15]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
    9676:	231b      	movs	r3, #27
    9678:	82e3      	strh	r3, [r4, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
    967a:	f503 1324 	add.w	r3, r3, #2686976	; 0x290000
    lv_style_btn_rel.body.shadow.width   = 0;
    967e:	8265      	strh	r5, [r4, #18]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
    9680:	61a3      	str	r3, [r4, #24]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
    9682:	4d35      	ldr	r5, [pc, #212]	; (9758 <lv_style_init+0x22c>)
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
    9684:	4b35      	ldr	r3, [pc, #212]	; (975c <lv_style_init+0x230>)
    9686:	61e3      	str	r3, [r4, #28]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
    9688:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
    968c:	4628      	mov	r0, r5
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
    968e:	8423      	strh	r3, [r4, #32]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
    9690:	8623      	strh	r3, [r4, #48]	; 0x30
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
    9692:	4621      	mov	r1, r4
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
    9694:	f24a 57b8 	movw	r7, #42424	; 0xa5b8
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
    9698:	f243 3612 	movw	r6, #13074	; 0x3312
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
    969c:	f8a4 900c 	strh.w	r9, [r4, #12]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
    96a0:	f8a4 8010 	strh.w	r8, [r4, #16]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
    96a4:	f7ff ff3f 	bl	9526 <lv_style_copy>
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
    96a8:	f241 1327 	movw	r3, #4391	; 0x1127
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
    96ac:	806e      	strh	r6, [r5, #2]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
    96ae:	80ab      	strh	r3, [r5, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
    96b0:	842f      	strh	r7, [r5, #32]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
    96b2:	862f      	strh	r7, [r5, #48]	; 0x30
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
    96b4:	86af      	strh	r7, [r5, #52]	; 0x34
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
    96b6:	4d2a      	ldr	r5, [pc, #168]	; (9760 <lv_style_init+0x234>)
    96b8:	4621      	mov	r1, r4
    96ba:	4628      	mov	r0, r5
    96bc:	f7ff ff33 	bl	9526 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
    96c0:	f640 0384 	movw	r3, #2180	; 0x884
    96c4:	806b      	strh	r3, [r5, #2]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
    96c6:	80ae      	strh	r6, [r5, #4]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
    96c8:	2321      	movs	r3, #33	; 0x21
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
    96ca:	4e26      	ldr	r6, [pc, #152]	; (9764 <lv_style_init+0x238>)
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
    96cc:	816b      	strh	r3, [r5, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
    96ce:	f64c 63fe 	movw	r3, #52990	; 0xcefe
    96d2:	842b      	strh	r3, [r5, #32]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
    96d4:	862b      	strh	r3, [r5, #48]	; 0x30
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
    96d6:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
    96d8:	4629      	mov	r1, r5
    96da:	4630      	mov	r0, r6
    96dc:	f7ff ff23 	bl	9526 <lv_style_copy>
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
    96e0:	4d21      	ldr	r5, [pc, #132]	; (9768 <lv_style_init+0x23c>)
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
    96e2:	8437      	strh	r7, [r6, #32]
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
    96e4:	23a4      	movs	r3, #164	; 0xa4
    96e6:	8073      	strh	r3, [r6, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
    96e8:	f642 236e 	movw	r3, #10862	; 0x2a6e
    96ec:	80b3      	strh	r3, [r6, #4]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
    96ee:	8637      	strh	r7, [r6, #48]	; 0x30
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
    96f0:	86b7      	strh	r7, [r6, #52]	; 0x34
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
    96f2:	4621      	mov	r1, r4
    96f4:	4628      	mov	r0, r5
    96f6:	f7ff ff16 	bl	9526 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
    96fa:	f64d 63db 	movw	r3, #57051	; 0xdedb
    96fe:	806b      	strh	r3, [r5, #2]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
    9700:	80ab      	strh	r3, [r5, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
    9702:	f249 4392 	movw	r3, #38034	; 0x9492
    9706:	816b      	strh	r3, [r5, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
    9708:	f247 338e 	movw	r3, #29582	; 0x738e
    970c:	842b      	strh	r3, [r5, #32]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
    970e:	862b      	strh	r3, [r5, #48]	; 0x30
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
    9710:	86ab      	strh	r3, [r5, #52]	; 0x34
}
    9712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9716:	bf00      	nop
    9718:	200061fc 	.word	0x200061fc
    971c:	ff0f0000 	.word	0xff0f0000
    9720:	ff002104 	.word	0xff002104
    9724:	54bb3186 	.word	0x54bb3186
    9728:	2000617c 	.word	0x2000617c
    972c:	00014782 	.word	0x00014782
    9730:	2000627c 	.word	0x2000627c
    9734:	20000038 	.word	0x20000038
    9738:	12345678 	.word	0x12345678
    973c:	2000607c 	.word	0x2000607c
    9740:	20005f7c 	.word	0x20005f7c
    9744:	20005fbc 	.word	0x20005fbc
    9748:	2000613c 	.word	0x2000613c
    974c:	200060bc 	.word	0x200060bc
    9750:	20005ffc 	.word	0x20005ffc
    9754:	000b19cb 	.word	0x000b19cb
    9758:	2000603c 	.word	0x2000603c
    975c:	00100029 	.word	0x00100029
    9760:	200061bc 	.word	0x200061bc
    9764:	2000623c 	.word	0x2000623c
    9768:	200060fc 	.word	0x200060fc

0000976c <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
    976c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    9770:	0783      	lsls	r3, r0, #30
        indev_obj_act = NULL;
    9772:	bf42      	ittt	mi
    9774:	4b02      	ldrmi	r3, [pc, #8]	; (9780 <indev_reset_check+0x14>)
    9776:	2200      	movmi	r2, #0
    9778:	601a      	strmi	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
    977a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    977e:	4770      	bx	lr
    9780:	20005e3c 	.word	0x20005e3c

00009784 <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
    9784:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
    9788:	0793      	lsls	r3, r2, #30
    978a:	d513      	bpl.n	97b4 <indev_proc_reset_query_handler+0x30>
        indev->proc.types.pointer.drag_sum.x        = 0;
    978c:	2300      	movs	r3, #0
        indev->proc.types.pointer.drag_limit_out    = 0;
    978e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
        indev->proc.types.pointer.last_pressed      = NULL;
    9792:	63c3      	str	r3, [r0, #60]	; 0x3c
        indev->proc.long_pr_sent                    = 0;
    9794:	f022 0203 	bic.w	r2, r2, #3
    9798:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
        indev->proc.types.pointer.drag_throw_vect.x = 0;
    979c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
        indev_obj_act                               = NULL;
    97a0:	4a05      	ldr	r2, [pc, #20]	; (97b8 <indev_proc_reset_query_handler+0x34>)
        indev->proc.types.pointer.last_obj          = NULL;
    97a2:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
        indev->proc.longpr_rep_timestamp            = 0;
    97a6:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
        indev->proc.types.pointer.drag_limit_out    = 0;
    97aa:	f021 0103 	bic.w	r1, r1, #3
    97ae:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
        indev_obj_act                               = NULL;
    97b2:	6013      	str	r3, [r2, #0]
}
    97b4:	4770      	bx	lr
    97b6:	bf00      	nop
    97b8:	20005e3c 	.word	0x20005e3c

000097bc <indev_search_obj>:
{
    97bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97be:	460d      	mov	r5, r1
    97c0:	4606      	mov	r6, r0
    if(lv_area_is_point_on(&obj->coords, &proc->types.pointer.act_point)) {
    97c2:	1d01      	adds	r1, r0, #4
    97c4:	f105 0010 	add.w	r0, r5, #16
    97c8:	f7fa f998 	bl	3afc <lv_area_is_point_on>
    97cc:	b908      	cbnz	r0, 97d2 <indev_search_obj+0x16>
    lv_obj_t * found_p = NULL;
    97ce:	2000      	movs	r0, #0
}
    97d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_LL_READ(obj->child_ll, i)
    97d2:	1d2f      	adds	r7, r5, #4
    97d4:	4638      	mov	r0, r7
    97d6:	f7f9 fe7a 	bl	34ce <lv_ll_get_head>
    97da:	4604      	mov	r4, r0
    97dc:	b930      	cbnz	r0, 97ec <indev_search_obj+0x30>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
    97de:	4628      	mov	r0, r5
    97e0:	f002 f84c 	bl	b87c <lv_obj_get_click>
    97e4:	2800      	cmp	r0, #0
    97e6:	d0f2      	beq.n	97ce <indev_search_obj+0x12>
            lv_obj_t * hidden_i = obj;
    97e8:	462c      	mov	r4, r5
    97ea:	e013      	b.n	9814 <indev_search_obj+0x58>
            found_p = indev_search_obj(proc, i);
    97ec:	4621      	mov	r1, r4
    97ee:	4630      	mov	r0, r6
    97f0:	f7ff ffe4 	bl	97bc <indev_search_obj>
            if(found_p != NULL) {
    97f4:	2800      	cmp	r0, #0
    97f6:	d1eb      	bne.n	97d0 <indev_search_obj+0x14>
        LV_LL_READ(obj->child_ll, i)
    97f8:	4621      	mov	r1, r4
    97fa:	4638      	mov	r0, r7
    97fc:	f7f9 fe6d 	bl	34da <lv_ll_get_next>
    9800:	e7eb      	b.n	97da <indev_search_obj+0x1e>
                if(lv_obj_get_hidden(hidden_i) == true) break;
    9802:	4620      	mov	r0, r4
    9804:	f001 fa3a 	bl	ac7c <lv_obj_get_hidden>
    9808:	2800      	cmp	r0, #0
    980a:	d1e0      	bne.n	97ce <indev_search_obj+0x12>
                hidden_i = lv_obj_get_parent(hidden_i);
    980c:	4620      	mov	r0, r4
    980e:	f001 f933 	bl	aa78 <lv_obj_get_parent>
    9812:	4604      	mov	r4, r0
            while(hidden_i != NULL) {
    9814:	2c00      	cmp	r4, #0
    9816:	d1f4      	bne.n	9802 <indev_search_obj+0x46>
            if(hidden_i == NULL) found_p = obj;
    9818:	4628      	mov	r0, r5
    return found_p;
    981a:	e7d9      	b.n	97d0 <indev_search_obj+0x14>

0000981c <indev_drag_throw.part.0>:
static void indev_drag_throw(lv_indev_proc_t * proc)
    981c:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_obj_t * drag_obj = proc->types.pointer.last_obj;
    981e:	69c4      	ldr	r4, [r0, #28]
static void indev_drag_throw(lv_indev_proc_t * proc)
    9820:	b087      	sub	sp, #28
    9822:	4605      	mov	r5, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
    9824:	4620      	mov	r0, r4
    9826:	f002 f871 	bl	b90c <lv_obj_get_drag_parent>
    982a:	b138      	cbz	r0, 983c <indev_drag_throw.part.0+0x20>
    982c:	b90c      	cbnz	r4, 9832 <indev_drag_throw.part.0+0x16>
}
    982e:	b007      	add	sp, #28
    9830:	bdf0      	pop	{r4, r5, r6, r7, pc}
        drag_obj = lv_obj_get_parent(drag_obj);
    9832:	4620      	mov	r0, r4
    9834:	f001 f920 	bl	aa78 <lv_obj_get_parent>
    9838:	4604      	mov	r4, r0
    983a:	e7f3      	b.n	9824 <indev_drag_throw.part.0+0x8>
    if(drag_obj == NULL) {
    983c:	2c00      	cmp	r4, #0
    983e:	d0f6      	beq.n	982e <indev_drag_throw.part.0+0x12>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
    9840:	4620      	mov	r0, r4
    9842:	f002 f851 	bl	b8e8 <lv_obj_get_drag_throw>
    9846:	4e4c      	ldr	r6, [pc, #304]	; (9978 <indev_drag_throw.part.0+0x15c>)
    9848:	4607      	mov	r7, r0
    984a:	b9d0      	cbnz	r0, 9882 <indev_drag_throw.part.0+0x66>
        proc->types.pointer.drag_in_prog = 0;
    984c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
    9850:	6832      	ldr	r2, [r6, #0]
        proc->types.pointer.drag_in_prog = 0;
    9852:	f360 0341 	bfi	r3, r0, #1, #1
    9856:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
    985a:	210f      	movs	r1, #15
    985c:	69e3      	ldr	r3, [r4, #28]
    985e:	4620      	mov	r0, r4
    9860:	4798      	blx	r3
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
    9862:	463a      	mov	r2, r7
    9864:	2109      	movs	r1, #9
    9866:	4620      	mov	r0, r4
    9868:	f001 f8ae 	bl	a9c8 <lv_event_send>
        if(indev_reset_check(proc)) return;
    986c:	4628      	mov	r0, r5
    986e:	f7ff ff7d 	bl	976c <indev_reset_check>
    9872:	4602      	mov	r2, r0
    9874:	2800      	cmp	r0, #0
    9876:	d1da      	bne.n	982e <indev_drag_throw.part.0+0x12>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
    9878:	2109      	movs	r1, #9
    987a:	4620      	mov	r0, r4
    987c:	f001 f8a4 	bl	a9c8 <lv_event_send>
        return;
    9880:	e7d5      	b.n	982e <indev_drag_throw.part.0+0x12>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
    9882:	4620      	mov	r0, r4
    9884:	f002 f81e 	bl	b8c4 <lv_obj_get_drag_dir>
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
    9888:	6832      	ldr	r2, [r6, #0]
    988a:	7d51      	ldrb	r1, [r2, #21]
    988c:	f1c1 0364 	rsb	r3, r1, #100	; 0x64
    9890:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
    9894:	4607      	mov	r7, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
    9896:	4359      	muls	r1, r3
    9898:	2064      	movs	r0, #100	; 0x64
    989a:	fb91 f1f0 	sdiv	r1, r1, r0
    proc->types.pointer.drag_throw_vect.x =
    989e:	82a9      	strh	r1, [r5, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
    98a0:	7d53      	ldrb	r3, [r2, #21]
    98a2:	1ac1      	subs	r1, r0, r3
    98a4:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
    98a8:	434b      	muls	r3, r1
    98aa:	fb93 f3f0 	sdiv	r3, r3, r0
    proc->types.pointer.drag_throw_vect.y =
    98ae:	82eb      	strh	r3, [r5, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
    98b0:	6969      	ldr	r1, [r5, #20]
    98b2:	2900      	cmp	r1, #0
    98b4:	d058      	beq.n	9968 <indev_drag_throw.part.0+0x14c>
        lv_obj_get_coords(drag_obj, &coords_ori);
    98b6:	a902      	add	r1, sp, #8
    98b8:	4620      	mov	r0, r4
    98ba:	f001 f939 	bl	ab30 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
    98be:	4620      	mov	r0, r4
    98c0:	f001 f948 	bl	ab54 <lv_obj_get_x>
    98c4:	8aa9      	ldrh	r1, [r5, #20]
    98c6:	4401      	add	r1, r0
    98c8:	b209      	sxth	r1, r1
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
    98ca:	4620      	mov	r0, r4
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
    98cc:	9101      	str	r1, [sp, #4]
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
    98ce:	f001 f95b 	bl	ab88 <lv_obj_get_y>
    98d2:	8aea      	ldrh	r2, [r5, #22]
        if(allowed_dirs == LV_DRAG_DIR_ALL)
    98d4:	9901      	ldr	r1, [sp, #4]
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
    98d6:	4402      	add	r2, r0
        if(allowed_dirs == LV_DRAG_DIR_ALL)
    98d8:	2f03      	cmp	r7, #3
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
    98da:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_ALL)
    98dc:	d137      	bne.n	994e <indev_drag_throw.part.0+0x132>
            lv_obj_set_pos(drag_obj, act_x, act_y);
    98de:	4620      	mov	r0, r4
    98e0:	f001 fa68 	bl	adb4 <lv_obj_set_pos>
        lv_obj_get_coords(drag_obj, &coord_new);
    98e4:	a904      	add	r1, sp, #16
    98e6:	4620      	mov	r0, r4
    98e8:	f001 f922 	bl	ab30 <lv_obj_get_coords>
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
    98ec:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
    98f0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    98f4:	429a      	cmp	r2, r3
    98f6:	d003      	beq.n	9900 <indev_drag_throw.part.0+0xe4>
    98f8:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
    98fc:	2b00      	cmp	r3, #0
    98fe:	d196      	bne.n	982e <indev_drag_throw.part.0+0x12>
    9900:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
    9904:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
    9908:	429a      	cmp	r2, r3
    990a:	d003      	beq.n	9914 <indev_drag_throw.part.0+0xf8>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
    990c:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
    9910:	2b00      	cmp	r3, #0
    9912:	d18c      	bne.n	982e <indev_drag_throw.part.0+0x12>
            proc->types.pointer.drag_in_prog      = 0;
    9914:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
    9918:	6832      	ldr	r2, [r6, #0]
            proc->types.pointer.drag_in_prog      = 0;
    991a:	f36f 0341 	bfc	r3, #1, #1
    991e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            proc->types.pointer.vect.x            = 0;
    9922:	2300      	movs	r3, #0
    9924:	60eb      	str	r3, [r5, #12]
            proc->types.pointer.drag_throw_vect.x = 0;
    9926:	616b      	str	r3, [r5, #20]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
    9928:	69e3      	ldr	r3, [r4, #28]
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
    992a:	210f      	movs	r1, #15
    992c:	4620      	mov	r0, r4
    992e:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
    9930:	4628      	mov	r0, r5
    9932:	f7ff ff1b 	bl	976c <indev_reset_check>
    9936:	4602      	mov	r2, r0
    9938:	2800      	cmp	r0, #0
    993a:	f47f af78 	bne.w	982e <indev_drag_throw.part.0+0x12>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
    993e:	2109      	movs	r1, #9
    9940:	4620      	mov	r0, r4
    9942:	f001 f841 	bl	a9c8 <lv_event_send>
        if(indev_reset_check(proc)) return;
    9946:	4628      	mov	r0, r5
    9948:	f7ff ff10 	bl	976c <indev_reset_check>
    994c:	e76f      	b.n	982e <indev_drag_throw.part.0+0x12>
        else if(allowed_dirs & LV_DRAG_DIR_HOR)
    994e:	07f8      	lsls	r0, r7, #31
    9950:	d503      	bpl.n	995a <indev_drag_throw.part.0+0x13e>
            lv_obj_set_x(drag_obj, act_x);
    9952:	4620      	mov	r0, r4
    9954:	f001 fa7a 	bl	ae4c <lv_obj_set_x>
    9958:	e7c4      	b.n	98e4 <indev_drag_throw.part.0+0xc8>
        else if(allowed_dirs & LV_DRAG_DIR_VER)
    995a:	07bb      	lsls	r3, r7, #30
    995c:	d5c2      	bpl.n	98e4 <indev_drag_throw.part.0+0xc8>
            lv_obj_set_y(drag_obj, act_y);
    995e:	4611      	mov	r1, r2
    9960:	4620      	mov	r0, r4
    9962:	f001 fa8b 	bl	ae7c <lv_obj_set_y>
    9966:	e7bd      	b.n	98e4 <indev_drag_throw.part.0+0xc8>
        proc->types.pointer.drag_in_prog = 0;
    9968:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    996c:	f361 0341 	bfi	r3, r1, #1, #1
    9970:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
    9974:	69e3      	ldr	r3, [r4, #28]
    9976:	e7d8      	b.n	992a <indev_drag_throw.part.0+0x10e>
    9978:	20005e38 	.word	0x20005e38

0000997c <indev_proc_press>:
{
    997c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9980:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
    9982:	4da5      	ldr	r5, [pc, #660]	; (9c18 <indev_proc_press+0x29c>)
    if(proc->wait_until_release != 0) return;
    9984:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    indev_obj_act = proc->types.pointer.act_obj;
    9988:	6980      	ldr	r0, [r0, #24]
    998a:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
    998c:	071e      	lsls	r6, r3, #28
{
    998e:	b085      	sub	sp, #20
    if(proc->wait_until_release != 0) return;
    9990:	f100 8128 	bmi.w	9be4 <indev_proc_press+0x268>
    lv_disp_t * disp = indev_act->driver.disp;
    9994:	4ea1      	ldr	r6, [pc, #644]	; (9c1c <indev_proc_press+0x2a0>)
    9996:	6833      	ldr	r3, [r6, #0]
    9998:	68df      	ldr	r7, [r3, #12]
    if(indev_obj_act == NULL) {
    999a:	bb28      	cbnz	r0, 99e8 <indev_proc_press+0x6c>
        indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_sys(disp));
    999c:	4638      	mov	r0, r7
    999e:	f7ff fdbb 	bl	9518 <lv_disp_get_layer_sys>
    99a2:	4601      	mov	r1, r0
    99a4:	4620      	mov	r0, r4
    99a6:	f7ff ff09 	bl	97bc <indev_search_obj>
    99aa:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_top(disp));
    99ac:	b980      	cbnz	r0, 99d0 <indev_proc_press+0x54>
    99ae:	4638      	mov	r0, r7
    99b0:	f7ff fdab 	bl	950a <lv_disp_get_layer_top>
    99b4:	4601      	mov	r1, r0
    99b6:	4620      	mov	r0, r4
    99b8:	f7ff ff00 	bl	97bc <indev_search_obj>
    99bc:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_scr_act(disp));
    99be:	b938      	cbnz	r0, 99d0 <indev_proc_press+0x54>
    99c0:	4638      	mov	r0, r7
    99c2:	f7ff fd91 	bl	94e8 <lv_disp_get_scr_act>
    99c6:	4601      	mov	r1, r0
    99c8:	4620      	mov	r0, r4
    99ca:	f7ff fef7 	bl	97bc <indev_search_obj>
    99ce:	6028      	str	r0, [r5, #0]
    if(new_obj_searched && proc->types.pointer.last_obj) {
    99d0:	69e3      	ldr	r3, [r4, #28]
    99d2:	b193      	cbz	r3, 99fa <indev_proc_press+0x7e>
        proc->types.pointer.drag_throw_vect.x = 0;
    99d4:	2300      	movs	r3, #0
    99d6:	6163      	str	r3, [r4, #20]
    if(proc->types.pointer.drag_in_prog == 0) return;
    99d8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    99dc:	079a      	lsls	r2, r3, #30
    99de:	d50c      	bpl.n	99fa <indev_proc_press+0x7e>
    99e0:	4620      	mov	r0, r4
    99e2:	f7ff ff1b 	bl	981c <indev_drag_throw.part.0>
    99e6:	e008      	b.n	99fa <indev_proc_press+0x7e>
    else if(proc->types.pointer.drag_in_prog == 0 &&
    99e8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    99ec:	0799      	lsls	r1, r3, #30
    99ee:	d404      	bmi.n	99fa <indev_proc_press+0x7e>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
    99f0:	2110      	movs	r1, #16
    99f2:	f001 fffc 	bl	b9ee <lv_obj_is_protected>
    else if(proc->types.pointer.drag_in_prog == 0 &&
    99f6:	2800      	cmp	r0, #0
    99f8:	d0d0      	beq.n	999c <indev_proc_press+0x20>
    if(indev_obj_act != proc->types.pointer.act_obj) {
    99fa:	69a7      	ldr	r7, [r4, #24]
    99fc:	682b      	ldr	r3, [r5, #0]
    99fe:	429f      	cmp	r7, r3
    9a00:	f040 80a7 	bne.w	9b52 <indev_proc_press+0x1d6>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
    9a04:	8923      	ldrh	r3, [r4, #8]
    9a06:	88a0      	ldrh	r0, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
    9a08:	88e1      	ldrh	r1, [r4, #6]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
    9a0a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
    9a0e:	1ac0      	subs	r0, r0, r3
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
    9a10:	8963      	ldrh	r3, [r4, #10]
    9a12:	1ac9      	subs	r1, r1, r3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
    9a14:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
    9a18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9a1c:	10d2      	asrs	r2, r2, #3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
    9a1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
    9a22:	b200      	sxth	r0, r0
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
    9a24:	b209      	sxth	r1, r1
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
    9a26:	10db      	asrs	r3, r3, #3
    if(proc->types.pointer.drag_throw_vect.x < 0)
    9a28:	2a00      	cmp	r2, #0
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
    9a2a:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
    9a2c:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
    9a2e:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
    9a30:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
    9a32:	f280 80e3 	bge.w	9bfc <indev_proc_press+0x280>
        proc->types.pointer.drag_throw_vect.x++;
    9a36:	3201      	adds	r2, #1
        proc->types.pointer.drag_throw_vect.x--;
    9a38:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	f280 80e2 	bge.w	9c04 <indev_proc_press+0x288>
        proc->types.pointer.drag_throw_vect.y++;
    9a40:	3301      	adds	r3, #1
        proc->types.pointer.drag_throw_vect.y--;
    9a42:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
    9a44:	8aa3      	ldrh	r3, [r4, #20]
    9a46:	eb03 0060 	add.w	r0, r3, r0, asr #1
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
    9a4a:	8ae3      	ldrh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
    9a4c:	82a0      	strh	r0, [r4, #20]
    if(indev_obj_act != NULL) {
    9a4e:	6828      	ldr	r0, [r5, #0]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
    9a50:	eb03 0161 	add.w	r1, r3, r1, asr #1
    9a54:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
    9a56:	2800      	cmp	r0, #0
    9a58:	f000 80c4 	beq.w	9be4 <indev_proc_press+0x268>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
    9a5c:	6832      	ldr	r2, [r6, #0]
    9a5e:	69c3      	ldr	r3, [r0, #28]
    9a60:	2109      	movs	r1, #9
    9a62:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
    9a64:	4620      	mov	r0, r4
    9a66:	f7ff fe81 	bl	976c <indev_reset_check>
    9a6a:	4602      	mov	r2, r0
    9a6c:	2800      	cmp	r0, #0
    9a6e:	f040 80b9 	bne.w	9be4 <indev_proc_press+0x268>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
    9a72:	6828      	ldr	r0, [r5, #0]
    9a74:	2101      	movs	r1, #1
    9a76:	f000 ffa7 	bl	a9c8 <lv_event_send>
        if(indev_reset_check(proc)) return;
    9a7a:	4620      	mov	r0, r4
    9a7c:	f7ff fe76 	bl	976c <indev_reset_check>
    9a80:	2800      	cmp	r0, #0
    9a82:	f040 80af 	bne.w	9be4 <indev_proc_press+0x268>
    lv_obj_t * drag_obj    = state->types.pointer.act_obj;
    9a86:	f8d4 9018 	ldr.w	r9, [r4, #24]
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
    9a8a:	4648      	mov	r0, r9
    9a8c:	f001 ff3e 	bl	b90c <lv_obj_get_drag_parent>
    9a90:	4607      	mov	r7, r0
    9a92:	2800      	cmp	r0, #0
    9a94:	f000 80c4 	beq.w	9c20 <indev_proc_press+0x2a4>
    9a98:	f1b9 0f00 	cmp.w	r9, #0
    9a9c:	f040 80b6 	bne.w	9c0c <indev_proc_press+0x290>
        if(indev_reset_check(proc)) return;
    9aa0:	4620      	mov	r0, r4
    9aa2:	f7ff fe63 	bl	976c <indev_reset_check>
    9aa6:	2800      	cmp	r0, #0
    9aa8:	f040 809c 	bne.w	9be4 <indev_proc_press+0x268>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
    9aac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    9ab0:	0798      	lsls	r0, r3, #30
    9ab2:	f100 8097 	bmi.w	9be4 <indev_proc_press+0x268>
    9ab6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    9aba:	07d9      	lsls	r1, r3, #31
    9abc:	d42b      	bmi.n	9b16 <indev_proc_press+0x19a>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
    9abe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9ac0:	f7fe fa7c 	bl	7fbc <lv_tick_elaps>
    9ac4:	6832      	ldr	r2, [r6, #0]
    9ac6:	8ad3      	ldrh	r3, [r2, #22]
    9ac8:	4298      	cmp	r0, r3
    9aca:	d91c      	bls.n	9b06 <indev_proc_press+0x18a>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
    9acc:	6828      	ldr	r0, [r5, #0]
    9ace:	210c      	movs	r1, #12
    9ad0:	69c3      	ldr	r3, [r0, #28]
    9ad2:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
    9ad4:	4620      	mov	r0, r4
    9ad6:	f7ff fe49 	bl	976c <indev_reset_check>
    9ada:	4602      	mov	r2, r0
    9adc:	2800      	cmp	r0, #0
    9ade:	f040 8081 	bne.w	9be4 <indev_proc_press+0x268>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
    9ae2:	6828      	ldr	r0, [r5, #0]
    9ae4:	2104      	movs	r1, #4
    9ae6:	f000 ff6f 	bl	a9c8 <lv_event_send>
                if(indev_reset_check(proc)) return;
    9aea:	4620      	mov	r0, r4
    9aec:	f7ff fe3e 	bl	976c <indev_reset_check>
    9af0:	2800      	cmp	r0, #0
    9af2:	d177      	bne.n	9be4 <indev_proc_press+0x268>
                proc->long_pr_sent = 1;
    9af4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    9af8:	f043 0301 	orr.w	r3, r3, #1
    9afc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                proc->longpr_rep_timestamp = lv_tick_get();
    9b00:	f7fe fa56 	bl	7fb0 <lv_tick_get>
    9b04:	62e0      	str	r0, [r4, #44]	; 0x2c
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
    9b06:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    9b0a:	079b      	lsls	r3, r3, #30
    9b0c:	d46a      	bmi.n	9be4 <indev_proc_press+0x268>
    9b0e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    9b12:	07da      	lsls	r2, r3, #31
    9b14:	d566      	bpl.n	9be4 <indev_proc_press+0x268>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
    9b16:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9b18:	f7fe fa50 	bl	7fbc <lv_tick_elaps>
    9b1c:	6832      	ldr	r2, [r6, #0]
    9b1e:	8b13      	ldrh	r3, [r2, #24]
    9b20:	4298      	cmp	r0, r3
    9b22:	d95f      	bls.n	9be4 <indev_proc_press+0x268>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
    9b24:	6828      	ldr	r0, [r5, #0]
    9b26:	210d      	movs	r1, #13
    9b28:	69c3      	ldr	r3, [r0, #28]
    9b2a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
    9b2c:	4620      	mov	r0, r4
    9b2e:	f7ff fe1d 	bl	976c <indev_reset_check>
    9b32:	4602      	mov	r2, r0
    9b34:	2800      	cmp	r0, #0
    9b36:	d155      	bne.n	9be4 <indev_proc_press+0x268>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
    9b38:	6828      	ldr	r0, [r5, #0]
    9b3a:	2105      	movs	r1, #5
    9b3c:	f000 ff44 	bl	a9c8 <lv_event_send>
                if(indev_reset_check(proc)) return;
    9b40:	4620      	mov	r0, r4
    9b42:	f7ff fe13 	bl	976c <indev_reset_check>
    9b46:	2800      	cmp	r0, #0
    9b48:	d14c      	bne.n	9be4 <indev_proc_press+0x268>
                proc->longpr_rep_timestamp = lv_tick_get();
    9b4a:	f7fe fa31 	bl	7fb0 <lv_tick_get>
    9b4e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9b50:	e048      	b.n	9be4 <indev_proc_press+0x268>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
    9b52:	6863      	ldr	r3, [r4, #4]
    9b54:	60a3      	str	r3, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
    9b56:	bb97      	cbnz	r7, 9bbe <indev_proc_press+0x242>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
    9b58:	682b      	ldr	r3, [r5, #0]
        proc->types.pointer.last_obj = indev_obj_act;
    9b5a:	e9c4 3306 	strd	r3, r3, [r4, #24]
        if(indev_obj_act != NULL) {
    9b5e:	2b00      	cmp	r3, #0
    9b60:	f43f af50 	beq.w	9a04 <indev_proc_press+0x88>
            proc->pr_timestamp                 = lv_tick_get();
    9b64:	f7fe fa24 	bl	7fb0 <lv_tick_get>
            proc->long_pr_sent                 = 0;
    9b68:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            proc->pr_timestamp                 = lv_tick_get();
    9b6c:	62a0      	str	r0, [r4, #40]	; 0x28
            proc->long_pr_sent                 = 0;
    9b6e:	f36f 0300 	bfc	r3, #0, #1
    9b72:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            proc->types.pointer.vect.x         = 0;
    9b76:	2700      	movs	r7, #0
            proc->types.pointer.drag_limit_out = 0;
    9b78:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
            lv_obj_t * i        = indev_obj_act;
    9b7c:	6828      	ldr	r0, [r5, #0]
            proc->types.pointer.drag_sum.x     = 0;
    9b7e:	e9c4 7703 	strd	r7, r7, [r4, #12]
            proc->types.pointer.drag_limit_out = 0;
    9b82:	f023 0303 	bic.w	r3, r3, #3
    9b86:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            while(i != NULL) {
    9b8a:	bb70      	cbnz	r0, 9bea <indev_proc_press+0x26e>
            if(last_top != NULL) {
    9b8c:	b117      	cbz	r7, 9b94 <indev_proc_press+0x218>
                lv_obj_move_foreground(last_top);
    9b8e:	4638      	mov	r0, r7
    9b90:	f001 f8e4 	bl	ad5c <lv_obj_move_foreground>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
    9b94:	6828      	ldr	r0, [r5, #0]
    9b96:	6832      	ldr	r2, [r6, #0]
    9b98:	69c3      	ldr	r3, [r0, #28]
    9b9a:	2108      	movs	r1, #8
    9b9c:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
    9b9e:	4620      	mov	r0, r4
    9ba0:	f7ff fde4 	bl	976c <indev_reset_check>
    9ba4:	4602      	mov	r2, r0
    9ba6:	b9e8      	cbnz	r0, 9be4 <indev_proc_press+0x268>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
    9ba8:	4601      	mov	r1, r0
    9baa:	6828      	ldr	r0, [r5, #0]
    9bac:	f000 ff0c 	bl	a9c8 <lv_event_send>
            if(indev_reset_check(proc)) return;
    9bb0:	4620      	mov	r0, r4
    9bb2:	f7ff fddb 	bl	976c <indev_reset_check>
    9bb6:	2800      	cmp	r0, #0
    9bb8:	f43f af24 	beq.w	9a04 <indev_proc_press+0x88>
    9bbc:	e012      	b.n	9be4 <indev_proc_press+0x268>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
    9bbe:	6832      	ldr	r2, [r6, #0]
    9bc0:	69fb      	ldr	r3, [r7, #28]
    9bc2:	210a      	movs	r1, #10
    9bc4:	4638      	mov	r0, r7
    9bc6:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
    9bc8:	4620      	mov	r0, r4
    9bca:	f7ff fdcf 	bl	976c <indev_reset_check>
    9bce:	4602      	mov	r2, r0
    9bd0:	b940      	cbnz	r0, 9be4 <indev_proc_press+0x268>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
    9bd2:	2102      	movs	r1, #2
    9bd4:	4638      	mov	r0, r7
    9bd6:	f000 fef7 	bl	a9c8 <lv_event_send>
            if(indev_reset_check(proc)) return;
    9bda:	4620      	mov	r0, r4
    9bdc:	f7ff fdc6 	bl	976c <indev_reset_check>
    9be0:	2800      	cmp	r0, #0
    9be2:	d0b9      	beq.n	9b58 <indev_proc_press+0x1dc>
}
    9be4:	b005      	add	sp, #20
    9be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(i->top) last_top = i;
    9bea:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    9bee:	f013 0f20 	tst.w	r3, #32
    9bf2:	bf18      	it	ne
    9bf4:	4607      	movne	r7, r0
                i = lv_obj_get_parent(i);
    9bf6:	f000 ff3f 	bl	aa78 <lv_obj_get_parent>
    9bfa:	e7c6      	b.n	9b8a <indev_proc_press+0x20e>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
    9bfc:	f43f af1d 	beq.w	9a3a <indev_proc_press+0xbe>
        proc->types.pointer.drag_throw_vect.x--;
    9c00:	3a01      	subs	r2, #1
    9c02:	e719      	b.n	9a38 <indev_proc_press+0xbc>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
    9c04:	f43f af1e 	beq.w	9a44 <indev_proc_press+0xc8>
        proc->types.pointer.drag_throw_vect.y--;
    9c08:	3b01      	subs	r3, #1
    9c0a:	e71a      	b.n	9a42 <indev_proc_press+0xc6>
        drag_obj = lv_obj_get_parent(drag_obj);
    9c0c:	4648      	mov	r0, r9
    9c0e:	f000 ff33 	bl	aa78 <lv_obj_get_parent>
    9c12:	4681      	mov	r9, r0
    9c14:	e739      	b.n	9a8a <indev_proc_press+0x10e>
    9c16:	bf00      	nop
    9c18:	20005e3c 	.word	0x20005e3c
    9c1c:	20005e38 	.word	0x20005e38
    if(drag_obj == NULL) return;
    9c20:	f1b9 0f00 	cmp.w	r9, #0
    9c24:	f43f af3c 	beq.w	9aa0 <indev_proc_press+0x124>
    if(lv_obj_get_drag(drag_obj) == false) return;
    9c28:	4648      	mov	r0, r9
    9c2a:	f001 fe39 	bl	b8a0 <lv_obj_get_drag>
    9c2e:	4680      	mov	r8, r0
    9c30:	2800      	cmp	r0, #0
    9c32:	f43f af35 	beq.w	9aa0 <indev_proc_press+0x124>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
    9c36:	4648      	mov	r0, r9
    9c38:	f001 fe44 	bl	b8c4 <lv_obj_get_drag_dir>
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
    9c3c:	89a1      	ldrh	r1, [r4, #12]
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
    9c3e:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
    9c42:	4602      	mov	r2, r0
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
    9c44:	8a20      	ldrh	r0, [r4, #16]
    9c46:	4408      	add	r0, r1
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
    9c48:	8a61      	ldrh	r1, [r4, #18]
    9c4a:	4461      	add	r1, ip
    if(state->types.pointer.drag_limit_out == 0) {
    9c4c:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
    9c50:	b200      	sxth	r0, r0
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
    9c52:	b209      	sxth	r1, r1
    if(state->types.pointer.drag_limit_out == 0) {
    9c54:	f01c 0f01 	tst.w	ip, #1
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
    9c58:	8220      	strh	r0, [r4, #16]
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
    9c5a:	8261      	strh	r1, [r4, #18]
    if(state->types.pointer.drag_limit_out == 0) {
    9c5c:	d11b      	bne.n	9c96 <indev_proc_press+0x31a>
        if(((allowed_dirs & LV_DRAG_DIR_HOR) &&
    9c5e:	07d3      	lsls	r3, r2, #31
    9c60:	d508      	bpl.n	9c74 <indev_proc_press+0x2f8>
    9c62:	6833      	ldr	r3, [r6, #0]
            LV_MATH_ABS(state->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
    9c64:	2800      	cmp	r0, #0
    9c66:	bfb8      	it	lt
    9c68:	4240      	neglt	r0, r0
        if(((allowed_dirs & LV_DRAG_DIR_HOR) &&
    9c6a:	f893 c014 	ldrb.w	ip, [r3, #20]
    9c6e:	b280      	uxth	r0, r0
    9c70:	4584      	cmp	ip, r0
    9c72:	d909      	bls.n	9c88 <indev_proc_press+0x30c>
            LV_MATH_ABS(state->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
    9c74:	0790      	lsls	r0, r2, #30
    9c76:	d50e      	bpl.n	9c96 <indev_proc_press+0x31a>
            LV_MATH_ABS(state->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
    9c78:	6830      	ldr	r0, [r6, #0]
    9c7a:	2900      	cmp	r1, #0
    9c7c:	bfb8      	it	lt
    9c7e:	4249      	neglt	r1, r1
           ((allowed_dirs & LV_DRAG_DIR_VER) &&
    9c80:	7d00      	ldrb	r0, [r0, #20]
    9c82:	b289      	uxth	r1, r1
    9c84:	4288      	cmp	r0, r1
    9c86:	d806      	bhi.n	9c96 <indev_proc_press+0x31a>
            state->types.pointer.drag_limit_out = 1;
    9c88:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    9c8c:	f041 0101 	orr.w	r1, r1, #1
    9c90:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
            drag_just_started                   = true;
    9c94:	4647      	mov	r7, r8
    if(state->types.pointer.drag_limit_out != 0) {
    9c96:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    9c9a:	07c9      	lsls	r1, r1, #31
    9c9c:	f57f af00 	bpl.w	9aa0 <indev_proc_press+0x124>
        if(state->types.pointer.vect.x != 0 || state->types.pointer.vect.y != 0) {
    9ca0:	68e1      	ldr	r1, [r4, #12]
    9ca2:	2900      	cmp	r1, #0
    9ca4:	f43f aefc 	beq.w	9aa0 <indev_proc_press+0x124>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
    9ca8:	6831      	ldr	r1, [r6, #0]
    9caa:	9203      	str	r2, [sp, #12]
    9cac:	68c8      	ldr	r0, [r1, #12]
    9cae:	f7fe fa6b 	bl	8188 <lv_disp_get_inv_buf_size>
    9cb2:	9000      	str	r0, [sp, #0]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
    9cb4:	4648      	mov	r0, r9
            lv_coord_t prev_x     = drag_obj->coords.x1;
    9cb6:	f9b9 b010 	ldrsh.w	fp, [r9, #16]
            lv_coord_t prev_y     = drag_obj->coords.y1;
    9cba:	f9b9 a012 	ldrsh.w	sl, [r9, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
    9cbe:	f000 fedb 	bl	aa78 <lv_obj_get_parent>
    9cc2:	f000 ff7b 	bl	abbc <lv_obj_get_width>
    9cc6:	9001      	str	r0, [sp, #4]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
    9cc8:	4648      	mov	r0, r9
    9cca:	f000 fed5 	bl	aa78 <lv_obj_get_parent>
    9cce:	f000 ff83 	bl	abd8 <lv_obj_get_height>
    9cd2:	4680      	mov	r8, r0
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
    9cd4:	4648      	mov	r0, r9
    9cd6:	f000 ff3d 	bl	ab54 <lv_obj_get_x>
    9cda:	9002      	str	r0, [sp, #8]
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
    9cdc:	4648      	mov	r0, r9
    9cde:	f000 ff53 	bl	ab88 <lv_obj_get_y>
            if(allowed_dirs == LV_DRAG_DIR_ALL) {
    9ce2:	9a03      	ldr	r2, [sp, #12]
    9ce4:	9902      	ldr	r1, [sp, #8]
    9ce6:	2a03      	cmp	r2, #3
    9ce8:	d136      	bne.n	9d58 <indev_proc_press+0x3dc>
                if(drag_just_started) {
    9cea:	b12f      	cbz	r7, 9cf8 <indev_proc_press+0x37c>
                    act_x += state->types.pointer.drag_sum.x;
    9cec:	8a22      	ldrh	r2, [r4, #16]
    9cee:	4411      	add	r1, r2
                    act_y += state->types.pointer.drag_sum.y;
    9cf0:	8a62      	ldrh	r2, [r4, #18]
    9cf2:	4410      	add	r0, r2
                    act_x += state->types.pointer.drag_sum.x;
    9cf4:	b209      	sxth	r1, r1
                    act_y += state->types.pointer.drag_sum.y;
    9cf6:	b200      	sxth	r0, r0
                lv_obj_set_pos(drag_obj, act_x + state->types.pointer.vect.x, act_y + state->types.pointer.vect.y);
    9cf8:	89e2      	ldrh	r2, [r4, #14]
    9cfa:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
    9cfe:	4402      	add	r2, r0
    9d00:	4461      	add	r1, ip
    9d02:	b212      	sxth	r2, r2
    9d04:	b209      	sxth	r1, r1
    9d06:	4648      	mov	r0, r9
    9d08:	f001 f854 	bl	adb4 <lv_obj_set_pos>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
    9d0c:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
    9d10:	455a      	cmp	r2, fp
    9d12:	d13b      	bne.n	9d8c <indev_proc_press+0x410>
    9d14:	f9b9 2012 	ldrsh.w	r2, [r9, #18]
    9d18:	4552      	cmp	r2, sl
    9d1a:	d137      	bne.n	9d8c <indev_proc_press+0x410>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
    9d1c:	4648      	mov	r0, r9
    9d1e:	f000 feab 	bl	aa78 <lv_obj_get_parent>
    9d22:	f000 ff4b 	bl	abbc <lv_obj_get_width>
    9d26:	4607      	mov	r7, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
    9d28:	4648      	mov	r0, r9
    9d2a:	f000 fea5 	bl	aa78 <lv_obj_get_parent>
    9d2e:	f000 ff53 	bl	abd8 <lv_obj_get_height>
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
    9d32:	9b01      	ldr	r3, [sp, #4]
    9d34:	42bb      	cmp	r3, r7
    9d36:	f47f aeb3 	bne.w	9aa0 <indev_proc_press+0x124>
    9d3a:	4580      	cmp	r8, r0
    9d3c:	f47f aeb0 	bne.w	9aa0 <indev_proc_press+0x124>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
    9d40:	6833      	ldr	r3, [r6, #0]
    9d42:	68d8      	ldr	r0, [r3, #12]
    9d44:	f7fe fa20 	bl	8188 <lv_disp_get_inv_buf_size>
                    lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
    9d48:	9b00      	ldr	r3, [sp, #0]
    9d4a:	1ac0      	subs	r0, r0, r3
    9d4c:	6833      	ldr	r3, [r6, #0]
    9d4e:	b281      	uxth	r1, r0
    9d50:	68d8      	ldr	r0, [r3, #12]
    9d52:	f7fe fa1e 	bl	8192 <lv_disp_pop_from_inv_buf>
    9d56:	e6a3      	b.n	9aa0 <indev_proc_press+0x124>
            } else if(allowed_dirs & LV_DRAG_DIR_HOR) {
    9d58:	07d3      	lsls	r3, r2, #31
    9d5a:	d50a      	bpl.n	9d72 <indev_proc_press+0x3f6>
                if(drag_just_started) {
    9d5c:	b117      	cbz	r7, 9d64 <indev_proc_press+0x3e8>
                    act_x += state->types.pointer.drag_sum.x;
    9d5e:	8a20      	ldrh	r0, [r4, #16]
    9d60:	4401      	add	r1, r0
    9d62:	b209      	sxth	r1, r1
                lv_obj_set_x(drag_obj, act_x + state->types.pointer.vect.x);
    9d64:	89a0      	ldrh	r0, [r4, #12]
    9d66:	4401      	add	r1, r0
    9d68:	b209      	sxth	r1, r1
    9d6a:	4648      	mov	r0, r9
    9d6c:	f001 f86e 	bl	ae4c <lv_obj_set_x>
    9d70:	e7cc      	b.n	9d0c <indev_proc_press+0x390>
            } else if(allowed_dirs & LV_DRAG_DIR_VER) {
    9d72:	0793      	lsls	r3, r2, #30
    9d74:	d5ca      	bpl.n	9d0c <indev_proc_press+0x390>
                if(drag_just_started) {
    9d76:	b117      	cbz	r7, 9d7e <indev_proc_press+0x402>
                    act_y += state->types.pointer.drag_sum.y;
    9d78:	8a62      	ldrh	r2, [r4, #18]
    9d7a:	4410      	add	r0, r2
    9d7c:	b200      	sxth	r0, r0
                lv_obj_set_y(drag_obj, act_y + state->types.pointer.vect.y);
    9d7e:	89e1      	ldrh	r1, [r4, #14]
    9d80:	4401      	add	r1, r0
    9d82:	b209      	sxth	r1, r1
    9d84:	4648      	mov	r0, r9
    9d86:	f001 f879 	bl	ae7c <lv_obj_set_y>
    9d8a:	e7bf      	b.n	9d0c <indev_proc_press+0x390>
                state->types.pointer.drag_in_prog = 1;
    9d8c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    9d90:	f042 0202 	orr.w	r2, r2, #2
    9d94:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
                if(drag_just_started) {
    9d98:	2f00      	cmp	r7, #0
    9d9a:	f43f ae81 	beq.w	9aa0 <indev_proc_press+0x124>
                    drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
    9d9e:	6832      	ldr	r2, [r6, #0]
    9da0:	f8d9 701c 	ldr.w	r7, [r9, #28]
    9da4:	210e      	movs	r1, #14
    9da6:	4648      	mov	r0, r9
    9da8:	47b8      	blx	r7
                    if(indev_reset_check(state)) return;
    9daa:	4620      	mov	r0, r4
    9dac:	f7ff fcde 	bl	976c <indev_reset_check>
    9db0:	4602      	mov	r2, r0
    9db2:	2800      	cmp	r0, #0
    9db4:	f47f ae74 	bne.w	9aa0 <indev_proc_press+0x124>
                    lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
    9db8:	2108      	movs	r1, #8
    9dba:	4648      	mov	r0, r9
    9dbc:	f000 fe04 	bl	a9c8 <lv_event_send>
                    if(indev_reset_check(state)) return;
    9dc0:	4620      	mov	r0, r4
    9dc2:	f7ff fcd3 	bl	976c <indev_reset_check>
    9dc6:	e66b      	b.n	9aa0 <indev_proc_press+0x124>

00009dc8 <lv_indev_reset.part.0>:
void lv_indev_reset(lv_indev_t * indev)
    9dc8:	b508      	push	{r3, lr}
        lv_indev_t * i = lv_indev_get_next(NULL);
    9dca:	2000      	movs	r0, #0
            i = lv_indev_get_next(i);
    9dcc:	f7fe fa56 	bl	827c <lv_indev_get_next>
        while(i) {
    9dd0:	b900      	cbnz	r0, 9dd4 <lv_indev_reset.part.0+0xc>
}
    9dd2:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
    9dd4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
    9dd8:	f043 0302 	orr.w	r3, r3, #2
    9ddc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    9de0:	e7f4      	b.n	9dcc <lv_indev_reset.part.0+0x4>
	...

00009de4 <indev_proc_release>:
    if(proc->wait_until_release != 0) {
    9de4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    9de8:	071a      	lsls	r2, r3, #28
{
    9dea:	b570      	push	{r4, r5, r6, lr}
    9dec:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
    9dee:	d508      	bpl.n	9e02 <indev_proc_release+0x1e>
        proc->types.pointer.act_obj  = NULL;
    9df0:	2200      	movs	r2, #0
        proc->types.pointer.last_obj = NULL;
    9df2:	e9c0 2206 	strd	r2, r2, [r0, #24]
        proc->longpr_rep_timestamp   = 0;
    9df6:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
        proc->wait_until_release     = 0;
    9dfa:	f362 03c3 	bfi	r3, r2, #3, #1
    9dfe:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    indev_obj_act = proc->types.pointer.act_obj;
    9e02:	69a0      	ldr	r0, [r4, #24]
    9e04:	4d5d      	ldr	r5, [pc, #372]	; (9f7c <indev_proc_release+0x198>)
    9e06:	6028      	str	r0, [r5, #0]
    if(indev_obj_act) {
    9e08:	2800      	cmp	r0, #0
    9e0a:	d04d      	beq.n	9ea8 <indev_proc_release+0xc4>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
    9e0c:	2110      	movs	r1, #16
    9e0e:	f001 fdee 	bl	b9ee <lv_obj_is_protected>
    9e12:	4b5b      	ldr	r3, [pc, #364]	; (9f80 <indev_proc_release+0x19c>)
    9e14:	2800      	cmp	r0, #0
    9e16:	d073      	beq.n	9f00 <indev_proc_release+0x11c>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
    9e18:	6828      	ldr	r0, [r5, #0]
    9e1a:	681a      	ldr	r2, [r3, #0]
    9e1c:	69c6      	ldr	r6, [r0, #28]
    9e1e:	210b      	movs	r1, #11
    9e20:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
    9e22:	4620      	mov	r0, r4
    9e24:	f7ff fca2 	bl	976c <indev_reset_check>
    9e28:	2800      	cmp	r0, #0
    9e2a:	d168      	bne.n	9efe <indev_proc_release+0x11a>
            if(proc->types.pointer.drag_in_prog == 0) {
    9e2c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    9e30:	079e      	lsls	r6, r3, #30
    9e32:	d54b      	bpl.n	9ecc <indev_proc_release+0xe8>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
    9e34:	6828      	ldr	r0, [r5, #0]
    9e36:	2200      	movs	r2, #0
    9e38:	2107      	movs	r1, #7
    9e3a:	f000 fdc5 	bl	a9c8 <lv_event_send>
            if(indev_reset_check(proc)) return;
    9e3e:	4620      	mov	r0, r4
    9e40:	f7ff fc94 	bl	976c <indev_reset_check>
    9e44:	2800      	cmp	r0, #0
    9e46:	d15a      	bne.n	9efe <indev_proc_release+0x11a>
        if(indev_reset_check(proc)) return;
    9e48:	4620      	mov	r0, r4
    9e4a:	f7ff fc8f 	bl	976c <indev_reset_check>
    9e4e:	4602      	mov	r2, r0
    9e50:	2800      	cmp	r0, #0
    9e52:	d154      	bne.n	9efe <indev_proc_release+0x11a>
        if(proc->types.pointer.last_pressed != indev_obj_act && click_focus_sent == false) {
    9e54:	6a20      	ldr	r0, [r4, #32]
    9e56:	682b      	ldr	r3, [r5, #0]
    9e58:	4298      	cmp	r0, r3
    9e5a:	d013      	beq.n	9e84 <indev_proc_release+0xa0>
            lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
    9e5c:	210d      	movs	r1, #13
    9e5e:	f000 fdb3 	bl	a9c8 <lv_event_send>
            if(indev_reset_check(proc)) return;
    9e62:	4620      	mov	r0, r4
    9e64:	f7ff fc82 	bl	976c <indev_reset_check>
    9e68:	4602      	mov	r2, r0
    9e6a:	2800      	cmp	r0, #0
    9e6c:	d147      	bne.n	9efe <indev_proc_release+0x11a>
            lv_event_send(proc->types.pointer.act_obj, LV_EVENT_FOCUSED, NULL);
    9e6e:	69a0      	ldr	r0, [r4, #24]
    9e70:	210c      	movs	r1, #12
    9e72:	f000 fda9 	bl	a9c8 <lv_event_send>
            if(indev_reset_check(proc)) return;
    9e76:	4620      	mov	r0, r4
    9e78:	f7ff fc78 	bl	976c <indev_reset_check>
    9e7c:	2800      	cmp	r0, #0
    9e7e:	d13e      	bne.n	9efe <indev_proc_release+0x11a>
            proc->types.pointer.last_pressed = indev_obj_act;
    9e80:	682b      	ldr	r3, [r5, #0]
    9e82:	6223      	str	r3, [r4, #32]
        if(indev_reset_check(proc)) return;
    9e84:	4620      	mov	r0, r4
    9e86:	f7ff fc71 	bl	976c <indev_reset_check>
    9e8a:	2800      	cmp	r0, #0
    9e8c:	d137      	bne.n	9efe <indev_proc_release+0x11a>
        lv_obj_t * drag_obj = indev_obj_act;
    9e8e:	682d      	ldr	r5, [r5, #0]
        while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
    9e90:	4628      	mov	r0, r5
    9e92:	f001 fd3b 	bl	b90c <lv_obj_get_drag_parent>
    9e96:	4606      	mov	r6, r0
    9e98:	2800      	cmp	r0, #0
    9e9a:	d059      	beq.n	9f50 <indev_proc_release+0x16c>
    9e9c:	2d00      	cmp	r5, #0
    9e9e:	d152      	bne.n	9f46 <indev_proc_release+0x162>
        proc->types.pointer.act_obj = NULL;
    9ea0:	2300      	movs	r3, #0
        proc->longpr_rep_timestamp  = 0;
    9ea2:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
        proc->types.pointer.act_obj = NULL;
    9ea6:	61a3      	str	r3, [r4, #24]
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
    9ea8:	69e3      	ldr	r3, [r4, #28]
    9eaa:	b343      	cbz	r3, 9efe <indev_proc_release+0x11a>
    9eac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    9eb0:	079a      	lsls	r2, r3, #30
    9eb2:	d424      	bmi.n	9efe <indev_proc_release+0x11a>
    if(proc->types.pointer.drag_in_prog == 0) return;
    9eb4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    9eb8:	079b      	lsls	r3, r3, #30
    9eba:	d502      	bpl.n	9ec2 <indev_proc_release+0xde>
    9ebc:	4620      	mov	r0, r4
    9ebe:	f7ff fcad 	bl	981c <indev_drag_throw.part.0>
        if(indev_reset_check(proc)) return;
    9ec2:	4620      	mov	r0, r4
}
    9ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(indev_reset_check(proc)) return;
    9ec8:	f7ff bc50 	b.w	976c <indev_reset_check>
                if(proc->long_pr_sent == 0) {
    9ecc:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    9ed0:	f012 0201 	ands.w	r2, r2, #1
    9ed4:	d00a      	beq.n	9eec <indev_proc_release+0x108>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
    9ed6:	2200      	movs	r2, #0
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
    9ed8:	6828      	ldr	r0, [r5, #0]
    9eda:	2106      	movs	r1, #6
    9edc:	f000 fd74 	bl	a9c8 <lv_event_send>
                if(indev_reset_check(proc)) return;
    9ee0:	4620      	mov	r0, r4
    9ee2:	f7ff fc43 	bl	976c <indev_reset_check>
    9ee6:	2800      	cmp	r0, #0
    9ee8:	d0a4      	beq.n	9e34 <indev_proc_release+0x50>
    9eea:	e008      	b.n	9efe <indev_proc_release+0x11a>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
    9eec:	6828      	ldr	r0, [r5, #0]
    9eee:	2103      	movs	r1, #3
    9ef0:	f000 fd6a 	bl	a9c8 <lv_event_send>
                    if(indev_reset_check(proc)) return;
    9ef4:	4620      	mov	r0, r4
    9ef6:	f7ff fc39 	bl	976c <indev_reset_check>
    9efa:	2800      	cmp	r0, #0
    9efc:	d0eb      	beq.n	9ed6 <indev_proc_release+0xf2>
}
    9efe:	bd70      	pop	{r4, r5, r6, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
    9f00:	6828      	ldr	r0, [r5, #0]
    9f02:	681a      	ldr	r2, [r3, #0]
    9f04:	69c6      	ldr	r6, [r0, #28]
    9f06:	210b      	movs	r1, #11
    9f08:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
    9f0a:	4620      	mov	r0, r4
    9f0c:	f7ff fc2e 	bl	976c <indev_reset_check>
    9f10:	2800      	cmp	r0, #0
    9f12:	d1f4      	bne.n	9efe <indev_proc_release+0x11a>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
    9f14:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    9f18:	07d8      	lsls	r0, r3, #31
    9f1a:	d505      	bpl.n	9f28 <indev_proc_release+0x144>
            if(proc->types.pointer.drag_in_prog == 0) {
    9f1c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    9f20:	f012 0202 	ands.w	r2, r2, #2
    9f24:	d0d8      	beq.n	9ed8 <indev_proc_release+0xf4>
    9f26:	e785      	b.n	9e34 <indev_proc_release+0x50>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
    9f28:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    9f2c:	f012 0202 	ands.w	r2, r2, #2
    9f30:	d180      	bne.n	9e34 <indev_proc_release+0x50>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
    9f32:	6828      	ldr	r0, [r5, #0]
    9f34:	2103      	movs	r1, #3
    9f36:	f000 fd47 	bl	a9c8 <lv_event_send>
                if(indev_reset_check(proc)) return;
    9f3a:	4620      	mov	r0, r4
    9f3c:	f7ff fc16 	bl	976c <indev_reset_check>
    9f40:	2800      	cmp	r0, #0
    9f42:	d0eb      	beq.n	9f1c <indev_proc_release+0x138>
    9f44:	e7db      	b.n	9efe <indev_proc_release+0x11a>
            drag_obj = lv_obj_get_parent(drag_obj);
    9f46:	4628      	mov	r0, r5
    9f48:	f000 fd96 	bl	aa78 <lv_obj_get_parent>
    9f4c:	4605      	mov	r5, r0
    9f4e:	e79f      	b.n	9e90 <indev_proc_release+0xac>
        if(drag_obj) {
    9f50:	2d00      	cmp	r5, #0
    9f52:	d0a5      	beq.n	9ea0 <indev_proc_release+0xbc>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
    9f54:	4628      	mov	r0, r5
    9f56:	f001 fcc7 	bl	b8e8 <lv_obj_get_drag_throw>
    9f5a:	2800      	cmp	r0, #0
    9f5c:	d0a0      	beq.n	9ea0 <indev_proc_release+0xbc>
    9f5e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    9f62:	0799      	lsls	r1, r3, #30
    9f64:	d59c      	bpl.n	9ea0 <indev_proc_release+0xbc>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
    9f66:	4632      	mov	r2, r6
    9f68:	210a      	movs	r1, #10
    9f6a:	4628      	mov	r0, r5
    9f6c:	f000 fd2c 	bl	a9c8 <lv_event_send>
                if(indev_reset_check(proc)) return;
    9f70:	4620      	mov	r0, r4
    9f72:	f7ff fbfb 	bl	976c <indev_reset_check>
    9f76:	2800      	cmp	r0, #0
    9f78:	d092      	beq.n	9ea0 <indev_proc_release+0xbc>
    9f7a:	e7c0      	b.n	9efe <indev_proc_release+0x11a>
    9f7c:	20005e3c 	.word	0x20005e3c
    9f80:	20005e38 	.word	0x20005e38

00009f84 <lv_indev_init>:
    if(indev)
    9f84:	f7ff bf20 	b.w	9dc8 <lv_indev_reset.part.0>

00009f88 <lv_indev_read_task>:
{
    9f88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    indev_act = task->user_data;
    9f8c:	68c0      	ldr	r0, [r0, #12]
    9f8e:	4d33      	ldr	r5, [pc, #204]	; (a05c <lv_indev_read_task+0xd4>)
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
    9f90:	68c3      	ldr	r3, [r0, #12]
    indev_act = task->user_data;
    9f92:	6028      	str	r0, [r5, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
    9f94:	2b00      	cmp	r3, #0
    9f96:	d046      	beq.n	a026 <lv_indev_read_task+0x9e>
    indev_proc_reset_query_handler(indev_act);
    9f98:	f7ff fbf4 	bl	9784 <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled) return;
    9f9c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
    9fa0:	075b      	lsls	r3, r3, #29
    9fa2:	d440      	bmi.n	a026 <lv_indev_read_task+0x9e>
        indev_obj_act = NULL;
    9fa4:	4f2e      	ldr	r7, [pc, #184]	; (a060 <lv_indev_read_task+0xd8>)
    9fa6:	46b8      	mov	r8, r7
        more_to_read = lv_indev_read(indev_act, &data);
    9fa8:	4669      	mov	r1, sp
    9faa:	6828      	ldr	r0, [r5, #0]
    9fac:	f7fe f970 	bl	8290 <lv_indev_read>
    9fb0:	4606      	mov	r6, r0
        indev_proc_reset_query_handler(indev_act);
    9fb2:	6828      	ldr	r0, [r5, #0]
    9fb4:	f7ff fbe6 	bl	9784 <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
    9fb8:	2300      	movs	r3, #0
    9fba:	603b      	str	r3, [r7, #0]
        indev_act->proc.state = data.state;
    9fbc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9fc0:	7703      	strb	r3, [r0, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
    9fc2:	2b01      	cmp	r3, #1
    9fc4:	d105      	bne.n	9fd2 <lv_indev_read_task+0x4a>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
    9fc6:	68c4      	ldr	r4, [r0, #12]
    9fc8:	f7fd fff2 	bl	7fb0 <lv_tick_get>
    9fcc:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    9fd0:	e006      	b.n	9fe0 <lv_indev_read_task+0x58>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
    9fd2:	7803      	ldrb	r3, [r0, #0]
    9fd4:	2b04      	cmp	r3, #4
    9fd6:	d103      	bne.n	9fe0 <lv_indev_read_task+0x58>
    9fd8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d1f2      	bne.n	9fc6 <lv_indev_read_task+0x3e>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
    9fe0:	682c      	ldr	r4, [r5, #0]
    9fe2:	7823      	ldrb	r3, [r4, #0]
    9fe4:	2b01      	cmp	r3, #1
    9fe6:	d121      	bne.n	a02c <lv_indev_read_task+0xa4>
    if(i->cursor != NULL &&
    9fe8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9fea:	b148      	cbz	r0, a000 <lv_indev_read_task+0x78>
    9fec:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9fee:	9b00      	ldr	r3, [sp, #0]
    9ff0:	429a      	cmp	r2, r3
    9ff2:	d005      	beq.n	a000 <lv_indev_read_task+0x78>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
    9ff4:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
    9ff8:	f9bd 1000 	ldrsh.w	r1, [sp]
    9ffc:	f000 feda 	bl	adb4 <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
    a000:	9b00      	ldr	r3, [sp, #0]
    a002:	6223      	str	r3, [r4, #32]
    if(i->proc.state == LV_INDEV_STATE_PR) {
    a004:	7f23      	ldrb	r3, [r4, #28]
    a006:	f104 001c 	add.w	r0, r4, #28
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
    a00a:	2b01      	cmp	r3, #1
    a00c:	d123      	bne.n	a056 <lv_indev_read_task+0xce>
        indev_proc_press(&i->proc);
    a00e:	f7ff fcb5 	bl	997c <indev_proc_press>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
    a012:	6a23      	ldr	r3, [r4, #32]
    a014:	6263      	str	r3, [r4, #36]	; 0x24
        indev_proc_reset_query_handler(indev_act);
    a016:	6828      	ldr	r0, [r5, #0]
    a018:	f7ff fbb4 	bl	9784 <indev_proc_reset_query_handler>
    } while(more_to_read);
    a01c:	2e00      	cmp	r6, #0
    a01e:	d1c3      	bne.n	9fa8 <lv_indev_read_task+0x20>
    indev_act     = NULL;
    a020:	602e      	str	r6, [r5, #0]
    indev_obj_act = NULL;
    a022:	f8c8 6000 	str.w	r6, [r8]
}
    a026:	b004      	add	sp, #16
    a028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
    a02c:	2b03      	cmp	r3, #3
    a02e:	d1f2      	bne.n	a016 <lv_indev_read_task+0x8e>
    i->proc.types.pointer.act_point.x = i->btn_points[data->btn_id].x;
    a030:	9a02      	ldr	r2, [sp, #8]
    a032:	6da3      	ldr	r3, [r4, #88]	; 0x58
    a034:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    a038:	f933 3022 	ldrsh.w	r3, [r3, r2, lsl #2]
    a03c:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = i->btn_points[data->btn_id].y;
    a03e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    a042:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.types.pointer.last_point.x == i->proc.types.pointer.act_point.x &&
    a044:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
    a048:	429a      	cmp	r2, r3
    a04a:	f104 001c 	add.w	r0, r4, #28
    a04e:	d102      	bne.n	a056 <lv_indev_read_task+0xce>
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
    a050:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a054:	e7d9      	b.n	a00a <lv_indev_read_task+0x82>
        indev_proc_release(&i->proc);
    a056:	f7ff fec5 	bl	9de4 <indev_proc_release>
    a05a:	e7da      	b.n	a012 <lv_indev_read_task+0x8a>
    a05c:	20005e38 	.word	0x20005e38
    a060:	20005e3c 	.word	0x20005e3c

0000a064 <lv_indev_get_act>:
}
    a064:	4b01      	ldr	r3, [pc, #4]	; (a06c <lv_indev_get_act+0x8>)
    a066:	6818      	ldr	r0, [r3, #0]
    a068:	4770      	bx	lr
    a06a:	bf00      	nop
    a06c:	20005e38 	.word	0x20005e38

0000a070 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
    a070:	b100      	cbz	r0, a074 <lv_indev_get_type+0x4>
    return indev->driver.type;
    a072:	7800      	ldrb	r0, [r0, #0]
}
    a074:	4770      	bx	lr

0000a076 <lv_indev_get_point>:
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
    a076:	7803      	ldrb	r3, [r0, #0]
    a078:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a07c:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
    a07e:	bf05      	ittet	eq
    a080:	f9b0 3020 	ldrsheq.w	r3, [r0, #32]
    a084:	800b      	strheq	r3, [r1, #0]
        point->x = -1;
    a086:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->y = indev->proc.types.pointer.act_point.y;
    a08a:	f9b0 3022 	ldrsheq.w	r3, [r0, #34]	; 0x22
        point->x = -1;
    a08e:	bf18      	it	ne
    a090:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
    a092:	804b      	strh	r3, [r1, #2]
}
    a094:	4770      	bx	lr

0000a096 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
    a096:	b150      	cbz	r0, a0ae <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
    a098:	7803      	ldrb	r3, [r0, #0]
    a09a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a09e:	2b01      	cmp	r3, #1
    a0a0:	d104      	bne.n	a0ac <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
    a0a2:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    a0a6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a0aa:	4770      	bx	lr
    if(indev == NULL) return false;
    a0ac:	2000      	movs	r0, #0
}
    a0ae:	4770      	bx	lr

0000a0b0 <lv_indev_get_vect>:
    if(indev == NULL) {
    a0b0:	b918      	cbnz	r0, a0ba <lv_indev_get_vect+0xa>
        point->x = 0;
    a0b2:	2300      	movs	r3, #0
    a0b4:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
    a0b6:	804b      	strh	r3, [r1, #2]
}
    a0b8:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
    a0ba:	7803      	ldrb	r3, [r0, #0]
    a0bc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a0c0:	2b01      	cmp	r3, #1
    a0c2:	d1f6      	bne.n	a0b2 <lv_indev_get_vect+0x2>
        point->x = indev->proc.types.pointer.vect.x;
    a0c4:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
    a0c8:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
    a0ca:	f9b0 302a 	ldrsh.w	r3, [r0, #42]	; 0x2a
    a0ce:	e7f2      	b.n	a0b6 <lv_indev_get_vect+0x6>

0000a0d0 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
    a0d0:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    a0d2:	4d10      	ldr	r5, [pc, #64]	; (a114 <lv_refr_vdb_flush+0x44>)
    a0d4:	6828      	ldr	r0, [r5, #0]
    a0d6:	f7fe f855 	bl	8184 <lv_disp_get_buf>
    a0da:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
    a0dc:	6828      	ldr	r0, [r5, #0]
    a0de:	f7fe f86a 	bl	81b6 <lv_disp_is_double_buf>
    a0e2:	b110      	cbz	r0, a0ea <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
    a0e4:	69a3      	ldr	r3, [r4, #24]
    a0e6:	07db      	lsls	r3, r3, #31
    a0e8:	d4fc      	bmi.n	a0e4 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
    a0ea:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
    a0ec:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
    a0ee:	f043 0301 	orr.w	r3, r3, #1
    a0f2:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
    a0f4:	68c3      	ldr	r3, [r0, #12]
    a0f6:	b11b      	cbz	r3, a100 <lv_refr_vdb_flush+0x30>
    a0f8:	68a2      	ldr	r2, [r4, #8]
    a0fa:	f104 0110 	add.w	r1, r4, #16
    a0fe:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
    a100:	6823      	ldr	r3, [r4, #0]
    a102:	b133      	cbz	r3, a112 <lv_refr_vdb_flush+0x42>
    a104:	6862      	ldr	r2, [r4, #4]
    a106:	b122      	cbz	r2, a112 <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
    a108:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
    a10a:	428b      	cmp	r3, r1
    a10c:	bf08      	it	eq
    a10e:	4613      	moveq	r3, r2
    a110:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
    a112:	bd38      	pop	{r3, r4, r5, pc}
    a114:	20005e40 	.word	0x20005e40

0000a118 <lv_refr_get_top_obj>:
{
    a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a11a:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
    a11c:	3110      	adds	r1, #16
{
    a11e:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
    a120:	f7f9 fd22 	bl	3b68 <lv_area_is_in>
    a124:	b908      	cbnz	r0, a12a <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
    a126:	2000      	movs	r0, #0
}
    a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
    a12a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    a12e:	06db      	lsls	r3, r3, #27
    a130:	d4f9      	bmi.n	a126 <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
    a132:	1d27      	adds	r7, r4, #4
    a134:	4638      	mov	r0, r7
    a136:	f7f9 f9ca 	bl	34ce <lv_ll_get_head>
    a13a:	4605      	mov	r5, r0
    a13c:	b998      	cbnz	r0, a166 <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
    a13e:	4620      	mov	r0, r4
    a140:	f000 fd6a 	bl	ac18 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
    a144:	7a03      	ldrb	r3, [r0, #8]
    a146:	2bff      	cmp	r3, #255	; 0xff
    a148:	d1ed      	bne.n	a126 <lv_refr_get_top_obj+0xe>
    a14a:	6a23      	ldr	r3, [r4, #32]
    a14c:	2202      	movs	r2, #2
    a14e:	4631      	mov	r1, r6
    a150:	4620      	mov	r0, r4
    a152:	4798      	blx	r3
    a154:	2800      	cmp	r0, #0
    a156:	d0e6      	beq.n	a126 <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
    a158:	4620      	mov	r0, r4
    a15a:	f001 fbde 	bl	b91a <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
    a15e:	28ff      	cmp	r0, #255	; 0xff
    a160:	d1e1      	bne.n	a126 <lv_refr_get_top_obj+0xe>
    a162:	4620      	mov	r0, r4
    return found_p;
    a164:	e7e0      	b.n	a128 <lv_refr_get_top_obj+0x10>
            found_p = lv_refr_get_top_obj(area_p, i);
    a166:	4629      	mov	r1, r5
    a168:	4630      	mov	r0, r6
    a16a:	f7ff ffd5 	bl	a118 <lv_refr_get_top_obj>
            if(found_p != NULL) {
    a16e:	2800      	cmp	r0, #0
    a170:	d1da      	bne.n	a128 <lv_refr_get_top_obj+0x10>
        LV_LL_READ(obj->child_ll, i)
    a172:	4629      	mov	r1, r5
    a174:	4638      	mov	r0, r7
    a176:	f7f9 f9b0 	bl	34da <lv_ll_get_next>
    a17a:	e7de      	b.n	a13a <lv_refr_get_top_obj+0x22>

0000a17c <lv_refr_obj>:
{
    a17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
    a17e:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
    a182:	f017 0710 	ands.w	r7, r7, #16
{
    a186:	b08b      	sub	sp, #44	; 0x2c
    a188:	4604      	mov	r4, r0
    a18a:	460e      	mov	r6, r1
    if(obj->hidden != 0) return;
    a18c:	d139      	bne.n	a202 <lv_refr_obj+0x86>
    lv_coord_t ext_size = obj->ext_draw_pad;
    a18e:	f9b0 5030 	ldrsh.w	r5, [r0, #48]	; 0x30
    lv_obj_get_coords(obj, &obj_area);
    a192:	a904      	add	r1, sp, #16
    a194:	f000 fccc 	bl	ab30 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
    a198:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a19c:	b2ab      	uxth	r3, r5
    a19e:	1ad2      	subs	r2, r2, r3
    a1a0:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
    a1a4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    a1a8:	1ad2      	subs	r2, r2, r3
    a1aa:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
    a1ae:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a1b2:	441a      	add	r2, r3
    a1b4:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
    a1b8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
    a1bc:	4631      	mov	r1, r6
    obj_area.y2 += ext_size;
    a1be:	4413      	add	r3, r2
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
    a1c0:	a802      	add	r0, sp, #8
    a1c2:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
    a1c4:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
    a1c8:	f7f9 fc4c 	bl	3a64 <lv_area_intersect>
    if(union_ok != false) {
    a1cc:	b1c8      	cbz	r0, a202 <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
    a1ce:	463a      	mov	r2, r7
    a1d0:	6a23      	ldr	r3, [r4, #32]
    a1d2:	a902      	add	r1, sp, #8
    a1d4:	4620      	mov	r0, r4
    a1d6:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
    a1d8:	a904      	add	r1, sp, #16
    a1da:	4620      	mov	r0, r4
    a1dc:	f000 fca8 	bl	ab30 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
    a1e0:	aa04      	add	r2, sp, #16
    a1e2:	4631      	mov	r1, r6
    a1e4:	4668      	mov	r0, sp
    a1e6:	f7f9 fc3d 	bl	3a64 <lv_area_intersect>
        if(union_ok != false) {
    a1ea:	b128      	cbz	r0, a1f8 <lv_refr_obj+0x7c>
            LV_LL_READ_BACK(obj->child_ll, child_p)
    a1ec:	1d26      	adds	r6, r4, #4
    a1ee:	4630      	mov	r0, r6
    a1f0:	f7f9 f970 	bl	34d4 <lv_ll_get_tail>
    a1f4:	4605      	mov	r5, r0
    a1f6:	b930      	cbnz	r0, a206 <lv_refr_obj+0x8a>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
    a1f8:	6a23      	ldr	r3, [r4, #32]
    a1fa:	2201      	movs	r2, #1
    a1fc:	a902      	add	r1, sp, #8
    a1fe:	4620      	mov	r0, r4
    a200:	4798      	blx	r3
}
    a202:	b00b      	add	sp, #44	; 0x2c
    a204:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
    a206:	a908      	add	r1, sp, #32
    a208:	4628      	mov	r0, r5
    a20a:	f000 fc91 	bl	ab30 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
    a20e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    a210:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    a214:	1ad2      	subs	r2, r2, r3
    a216:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
    a21a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    a21e:	1ad2      	subs	r2, r2, r3
    a220:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
    a224:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    a228:	441a      	add	r2, r3
    a22a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
    a22e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
    a232:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
    a234:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
    a236:	a806      	add	r0, sp, #24
    a238:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
    a23a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
    a23e:	f7f9 fc11 	bl	3a64 <lv_area_intersect>
                if(union_ok) {
    a242:	b118      	cbz	r0, a24c <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
    a244:	a906      	add	r1, sp, #24
    a246:	4628      	mov	r0, r5
    a248:	f7ff ff98 	bl	a17c <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
    a24c:	4629      	mov	r1, r5
    a24e:	4630      	mov	r0, r6
    a250:	f7f9 f953 	bl	34fa <lv_ll_get_prev>
    a254:	e7ce      	b.n	a1f4 <lv_refr_obj+0x78>
	...

0000a258 <lv_refr_obj_and_children>:
{
    a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a25a:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    a25c:	4604      	mov	r4, r0
    a25e:	b920      	cbnz	r0, a26a <lv_refr_obj_and_children+0x12>
    a260:	4b12      	ldr	r3, [pc, #72]	; (a2ac <lv_refr_obj_and_children+0x54>)
    a262:	6818      	ldr	r0, [r3, #0]
    a264:	f7ff f940 	bl	94e8 <lv_disp_get_scr_act>
    a268:	4604      	mov	r4, r0
    lv_refr_obj(top_p, mask_p);
    a26a:	4620      	mov	r0, r4
    a26c:	4631      	mov	r1, r6
    a26e:	f7ff ff85 	bl	a17c <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
    a272:	4620      	mov	r0, r4
    a274:	f000 fc00 	bl	aa78 <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
    a278:	4605      	mov	r5, r0
    while(par != NULL) {
    a27a:	b900      	cbnz	r0, a27e <lv_refr_obj_and_children+0x26>
}
    a27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
    a27e:	1d2f      	adds	r7, r5, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
    a280:	4621      	mov	r1, r4
    a282:	4638      	mov	r0, r7
    a284:	f7f9 f939 	bl	34fa <lv_ll_get_prev>
    a288:	4604      	mov	r4, r0
        while(i != NULL) {
    a28a:	b948      	cbnz	r0, a2a0 <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
    a28c:	6a2b      	ldr	r3, [r5, #32]
    a28e:	2201      	movs	r2, #1
    a290:	4631      	mov	r1, r6
    a292:	4628      	mov	r0, r5
    a294:	4798      	blx	r3
        par = lv_obj_get_parent(par);
    a296:	4628      	mov	r0, r5
    a298:	f000 fbee 	bl	aa78 <lv_obj_get_parent>
    a29c:	462c      	mov	r4, r5
    a29e:	e7eb      	b.n	a278 <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
    a2a0:	4631      	mov	r1, r6
    a2a2:	4620      	mov	r0, r4
    a2a4:	f7ff ff6a 	bl	a17c <lv_refr_obj>
    a2a8:	e7ea      	b.n	a280 <lv_refr_obj_and_children+0x28>
    a2aa:	bf00      	nop
    a2ac:	20005e40 	.word	0x20005e40

0000a2b0 <lv_refr_area_part>:
{
    a2b0:	b530      	push	{r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    a2b2:	4c19      	ldr	r4, [pc, #100]	; (a318 <lv_refr_area_part+0x68>)
{
    a2b4:	b085      	sub	sp, #20
    a2b6:	9001      	str	r0, [sp, #4]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    a2b8:	6820      	ldr	r0, [r4, #0]
    a2ba:	f7fd ff63 	bl	8184 <lv_disp_get_buf>
    a2be:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
    a2c0:	6820      	ldr	r0, [r4, #0]
    a2c2:	f7fd ff78 	bl	81b6 <lv_disp_is_double_buf>
    a2c6:	9901      	ldr	r1, [sp, #4]
    a2c8:	b910      	cbnz	r0, a2d0 <lv_refr_area_part+0x20>
        while(vdb->flushing)
    a2ca:	69ab      	ldr	r3, [r5, #24]
    a2cc:	07db      	lsls	r3, r3, #31
    a2ce:	d4fc      	bmi.n	a2ca <lv_refr_area_part+0x1a>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
    a2d0:	f105 0210 	add.w	r2, r5, #16
    a2d4:	a802      	add	r0, sp, #8
    a2d6:	f7f9 fbc5 	bl	3a64 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
    a2da:	6820      	ldr	r0, [r4, #0]
    a2dc:	f7ff f904 	bl	94e8 <lv_disp_get_scr_act>
    a2e0:	4601      	mov	r1, r0
    a2e2:	a802      	add	r0, sp, #8
    a2e4:	f7ff ff18 	bl	a118 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
    a2e8:	a902      	add	r1, sp, #8
    a2ea:	f7ff ffb5 	bl	a258 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
    a2ee:	6820      	ldr	r0, [r4, #0]
    a2f0:	f7ff f90b 	bl	950a <lv_disp_get_layer_top>
    a2f4:	a902      	add	r1, sp, #8
    a2f6:	f7ff ffaf 	bl	a258 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
    a2fa:	6820      	ldr	r0, [r4, #0]
    a2fc:	f7ff f90c 	bl	9518 <lv_disp_get_layer_sys>
    a300:	a902      	add	r1, sp, #8
    a302:	f7ff ffa9 	bl	a258 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
    a306:	6820      	ldr	r0, [r4, #0]
    a308:	f7fd ff5d 	bl	81c6 <lv_disp_is_true_double_buf>
    a30c:	b908      	cbnz	r0, a312 <lv_refr_area_part+0x62>
        lv_refr_vdb_flush();
    a30e:	f7ff fedf 	bl	a0d0 <lv_refr_vdb_flush>
}
    a312:	b005      	add	sp, #20
    a314:	bd30      	pop	{r4, r5, pc}
    a316:	bf00      	nop
    a318:	20005e40 	.word	0x20005e40

0000a31c <lv_refr_init>:
}
    a31c:	4770      	bx	lr

0000a31e <lv_inv_area>:
{
    a31e:	b5f0      	push	{r4, r5, r6, r7, lr}
    a320:	460d      	mov	r5, r1
    a322:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
    a324:	4604      	mov	r4, r0
    a326:	b920      	cbnz	r0, a332 <lv_inv_area+0x14>
    a328:	f7fd fee8 	bl	80fc <lv_disp_get_default>
    if(!disp) return;
    a32c:	4604      	mov	r4, r0
    a32e:	2800      	cmp	r0, #0
    a330:	d043      	beq.n	a3ba <lv_inv_area+0x9c>
    if(area_p == NULL) {
    a332:	b935      	cbnz	r5, a342 <lv_inv_area+0x24>
        disp->inv_p = 0;
    a334:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
    a338:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
    a33c:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
    a340:	e03b      	b.n	a3ba <lv_inv_area+0x9c>
    scr_area.x1 = 0;
    a342:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
    a344:	4620      	mov	r0, r4
    scr_area.x1 = 0;
    a346:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
    a348:	f7fd fede 	bl	8108 <lv_disp_get_hor_res>
    a34c:	3801      	subs	r0, #1
    a34e:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
    a352:	4620      	mov	r0, r4
    a354:	f7fd feea 	bl	812c <lv_disp_get_ver_res>
    a358:	3801      	subs	r0, #1
    a35a:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
    a35e:	466a      	mov	r2, sp
    a360:	4629      	mov	r1, r5
    a362:	a802      	add	r0, sp, #8
    a364:	f7f9 fb7e 	bl	3a64 <lv_area_intersect>
    if(suc != false) {
    a368:	b338      	cbz	r0, a3ba <lv_inv_area+0x9c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
    a36a:	6923      	ldr	r3, [r4, #16]
    a36c:	b113      	cbz	r3, a374 <lv_inv_area+0x56>
    a36e:	a902      	add	r1, sp, #8
    a370:	4620      	mov	r0, r4
    a372:	4798      	blx	r3
    a374:	f104 053c 	add.w	r5, r4, #60	; 0x3c
{
    a378:	2600      	movs	r6, #0
    a37a:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
    a37c:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
    a380:	b2b2      	uxth	r2, r6
    a382:	f3c3 0009 	ubfx	r0, r3, #0, #10
    a386:	4290      	cmp	r0, r2
    a388:	d80f      	bhi.n	a3aa <lv_inv_area+0x8c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
    a38a:	281f      	cmp	r0, #31
    a38c:	d817      	bhi.n	a3be <lv_inv_area+0xa0>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
    a38e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    memcpy(dest, src, sizeof(lv_area_t));
    a392:	2208      	movs	r2, #8
    a394:	eb0d 0102 	add.w	r1, sp, r2
    a398:	303c      	adds	r0, #60	; 0x3c
    a39a:	f009 ff8b 	bl	142b4 <memcpy>
        disp->inv_p++;
    a39e:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
    a3a2:	1c5a      	adds	r2, r3, #1
    a3a4:	f362 0309 	bfi	r3, r2, #0, #10
    a3a8:	e7c8      	b.n	a33c <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
    a3aa:	4629      	mov	r1, r5
    a3ac:	a802      	add	r0, sp, #8
    a3ae:	f7f9 fbdb 	bl	3b68 <lv_area_is_in>
    a3b2:	3601      	adds	r6, #1
    a3b4:	3508      	adds	r5, #8
    a3b6:	2800      	cmp	r0, #0
    a3b8:	d0e0      	beq.n	a37c <lv_inv_area+0x5e>
}
    a3ba:	b005      	add	sp, #20
    a3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
    a3be:	f36f 0309 	bfc	r3, #0, #10
    a3c2:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
    a3c6:	2208      	movs	r2, #8
    a3c8:	4669      	mov	r1, sp
    a3ca:	4638      	mov	r0, r7
    a3cc:	e7e5      	b.n	a39a <lv_inv_area+0x7c>
	...

0000a3d0 <lv_refr_get_disp_refreshing>:
}
    a3d0:	4b01      	ldr	r3, [pc, #4]	; (a3d8 <lv_refr_get_disp_refreshing+0x8>)
    a3d2:	6818      	ldr	r0, [r3, #0]
    a3d4:	4770      	bx	lr
    a3d6:	bf00      	nop
    a3d8:	20005e40 	.word	0x20005e40

0000a3dc <lv_disp_refr_task>:
{
    a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3e0:	ed2d 8b02 	vpush	{d8}
    a3e4:	b089      	sub	sp, #36	; 0x24
    a3e6:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
    a3e8:	f7fd fde2 	bl	7fb0 <lv_tick_get>
    disp_refr = task->user_data;
    a3ec:	4cb0      	ldr	r4, [pc, #704]	; (a6b0 <lv_disp_refr_task+0x2d4>)
    a3ee:	68eb      	ldr	r3, [r5, #12]
    a3f0:	6023      	str	r3, [r4, #0]
    uint32_t start = lv_tick_get();
    a3f2:	ee08 0a10 	vmov	s16, r0
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    a3f6:	2600      	movs	r6, #0
    a3f8:	6823      	ldr	r3, [r4, #0]
    a3fa:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
    a3fe:	f3c2 0209 	ubfx	r2, r2, #0, #10
    a402:	4296      	cmp	r6, r2
    a404:	d332      	bcc.n	a46c <lv_disp_refr_task+0x90>
    px_num = 0;
    a406:	4bab      	ldr	r3, [pc, #684]	; (a6b4 <lv_disp_refr_task+0x2d8>)
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    a408:	9302      	str	r3, [sp, #8]
    px_num = 0;
    a40a:	2700      	movs	r7, #0
    a40c:	601f      	str	r7, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
    a40e:	f8d4 8000 	ldr.w	r8, [r4]
    a412:	f8b8 315c 	ldrh.w	r3, [r8, #348]	; 0x15c
    a416:	f3c3 0209 	ubfx	r2, r3, #0, #10
    a41a:	4297      	cmp	r7, r2
    a41c:	d36a      	bcc.n	a4f4 <lv_disp_refr_task+0x118>
    if(disp_refr->inv_p != 0) {
    a41e:	b1f2      	cbz	r2, a45e <lv_disp_refr_task+0x82>
        if(lv_disp_is_true_double_buf(disp_refr)) {
    a420:	4640      	mov	r0, r8
    a422:	f7fd fed0 	bl	81c6 <lv_disp_is_true_double_buf>
    a426:	2800      	cmp	r0, #0
    a428:	f040 811d 	bne.w	a666 <lv_disp_refr_task+0x28a>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
    a42c:	6820      	ldr	r0, [r4, #0]
    a42e:	f44f 7280 	mov.w	r2, #256	; 0x100
    a432:	2100      	movs	r1, #0
    a434:	303c      	adds	r0, #60	; 0x3c
    a436:	f009 ff4b 	bl	142d0 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
    a43a:	6820      	ldr	r0, [r4, #0]
    a43c:	2220      	movs	r2, #32
    a43e:	2100      	movs	r1, #0
    a440:	f500 709e 	add.w	r0, r0, #316	; 0x13c
    a444:	f009 ff44 	bl	142d0 <memset>
        disp_refr->inv_p = 0;
    a448:	6824      	ldr	r4, [r4, #0]
    a44a:	f8b4 315c 	ldrh.w	r3, [r4, #348]	; 0x15c
        if(disp_refr->driver.monitor_cb) {
    a44e:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
    a450:	f36f 0309 	bfc	r3, #0, #10
    a454:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
        if(disp_refr->driver.monitor_cb) {
    a458:	2d00      	cmp	r5, #0
    a45a:	f040 8154 	bne.w	a706 <lv_disp_refr_task+0x32a>
    lv_draw_free_buf();
    a45e:	f7fd fcb5 	bl	7dcc <lv_draw_free_buf>
}
    a462:	b009      	add	sp, #36	; 0x24
    a464:	ecbd 8b02 	vpop	{d8}
    a468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
    a46c:	4433      	add	r3, r6
    a46e:	f893 513c 	ldrb.w	r5, [r3, #316]	; 0x13c
    a472:	b10d      	cbz	r5, a478 <lv_disp_refr_task+0x9c>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    a474:	3601      	adds	r6, #1
    a476:	e7bf      	b.n	a3f8 <lv_disp_refr_task+0x1c>
    a478:	00f7      	lsls	r7, r6, #3
    a47a:	373c      	adds	r7, #60	; 0x3c
                disp_refr->inv_area_joined[join_from] = 1;
    a47c:	f04f 0901 	mov.w	r9, #1
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    a480:	6820      	ldr	r0, [r4, #0]
    a482:	f8b0 315c 	ldrh.w	r3, [r0, #348]	; 0x15c
    a486:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a48a:	429d      	cmp	r5, r3
    a48c:	d2f2      	bcs.n	a474 <lv_disp_refr_task+0x98>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
    a48e:	1943      	adds	r3, r0, r5
    a490:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    a494:	bb63      	cbnz	r3, a4f0 <lv_disp_refr_task+0x114>
    a496:	42ae      	cmp	r6, r5
    a498:	d02a      	beq.n	a4f0 <lv_disp_refr_task+0x114>
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    a49a:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    a49e:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    a4a2:	eb00 010a 	add.w	r1, r0, sl
    a4a6:	4438      	add	r0, r7
    a4a8:	f7f9 fb41 	bl	3b2e <lv_area_is_on>
    a4ac:	b300      	cbz	r0, a4f0 <lv_disp_refr_task+0x114>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
    a4ae:	6821      	ldr	r1, [r4, #0]
    a4b0:	a806      	add	r0, sp, #24
    a4b2:	eb01 020a 	add.w	r2, r1, sl
    a4b6:	4439      	add	r1, r7
    a4b8:	f7f9 fafe 	bl	3ab8 <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    a4bc:	a806      	add	r0, sp, #24
    a4be:	f7f9 fac3 	bl	3a48 <lv_area_get_size>
    a4c2:	4683      	mov	fp, r0
    a4c4:	6820      	ldr	r0, [r4, #0]
    a4c6:	4438      	add	r0, r7
    a4c8:	f7f9 fabe 	bl	3a48 <lv_area_get_size>
    a4cc:	4680      	mov	r8, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
    a4ce:	6820      	ldr	r0, [r4, #0]
    a4d0:	4450      	add	r0, sl
    a4d2:	f7f9 fab9 	bl	3a48 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    a4d6:	4480      	add	r8, r0
    a4d8:	45c3      	cmp	fp, r8
    a4da:	d209      	bcs.n	a4f0 <lv_disp_refr_task+0x114>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
    a4dc:	6820      	ldr	r0, [r4, #0]
    a4de:	2208      	movs	r2, #8
    a4e0:	a906      	add	r1, sp, #24
    a4e2:	4438      	add	r0, r7
    a4e4:	f009 fee6 	bl	142b4 <memcpy>
                disp_refr->inv_area_joined[join_from] = 1;
    a4e8:	6823      	ldr	r3, [r4, #0]
    a4ea:	442b      	add	r3, r5
    a4ec:	f883 913c 	strb.w	r9, [r3, #316]	; 0x13c
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    a4f0:	3501      	adds	r5, #1
    a4f2:	e7c5      	b.n	a480 <lv_disp_refr_task+0xa4>
        if(disp_refr->inv_area_joined[i] == 0) {
    a4f4:	eb08 0307 	add.w	r3, r8, r7
    a4f8:	f893 613c 	ldrb.w	r6, [r3, #316]	; 0x13c
    a4fc:	2e00      	cmp	r6, #0
    a4fe:	d175      	bne.n	a5ec <lv_disp_refr_task+0x210>
            lv_refr_area(&disp_refr->inv_areas[i]);
    a500:	00fd      	lsls	r5, r7, #3
    a502:	f105 033c 	add.w	r3, r5, #60	; 0x3c
    if(lv_disp_is_true_double_buf(disp_refr)) {
    a506:	4640      	mov	r0, r8
    a508:	9301      	str	r3, [sp, #4]
            lv_refr_area(&disp_refr->inv_areas[i]);
    a50a:	eb08 0b03 	add.w	fp, r8, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
    a50e:	f7fd fe5a 	bl	81c6 <lv_disp_is_true_double_buf>
    a512:	b198      	cbz	r0, a53c <lv_disp_refr_task+0x160>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    a514:	6820      	ldr	r0, [r4, #0]
    a516:	f7fd fe35 	bl	8184 <lv_disp_get_buf>
    a51a:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
    a51c:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
    a51e:	6820      	ldr	r0, [r4, #0]
    a520:	f7fd fdf2 	bl	8108 <lv_disp_get_hor_res>
    a524:	3801      	subs	r0, #1
    a526:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
    a528:	826e      	strh	r6, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
    a52a:	6820      	ldr	r0, [r4, #0]
    a52c:	f7fd fdfe 	bl	812c <lv_disp_get_ver_res>
    a530:	3801      	subs	r0, #1
    a532:	82e8      	strh	r0, [r5, #22]
            lv_refr_area_part(area_p);
    a534:	4658      	mov	r0, fp
    a536:	f7ff febb 	bl	a2b0 <lv_refr_area_part>
    a53a:	e04b      	b.n	a5d4 <lv_disp_refr_task+0x1f8>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    a53c:	4445      	add	r5, r8
    a53e:	6820      	ldr	r0, [r4, #0]
    a540:	f7fd fe20 	bl	8184 <lv_disp_get_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    a544:	f8b5 a040 	ldrh.w	sl, [r5, #64]	; 0x40
    a548:	f8b5 903c 	ldrh.w	r9, [r5, #60]	; 0x3c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    a54c:	f9b5 8042 	ldrsh.w	r8, [r5, #66]	; 0x42
    a550:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    a552:	f10a 0a01 	add.w	sl, sl, #1
    a556:	ebaa 0a09 	sub.w	sl, sl, r9
    a55a:	4606      	mov	r6, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    a55c:	f108 0901 	add.w	r9, r8, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    a560:	6820      	ldr	r0, [r4, #0]
    a562:	eba9 0903 	sub.w	r9, r9, r3
    a566:	f7fd fde1 	bl	812c <lv_disp_get_ver_res>
        lv_coord_t y2 =
    a56a:	4580      	cmp	r8, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    a56c:	fa0f fa8a 	sxth.w	sl, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    a570:	fa0f f989 	sxth.w	r9, r9
    a574:	db3c      	blt.n	a5f0 <lv_disp_refr_task+0x214>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    a576:	6820      	ldr	r0, [r4, #0]
    a578:	f7fd fdd8 	bl	812c <lv_disp_get_ver_res>
    a57c:	3801      	subs	r0, #1
    a57e:	fa0f f880 	sxth.w	r8, r0
        int32_t max_row = (uint32_t)vdb->size / w;
    a582:	68f3      	ldr	r3, [r6, #12]
    a584:	fbb3 f3fa 	udiv	r3, r3, sl
        if(max_row > h) max_row = h;
    a588:	4599      	cmp	r9, r3
    a58a:	bfa8      	it	ge
    a58c:	4699      	movge	r9, r3
        if(disp_refr->driver.rounder_cb) {
    a58e:	6823      	ldr	r3, [r4, #0]
    a590:	691b      	ldr	r3, [r3, #16]
    a592:	2b00      	cmp	r3, #0
    a594:	d032      	beq.n	a5fc <lv_disp_refr_task+0x220>
            tmp.x1 = 0;
    a596:	2300      	movs	r3, #0
    a598:	9306      	str	r3, [sp, #24]
            tmp.x2 = 0;
    a59a:	f8ad 301c 	strh.w	r3, [sp, #28]
            lv_coord_t h_tmp = max_row;
    a59e:	fa0f fa89 	sxth.w	sl, r9
                tmp.y2 = h_tmp - 1;
    a5a2:	4653      	mov	r3, sl
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
    a5a4:	6820      	ldr	r0, [r4, #0]
    a5a6:	9303      	str	r3, [sp, #12]
    a5a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    a5ac:	fa0f fa8a 	sxth.w	sl, sl
    a5b0:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
    a5b2:	f8ad a01e 	strh.w	sl, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
    a5b6:	a906      	add	r1, sp, #24
    a5b8:	4790      	blx	r2
    a5ba:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
    a5be:	f8bd 201a 	ldrh.w	r2, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
    a5c2:	9b03      	ldr	r3, [sp, #12]
    a5c4:	3101      	adds	r1, #1
    a5c6:	1a8a      	subs	r2, r1, r2
    a5c8:	b212      	sxth	r2, r2
    a5ca:	4591      	cmp	r9, r2
    a5cc:	da13      	bge.n	a5f6 <lv_disp_refr_task+0x21a>
            } while(h_tmp > 0);
    a5ce:	f1ba 0f00 	cmp.w	sl, #0
    a5d2:	dce6      	bgt.n	a5a2 <lv_disp_refr_task+0x1c6>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    a5d4:	6820      	ldr	r0, [r4, #0]
    a5d6:	6983      	ldr	r3, [r0, #24]
    a5d8:	b143      	cbz	r3, a5ec <lv_disp_refr_task+0x210>
    a5da:	9b01      	ldr	r3, [sp, #4]
    a5dc:	4418      	add	r0, r3
    a5de:	f7f9 fa33 	bl	3a48 <lv_area_get_size>
    a5e2:	9b02      	ldr	r3, [sp, #8]
    a5e4:	681b      	ldr	r3, [r3, #0]
    a5e6:	4418      	add	r0, r3
    a5e8:	9b02      	ldr	r3, [sp, #8]
    a5ea:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
    a5ec:	3701      	adds	r7, #1
    a5ee:	e70e      	b.n	a40e <lv_disp_refr_task+0x32>
        lv_coord_t y2 =
    a5f0:	f9b5 8042 	ldrsh.w	r8, [r5, #66]	; 0x42
    a5f4:	e7c5      	b.n	a582 <lv_disp_refr_task+0x1a6>
            if(h_tmp <= 0) {
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	ddec      	ble.n	a5d4 <lv_disp_refr_task+0x1f8>
                max_row = tmp.y2 + 1;
    a5fa:	4689      	mov	r9, r1
            vdb->area.y2 = row + max_row - 1;
    a5fc:	fa1f f289 	uxth.w	r2, r9
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    a600:	f9b5 003e 	ldrsh.w	r0, [r5, #62]	; 0x3e
        lv_coord_t row_last = 0;
    a604:	2300      	movs	r3, #0
    a606:	1e51      	subs	r1, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    a608:	eb00 0c09 	add.w	ip, r0, r9
    a60c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    a610:	45c4      	cmp	ip, r8
    a612:	dd0b      	ble.n	a62c <lv_disp_refr_task+0x250>
        if(y2 != row_last) {
    a614:	4598      	cmp	r8, r3
    a616:	d0dd      	beq.n	a5d4 <lv_disp_refr_task+0x1f8>
            vdb->area.x1 = area_p->x1;
    a618:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
    a61c:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    a61e:	f9b5 3040 	ldrsh.w	r3, [r5, #64]	; 0x40
    a622:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    a624:	8270      	strh	r0, [r6, #18]
            vdb->area.y2 = y2;
    a626:	f8a6 8016 	strh.w	r8, [r6, #22]
    a62a:	e783      	b.n	a534 <lv_disp_refr_task+0x158>
            vdb->area.x1 = area_p->x1;
    a62c:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
    a630:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    a632:	f9b5 3040 	ldrsh.w	r3, [r5, #64]	; 0x40
    a636:	82b3      	strh	r3, [r6, #20]
    a638:	fa11 f380 	uxtah	r3, r1, r0
    a63c:	b21b      	sxth	r3, r3
            vdb->area.y2 = row + max_row - 1;
    a63e:	4543      	cmp	r3, r8
    a640:	bfa8      	it	ge
    a642:	4643      	movge	r3, r8
            vdb->area.y1 = row;
    a644:	8270      	strh	r0, [r6, #18]
    a646:	fa1f fa80 	uxth.w	sl, r0
            vdb->area.y2 = row + max_row - 1;
    a64a:	82f3      	strh	r3, [r6, #22]
            lv_refr_area_part(area_p);
    a64c:	4658      	mov	r0, fp
    a64e:	9205      	str	r2, [sp, #20]
            row_last = vdb->area.y2;
    a650:	9104      	str	r1, [sp, #16]
    a652:	9303      	str	r3, [sp, #12]
            lv_refr_area_part(area_p);
    a654:	f7ff fe2c 	bl	a2b0 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    a658:	9a05      	ldr	r2, [sp, #20]
    a65a:	4492      	add	sl, r2
    a65c:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
    a660:	fa0f f08a 	sxth.w	r0, sl
    a664:	e7d0      	b.n	a608 <lv_disp_refr_task+0x22c>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    a666:	6820      	ldr	r0, [r4, #0]
    a668:	f7fd fd8c 	bl	8184 <lv_disp_get_buf>
    a66c:	4605      	mov	r5, r0
            lv_refr_vdb_flush();
    a66e:	f7ff fd2f 	bl	a0d0 <lv_refr_vdb_flush>
            while(vdb->flushing)
    a672:	69ab      	ldr	r3, [r5, #24]
    a674:	07db      	lsls	r3, r3, #31
    a676:	d4fc      	bmi.n	a672 <lv_disp_refr_task+0x296>
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
    a678:	f8d5 9000 	ldr.w	r9, [r5]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
    a67c:	f8d5 8008 	ldr.w	r8, [r5, #8]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
    a680:	6820      	ldr	r0, [r4, #0]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
    a682:	45c1      	cmp	r9, r8
    a684:	bf08      	it	eq
    a686:	f8d5 9004 	ldreq.w	r9, [r5, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
    a68a:	f7fd fd3d 	bl	8108 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
    a68e:	2500      	movs	r5, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
    a690:	4607      	mov	r7, r0
            for(a = 0; a < disp_refr->inv_p; a++) {
    a692:	6823      	ldr	r3, [r4, #0]
    a694:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
    a698:	b2a9      	uxth	r1, r5
    a69a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    a69e:	428a      	cmp	r2, r1
    a6a0:	f67f aec4 	bls.w	a42c <lv_disp_refr_task+0x50>
                if(disp_refr->inv_area_joined[a] == 0) {
    a6a4:	195a      	adds	r2, r3, r5
    a6a6:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
    a6aa:	b12a      	cbz	r2, a6b8 <lv_disp_refr_task+0x2dc>
            for(a = 0; a < disp_refr->inv_p; a++) {
    a6ac:	3501      	adds	r5, #1
    a6ae:	e7f0      	b.n	a692 <lv_disp_refr_task+0x2b6>
    a6b0:	20005e40 	.word	0x20005e40
    a6b4:	20005e44 	.word	0x20005e44
                    uint32_t start_offs =
    a6b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    a6bc:	f105 0b07 	add.w	fp, r5, #7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    a6c0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
    a6c4:	f9b3 103c 	ldrsh.w	r1, [r3, #60]	; 0x3c
    a6c8:	f9b3 603e 	ldrsh.w	r6, [r3, #62]	; 0x3e
    a6cc:	3201      	adds	r2, #1
    a6ce:	1a52      	subs	r2, r2, r1
    a6d0:	fb07 1a06 	mla	sl, r7, r6, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
    a6d4:	b212      	sxth	r2, r2
                    uint32_t start_offs =
    a6d6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
    a6da:	0052      	lsls	r2, r2, #1
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    a6dc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
    a6e0:	6823      	ldr	r3, [r4, #0]
    a6e2:	445b      	add	r3, fp
    a6e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    a6e8:	42b3      	cmp	r3, r6
    a6ea:	dbdf      	blt.n	a6ac <lv_disp_refr_task+0x2d0>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
    a6ec:	eb09 010a 	add.w	r1, r9, sl
    a6f0:	eb08 000a 	add.w	r0, r8, sl
    a6f4:	3601      	adds	r6, #1
    a6f6:	9201      	str	r2, [sp, #4]
                        start_offs += hres * sizeof(lv_color_t);
    a6f8:	eb0a 0a47 	add.w	sl, sl, r7, lsl #1
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
    a6fc:	f009 fdda 	bl	142b4 <memcpy>
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    a700:	b236      	sxth	r6, r6
    a702:	9a01      	ldr	r2, [sp, #4]
    a704:	e7ec      	b.n	a6e0 <lv_disp_refr_task+0x304>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
    a706:	ee18 0a10 	vmov	r0, s16
    a70a:	f7fd fc57 	bl	7fbc <lv_tick_elaps>
    a70e:	4b03      	ldr	r3, [pc, #12]	; (a71c <lv_disp_refr_task+0x340>)
    a710:	4601      	mov	r1, r0
    a712:	681a      	ldr	r2, [r3, #0]
    a714:	4620      	mov	r0, r4
    a716:	47a8      	blx	r5
    a718:	e6a1      	b.n	a45e <lv_disp_refr_task+0x82>
    a71a:	bf00      	nop
    a71c:	20005e44 	.word	0x20005e44

0000a720 <lv_debug_check_null>:
bool lv_debug_check_null(const void * p)
{
    if(p) return true;

    return false;
}
    a720:	3800      	subs	r0, #0
    a722:	bf18      	it	ne
    a724:	2001      	movne	r0, #1
    a726:	4770      	bx	lr

0000a728 <lv_debug_check_style>:
    return false;
}

bool lv_debug_check_style(const lv_style_t * style)
{
    if(style == NULL) return true;  /*NULL style is still valid*/
    a728:	b128      	cbz	r0, a736 <lv_debug_check_style+0xe>

#if LV_USE_ASSERT_STYLE
    if(style->debug_sentinel != LV_STYLE_DEGUG_SENTINEL_VALUE) {
    a72a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    a72c:	4b03      	ldr	r3, [pc, #12]	; (a73c <lv_debug_check_style+0x14>)
    a72e:	1ac3      	subs	r3, r0, r3
    a730:	4258      	negs	r0, r3
    a732:	4158      	adcs	r0, r3
    a734:	4770      	bx	lr
    if(style == NULL) return true;  /*NULL style is still valid*/
    a736:	2001      	movs	r0, #1
        return false;
    }
#endif

    return true;
}
    a738:	4770      	bx	lr
    a73a:	bf00      	nop
    a73c:	12345678 	.word	0x12345678

0000a740 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
    a740:	b500      	push	{lr}
    a742:	b0c3      	sub	sp, #268	; 0x10c
    a744:	9001      	str	r0, [sp, #4]
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
    a746:	f7f5 fd03 	bl	150 <strlen>
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
    a74a:	28e5      	cmp	r0, #229	; 0xe5
    a74c:	9901      	ldr	r1, [sp, #4]
    size_t msg_len = strlen(msg);
    a74e:	4602      	mov	r2, r0
    if(msg_len < 230) {
    a750:	d802      	bhi.n	a758 <lv_debug_log_error+0x18>
        char buf[255];
        char * bufp = buf;

        /*Add the function name*/
        memcpy(bufp, msg, msg_len);
    a752:	a802      	add	r0, sp, #8
    a754:	f009 fdae 	bl	142b4 <memcpy>
        *bufp = '\0';
        LV_LOG_ERROR(buf);
    } else {
        LV_LOG_ERROR(msg);
    }
}
    a758:	b043      	add	sp, #268	; 0x10c
    a75a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a75e <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
    a75e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
    a762:	1d05      	adds	r5, r0, #4
    a764:	4628      	mov	r0, r5
{
    a766:	460e      	mov	r6, r1
    a768:	4617      	mov	r7, r2
    LV_LL_READ(obj->child_ll, i)
    a76a:	f7f8 feb0 	bl	34ce <lv_ll_get_head>
    {
        i->coords.x1 += x_diff;
    a76e:	fa1f f886 	uxth.w	r8, r6
    LV_LL_READ(obj->child_ll, i)
    a772:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
    a774:	fa1f f987 	uxth.w	r9, r7
    LV_LL_READ(obj->child_ll, i)
    a778:	b90c      	cbnz	r4, a77e <refresh_children_position+0x20>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
    a77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
    a77e:	8a23      	ldrh	r3, [r4, #16]
    a780:	4443      	add	r3, r8
    a782:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
    a784:	8a63      	ldrh	r3, [r4, #18]
    a786:	444b      	add	r3, r9
    a788:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
    a78a:	8aa3      	ldrh	r3, [r4, #20]
    a78c:	4443      	add	r3, r8
    a78e:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
    a790:	8ae3      	ldrh	r3, [r4, #22]
    a792:	444b      	add	r3, r9
    a794:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
    a796:	4620      	mov	r0, r4
    a798:	463a      	mov	r2, r7
    a79a:	4631      	mov	r1, r6
    a79c:	f7ff ffdf 	bl	a75e <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
    a7a0:	4621      	mov	r1, r4
    a7a2:	4628      	mov	r0, r5
    a7a4:	f7f8 fe99 	bl	34da <lv_ll_get_next>
    a7a8:	4604      	mov	r4, r0
    a7aa:	e7e5      	b.n	a778 <refresh_children_position+0x1a>

0000a7ac <lv_obj_get_child.part.0>:
void lv_obj_set_click(lv_obj_t * obj, bool en)
    a7ac:	b508      	push	{r3, lr}
    a7ae:	4602      	mov	r2, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a7b0:	2300      	movs	r3, #0
    a7b2:	4802      	ldr	r0, [pc, #8]	; (a7bc <lv_obj_get_child.part.0+0x10>)
    a7b4:	f7ff ffc4 	bl	a740 <lv_debug_log_error>
    a7b8:	e7fe      	b.n	a7b8 <lv_obj_get_child.part.0+0xc>
    a7ba:	bf00      	nop
    a7bc:	0001de08 	.word	0x0001de08

0000a7c0 <lv_init>:
{
    a7c0:	b510      	push	{r4, lr}
    if(lv_initialized) {
    a7c2:	4c10      	ldr	r4, [pc, #64]	; (a804 <lv_init+0x44>)
    a7c4:	7823      	ldrb	r3, [r4, #0]
    a7c6:	b9db      	cbnz	r3, a800 <lv_init+0x40>
    lv_mem_init();
    a7c8:	f7f8 fd9a 	bl	3300 <lv_mem_init>
    lv_task_core_init();
    a7cc:	f7f8 ff96 	bl	36fc <lv_task_core_init>
    lv_anim_core_init();
    a7d0:	f7f9 fa8a 	bl	3ce8 <lv_anim_core_init>
    lv_style_init();
    a7d4:	f7fe feaa 	bl	952c <lv_style_init>
    lv_refr_init();
    a7d8:	f7ff fda0 	bl	a31c <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
    a7dc:	480a      	ldr	r0, [pc, #40]	; (a808 <lv_init+0x48>)
    a7de:	f44f 71b2 	mov.w	r1, #356	; 0x164
    a7e2:	f7f8 fe2e 	bl	3442 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
    a7e6:	4809      	ldr	r0, [pc, #36]	; (a80c <lv_init+0x4c>)
    a7e8:	215c      	movs	r1, #92	; 0x5c
    a7ea:	f7f8 fe2a 	bl	3442 <lv_ll_init>
    lv_indev_init();
    a7ee:	f7ff fbc9 	bl	9f84 <lv_indev_init>
    lv_img_decoder_init();
    a7f2:	f7fa fa65 	bl	4cc0 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
    a7f6:	2001      	movs	r0, #1
    a7f8:	f7fd fb98 	bl	7f2c <lv_img_cache_set_size>
    lv_initialized = true;
    a7fc:	2301      	movs	r3, #1
    a7fe:	7023      	strb	r3, [r4, #0]
}
    a800:	bd10      	pop	{r4, pc}
    a802:	bf00      	nop
    a804:	20005e50 	.word	0x20005e50
    a808:	20005f2c 	.word	0x20005f2c
    a80c:	20005f1c 	.word	0x20005f1c

0000a810 <lv_obj_set_click>:
{
    a810:	b538      	push	{r3, r4, r5, lr}
    a812:	4604      	mov	r4, r0
    a814:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a816:	f7ff ff83 	bl	a720 <lv_debug_check_null>
    a81a:	b910      	cbnz	r0, a822 <lv_obj_set_click+0x12>
    a81c:	4620      	mov	r0, r4
    a81e:	f7ff ffc5 	bl	a7ac <lv_obj_get_child.part.0>
    obj->click = (en == true ? 1 : 0);
    a822:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    a826:	f365 0300 	bfi	r3, r5, #0, #1
    a82a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    a82e:	bd38      	pop	{r3, r4, r5, pc}

0000a830 <lv_obj_set_top>:
{
    a830:	b538      	push	{r3, r4, r5, lr}
    a832:	4604      	mov	r4, r0
    a834:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a836:	f7ff ff73 	bl	a720 <lv_debug_check_null>
    a83a:	4603      	mov	r3, r0
    a83c:	b920      	cbnz	r0, a848 <lv_obj_set_top+0x18>
    a83e:	4806      	ldr	r0, [pc, #24]	; (a858 <lv_obj_set_top+0x28>)
    a840:	4622      	mov	r2, r4
    a842:	f7ff ff7d 	bl	a740 <lv_debug_log_error>
    a846:	e7fe      	b.n	a846 <lv_obj_set_top+0x16>
    obj->top = (en == true ? 1 : 0);
    a848:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    a84c:	f365 1345 	bfi	r3, r5, #5, #1
    a850:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    a854:	bd38      	pop	{r3, r4, r5, pc}
    a856:	bf00      	nop
    a858:	0001de08 	.word	0x0001de08

0000a85c <lv_obj_set_drag>:
{
    a85c:	b538      	push	{r3, r4, r5, lr}
    a85e:	4604      	mov	r4, r0
    a860:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a862:	f7ff ff5d 	bl	a720 <lv_debug_check_null>
    a866:	b910      	cbnz	r0, a86e <lv_obj_set_drag+0x12>
    a868:	4620      	mov	r0, r4
    a86a:	f7ff ff9f 	bl	a7ac <lv_obj_get_child.part.0>
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
    a86e:	b11d      	cbz	r5, a878 <lv_obj_set_drag+0x1c>
    a870:	2101      	movs	r1, #1
    a872:	4620      	mov	r0, r4
    a874:	f7ff ffcc 	bl	a810 <lv_obj_set_click>
    obj->drag = (en == true ? 1 : 0);
    a878:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    a87c:	f365 0341 	bfi	r3, r5, #1, #1
    a880:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    a884:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a888 <lv_obj_set_drag_throw>:
{
    a888:	b538      	push	{r3, r4, r5, lr}
    a88a:	4604      	mov	r4, r0
    a88c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a88e:	f7ff ff47 	bl	a720 <lv_debug_check_null>
    a892:	4603      	mov	r3, r0
    a894:	b920      	cbnz	r0, a8a0 <lv_obj_set_drag_throw+0x18>
    a896:	4806      	ldr	r0, [pc, #24]	; (a8b0 <lv_obj_set_drag_throw+0x28>)
    a898:	4622      	mov	r2, r4
    a89a:	f7ff ff51 	bl	a740 <lv_debug_log_error>
    a89e:	e7fe      	b.n	a89e <lv_obj_set_drag_throw+0x16>
    obj->drag_throw = (en == true ? 1 : 0);
    a8a0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    a8a4:	f365 0382 	bfi	r3, r5, #2, #1
    a8a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    a8ac:	bd38      	pop	{r3, r4, r5, pc}
    a8ae:	bf00      	nop
    a8b0:	0001de08 	.word	0x0001de08

0000a8b4 <lv_obj_set_protect>:
{
    a8b4:	b538      	push	{r3, r4, r5, lr}
    a8b6:	4604      	mov	r4, r0
    a8b8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a8ba:	f7ff ff31 	bl	a720 <lv_debug_check_null>
    a8be:	4603      	mov	r3, r0
    a8c0:	b920      	cbnz	r0, a8cc <lv_obj_set_protect+0x18>
    a8c2:	4805      	ldr	r0, [pc, #20]	; (a8d8 <lv_obj_set_protect+0x24>)
    a8c4:	4622      	mov	r2, r4
    a8c6:	f7ff ff3b 	bl	a740 <lv_debug_log_error>
    a8ca:	e7fe      	b.n	a8ca <lv_obj_set_protect+0x16>
    obj->protect |= prot;
    a8cc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
    a8d0:	430d      	orrs	r5, r1
    a8d2:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
}
    a8d6:	bd38      	pop	{r3, r4, r5, pc}
    a8d8:	0001de08 	.word	0x0001de08

0000a8dc <lv_obj_clear_protect>:
{
    a8dc:	b538      	push	{r3, r4, r5, lr}
    a8de:	4604      	mov	r4, r0
    a8e0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a8e2:	f7ff ff1d 	bl	a720 <lv_debug_check_null>
    a8e6:	4603      	mov	r3, r0
    a8e8:	b920      	cbnz	r0, a8f4 <lv_obj_clear_protect+0x18>
    a8ea:	4806      	ldr	r0, [pc, #24]	; (a904 <lv_obj_clear_protect+0x28>)
    a8ec:	4622      	mov	r2, r4
    a8ee:	f7ff ff27 	bl	a740 <lv_debug_log_error>
    a8f2:	e7fe      	b.n	a8f2 <lv_obj_clear_protect+0x16>
    obj->protect &= prot;
    a8f4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    a8f8:	ea23 0105 	bic.w	r1, r3, r5
    a8fc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
}
    a900:	bd38      	pop	{r3, r4, r5, pc}
    a902:	bf00      	nop
    a904:	0001de08 	.word	0x0001de08

0000a908 <lv_obj_set_event_cb>:
{
    a908:	b538      	push	{r3, r4, r5, lr}
    a90a:	4604      	mov	r4, r0
    a90c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a90e:	f7ff ff07 	bl	a720 <lv_debug_check_null>
    a912:	4603      	mov	r3, r0
    a914:	b920      	cbnz	r0, a920 <lv_obj_set_event_cb+0x18>
    a916:	4803      	ldr	r0, [pc, #12]	; (a924 <lv_obj_set_event_cb+0x1c>)
    a918:	4622      	mov	r2, r4
    a91a:	f7ff ff11 	bl	a740 <lv_debug_log_error>
    a91e:	e7fe      	b.n	a91e <lv_obj_set_event_cb+0x16>
    obj->event_cb = event_cb;
    a920:	61a5      	str	r5, [r4, #24]
}
    a922:	bd38      	pop	{r3, r4, r5, pc}
    a924:	0001de08 	.word	0x0001de08

0000a928 <lv_event_send_func>:
{
    a928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    a92c:	4680      	mov	r8, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a92e:	4608      	mov	r0, r1
{
    a930:	461e      	mov	r6, r3
    a932:	460c      	mov	r4, r1
    a934:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a936:	f7ff fef3 	bl	a720 <lv_debug_check_null>
    a93a:	4603      	mov	r3, r0
    a93c:	b920      	cbnz	r0, a948 <lv_event_send_func+0x20>
    a93e:	481f      	ldr	r0, [pc, #124]	; (a9bc <lv_event_send_func+0x94>)
    a940:	4622      	mov	r2, r4
    a942:	f7ff fefd 	bl	a740 <lv_debug_log_error>
    a946:	e7fe      	b.n	a946 <lv_event_send_func+0x1e>
    event_temp_data.obj     = obj;
    a948:	4f1d      	ldr	r7, [pc, #116]	; (a9c0 <lv_event_send_func+0x98>)
    const void * event_act_data_save = event_act_data;
    a94a:	f8df a078 	ldr.w	sl, [pc, #120]	; a9c4 <lv_event_send_func+0x9c>
    event_temp_data.obj     = obj;
    a94e:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
    a950:	2300      	movs	r3, #0
    a952:	f88d 3008 	strb.w	r3, [sp, #8]
        event_temp_data.prev = event_temp_data_head;
    a956:	683b      	ldr	r3, [r7, #0]
    a958:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
    a95a:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
    a95c:	f8da 9000 	ldr.w	r9, [sl]
    event_temp_data_head = &event_temp_data;
    a960:	603b      	str	r3, [r7, #0]
    event_act_data                   = data;
    a962:	f8ca 6000 	str.w	r6, [sl]
    lv_indev_t * indev_act = lv_indev_get_act();
    a966:	f7ff fb7d 	bl	a064 <lv_indev_get_act>
    if(indev_act) {
    a96a:	b118      	cbz	r0, a974 <lv_event_send_func+0x4c>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
    a96c:	6883      	ldr	r3, [r0, #8]
    a96e:	b10b      	cbz	r3, a974 <lv_event_send_func+0x4c>
    a970:	4629      	mov	r1, r5
    a972:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
    a974:	f1b8 0f00 	cmp.w	r8, #0
    a978:	d002      	beq.n	a980 <lv_event_send_func+0x58>
    a97a:	4629      	mov	r1, r5
    a97c:	4620      	mov	r0, r4
    a97e:	47c0      	blx	r8
    event_temp_data_head = event_temp_data_head->prev;
    a980:	683b      	ldr	r3, [r7, #0]
    event_act_data = event_act_data_save;
    a982:	f8ca 9000 	str.w	r9, [sl]
    event_temp_data_head = event_temp_data_head->prev;
    a986:	689b      	ldr	r3, [r3, #8]
    a988:	603b      	str	r3, [r7, #0]
    if(event_temp_data.deleted) {
    a98a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a98e:	b983      	cbnz	r3, a9b2 <lv_event_send_func+0x8a>
    if(obj) {
    a990:	b18c      	cbz	r4, a9b6 <lv_event_send_func+0x8e>
        if(obj->parent_event && obj->par) {
    a992:	f994 302c 	ldrsb.w	r3, [r4, #44]	; 0x2c
    a996:	2b00      	cmp	r3, #0
    a998:	da0d      	bge.n	a9b6 <lv_event_send_func+0x8e>
    a99a:	6820      	ldr	r0, [r4, #0]
    a99c:	b158      	cbz	r0, a9b6 <lv_event_send_func+0x8e>
            lv_res_t res = lv_event_send(obj->par, event, data);
    a99e:	4632      	mov	r2, r6
    a9a0:	4629      	mov	r1, r5
    a9a2:	f000 f811 	bl	a9c8 <lv_event_send>
        return LV_RES_INV;
    a9a6:	1e43      	subs	r3, r0, #1
    a9a8:	4258      	negs	r0, r3
    a9aa:	4158      	adcs	r0, r3
}
    a9ac:	b004      	add	sp, #16
    a9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
    a9b2:	2000      	movs	r0, #0
    a9b4:	e7fa      	b.n	a9ac <lv_event_send_func+0x84>
    return LV_RES_OK;
    a9b6:	2001      	movs	r0, #1
    a9b8:	e7f8      	b.n	a9ac <lv_event_send_func+0x84>
    a9ba:	bf00      	nop
    a9bc:	0001de08 	.word	0x0001de08
    a9c0:	20005e4c 	.word	0x20005e4c
    a9c4:	20005e48 	.word	0x20005e48

0000a9c8 <lv_event_send>:
{
    a9c8:	b513      	push	{r0, r1, r4, lr}
    a9ca:	460c      	mov	r4, r1
    a9cc:	9201      	str	r2, [sp, #4]
    if(obj == NULL) return LV_RES_OK;
    a9ce:	9000      	str	r0, [sp, #0]
    a9d0:	b188      	cbz	r0, a9f6 <lv_event_send+0x2e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    a9d2:	f7ff fea5 	bl	a720 <lv_debug_check_null>
    a9d6:	e9dd 1300 	ldrd	r1, r3, [sp]
    a9da:	b928      	cbnz	r0, a9e8 <lv_event_send+0x20>
    a9dc:	4603      	mov	r3, r0
    a9de:	460a      	mov	r2, r1
    a9e0:	4806      	ldr	r0, [pc, #24]	; (a9fc <lv_event_send+0x34>)
    a9e2:	f7ff fead 	bl	a740 <lv_debug_log_error>
    a9e6:	e7fe      	b.n	a9e6 <lv_event_send+0x1e>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
    a9e8:	6988      	ldr	r0, [r1, #24]
    a9ea:	4622      	mov	r2, r4
}
    a9ec:	b002      	add	sp, #8
    a9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    res = lv_event_send_func(obj->event_cb, obj, event, data);
    a9f2:	f7ff bf99 	b.w	a928 <lv_event_send_func>
}
    a9f6:	2001      	movs	r0, #1
    a9f8:	b002      	add	sp, #8
    a9fa:	bd10      	pop	{r4, pc}
    a9fc:	0001de08 	.word	0x0001de08

0000aa00 <lv_event_get_data>:
}
    aa00:	4b01      	ldr	r3, [pc, #4]	; (aa08 <lv_event_get_data+0x8>)
    aa02:	6818      	ldr	r0, [r3, #0]
    aa04:	4770      	bx	lr
    aa06:	bf00      	nop
    aa08:	20005e48 	.word	0x20005e48

0000aa0c <lv_obj_set_signal_cb>:
{
    aa0c:	b538      	push	{r3, r4, r5, lr}
    aa0e:	4604      	mov	r4, r0
    aa10:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    aa12:	f7ff fe85 	bl	a720 <lv_debug_check_null>
    aa16:	4603      	mov	r3, r0
    aa18:	b920      	cbnz	r0, aa24 <lv_obj_set_signal_cb+0x18>
    aa1a:	4803      	ldr	r0, [pc, #12]	; (aa28 <lv_obj_set_signal_cb+0x1c>)
    aa1c:	4622      	mov	r2, r4
    aa1e:	f7ff fe8f 	bl	a740 <lv_debug_log_error>
    aa22:	e7fe      	b.n	aa22 <lv_obj_set_signal_cb+0x16>
    obj->signal_cb = signal_cb;
    aa24:	61e5      	str	r5, [r4, #28]
}
    aa26:	bd38      	pop	{r3, r4, r5, pc}
    aa28:	0001de08 	.word	0x0001de08

0000aa2c <lv_obj_set_design_cb>:
{
    aa2c:	b538      	push	{r3, r4, r5, lr}
    aa2e:	4604      	mov	r4, r0
    aa30:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    aa32:	f7ff fe75 	bl	a720 <lv_debug_check_null>
    aa36:	4603      	mov	r3, r0
    aa38:	b920      	cbnz	r0, aa44 <lv_obj_set_design_cb+0x18>
    aa3a:	4803      	ldr	r0, [pc, #12]	; (aa48 <lv_obj_set_design_cb+0x1c>)
    aa3c:	4622      	mov	r2, r4
    aa3e:	f7ff fe7f 	bl	a740 <lv_debug_log_error>
    aa42:	e7fe      	b.n	aa42 <lv_obj_set_design_cb+0x16>
    obj->design_cb = design_cb;
    aa44:	6225      	str	r5, [r4, #32]
}
    aa46:	bd38      	pop	{r3, r4, r5, pc}
    aa48:	0001de08 	.word	0x0001de08

0000aa4c <lv_obj_allocate_ext_attr>:
{
    aa4c:	b513      	push	{r0, r1, r4, lr}
    aa4e:	4604      	mov	r4, r0
    aa50:	9101      	str	r1, [sp, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    aa52:	f7ff fe65 	bl	a720 <lv_debug_check_null>
    aa56:	9901      	ldr	r1, [sp, #4]
    aa58:	4603      	mov	r3, r0
    aa5a:	b920      	cbnz	r0, aa66 <lv_obj_allocate_ext_attr+0x1a>
    aa5c:	4805      	ldr	r0, [pc, #20]	; (aa74 <lv_obj_allocate_ext_attr+0x28>)
    aa5e:	4622      	mov	r2, r4
    aa60:	f7ff fe6e 	bl	a740 <lv_debug_log_error>
    aa64:	e7fe      	b.n	aa64 <lv_obj_allocate_ext_attr+0x18>
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
    aa66:	6a60      	ldr	r0, [r4, #36]	; 0x24
    aa68:	f7f8 fc80 	bl	336c <lv_mem_realloc>
    aa6c:	6260      	str	r0, [r4, #36]	; 0x24
}
    aa6e:	b002      	add	sp, #8
    aa70:	bd10      	pop	{r4, pc}
    aa72:	bf00      	nop
    aa74:	0001de08 	.word	0x0001de08

0000aa78 <lv_obj_get_parent>:
{
    aa78:	b510      	push	{r4, lr}
    aa7a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    aa7c:	f7ff fe50 	bl	a720 <lv_debug_check_null>
    aa80:	b910      	cbnz	r0, aa88 <lv_obj_get_parent+0x10>
    aa82:	4620      	mov	r0, r4
    aa84:	f7ff fe92 	bl	a7ac <lv_obj_get_child.part.0>
}
    aa88:	6820      	ldr	r0, [r4, #0]
    aa8a:	bd10      	pop	{r4, pc}

0000aa8c <lv_obj_get_screen>:
{
    aa8c:	b538      	push	{r3, r4, r5, lr}
    aa8e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    aa90:	f7ff fe46 	bl	a720 <lv_debug_check_null>
    aa94:	b910      	cbnz	r0, aa9c <lv_obj_get_screen+0x10>
    aa96:	4620      	mov	r0, r4
    aa98:	f7ff fe88 	bl	a7ac <lv_obj_get_child.part.0>
        par   = lv_obj_get_parent(act_p);
    aa9c:	4620      	mov	r0, r4
    aa9e:	f7ff ffeb 	bl	aa78 <lv_obj_get_parent>
    } while(par != NULL);
    aaa2:	4625      	mov	r5, r4
    aaa4:	4604      	mov	r4, r0
    aaa6:	2800      	cmp	r0, #0
    aaa8:	d1f8      	bne.n	aa9c <lv_obj_get_screen+0x10>
}
    aaaa:	4628      	mov	r0, r5
    aaac:	bd38      	pop	{r3, r4, r5, pc}
	...

0000aab0 <lv_obj_get_disp>:
{
    aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aab2:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    aab4:	f7ff fe34 	bl	a720 <lv_debug_check_null>
    aab8:	b910      	cbnz	r0, aac0 <lv_obj_get_disp+0x10>
    aaba:	4628      	mov	r0, r5
    aabc:	f7ff fe76 	bl	a7ac <lv_obj_get_child.part.0>
    if(obj->par == NULL)
    aac0:	682b      	ldr	r3, [r5, #0]
    aac2:	b11b      	cbz	r3, aacc <lv_obj_get_disp+0x1c>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
    aac4:	4628      	mov	r0, r5
    aac6:	f7ff ffe1 	bl	aa8c <lv_obj_get_screen>
    aaca:	4605      	mov	r5, r0
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
    aacc:	480d      	ldr	r0, [pc, #52]	; (ab04 <lv_obj_get_disp+0x54>)
    aace:	4f0d      	ldr	r7, [pc, #52]	; (ab04 <lv_obj_get_disp+0x54>)
    aad0:	f7f8 fcfd 	bl	34ce <lv_ll_get_head>
    aad4:	4604      	mov	r4, r0
    aad6:	b90c      	cbnz	r4, aadc <lv_obj_get_disp+0x2c>
}
    aad8:	4620      	mov	r0, r4
    aada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_LL_READ(d->scr_ll, s)
    aadc:	f104 0624 	add.w	r6, r4, #36	; 0x24
    aae0:	4630      	mov	r0, r6
    aae2:	f7f8 fcf4 	bl	34ce <lv_ll_get_head>
    aae6:	b928      	cbnz	r0, aaf4 <lv_obj_get_disp+0x44>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
    aae8:	4621      	mov	r1, r4
    aaea:	4638      	mov	r0, r7
    aaec:	f7f8 fcf5 	bl	34da <lv_ll_get_next>
    aaf0:	4604      	mov	r4, r0
    aaf2:	e7f0      	b.n	aad6 <lv_obj_get_disp+0x26>
            if(s == scr) return d;
    aaf4:	4285      	cmp	r5, r0
    aaf6:	d0ef      	beq.n	aad8 <lv_obj_get_disp+0x28>
        LV_LL_READ(d->scr_ll, s)
    aaf8:	4601      	mov	r1, r0
    aafa:	4630      	mov	r0, r6
    aafc:	f7f8 fced 	bl	34da <lv_ll_get_next>
    ab00:	e7f1      	b.n	aae6 <lv_obj_get_disp+0x36>
    ab02:	bf00      	nop
    ab04:	20005f2c 	.word	0x20005f2c

0000ab08 <lv_obj_get_child>:
{
    ab08:	b538      	push	{r3, r4, r5, lr}
    ab0a:	4604      	mov	r4, r0
    ab0c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ab0e:	f7ff fe07 	bl	a720 <lv_debug_check_null>
    ab12:	b910      	cbnz	r0, ab1a <lv_obj_get_child+0x12>
    ab14:	4620      	mov	r0, r4
    ab16:	f7ff fe49 	bl	a7ac <lv_obj_get_child.part.0>
    if(child == NULL) {
    ab1a:	1d20      	adds	r0, r4, #4
    ab1c:	b91d      	cbnz	r5, ab26 <lv_obj_get_child+0x1e>
}
    ab1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        result = lv_ll_get_head(&obj->child_ll);
    ab22:	f7f8 bcd4 	b.w	34ce <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
    ab26:	4629      	mov	r1, r5
}
    ab28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        result = lv_ll_get_next(&obj->child_ll, child);
    ab2c:	f7f8 bcd5 	b.w	34da <lv_ll_get_next>

0000ab30 <lv_obj_get_coords>:
{
    ab30:	b538      	push	{r3, r4, r5, lr}
    ab32:	4604      	mov	r4, r0
    ab34:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ab36:	f7ff fdf3 	bl	a720 <lv_debug_check_null>
    ab3a:	b910      	cbnz	r0, ab42 <lv_obj_get_coords+0x12>
    ab3c:	4620      	mov	r0, r4
    ab3e:	f7ff fe35 	bl	a7ac <lv_obj_get_child.part.0>
    memcpy(dest, src, sizeof(lv_area_t));
    ab42:	f104 0110 	add.w	r1, r4, #16
    ab46:	4628      	mov	r0, r5
    ab48:	2208      	movs	r2, #8
}
    ab4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ab4e:	f009 bbb1 	b.w	142b4 <memcpy>
	...

0000ab54 <lv_obj_get_x>:
{
    ab54:	b510      	push	{r4, lr}
    ab56:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ab58:	f7ff fde2 	bl	a720 <lv_debug_check_null>
    ab5c:	4603      	mov	r3, r0
    ab5e:	b920      	cbnz	r0, ab6a <lv_obj_get_x+0x16>
    ab60:	4808      	ldr	r0, [pc, #32]	; (ab84 <lv_obj_get_x+0x30>)
    ab62:	4622      	mov	r2, r4
    ab64:	f7ff fdec 	bl	a740 <lv_debug_log_error>
    ab68:	e7fe      	b.n	ab68 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    ab6a:	4620      	mov	r0, r4
    ab6c:	f7ff ff84 	bl	aa78 <lv_obj_get_parent>
    if(parent) {
    ab70:	b120      	cbz	r0, ab7c <lv_obj_get_x+0x28>
        rel_x             = obj->coords.x1 - parent->coords.x1;
    ab72:	8a23      	ldrh	r3, [r4, #16]
    ab74:	8a00      	ldrh	r0, [r0, #16]
    ab76:	1a18      	subs	r0, r3, r0
    ab78:	b200      	sxth	r0, r0
}
    ab7a:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
    ab7c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
    ab80:	e7fb      	b.n	ab7a <lv_obj_get_x+0x26>
    ab82:	bf00      	nop
    ab84:	0001de08 	.word	0x0001de08

0000ab88 <lv_obj_get_y>:
{
    ab88:	b510      	push	{r4, lr}
    ab8a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ab8c:	f7ff fdc8 	bl	a720 <lv_debug_check_null>
    ab90:	4603      	mov	r3, r0
    ab92:	b920      	cbnz	r0, ab9e <lv_obj_get_y+0x16>
    ab94:	4808      	ldr	r0, [pc, #32]	; (abb8 <lv_obj_get_y+0x30>)
    ab96:	4622      	mov	r2, r4
    ab98:	f7ff fdd2 	bl	a740 <lv_debug_log_error>
    ab9c:	e7fe      	b.n	ab9c <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    ab9e:	4620      	mov	r0, r4
    aba0:	f7ff ff6a 	bl	aa78 <lv_obj_get_parent>
   if(parent) {
    aba4:	b120      	cbz	r0, abb0 <lv_obj_get_y+0x28>
       rel_y             = obj->coords.y1 - parent->coords.y1;
    aba6:	8a63      	ldrh	r3, [r4, #18]
    aba8:	8a40      	ldrh	r0, [r0, #18]
    abaa:	1a18      	subs	r0, r3, r0
    abac:	b200      	sxth	r0, r0
}
    abae:	bd10      	pop	{r4, pc}
       rel_y = obj->coords.y1;
    abb0:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
    abb4:	e7fb      	b.n	abae <lv_obj_get_y+0x26>
    abb6:	bf00      	nop
    abb8:	0001de08 	.word	0x0001de08

0000abbc <lv_obj_get_width>:
{
    abbc:	b510      	push	{r4, lr}
    abbe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    abc0:	f7ff fdae 	bl	a720 <lv_debug_check_null>
    abc4:	b910      	cbnz	r0, abcc <lv_obj_get_width+0x10>
    abc6:	4620      	mov	r0, r4
    abc8:	f7ff fdf0 	bl	a7ac <lv_obj_get_child.part.0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    abcc:	8aa3      	ldrh	r3, [r4, #20]
    abce:	8a20      	ldrh	r0, [r4, #16]
    abd0:	3301      	adds	r3, #1
    abd2:	1a18      	subs	r0, r3, r0
}
    abd4:	b200      	sxth	r0, r0
    abd6:	bd10      	pop	{r4, pc}

0000abd8 <lv_obj_get_height>:
{
    abd8:	b510      	push	{r4, lr}
    abda:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    abdc:	f7ff fda0 	bl	a720 <lv_debug_check_null>
    abe0:	b910      	cbnz	r0, abe8 <lv_obj_get_height+0x10>
    abe2:	4620      	mov	r0, r4
    abe4:	f7ff fde2 	bl	a7ac <lv_obj_get_child.part.0>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    abe8:	8ae3      	ldrh	r3, [r4, #22]
    abea:	8a60      	ldrh	r0, [r4, #18]
    abec:	3301      	adds	r3, #1
    abee:	1a18      	subs	r0, r3, r0
}
    abf0:	b200      	sxth	r0, r0
    abf2:	bd10      	pop	{r4, pc}

0000abf4 <lv_obj_get_auto_realign>:
{
    abf4:	b510      	push	{r4, lr}
    abf6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    abf8:	f7ff fd92 	bl	a720 <lv_debug_check_null>
    abfc:	4603      	mov	r3, r0
    abfe:	b920      	cbnz	r0, ac0a <lv_obj_get_auto_realign+0x16>
    ac00:	4804      	ldr	r0, [pc, #16]	; (ac14 <lv_obj_get_auto_realign+0x20>)
    ac02:	4622      	mov	r2, r4
    ac04:	f7ff fd9c 	bl	a740 <lv_debug_log_error>
    ac08:	e7fe      	b.n	ac08 <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
    ac0a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
    ac0e:	f000 0001 	and.w	r0, r0, #1
    ac12:	bd10      	pop	{r4, pc}
    ac14:	0001de08 	.word	0x0001de08

0000ac18 <lv_obj_get_style>:
{
    ac18:	b510      	push	{r4, lr}
    ac1a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ac1c:	f7ff fd80 	bl	a720 <lv_debug_check_null>
    ac20:	b910      	cbnz	r0, ac28 <lv_obj_get_style+0x10>
    ac22:	4620      	mov	r0, r4
    ac24:	f7ff fdc2 	bl	a7ac <lv_obj_get_child.part.0>
    const lv_style_t * style_act = obj->style_p;
    ac28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if(style_act == NULL) {
    ac2a:	b910      	cbnz	r0, ac32 <lv_obj_get_style+0x1a>
        lv_obj_t * par = obj->par;
    ac2c:	6823      	ldr	r3, [r4, #0]
        while(par) {
    ac2e:	b90b      	cbnz	r3, ac34 <lv_obj_get_style+0x1c>
    if(style_act == NULL) style_act = &lv_style_plain;
    ac30:	4804      	ldr	r0, [pc, #16]	; (ac44 <lv_obj_get_style+0x2c>)
}
    ac32:	bd10      	pop	{r4, pc}
            if(par->style_p) {
    ac34:	6a98      	ldr	r0, [r3, #40]	; 0x28
    ac36:	b110      	cbz	r0, ac3e <lv_obj_get_style+0x26>
                if(par->style_p->glass == 0) {
    ac38:	7802      	ldrb	r2, [r0, #0]
    ac3a:	07d2      	lsls	r2, r2, #31
    ac3c:	d5f9      	bpl.n	ac32 <lv_obj_get_style+0x1a>
            par = par->par;
    ac3e:	681b      	ldr	r3, [r3, #0]
    ac40:	e7f5      	b.n	ac2e <lv_obj_get_style+0x16>
    ac42:	bf00      	nop
    ac44:	2000617c 	.word	0x2000617c

0000ac48 <lv_obj_get_width_fit>:
{
    ac48:	b538      	push	{r3, r4, r5, lr}
    ac4a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ac4c:	f7ff fd68 	bl	a720 <lv_debug_check_null>
    ac50:	4603      	mov	r3, r0
    ac52:	b920      	cbnz	r0, ac5e <lv_obj_get_width_fit+0x16>
    ac54:	4808      	ldr	r0, [pc, #32]	; (ac78 <lv_obj_get_width_fit+0x30>)
    ac56:	4622      	mov	r2, r4
    ac58:	f7ff fd72 	bl	a740 <lv_debug_log_error>
    ac5c:	e7fe      	b.n	ac5c <lv_obj_get_width_fit+0x14>
    const lv_style_t * style = lv_obj_get_style(obj);
    ac5e:	4620      	mov	r0, r4
    ac60:	f7ff ffda 	bl	ac18 <lv_obj_get_style>
    ac64:	4605      	mov	r5, r0
    return lv_obj_get_width(obj) - style->body.padding.left - style->body.padding.right;
    ac66:	4620      	mov	r0, r4
    ac68:	f7ff ffa8 	bl	abbc <lv_obj_get_width>
    ac6c:	8b6b      	ldrh	r3, [r5, #26]
    ac6e:	8baa      	ldrh	r2, [r5, #28]
    ac70:	4413      	add	r3, r2
    ac72:	1ac0      	subs	r0, r0, r3
}
    ac74:	b200      	sxth	r0, r0
    ac76:	bd38      	pop	{r3, r4, r5, pc}
    ac78:	0001de08 	.word	0x0001de08

0000ac7c <lv_obj_get_hidden>:
{
    ac7c:	b510      	push	{r4, lr}
    ac7e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ac80:	f7ff fd4e 	bl	a720 <lv_debug_check_null>
    ac84:	b910      	cbnz	r0, ac8c <lv_obj_get_hidden+0x10>
    ac86:	4620      	mov	r0, r4
    ac88:	f7ff fd90 	bl	a7ac <lv_obj_get_child.part.0>
    return obj->hidden == 0 ? false : true;
    ac8c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
}
    ac90:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ac94:	bd10      	pop	{r4, pc}
	...

0000ac98 <lv_obj_invalidate>:
{
    ac98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac9a:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ac9c:	f7ff fd40 	bl	a720 <lv_debug_check_null>
    aca0:	4603      	mov	r3, r0
    aca2:	b920      	cbnz	r0, acae <lv_obj_invalidate+0x16>
    aca4:	482c      	ldr	r0, [pc, #176]	; (ad58 <lv_obj_invalidate+0xc0>)
    aca6:	462a      	mov	r2, r5
    aca8:	f7ff fd4a 	bl	a740 <lv_debug_log_error>
    acac:	e7fe      	b.n	acac <lv_obj_invalidate+0x14>
    if(lv_obj_get_hidden(obj)) return;
    acae:	4628      	mov	r0, r5
    acb0:	f7ff ffe4 	bl	ac7c <lv_obj_get_hidden>
    acb4:	bbd8      	cbnz	r0, ad2e <lv_obj_invalidate+0x96>
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
    acb6:	4628      	mov	r0, r5
    acb8:	f7ff fee8 	bl	aa8c <lv_obj_get_screen>
    acbc:	4604      	mov	r4, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
    acbe:	f7ff fef7 	bl	aab0 <lv_obj_get_disp>
    acc2:	4607      	mov	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    acc4:	f7fe fc10 	bl	94e8 <lv_disp_get_scr_act>
    acc8:	4284      	cmp	r4, r0
    acca:	d126      	bne.n	ad1a <lv_obj_invalidate+0x82>
        lv_obj_t * par = lv_obj_get_parent(obj);
    accc:	4628      	mov	r0, r5
    acce:	f7ff fed3 	bl	aa78 <lv_obj_get_parent>
        lv_coord_t ext_size = obj->ext_draw_pad;
    acd2:	f9b5 6030 	ldrsh.w	r6, [r5, #48]	; 0x30
    memcpy(dest, src, sizeof(lv_area_t));
    acd6:	2208      	movs	r2, #8
        lv_obj_t * par = lv_obj_get_parent(obj);
    acd8:	4604      	mov	r4, r0
    acda:	f105 0110 	add.w	r1, r5, #16
    acde:	4668      	mov	r0, sp
    ace0:	f009 fae8 	bl	142b4 <memcpy>
        area_trunc.x1 -= ext_size;
    ace4:	f8bd 2000 	ldrh.w	r2, [sp]
    ace8:	b2b3      	uxth	r3, r6
    acea:	1ad2      	subs	r2, r2, r3
    acec:	f8ad 2000 	strh.w	r2, [sp]
        area_trunc.y1 -= ext_size;
    acf0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    acf4:	1ad2      	subs	r2, r2, r3
    acf6:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_trunc.x2 += ext_size;
    acfa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    acfe:	441a      	add	r2, r3
    ad00:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
    ad04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ad08:	4413      	add	r3, r2
    ad0a:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
    ad0e:	b984      	cbnz	r4, ad32 <lv_obj_invalidate+0x9a>
        if(union_ok) lv_inv_area(disp, &area_trunc);
    ad10:	4669      	mov	r1, sp
    ad12:	4638      	mov	r0, r7
    ad14:	f7ff fb03 	bl	a31e <lv_inv_area>
    ad18:	e009      	b.n	ad2e <lv_obj_invalidate+0x96>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    ad1a:	4638      	mov	r0, r7
    ad1c:	f7fe fbf5 	bl	950a <lv_disp_get_layer_top>
    ad20:	4284      	cmp	r4, r0
    ad22:	d0d3      	beq.n	accc <lv_obj_invalidate+0x34>
       obj_scr == lv_disp_get_layer_sys(disp)) {
    ad24:	4638      	mov	r0, r7
    ad26:	f7fe fbf7 	bl	9518 <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    ad2a:	4284      	cmp	r4, r0
    ad2c:	d0ce      	beq.n	accc <lv_obj_invalidate+0x34>
}
    ad2e:	b003      	add	sp, #12
    ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    ad32:	f104 0210 	add.w	r2, r4, #16
    ad36:	4669      	mov	r1, sp
    ad38:	4668      	mov	r0, sp
    ad3a:	f7f8 fe93 	bl	3a64 <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
    ad3e:	2800      	cmp	r0, #0
    ad40:	d0f5      	beq.n	ad2e <lv_obj_invalidate+0x96>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    ad42:	4620      	mov	r0, r4
    ad44:	f7ff ff9a 	bl	ac7c <lv_obj_get_hidden>
    ad48:	2800      	cmp	r0, #0
    ad4a:	d1f0      	bne.n	ad2e <lv_obj_invalidate+0x96>
            par = lv_obj_get_parent(par);
    ad4c:	4620      	mov	r0, r4
    ad4e:	f7ff fe93 	bl	aa78 <lv_obj_get_parent>
    ad52:	4604      	mov	r4, r0
    ad54:	e7db      	b.n	ad0e <lv_obj_invalidate+0x76>
    ad56:	bf00      	nop
    ad58:	0001de08 	.word	0x0001de08

0000ad5c <lv_obj_move_foreground>:
{
    ad5c:	b570      	push	{r4, r5, r6, lr}
    ad5e:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ad60:	f7ff fcde 	bl	a720 <lv_debug_check_null>
    ad64:	4603      	mov	r3, r0
    ad66:	b920      	cbnz	r0, ad72 <lv_obj_move_foreground+0x16>
    ad68:	4811      	ldr	r0, [pc, #68]	; (adb0 <lv_obj_move_foreground+0x54>)
    ad6a:	462a      	mov	r2, r5
    ad6c:	f7ff fce8 	bl	a740 <lv_debug_log_error>
    ad70:	e7fe      	b.n	ad70 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    ad72:	4628      	mov	r0, r5
    ad74:	f7ff fe80 	bl	aa78 <lv_obj_get_parent>
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
    ad78:	1d06      	adds	r6, r0, #4
    lv_obj_t * parent = lv_obj_get_parent(obj);
    ad7a:	4604      	mov	r4, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
    ad7c:	4630      	mov	r0, r6
    ad7e:	f7f8 fba6 	bl	34ce <lv_ll_get_head>
    ad82:	4285      	cmp	r5, r0
    ad84:	d012      	beq.n	adac <lv_obj_move_foreground+0x50>
    lv_obj_invalidate(parent);
    ad86:	4620      	mov	r0, r4
    ad88:	f7ff ff86 	bl	ac98 <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
    ad8c:	462a      	mov	r2, r5
    ad8e:	4631      	mov	r1, r6
    ad90:	4630      	mov	r0, r6
    ad92:	2301      	movs	r3, #1
    ad94:	f7f8 fc43 	bl	361e <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
    ad98:	69e3      	ldr	r3, [r4, #28]
    ad9a:	462a      	mov	r2, r5
    ad9c:	4620      	mov	r0, r4
    ad9e:	2101      	movs	r1, #1
    ada0:	4798      	blx	r3
    lv_obj_invalidate(parent);
    ada2:	4620      	mov	r0, r4
}
    ada4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
    ada8:	f7ff bf76 	b.w	ac98 <lv_obj_invalidate>
}
    adac:	bd70      	pop	{r4, r5, r6, pc}
    adae:	bf00      	nop
    adb0:	0001de08 	.word	0x0001de08

0000adb4 <lv_obj_set_pos>:
{
    adb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    adb8:	4604      	mov	r4, r0
    adba:	460d      	mov	r5, r1
    adbc:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    adbe:	f7ff fcaf 	bl	a720 <lv_debug_check_null>
    adc2:	4603      	mov	r3, r0
    adc4:	b920      	cbnz	r0, add0 <lv_obj_set_pos+0x1c>
    adc6:	4820      	ldr	r0, [pc, #128]	; (ae48 <lv_obj_set_pos+0x94>)
    adc8:	4622      	mov	r2, r4
    adca:	f7ff fcb9 	bl	a740 <lv_debug_log_error>
    adce:	e7fe      	b.n	adce <lv_obj_set_pos+0x1a>
    lv_obj_t * par = obj->par;
    add0:	6826      	ldr	r6, [r4, #0]
    diff.x = x - obj->coords.x1;
    add2:	8a21      	ldrh	r1, [r4, #16]
    add4:	8a33      	ldrh	r3, [r6, #16]
    diff.y = y - obj->coords.y1;
    add6:	8a62      	ldrh	r2, [r4, #18]
    diff.x = x - obj->coords.x1;
    add8:	1a5b      	subs	r3, r3, r1
    adda:	1959      	adds	r1, r3, r5
    diff.y = y - obj->coords.y1;
    addc:	8a73      	ldrh	r3, [r6, #18]
    adde:	1a9b      	subs	r3, r3, r2
    ade0:	19da      	adds	r2, r3, r7
    ade2:	b297      	uxth	r7, r2
    diff.x = x - obj->coords.x1;
    ade4:	fa1f f881 	uxth.w	r8, r1
    diff.y = y - obj->coords.y1;
    ade8:	b212      	sxth	r2, r2
    if(diff.x == 0 && diff.y == 0) return;
    adea:	ea58 0307 	orrs.w	r3, r8, r7
    diff.x = x - obj->coords.x1;
    adee:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
    adf0:	9201      	str	r2, [sp, #4]
    if(diff.x == 0 && diff.y == 0) return;
    adf2:	d025      	beq.n	ae40 <lv_obj_set_pos+0x8c>
    lv_obj_invalidate(obj);
    adf4:	4620      	mov	r0, r4
    adf6:	f7ff ff4f 	bl	ac98 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
    adfa:	a902      	add	r1, sp, #8
    adfc:	4620      	mov	r0, r4
    adfe:	f7ff fe97 	bl	ab30 <lv_obj_get_coords>
    obj->coords.x1 += diff.x;
    ae02:	8a23      	ldrh	r3, [r4, #16]
    refresh_children_position(obj, diff.x, diff.y);
    ae04:	9a01      	ldr	r2, [sp, #4]
    obj->coords.x1 += diff.x;
    ae06:	4443      	add	r3, r8
    ae08:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
    ae0a:	8a63      	ldrh	r3, [r4, #18]
    ae0c:	443b      	add	r3, r7
    ae0e:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
    ae10:	8aa3      	ldrh	r3, [r4, #20]
    ae12:	4498      	add	r8, r3
    obj->coords.y2 += diff.y;
    ae14:	8ae3      	ldrh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
    ae16:	f8a4 8014 	strh.w	r8, [r4, #20]
    obj->coords.y2 += diff.y;
    ae1a:	441f      	add	r7, r3
    refresh_children_position(obj, diff.x, diff.y);
    ae1c:	4629      	mov	r1, r5
    ae1e:	4620      	mov	r0, r4
    obj->coords.y2 += diff.y;
    ae20:	82e7      	strh	r7, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
    ae22:	f7ff fc9c 	bl	a75e <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
    ae26:	69e3      	ldr	r3, [r4, #28]
    ae28:	aa02      	add	r2, sp, #8
    ae2a:	2102      	movs	r1, #2
    ae2c:	4620      	mov	r0, r4
    ae2e:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    ae30:	69f3      	ldr	r3, [r6, #28]
    ae32:	4622      	mov	r2, r4
    ae34:	2101      	movs	r1, #1
    ae36:	4630      	mov	r0, r6
    ae38:	4798      	blx	r3
    lv_obj_invalidate(obj);
    ae3a:	4620      	mov	r0, r4
    ae3c:	f7ff ff2c 	bl	ac98 <lv_obj_invalidate>
}
    ae40:	b004      	add	sp, #16
    ae42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae46:	bf00      	nop
    ae48:	0001de08 	.word	0x0001de08

0000ae4c <lv_obj_set_x>:
{
    ae4c:	b538      	push	{r3, r4, r5, lr}
    ae4e:	4604      	mov	r4, r0
    ae50:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ae52:	f7ff fc65 	bl	a720 <lv_debug_check_null>
    ae56:	4603      	mov	r3, r0
    ae58:	b920      	cbnz	r0, ae64 <lv_obj_set_x+0x18>
    ae5a:	4807      	ldr	r0, [pc, #28]	; (ae78 <lv_obj_set_x+0x2c>)
    ae5c:	4622      	mov	r2, r4
    ae5e:	f7ff fc6f 	bl	a740 <lv_debug_log_error>
    ae62:	e7fe      	b.n	ae62 <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
    ae64:	4620      	mov	r0, r4
    ae66:	f7ff fe8f 	bl	ab88 <lv_obj_get_y>
    ae6a:	4629      	mov	r1, r5
    ae6c:	4602      	mov	r2, r0
    ae6e:	4620      	mov	r0, r4
}
    ae70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
    ae74:	f7ff bf9e 	b.w	adb4 <lv_obj_set_pos>
    ae78:	0001de08 	.word	0x0001de08

0000ae7c <lv_obj_set_y>:
{
    ae7c:	b538      	push	{r3, r4, r5, lr}
    ae7e:	4604      	mov	r4, r0
    ae80:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ae82:	f7ff fc4d 	bl	a720 <lv_debug_check_null>
    ae86:	4603      	mov	r3, r0
    ae88:	b920      	cbnz	r0, ae94 <lv_obj_set_y+0x18>
    ae8a:	4807      	ldr	r0, [pc, #28]	; (aea8 <lv_obj_set_y+0x2c>)
    ae8c:	4622      	mov	r2, r4
    ae8e:	f7ff fc57 	bl	a740 <lv_debug_log_error>
    ae92:	e7fe      	b.n	ae92 <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
    ae94:	4620      	mov	r0, r4
    ae96:	f7ff fe5d 	bl	ab54 <lv_obj_get_x>
    ae9a:	462a      	mov	r2, r5
    ae9c:	4601      	mov	r1, r0
    ae9e:	4620      	mov	r0, r4
}
    aea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
    aea4:	f7ff bf86 	b.w	adb4 <lv_obj_set_pos>
    aea8:	0001de08 	.word	0x0001de08

0000aeac <lv_obj_align>:
{
    aeac:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
    aeb0:	469a      	mov	sl, r3
    aeb2:	f9bd b020 	ldrsh.w	fp, [sp, #32]
    aeb6:	4607      	mov	r7, r0
    aeb8:	460d      	mov	r5, r1
    aeba:	4691      	mov	r9, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    aebc:	f7ff fc30 	bl	a720 <lv_debug_check_null>
    aec0:	4603      	mov	r3, r0
    aec2:	b920      	cbnz	r0, aece <lv_obj_align+0x22>
    aec4:	48a2      	ldr	r0, [pc, #648]	; (b150 <lv_obj_align+0x2a4>)
    aec6:	463a      	mov	r2, r7
    aec8:	f7ff fc3a 	bl	a740 <lv_debug_log_error>
    aecc:	e7fe      	b.n	aecc <lv_obj_align+0x20>
    lv_coord_t new_x = lv_obj_get_x(obj);
    aece:	4638      	mov	r0, r7
    aed0:	f7ff fe40 	bl	ab54 <lv_obj_get_x>
    aed4:	4606      	mov	r6, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
    aed6:	4638      	mov	r0, r7
    aed8:	f7ff fe56 	bl	ab88 <lv_obj_get_y>
    aedc:	4604      	mov	r4, r0
    if(base == NULL) {
    aede:	b91d      	cbnz	r5, aee8 <lv_obj_align+0x3c>
        base = lv_obj_get_parent(obj);
    aee0:	4638      	mov	r0, r7
    aee2:	f7ff fdc9 	bl	aa78 <lv_obj_get_parent>
    aee6:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    aee8:	4628      	mov	r0, r5
    aeea:	f7ff fc19 	bl	a720 <lv_debug_check_null>
    aeee:	4603      	mov	r3, r0
    aef0:	b920      	cbnz	r0, aefc <lv_obj_align+0x50>
    aef2:	4897      	ldr	r0, [pc, #604]	; (b150 <lv_obj_align+0x2a4>)
    aef4:	462a      	mov	r2, r5
    aef6:	f7ff fc23 	bl	a740 <lv_debug_log_error>
    aefa:	e7fe      	b.n	aefa <lv_obj_align+0x4e>
    switch(align) {
    aefc:	f1b9 0f14 	cmp.w	r9, #20
    af00:	d818      	bhi.n	af34 <lv_obj_align+0x88>
    af02:	e8df f019 	tbh	[pc, r9, lsl #1]
    af06:	0038      	.short	0x0038
    af08:	00560015 	.word	0x00560015
    af0c:	00700067 	.word	0x00700067
    af10:	0092007a 	.word	0x0092007a
    af14:	00aa009b 	.word	0x00aa009b
    af18:	00b800b3 	.word	0x00b800b3
    af1c:	00d600cd 	.word	0x00d600cd
    af20:	00ef00db 	.word	0x00ef00db
    af24:	00fd00f8 	.word	0x00fd00f8
    af28:	01070102 	.word	0x01070102
    af2c:	0120010c 	.word	0x0120010c
            new_y = 0;
    af30:	2400      	movs	r4, #0
            new_x = 0;
    af32:	2600      	movs	r6, #0
    lv_obj_t * par        = lv_obj_get_parent(obj);
    af34:	4638      	mov	r0, r7
    af36:	f7ff fd9f 	bl	aa78 <lv_obj_get_parent>
    new_x += x_mod + base_abs_x;
    af3a:	8a29      	ldrh	r1, [r5, #16]
    new_y += y_mod + base_abs_y;
    af3c:	8a6a      	ldrh	r2, [r5, #18]
    new_x += x_mod + base_abs_x;
    af3e:	4451      	add	r1, sl
    new_y += y_mod + base_abs_y;
    af40:	445a      	add	r2, fp
    new_x += x_mod + base_abs_x;
    af42:	440e      	add	r6, r1
    new_y += y_mod + base_abs_y;
    af44:	4414      	add	r4, r2
    new_x -= par_abs_x;
    af46:	8a01      	ldrh	r1, [r0, #16]
    new_y -= par_abs_y;
    af48:	8a42      	ldrh	r2, [r0, #18]
    new_x -= par_abs_x;
    af4a:	1a71      	subs	r1, r6, r1
    new_y -= par_abs_y;
    af4c:	1aa2      	subs	r2, r4, r2
    lv_obj_set_pos(obj, new_x, new_y);
    af4e:	b212      	sxth	r2, r2
    af50:	b209      	sxth	r1, r1
    af52:	4638      	mov	r0, r7
    af54:	f7ff ff2e 	bl	adb4 <lv_obj_set_pos>
    obj->realign.origo_align = 0;
    af58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    obj->realign.align       = align;
    af5c:	f887 903c 	strb.w	r9, [r7, #60]	; 0x3c
    obj->realign.origo_align = 0;
    af60:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_mod;
    af64:	f8a7 a038 	strh.w	sl, [r7, #56]	; 0x38
    obj->realign.yofs        = y_mod;
    af68:	f8a7 b03a 	strh.w	fp, [r7, #58]	; 0x3a
    obj->realign.base        = base;
    af6c:	637d      	str	r5, [r7, #52]	; 0x34
    obj->realign.origo_align = 0;
    af6e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
}
    af72:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
    af76:	4628      	mov	r0, r5
    af78:	f7ff fe20 	bl	abbc <lv_obj_get_width>
    af7c:	4606      	mov	r6, r0
    af7e:	4638      	mov	r0, r7
    af80:	f7ff fe1c 	bl	abbc <lv_obj_get_width>
    af84:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
    af88:	eb00 76d0 	add.w	r6, r0, r0, lsr #31
    af8c:	1076      	asrs	r6, r6, #1
    af8e:	ebc6 0061 	rsb	r0, r6, r1, asr #1
            new_x = -lv_obj_get_width(obj);
    af92:	b206      	sxth	r6, r0
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
    af94:	4628      	mov	r0, r5
    af96:	f7ff fe1f 	bl	abd8 <lv_obj_get_height>
    af9a:	4604      	mov	r4, r0
    af9c:	4638      	mov	r0, r7
    af9e:	f7ff fe1b 	bl	abd8 <lv_obj_get_height>
    afa2:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
    afa6:	eb00 74d0 	add.w	r4, r0, r0, lsr #31
    afaa:	1064      	asrs	r4, r4, #1
    afac:	ebc4 0062 	rsb	r0, r4, r2, asr #1
    afb0:	e074      	b.n	b09c <lv_obj_align+0x1f0>
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
    afb2:	4628      	mov	r0, r5
    afb4:	f7ff fe02 	bl	abbc <lv_obj_get_width>
    afb8:	4606      	mov	r6, r0
    afba:	4638      	mov	r0, r7
    afbc:	f7ff fdfe 	bl	abbc <lv_obj_get_width>
    afc0:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
    afc4:	eb00 76d0 	add.w	r6, r0, r0, lsr #31
    afc8:	1076      	asrs	r6, r6, #1
    afca:	ebc6 0061 	rsb	r0, r6, r1, asr #1
            new_x = -lv_obj_get_width(obj);
    afce:	b206      	sxth	r6, r0
            new_y = 0;
    afd0:	2400      	movs	r4, #0
            break;
    afd2:	e7af      	b.n	af34 <lv_obj_align+0x88>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
    afd4:	4628      	mov	r0, r5
    afd6:	f7ff fdf1 	bl	abbc <lv_obj_get_width>
    afda:	4606      	mov	r6, r0
    afdc:	4638      	mov	r0, r7
    afde:	f7ff fded 	bl	abbc <lv_obj_get_width>
    afe2:	1a30      	subs	r0, r6, r0
    afe4:	e7f3      	b.n	afce <lv_obj_align+0x122>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
    afe6:	4628      	mov	r0, r5
    afe8:	f7ff fdf6 	bl	abd8 <lv_obj_get_height>
    afec:	4604      	mov	r4, r0
    afee:	4638      	mov	r0, r7
    aff0:	f7ff fdf2 	bl	abd8 <lv_obj_get_height>
    aff4:	1a20      	subs	r0, r4, r0
    aff6:	b204      	sxth	r4, r0
    aff8:	e79b      	b.n	af32 <lv_obj_align+0x86>
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
    affa:	4628      	mov	r0, r5
    affc:	f7ff fdde 	bl	abbc <lv_obj_get_width>
    b000:	4606      	mov	r6, r0
    b002:	4638      	mov	r0, r7
    b004:	f7ff fdda 	bl	abbc <lv_obj_get_width>
    b008:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
    b00c:	eb00 76d0 	add.w	r6, r0, r0, lsr #31
    b010:	1076      	asrs	r6, r6, #1
    b012:	ebc6 0061 	rsb	r0, r6, r1, asr #1
            new_x = -lv_obj_get_width(obj);
    b016:	b206      	sxth	r6, r0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
    b018:	4628      	mov	r0, r5
    b01a:	f7ff fddd 	bl	abd8 <lv_obj_get_height>
    b01e:	4604      	mov	r4, r0
    b020:	4638      	mov	r0, r7
    b022:	f7ff fdd9 	bl	abd8 <lv_obj_get_height>
    b026:	1a20      	subs	r0, r4, r0
    b028:	e038      	b.n	b09c <lv_obj_align+0x1f0>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
    b02a:	4628      	mov	r0, r5
    b02c:	f7ff fdc6 	bl	abbc <lv_obj_get_width>
    b030:	4606      	mov	r6, r0
    b032:	4638      	mov	r0, r7
    b034:	f7ff fdc2 	bl	abbc <lv_obj_get_width>
    b038:	1a30      	subs	r0, r6, r0
    b03a:	e7ec      	b.n	b016 <lv_obj_align+0x16a>
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
    b03c:	4628      	mov	r0, r5
    b03e:	f7ff fdcb 	bl	abd8 <lv_obj_get_height>
    b042:	4604      	mov	r4, r0
    b044:	4638      	mov	r0, r7
    b046:	f7ff fdc7 	bl	abd8 <lv_obj_get_height>
    b04a:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
    b04e:	eb00 74d0 	add.w	r4, r0, r0, lsr #31
    b052:	1064      	asrs	r4, r4, #1
    b054:	ebc4 0062 	rsb	r0, r4, r2, asr #1
    b058:	e7cd      	b.n	aff6 <lv_obj_align+0x14a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
    b05a:	4628      	mov	r0, r5
    b05c:	f7ff fdae 	bl	abbc <lv_obj_get_width>
    b060:	4606      	mov	r6, r0
    b062:	4638      	mov	r0, r7
    b064:	f7ff fdaa 	bl	abbc <lv_obj_get_width>
    b068:	1a30      	subs	r0, r6, r0
    b06a:	e792      	b.n	af92 <lv_obj_align+0xe6>
            new_y = -lv_obj_get_height(obj);
    b06c:	4638      	mov	r0, r7
    b06e:	f7ff fdb3 	bl	abd8 <lv_obj_get_height>
    b072:	4240      	negs	r0, r0
    b074:	e7bf      	b.n	aff6 <lv_obj_align+0x14a>
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
    b076:	4628      	mov	r0, r5
    b078:	f7ff fda0 	bl	abbc <lv_obj_get_width>
    b07c:	4606      	mov	r6, r0
    b07e:	4638      	mov	r0, r7
    b080:	f7ff fd9c 	bl	abbc <lv_obj_get_width>
    b084:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
    b088:	eb00 76d0 	add.w	r6, r0, r0, lsr #31
    b08c:	1076      	asrs	r6, r6, #1
    b08e:	ebc6 0061 	rsb	r0, r6, r1, asr #1
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
    b092:	b206      	sxth	r6, r0
            new_y = -lv_obj_get_height(obj);
    b094:	4638      	mov	r0, r7
    b096:	f7ff fd9f 	bl	abd8 <lv_obj_get_height>
    b09a:	4240      	negs	r0, r0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
    b09c:	b204      	sxth	r4, r0
            break;
    b09e:	e749      	b.n	af34 <lv_obj_align+0x88>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
    b0a0:	4628      	mov	r0, r5
    b0a2:	f7ff fd8b 	bl	abbc <lv_obj_get_width>
    b0a6:	4606      	mov	r6, r0
    b0a8:	4638      	mov	r0, r7
    b0aa:	f7ff fd87 	bl	abbc <lv_obj_get_width>
    b0ae:	1a30      	subs	r0, r6, r0
    b0b0:	e7ef      	b.n	b092 <lv_obj_align+0x1e6>
            new_y = lv_obj_get_height(base);
    b0b2:	4628      	mov	r0, r5
    b0b4:	f7ff fd90 	bl	abd8 <lv_obj_get_height>
    b0b8:	4604      	mov	r4, r0
            break;
    b0ba:	e73a      	b.n	af32 <lv_obj_align+0x86>
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
    b0bc:	4628      	mov	r0, r5
    b0be:	f7ff fd7d 	bl	abbc <lv_obj_get_width>
    b0c2:	4606      	mov	r6, r0
    b0c4:	4638      	mov	r0, r7
    b0c6:	f7ff fd79 	bl	abbc <lv_obj_get_width>
    b0ca:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
    b0ce:	eb00 76d0 	add.w	r6, r0, r0, lsr #31
    b0d2:	1076      	asrs	r6, r6, #1
    b0d4:	ebc6 0061 	rsb	r0, r6, r1, asr #1
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
    b0d8:	b206      	sxth	r6, r0
            new_y = lv_obj_get_height(base);
    b0da:	4628      	mov	r0, r5
    b0dc:	f7ff fd7c 	bl	abd8 <lv_obj_get_height>
    b0e0:	4604      	mov	r4, r0
            break;
    b0e2:	e727      	b.n	af34 <lv_obj_align+0x88>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
    b0e4:	4628      	mov	r0, r5
    b0e6:	f7ff fd69 	bl	abbc <lv_obj_get_width>
    b0ea:	4606      	mov	r6, r0
    b0ec:	4638      	mov	r0, r7
    b0ee:	f7ff fd65 	bl	abbc <lv_obj_get_width>
    b0f2:	1a30      	subs	r0, r6, r0
    b0f4:	e7f0      	b.n	b0d8 <lv_obj_align+0x22c>
            new_x = -lv_obj_get_width(obj);
    b0f6:	4638      	mov	r0, r7
    b0f8:	f7ff fd60 	bl	abbc <lv_obj_get_width>
    b0fc:	4240      	negs	r0, r0
    b0fe:	e766      	b.n	afce <lv_obj_align+0x122>
            new_x = -lv_obj_get_width(obj);
    b100:	4638      	mov	r0, r7
    b102:	f7ff fd5b 	bl	abbc <lv_obj_get_width>
    b106:	4240      	negs	r0, r0
    b108:	e743      	b.n	af92 <lv_obj_align+0xe6>
            new_x = -lv_obj_get_width(obj);
    b10a:	4638      	mov	r0, r7
    b10c:	f7ff fd56 	bl	abbc <lv_obj_get_width>
    b110:	4240      	negs	r0, r0
    b112:	e780      	b.n	b016 <lv_obj_align+0x16a>
            new_x = lv_obj_get_width(base);
    b114:	4628      	mov	r0, r5
    b116:	f7ff fd51 	bl	abbc <lv_obj_get_width>
    b11a:	4606      	mov	r6, r0
    b11c:	e758      	b.n	afd0 <lv_obj_align+0x124>
            new_x = lv_obj_get_width(base);
    b11e:	4628      	mov	r0, r5
    b120:	f7ff fd4c 	bl	abbc <lv_obj_get_width>
    b124:	4606      	mov	r6, r0
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
    b126:	4628      	mov	r0, r5
    b128:	f7ff fd56 	bl	abd8 <lv_obj_get_height>
    b12c:	4604      	mov	r4, r0
    b12e:	4638      	mov	r0, r7
    b130:	f7ff fd52 	bl	abd8 <lv_obj_get_height>
    b134:	4603      	mov	r3, r0
    b136:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    b13a:	eb04 70d4 	add.w	r0, r4, r4, lsr #31
    b13e:	105c      	asrs	r4, r3, #1
    b140:	ebc4 0060 	rsb	r0, r4, r0, asr #1
    b144:	e7aa      	b.n	b09c <lv_obj_align+0x1f0>
            new_x = lv_obj_get_width(base);
    b146:	4628      	mov	r0, r5
    b148:	f7ff fd38 	bl	abbc <lv_obj_get_width>
    b14c:	4606      	mov	r6, r0
    b14e:	e763      	b.n	b018 <lv_obj_align+0x16c>
    b150:	0001de08 	.word	0x0001de08

0000b154 <lv_obj_align_origo>:
{
    b154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b158:	469a      	mov	sl, r3
    b15a:	f9bd b030 	ldrsh.w	fp, [sp, #48]	; 0x30
    b15e:	9201      	str	r2, [sp, #4]
    b160:	4680      	mov	r8, r0
    b162:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b164:	f7ff fadc 	bl	a720 <lv_debug_check_null>
    b168:	4603      	mov	r3, r0
    b16a:	b920      	cbnz	r0, b176 <lv_obj_align_origo+0x22>
    b16c:	484e      	ldr	r0, [pc, #312]	; (b2a8 <lv_obj_align_origo+0x154>)
    b16e:	4642      	mov	r2, r8
    b170:	f7ff fae6 	bl	a740 <lv_debug_log_error>
    b174:	e7fe      	b.n	b174 <lv_obj_align_origo+0x20>
    lv_coord_t new_x = lv_obj_get_x(obj);
    b176:	4640      	mov	r0, r8
    b178:	f7ff fcec 	bl	ab54 <lv_obj_get_x>
    b17c:	4604      	mov	r4, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
    b17e:	4640      	mov	r0, r8
    b180:	f7ff fd02 	bl	ab88 <lv_obj_get_y>
    b184:	4681      	mov	r9, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
    b186:	4640      	mov	r0, r8
    b188:	f7ff fd18 	bl	abbc <lv_obj_get_width>
    b18c:	4607      	mov	r7, r0
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
    b18e:	4640      	mov	r0, r8
    b190:	f7ff fd22 	bl	abd8 <lv_obj_get_height>
    b194:	4606      	mov	r6, r0
    if(base == NULL) {
    b196:	b91d      	cbnz	r5, b1a0 <lv_obj_align_origo+0x4c>
        base = lv_obj_get_parent(obj);
    b198:	4640      	mov	r0, r8
    b19a:	f7ff fc6d 	bl	aa78 <lv_obj_get_parent>
    b19e:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    b1a0:	4628      	mov	r0, r5
    b1a2:	f7ff fabd 	bl	a720 <lv_debug_check_null>
    b1a6:	4603      	mov	r3, r0
    b1a8:	b920      	cbnz	r0, b1b4 <lv_obj_align_origo+0x60>
    b1aa:	483f      	ldr	r0, [pc, #252]	; (b2a8 <lv_obj_align_origo+0x154>)
    b1ac:	462a      	mov	r2, r5
    b1ae:	f7ff fac7 	bl	a740 <lv_debug_log_error>
    b1b2:	e7fe      	b.n	b1b2 <lv_obj_align_origo+0x5e>
    b1b4:	9b01      	ldr	r3, [sp, #4]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
    b1b6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
    b1ba:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
    b1be:	f347 074f 	sbfx	r7, r7, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
    b1c2:	f346 064f 	sbfx	r6, r6, #1, #16
    switch(align) {
    b1c6:	2b14      	cmp	r3, #20
    b1c8:	d827      	bhi.n	b21a <lv_obj_align_origo+0xc6>
    b1ca:	e8df f003 	tbb	[pc, r3]
    b1ce:	570b      	.short	0x570b
    b1d0:	4a5b5d1b 	.word	0x4a5b5d1b
    b1d4:	57625967 	.word	0x57625967
    b1d8:	4a5b5d1b 	.word	0x4a5b5d1b
    b1dc:	5b595767 	.word	0x5b595767
    b1e0:	625d      	.short	0x625d
    b1e2:	67          	.byte	0x67
    b1e3:	00          	.byte	0x00
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    b1e4:	4628      	mov	r0, r5
    b1e6:	f7ff fce9 	bl	abbc <lv_obj_get_width>
    b1ea:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    b1ee:	ebc7 0460 	rsb	r4, r7, r0, asr #1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    b1f2:	4628      	mov	r0, r5
    b1f4:	f7ff fcf0 	bl	abd8 <lv_obj_get_height>
    b1f8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            new_x = lv_obj_get_width(base) - obj_w_half;
    b1fc:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    b1fe:	ebc6 0660 	rsb	r6, r6, r0, asr #1
    b202:	e008      	b.n	b216 <lv_obj_align_origo+0xc2>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    b204:	4628      	mov	r0, r5
    b206:	f7ff fcd9 	bl	abbc <lv_obj_get_width>
    b20a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    b20e:	ebc7 0460 	rsb	r4, r7, r0, asr #1
            new_x = lv_obj_get_width(base) - obj_w_half;
    b212:	b224      	sxth	r4, r4
            new_y = -obj_h_half;
    b214:	4276      	negs	r6, r6
            new_y = lv_obj_get_height(base) - obj_h_half;
    b216:	fa0f f986 	sxth.w	r9, r6
    lv_obj_t * par        = lv_obj_get_parent(obj);
    b21a:	4640      	mov	r0, r8
    b21c:	f7ff fc2c 	bl	aa78 <lv_obj_get_parent>
    new_x += x_mod + base_abs_x;
    b220:	8a29      	ldrh	r1, [r5, #16]
    new_y += y_mod + base_abs_y;
    b222:	8a6e      	ldrh	r6, [r5, #18]
    new_y -= par_abs_y;
    b224:	8a42      	ldrh	r2, [r0, #18]
    new_x += x_mod + base_abs_x;
    b226:	4451      	add	r1, sl
    b228:	440c      	add	r4, r1
    new_y += y_mod + base_abs_y;
    b22a:	445e      	add	r6, fp
    new_x -= par_abs_x;
    b22c:	8a01      	ldrh	r1, [r0, #16]
    new_y += y_mod + base_abs_y;
    b22e:	444e      	add	r6, r9
    new_x -= par_abs_x;
    b230:	1a61      	subs	r1, r4, r1
    new_y -= par_abs_y;
    b232:	1ab2      	subs	r2, r6, r2
    lv_obj_set_pos(obj, new_x, new_y);
    b234:	b212      	sxth	r2, r2
    b236:	b209      	sxth	r1, r1
    b238:	4640      	mov	r0, r8
    b23a:	f7ff fdbb 	bl	adb4 <lv_obj_set_pos>
    obj->realign.align       = align;
    b23e:	9b01      	ldr	r3, [sp, #4]
    b240:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
    obj->realign.origo_align = 1;
    b244:	f898 303d 	ldrb.w	r3, [r8, #61]	; 0x3d
    obj->realign.xofs        = x_mod;
    b248:	f8a8 a038 	strh.w	sl, [r8, #56]	; 0x38
    obj->realign.origo_align = 1;
    b24c:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.yofs        = y_mod;
    b250:	f8a8 b03a 	strh.w	fp, [r8, #58]	; 0x3a
    obj->realign.base        = base;
    b254:	f8c8 5034 	str.w	r5, [r8, #52]	; 0x34
    obj->realign.origo_align = 1;
    b258:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
}
    b25c:	b003      	add	sp, #12
    b25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    b262:	4628      	mov	r0, r5
    b264:	f7ff fcaa 	bl	abbc <lv_obj_get_width>
    b268:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    b26c:	ebc7 0460 	rsb	r4, r7, r0, asr #1
            new_y = lv_obj_get_height(base) - obj_h_half;
    b270:	4628      	mov	r0, r5
    b272:	f7ff fcb1 	bl	abd8 <lv_obj_get_height>
            new_x = lv_obj_get_width(base) - obj_w_half;
    b276:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) - obj_h_half;
    b278:	1b86      	subs	r6, r0, r6
    b27a:	e7cc      	b.n	b216 <lv_obj_align_origo+0xc2>
            new_x = -obj_w_half;
    b27c:	427c      	negs	r4, r7
    b27e:	e7c8      	b.n	b212 <lv_obj_align_origo+0xbe>
            new_x = -obj_w_half;
    b280:	427c      	negs	r4, r7
    b282:	e7b6      	b.n	b1f2 <lv_obj_align_origo+0x9e>
            new_x = -obj_w_half;
    b284:	427c      	negs	r4, r7
    b286:	e7f3      	b.n	b270 <lv_obj_align_origo+0x11c>
            new_x = lv_obj_get_width(base) - obj_w_half;
    b288:	4628      	mov	r0, r5
    b28a:	f7ff fc97 	bl	abbc <lv_obj_get_width>
    b28e:	1bc4      	subs	r4, r0, r7
    b290:	e7bf      	b.n	b212 <lv_obj_align_origo+0xbe>
            new_x = lv_obj_get_width(base) - obj_w_half;
    b292:	4628      	mov	r0, r5
    b294:	f7ff fc92 	bl	abbc <lv_obj_get_width>
    b298:	1bc4      	subs	r4, r0, r7
    b29a:	e7aa      	b.n	b1f2 <lv_obj_align_origo+0x9e>
            new_x = lv_obj_get_width(base) - obj_w_half;
    b29c:	4628      	mov	r0, r5
    b29e:	f7ff fc8d 	bl	abbc <lv_obj_get_width>
    b2a2:	1bc4      	subs	r4, r0, r7
    b2a4:	e7e4      	b.n	b270 <lv_obj_align_origo+0x11c>
    b2a6:	bf00      	nop
    b2a8:	0001de08 	.word	0x0001de08

0000b2ac <lv_obj_realign>:
{
    b2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b2ae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b2b0:	f7ff fa36 	bl	a720 <lv_debug_check_null>
    b2b4:	b910      	cbnz	r0, b2bc <lv_obj_realign+0x10>
    b2b6:	4620      	mov	r0, r4
    b2b8:	f7ff fa78 	bl	a7ac <lv_obj_get_child.part.0>
    if(obj->realign.origo_align)
    b2bc:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
    b2c0:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	; 0x3a
    b2c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b2c6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    b2ca:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    b2ce:	9000      	str	r0, [sp, #0]
    b2d0:	4620      	mov	r0, r4
    if(obj->realign.origo_align)
    b2d2:	07ac      	lsls	r4, r5, #30
    b2d4:	d503      	bpl.n	b2de <lv_obj_realign+0x32>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    b2d6:	f7ff ff3d 	bl	b154 <lv_obj_align_origo>
}
    b2da:	b003      	add	sp, #12
    b2dc:	bd30      	pop	{r4, r5, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    b2de:	f7ff fde5 	bl	aeac <lv_obj_align>
}
    b2e2:	e7fa      	b.n	b2da <lv_obj_realign+0x2e>

0000b2e4 <lv_obj_set_parent>:
{
    b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2e8:	4604      	mov	r4, r0
    b2ea:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b2ec:	f7ff fa18 	bl	a720 <lv_debug_check_null>
    b2f0:	4603      	mov	r3, r0
    b2f2:	b920      	cbnz	r0, b2fe <lv_obj_set_parent+0x1a>
    b2f4:	481d      	ldr	r0, [pc, #116]	; (b36c <lv_obj_set_parent+0x88>)
    b2f6:	4622      	mov	r2, r4
    b2f8:	f7ff fa22 	bl	a740 <lv_debug_log_error>
    b2fc:	e7fe      	b.n	b2fc <lv_obj_set_parent+0x18>
    LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
    b2fe:	4628      	mov	r0, r5
    b300:	f7ff fa0e 	bl	a720 <lv_debug_check_null>
    b304:	4603      	mov	r3, r0
    b306:	b920      	cbnz	r0, b312 <lv_obj_set_parent+0x2e>
    b308:	4818      	ldr	r0, [pc, #96]	; (b36c <lv_obj_set_parent+0x88>)
    b30a:	462a      	mov	r2, r5
    b30c:	f7ff fa18 	bl	a740 <lv_debug_log_error>
    b310:	e7fe      	b.n	b310 <lv_obj_set_parent+0x2c>
    if(obj->par == NULL) {
    b312:	6823      	ldr	r3, [r4, #0]
    b314:	b33b      	cbz	r3, b366 <lv_obj_set_parent+0x82>
    if(parent == NULL) {
    b316:	b335      	cbz	r5, b366 <lv_obj_set_parent+0x82>
    lv_obj_invalidate(obj);
    b318:	4620      	mov	r0, r4
    b31a:	f7ff fcbd 	bl	ac98 <lv_obj_invalidate>
    old_pos.x = lv_obj_get_x(obj);
    b31e:	4620      	mov	r0, r4
    b320:	f7ff fc18 	bl	ab54 <lv_obj_get_x>
    b324:	4607      	mov	r7, r0
    old_pos.y = lv_obj_get_y(obj);
    b326:	4620      	mov	r0, r4
    b328:	f7ff fc2e 	bl	ab88 <lv_obj_get_y>
    lv_obj_t * old_par = obj->par;
    b32c:	6826      	ldr	r6, [r4, #0]
    old_pos.y = lv_obj_get_y(obj);
    b32e:	4680      	mov	r8, r0
    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
    b330:	2301      	movs	r3, #1
    b332:	4622      	mov	r2, r4
    b334:	1d29      	adds	r1, r5, #4
    b336:	1d30      	adds	r0, r6, #4
    b338:	f7f8 f971 	bl	361e <lv_ll_chg_list>
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
    b33c:	4642      	mov	r2, r8
    b33e:	4639      	mov	r1, r7
    b340:	4620      	mov	r0, r4
    obj->par = parent;
    b342:	6025      	str	r5, [r4, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
    b344:	f7ff fd36 	bl	adb4 <lv_obj_set_pos>
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
    b348:	69f3      	ldr	r3, [r6, #28]
    b34a:	2200      	movs	r2, #0
    b34c:	2101      	movs	r1, #1
    b34e:	4630      	mov	r0, r6
    b350:	4798      	blx	r3
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
    b352:	69eb      	ldr	r3, [r5, #28]
    b354:	4622      	mov	r2, r4
    b356:	4628      	mov	r0, r5
    b358:	2101      	movs	r1, #1
    b35a:	4798      	blx	r3
    lv_obj_invalidate(obj);
    b35c:	4620      	mov	r0, r4
}
    b35e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(obj);
    b362:	f7ff bc99 	b.w	ac98 <lv_obj_invalidate>
}
    b366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b36a:	bf00      	nop
    b36c:	0001de08 	.word	0x0001de08

0000b370 <lv_obj_refresh_style>:
{
    b370:	b510      	push	{r4, lr}
    b372:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b374:	f7ff f9d4 	bl	a720 <lv_debug_check_null>
    b378:	4603      	mov	r3, r0
    b37a:	b920      	cbnz	r0, b386 <lv_obj_refresh_style+0x16>
    b37c:	4808      	ldr	r0, [pc, #32]	; (b3a0 <lv_obj_refresh_style+0x30>)
    b37e:	4622      	mov	r2, r4
    b380:	f7ff f9de 	bl	a740 <lv_debug_log_error>
    b384:	e7fe      	b.n	b384 <lv_obj_refresh_style+0x14>
    lv_obj_invalidate(obj);
    b386:	4620      	mov	r0, r4
    b388:	f7ff fc86 	bl	ac98 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
    b38c:	69e3      	ldr	r3, [r4, #28]
    b38e:	4620      	mov	r0, r4
    b390:	2200      	movs	r2, #0
    b392:	2104      	movs	r1, #4
    b394:	4798      	blx	r3
    lv_obj_invalidate(obj);
    b396:	4620      	mov	r0, r4
}
    b398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
    b39c:	f7ff bc7c 	b.w	ac98 <lv_obj_invalidate>
    b3a0:	0001de08 	.word	0x0001de08

0000b3a4 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
    b3a4:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    b3a6:	2100      	movs	r1, #0
{
    b3a8:	4605      	mov	r5, r0
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
    b3aa:	f7ff fbad 	bl	ab08 <lv_obj_get_child>
    b3ae:	4604      	mov	r4, r0
    while(child != NULL) {
    b3b0:	b900      	cbnz	r0, b3b4 <refresh_children_style+0x10>
    }
}
    b3b2:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
    b3b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b3b6:	b943      	cbnz	r3, b3ca <refresh_children_style+0x26>
            refresh_children_style(child); /*Check children too*/
    b3b8:	4620      	mov	r0, r4
    b3ba:	f7ff fff3 	bl	b3a4 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
    b3be:	4620      	mov	r0, r4
    b3c0:	f7ff ffd6 	bl	b370 <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
    b3c4:	4621      	mov	r1, r4
    b3c6:	4628      	mov	r0, r5
    b3c8:	e7ef      	b.n	b3aa <refresh_children_style+0x6>
        } else if(child->style_p->glass) {
    b3ca:	781b      	ldrb	r3, [r3, #0]
    b3cc:	07db      	lsls	r3, r3, #31
    b3ce:	d5f9      	bpl.n	b3c4 <refresh_children_style+0x20>
            refresh_children_style(child);
    b3d0:	4620      	mov	r0, r4
    b3d2:	f7ff ffe7 	bl	b3a4 <refresh_children_style>
    b3d6:	e7f5      	b.n	b3c4 <refresh_children_style+0x20>

0000b3d8 <lv_obj_set_style>:
{
    b3d8:	b538      	push	{r3, r4, r5, lr}
    b3da:	4604      	mov	r4, r0
    b3dc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b3de:	f7ff f99f 	bl	a720 <lv_debug_check_null>
    b3e2:	4603      	mov	r3, r0
    b3e4:	b920      	cbnz	r0, b3f0 <lv_obj_set_style+0x18>
    b3e6:	480c      	ldr	r0, [pc, #48]	; (b418 <lv_obj_set_style+0x40>)
    b3e8:	4622      	mov	r2, r4
    b3ea:	f7ff f9a9 	bl	a740 <lv_debug_log_error>
    b3ee:	e7fe      	b.n	b3ee <lv_obj_set_style+0x16>
    LV_ASSERT_STYLE(style);
    b3f0:	4628      	mov	r0, r5
    b3f2:	f7ff f999 	bl	a728 <lv_debug_check_style>
    b3f6:	4603      	mov	r3, r0
    b3f8:	b920      	cbnz	r0, b404 <lv_obj_set_style+0x2c>
    b3fa:	4808      	ldr	r0, [pc, #32]	; (b41c <lv_obj_set_style+0x44>)
    b3fc:	462a      	mov	r2, r5
    b3fe:	f7ff f99f 	bl	a740 <lv_debug_log_error>
    b402:	e7fe      	b.n	b402 <lv_obj_set_style+0x2a>
    refresh_children_style(obj);
    b404:	4620      	mov	r0, r4
    obj->style_p = style;
    b406:	62a5      	str	r5, [r4, #40]	; 0x28
    refresh_children_style(obj);
    b408:	f7ff ffcc 	bl	b3a4 <refresh_children_style>
    lv_obj_refresh_style(obj);
    b40c:	4620      	mov	r0, r4
}
    b40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_refresh_style(obj);
    b412:	f7ff bfad 	b.w	b370 <lv_obj_refresh_style>
    b416:	bf00      	nop
    b418:	0001de08 	.word	0x0001de08
    b41c:	0001de15 	.word	0x0001de15

0000b420 <report_style_mod_core>:
{
    b420:	b570      	push	{r4, r5, r6, lr}
    LV_LL_READ(obj->child_ll, i)
    b422:	1d0e      	adds	r6, r1, #4
{
    b424:	4605      	mov	r5, r0
    LV_LL_READ(obj->child_ll, i)
    b426:	4630      	mov	r0, r6
    b428:	f7f8 f851 	bl	34ce <lv_ll_get_head>
    b42c:	4604      	mov	r4, r0
    b42e:	b900      	cbnz	r0, b432 <report_style_mod_core+0x12>
}
    b430:	bd70      	pop	{r4, r5, r6, pc}
        if(i->style_p == style_p || style_p == NULL) {
    b432:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b434:	42ab      	cmp	r3, r5
    b436:	d000      	beq.n	b43a <report_style_mod_core+0x1a>
    b438:	b92d      	cbnz	r5, b446 <report_style_mod_core+0x26>
            refresh_children_style(i);
    b43a:	4620      	mov	r0, r4
    b43c:	f7ff ffb2 	bl	b3a4 <refresh_children_style>
            lv_obj_refresh_style(i);
    b440:	4620      	mov	r0, r4
    b442:	f7ff ff95 	bl	b370 <lv_obj_refresh_style>
        report_style_mod_core(style_p, i);
    b446:	4621      	mov	r1, r4
    b448:	4628      	mov	r0, r5
    b44a:	f7ff ffe9 	bl	b420 <report_style_mod_core>
    LV_LL_READ(obj->child_ll, i)
    b44e:	4621      	mov	r1, r4
    b450:	4630      	mov	r0, r6
    b452:	f7f8 f842 	bl	34da <lv_ll_get_next>
    b456:	e7e9      	b.n	b42c <report_style_mod_core+0xc>

0000b458 <lv_obj_report_style_mod>:
{
    b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b45a:	4606      	mov	r6, r0
    LV_ASSERT_STYLE(style);
    b45c:	f7ff f964 	bl	a728 <lv_debug_check_style>
    b460:	4603      	mov	r3, r0
    b462:	b920      	cbnz	r0, b46e <lv_obj_report_style_mod+0x16>
    b464:	4811      	ldr	r0, [pc, #68]	; (b4ac <lv_obj_report_style_mod+0x54>)
    b466:	4632      	mov	r2, r6
    b468:	f7ff f96a 	bl	a740 <lv_debug_log_error>
    b46c:	e7fe      	b.n	b46c <lv_obj_report_style_mod+0x14>
    lv_disp_t * d = lv_disp_get_next(NULL);
    b46e:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
    b470:	f7fc fe7e 	bl	8170 <lv_disp_get_next>
    b474:	4605      	mov	r5, r0
    while(d) {
    b476:	b900      	cbnz	r0, b47a <lv_obj_report_style_mod+0x22>
}
    b478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_LL_READ(d->scr_ll, i)
    b47a:	f105 0724 	add.w	r7, r5, #36	; 0x24
    b47e:	4638      	mov	r0, r7
    b480:	f7f8 f825 	bl	34ce <lv_ll_get_head>
    b484:	4604      	mov	r4, r0
    b486:	b908      	cbnz	r0, b48c <lv_obj_report_style_mod+0x34>
        d = lv_disp_get_next(d);
    b488:	4628      	mov	r0, r5
    b48a:	e7f1      	b.n	b470 <lv_obj_report_style_mod+0x18>
            if(i->style_p == style || style == NULL) {
    b48c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b48e:	42b3      	cmp	r3, r6
    b490:	d000      	beq.n	b494 <lv_obj_report_style_mod+0x3c>
    b492:	b916      	cbnz	r6, b49a <lv_obj_report_style_mod+0x42>
                lv_obj_refresh_style(i);
    b494:	4620      	mov	r0, r4
    b496:	f7ff ff6b 	bl	b370 <lv_obj_refresh_style>
            report_style_mod_core(style, i);
    b49a:	4621      	mov	r1, r4
    b49c:	4630      	mov	r0, r6
    b49e:	f7ff ffbf 	bl	b420 <report_style_mod_core>
        LV_LL_READ(d->scr_ll, i)
    b4a2:	4621      	mov	r1, r4
    b4a4:	4638      	mov	r0, r7
    b4a6:	f7f8 f818 	bl	34da <lv_ll_get_next>
    b4aa:	e7eb      	b.n	b484 <lv_obj_report_style_mod+0x2c>
    b4ac:	0001de15 	.word	0x0001de15

0000b4b0 <lv_obj_refresh_ext_draw_pad>:
{
    b4b0:	b510      	push	{r4, lr}
    b4b2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b4b4:	f7ff f934 	bl	a720 <lv_debug_check_null>
    b4b8:	b910      	cbnz	r0, b4c0 <lv_obj_refresh_ext_draw_pad+0x10>
    b4ba:	4620      	mov	r0, r4
    b4bc:	f7ff f976 	bl	a7ac <lv_obj_get_child.part.0>
    obj->ext_draw_pad = 0;
    b4c0:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
    b4c2:	69e3      	ldr	r3, [r4, #28]
    obj->ext_draw_pad = 0;
    b4c4:	8622      	strh	r2, [r4, #48]	; 0x30
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
    b4c6:	4620      	mov	r0, r4
    b4c8:	2106      	movs	r1, #6
    b4ca:	4798      	blx	r3
    lv_obj_invalidate(obj);
    b4cc:	4620      	mov	r0, r4
}
    b4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
    b4d2:	f7ff bbe1 	b.w	ac98 <lv_obj_invalidate>
	...

0000b4d8 <lv_obj_create>:
{
    b4d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b4da:	460d      	mov	r5, r1
    if(parent == NULL) {
    b4dc:	4606      	mov	r6, r0
    b4de:	2800      	cmp	r0, #0
    b4e0:	d14e      	bne.n	b580 <lv_obj_create+0xa8>
        lv_disp_t * disp = lv_disp_get_default();
    b4e2:	f7fc fe0b 	bl	80fc <lv_disp_get_default>
        if(!disp) {
    b4e6:	b918      	cbnz	r0, b4f0 <lv_obj_create+0x18>
            return NULL;
    b4e8:	2400      	movs	r4, #0
}
    b4ea:	4620      	mov	r0, r4
    b4ec:	b002      	add	sp, #8
    b4ee:	bd70      	pop	{r4, r5, r6, pc}
        new_obj = lv_ll_ins_head(&disp->scr_ll);
    b4f0:	3024      	adds	r0, #36	; 0x24
    b4f2:	f7f7 ffb0 	bl	3456 <lv_ll_ins_head>
    b4f6:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    b4f8:	f7ff f912 	bl	a720 <lv_debug_check_null>
    b4fc:	4603      	mov	r3, r0
    b4fe:	b920      	cbnz	r0, b50a <lv_obj_create+0x32>
    b500:	4895      	ldr	r0, [pc, #596]	; (b758 <lv_obj_create+0x280>)
    b502:	4622      	mov	r2, r4
    b504:	f7ff f91c 	bl	a740 <lv_debug_log_error>
    b508:	e7fe      	b.n	b508 <lv_obj_create+0x30>
        if(new_obj == NULL) return NULL;
    b50a:	2c00      	cmp	r4, #0
    b50c:	d0ec      	beq.n	b4e8 <lv_obj_create+0x10>
        new_obj->par = NULL; /*Screens has no a parent*/
    b50e:	4620      	mov	r0, r4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    b510:	2140      	movs	r1, #64	; 0x40
        new_obj->par = NULL; /*Screens has no a parent*/
    b512:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    b516:	f7f7 ff94 	bl	3442 <lv_ll_init>
        new_obj->signal_cb = lv_obj_signal;
    b51a:	4b90      	ldr	r3, [pc, #576]	; (b75c <lv_obj_create+0x284>)
    b51c:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    b51e:	4b90      	ldr	r3, [pc, #576]	; (b760 <lv_obj_create+0x288>)
    b520:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    b522:	61a6      	str	r6, [r4, #24]
        new_obj->coords.x1    = 0;
    b524:	6126      	str	r6, [r4, #16]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
    b526:	4630      	mov	r0, r6
    b528:	f7fc fdee 	bl	8108 <lv_disp_get_hor_res>
    b52c:	3801      	subs	r0, #1
    b52e:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
    b530:	4630      	mov	r0, r6
    b532:	f7fc fdfb 	bl	812c <lv_disp_get_ver_res>
        new_obj->realign.align        = LV_ALIGN_CENTER;
    b536:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
        new_obj->ext_draw_pad = 0;
    b538:	8626      	strh	r6, [r4, #48]	; 0x30
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
    b53a:	3801      	subs	r0, #1
        new_obj->realign.align        = LV_ALIGN_CENTER;
    b53c:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
        new_obj->realign.xofs         = 0;
    b540:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
    b544:	82e0      	strh	r0, [r4, #22]
        new_obj->realign.align        = LV_ALIGN_CENTER;
    b546:	87a3      	strh	r3, [r4, #60]	; 0x3c
        lv_theme_t * th = lv_theme_get_current();
    b548:	f7fd fd08 	bl	8f5c <lv_theme_get_current>
        if(th) {
    b54c:	b1b0      	cbz	r0, b57c <lv_obj_create+0xa4>
            new_obj->style_p = th->style.scr;
    b54e:	6803      	ldr	r3, [r0, #0]
    b550:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->click        = 0;
    b552:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b554:	f403 4303 	and.w	r3, r3, #33536	; 0x8300
    b558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    b55c:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->ext_attr = NULL;
    b55e:	2300      	movs	r3, #0
    b560:	6263      	str	r3, [r4, #36]	; 0x24
    if(copy != NULL) {
    b562:	2d00      	cmp	r5, #0
    b564:	d0c1      	beq.n	b4ea <lv_obj_create+0x12>
        LV_ASSERT_OBJ(copy, LV_OBJX_NAME);
    b566:	4628      	mov	r0, r5
    b568:	f7ff f8da 	bl	a720 <lv_debug_check_null>
    b56c:	4603      	mov	r3, r0
    b56e:	2800      	cmp	r0, #0
    b570:	d15d      	bne.n	b62e <lv_obj_create+0x156>
    b572:	487c      	ldr	r0, [pc, #496]	; (b764 <lv_obj_create+0x28c>)
    b574:	462a      	mov	r2, r5
    b576:	f7ff f8e3 	bl	a740 <lv_debug_log_error>
    b57a:	e7fe      	b.n	b57a <lv_obj_create+0xa2>
            new_obj->style_p = &lv_style_scr;
    b57c:	4b7a      	ldr	r3, [pc, #488]	; (b768 <lv_obj_create+0x290>)
    b57e:	e7e7      	b.n	b550 <lv_obj_create+0x78>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
    b580:	f7ff f8ce 	bl	a720 <lv_debug_check_null>
    b584:	4603      	mov	r3, r0
    b586:	b920      	cbnz	r0, b592 <lv_obj_create+0xba>
    b588:	4876      	ldr	r0, [pc, #472]	; (b764 <lv_obj_create+0x28c>)
    b58a:	4632      	mov	r2, r6
    b58c:	f7ff f8d8 	bl	a740 <lv_debug_log_error>
    b590:	e7fe      	b.n	b590 <lv_obj_create+0xb8>
        new_obj = lv_ll_ins_head(&parent->child_ll);
    b592:	1d30      	adds	r0, r6, #4
    b594:	f7f7 ff5f 	bl	3456 <lv_ll_ins_head>
    b598:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    b59a:	f7ff f8c1 	bl	a720 <lv_debug_check_null>
    b59e:	4603      	mov	r3, r0
    b5a0:	b920      	cbnz	r0, b5ac <lv_obj_create+0xd4>
    b5a2:	486d      	ldr	r0, [pc, #436]	; (b758 <lv_obj_create+0x280>)
    b5a4:	4622      	mov	r2, r4
    b5a6:	f7ff f8cb 	bl	a740 <lv_debug_log_error>
    b5aa:	e7fe      	b.n	b5aa <lv_obj_create+0xd2>
        if(new_obj == NULL) return NULL;
    b5ac:	2c00      	cmp	r4, #0
    b5ae:	d09b      	beq.n	b4e8 <lv_obj_create+0x10>
        new_obj->par = parent; /*Set the parent*/
    b5b0:	4620      	mov	r0, r4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    b5b2:	2140      	movs	r1, #64	; 0x40
        new_obj->par = parent; /*Set the parent*/
    b5b4:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    b5b8:	f7f7 ff43 	bl	3442 <lv_ll_init>
        new_obj->signal_cb = lv_obj_signal;
    b5bc:	4b67      	ldr	r3, [pc, #412]	; (b75c <lv_obj_create+0x284>)
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    b5be:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
        new_obj->signal_cb = lv_obj_signal;
    b5c2:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    b5c4:	4b66      	ldr	r3, [pc, #408]	; (b760 <lv_obj_create+0x288>)
    b5c6:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    b5c8:	2300      	movs	r3, #0
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    b5ca:	f363 0283 	bfi	r2, r3, #2, #2
    b5ce:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
        new_obj->coords.y1    = parent->coords.y1;
    b5d2:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
    b5d6:	8262      	strh	r2, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    b5d8:	8a72      	ldrh	r2, [r6, #18]
        new_obj->event_cb = NULL;
    b5da:	61a3      	str	r3, [r4, #24]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    b5dc:	326e      	adds	r2, #110	; 0x6e
    b5de:	82e2      	strh	r2, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
    b5e0:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
    b5e4:	8222      	strh	r2, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    b5e6:	8a32      	ldrh	r2, [r6, #16]
        new_obj->ext_draw_pad = 0;
    b5e8:	8623      	strh	r3, [r4, #48]	; 0x30
        new_obj->realign.xofs         = 0;
    b5ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
    b5ee:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    b5f0:	32a5      	adds	r2, #165	; 0xa5
        new_obj->realign.align        = LV_ALIGN_CENTER;
    b5f2:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    b5f6:	82a2      	strh	r2, [r4, #20]
        new_obj->realign.align        = LV_ALIGN_CENTER;
    b5f8:	87a3      	strh	r3, [r4, #60]	; 0x3c
        lv_theme_t * th = lv_theme_get_current();
    b5fa:	f7fd fcaf 	bl	8f5c <lv_theme_get_current>
        if(th) {
    b5fe:	b1a0      	cbz	r0, b62a <lv_obj_create+0x152>
            new_obj->style_p = th->style.panel;
    b600:	6883      	ldr	r3, [r0, #8]
    b602:	62a3      	str	r3, [r4, #40]	; 0x28
        new_obj->click        = 1;
    b604:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b606:	f403 420c 	and.w	r2, r3, #35840	; 0x8c00
    b60a:	4b58      	ldr	r3, [pc, #352]	; (b76c <lv_obj_create+0x294>)
    b60c:	4313      	orrs	r3, r2
    b60e:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->ext_attr = NULL;
    b610:	2300      	movs	r3, #0
    b612:	6263      	str	r3, [r4, #36]	; 0x24
    if(copy != NULL) {
    b614:	2d00      	cmp	r5, #0
    b616:	d1a6      	bne.n	b566 <lv_obj_create+0x8e>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
    b618:	69f3      	ldr	r3, [r6, #28]
    b61a:	4622      	mov	r2, r4
    b61c:	2101      	movs	r1, #1
    b61e:	4630      	mov	r0, r6
    b620:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
    b622:	4620      	mov	r0, r4
    b624:	f7ff fb38 	bl	ac98 <lv_obj_invalidate>
    b628:	e75f      	b.n	b4ea <lv_obj_create+0x12>
            new_obj->style_p = &lv_style_plain_color;
    b62a:	4b51      	ldr	r3, [pc, #324]	; (b770 <lv_obj_create+0x298>)
    b62c:	e7e9      	b.n	b602 <lv_obj_create+0x12a>
    b62e:	2208      	movs	r2, #8
    b630:	f105 0110 	add.w	r1, r5, #16
    b634:	f104 0010 	add.w	r0, r4, #16
    b638:	f008 fe3c 	bl	142b4 <memcpy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
    b63c:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
    b640:	8623      	strh	r3, [r4, #48]	; 0x30
        new_obj->realign.align        = copy->realign.align;
    b642:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    b646:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->realign.xofs         = copy->realign.xofs;
    b64a:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
    b64e:	8723      	strh	r3, [r4, #56]	; 0x38
        new_obj->realign.yofs         = copy->realign.yofs;
    b650:	f9b5 303a 	ldrsh.w	r3, [r5, #58]	; 0x3a
    b654:	8763      	strh	r3, [r4, #58]	; 0x3a
        new_obj->realign.base         = copy->realign.base;
    b656:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        new_obj->realign.auto_realign = copy->realign.auto_realign;
    b658:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
        new_obj->realign.base         = copy->realign.base;
    b65c:	6363      	str	r3, [r4, #52]	; 0x34
        new_obj->realign.auto_realign = copy->realign.auto_realign;
    b65e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    b662:	f362 0300 	bfi	r3, r2, #0, #1
    b666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        new_obj->event_cb = copy->event_cb;
    b66a:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
    b66c:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
        new_obj->event_cb = copy->event_cb;
    b670:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
    b672:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    b676:	f362 0300 	bfi	r3, r2, #0, #1
    b67a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        new_obj->drag         = copy->drag;
    b67e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b682:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    b686:	f3c3 0340 	ubfx	r3, r3, #1, #1
    b68a:	f363 0241 	bfi	r2, r3, #1, #1
    b68e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->drag_dir     = copy->drag_dir;
    b692:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    b696:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    b69a:	f362 0301 	bfi	r3, r2, #0, #2
    b69e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        new_obj->drag_throw   = copy->drag_throw;
    b6a2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b6a6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    b6aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
    b6ae:	f363 0282 	bfi	r2, r3, #2, #1
    b6b2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->drag_parent  = copy->drag_parent;
    b6b6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b6ba:	b2d2      	uxtb	r2, r2
    b6bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    b6c0:	f363 02c3 	bfi	r2, r3, #3, #1
    b6c4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->hidden       = copy->hidden;
    b6c8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b6cc:	b2d2      	uxtb	r2, r2
    b6ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
    b6d2:	f363 1204 	bfi	r2, r3, #4, #1
    b6d6:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->top          = copy->top;
    b6da:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b6de:	b2d2      	uxtb	r2, r2
    b6e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
    b6e4:	f363 1245 	bfi	r2, r3, #5, #1
    b6e8:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->parent_event = copy->parent_event;
    b6ec:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b6f0:	b2d2      	uxtb	r2, r2
    b6f2:	09db      	lsrs	r3, r3, #7
    b6f4:	f363 12c7 	bfi	r2, r3, #7, #1
    b6f8:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->opa_scale_en = copy->opa_scale_en;
    b6fc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    b700:	b2d2      	uxtb	r2, r2
    b702:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b706:	f363 1286 	bfi	r2, r3, #6, #1
    b70a:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
        new_obj->protect      = copy->protect;
    b70e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    b712:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        new_obj->opa_scale    = copy->opa_scale;
    b716:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    b71a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        new_obj->style_p = copy->style_p;
    b71e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    b720:	62a3      	str	r3, [r4, #40]	; 0x28
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
    b722:	4628      	mov	r0, r5
    b724:	f7ff f9a8 	bl	aa78 <lv_obj_get_parent>
    b728:	b168      	cbz	r0, b746 <lv_obj_create+0x26e>
    b72a:	b166      	cbz	r6, b746 <lv_obj_create+0x26e>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
    b72c:	4628      	mov	r0, r5
    b72e:	f7ff fa11 	bl	ab54 <lv_obj_get_x>
    b732:	9001      	str	r0, [sp, #4]
    b734:	4628      	mov	r0, r5
    b736:	f7ff fa27 	bl	ab88 <lv_obj_get_y>
    b73a:	9901      	ldr	r1, [sp, #4]
    b73c:	4602      	mov	r2, r0
    b73e:	4620      	mov	r0, r4
    b740:	f7ff fb38 	bl	adb4 <lv_obj_set_pos>
    if(parent != NULL) {
    b744:	e768      	b.n	b618 <lv_obj_create+0x140>
            lv_obj_set_pos(new_obj, 0, 0);
    b746:	2200      	movs	r2, #0
    b748:	4611      	mov	r1, r2
    b74a:	4620      	mov	r0, r4
    b74c:	f7ff fb32 	bl	adb4 <lv_obj_set_pos>
    if(parent != NULL) {
    b750:	2e00      	cmp	r6, #0
    b752:	f47f af61 	bne.w	b618 <lv_obj_create+0x140>
    b756:	e6c8      	b.n	b4ea <lv_obj_create+0x12>
    b758:	0001a9b8 	.word	0x0001a9b8
    b75c:	0000ba8d 	.word	0x0000ba8d
    b760:	0000b949 	.word	0x0000b949
    b764:	0001de08 	.word	0x0001de08
    b768:	200061fc 	.word	0x200061fc
    b76c:	ff000301 	.word	0xff000301
    b770:	2000627c 	.word	0x2000627c

0000b774 <lv_obj_set_size>:
{
    b774:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b776:	4604      	mov	r4, r0
    b778:	460d      	mov	r5, r1
    b77a:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b77c:	f7fe ffd0 	bl	a720 <lv_debug_check_null>
    b780:	4603      	mov	r3, r0
    b782:	b920      	cbnz	r0, b78e <lv_obj_set_size+0x1a>
    b784:	4824      	ldr	r0, [pc, #144]	; (b818 <lv_obj_set_size+0xa4>)
    b786:	4622      	mov	r2, r4
    b788:	f7fe ffda 	bl	a740 <lv_debug_log_error>
    b78c:	e7fe      	b.n	b78c <lv_obj_set_size+0x18>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
    b78e:	4620      	mov	r0, r4
    b790:	f7ff fa14 	bl	abbc <lv_obj_get_width>
    b794:	42a8      	cmp	r0, r5
    b796:	d028      	beq.n	b7ea <lv_obj_set_size+0x76>
    lv_obj_invalidate(obj);
    b798:	4620      	mov	r0, r4
    b79a:	f7ff fa7d 	bl	ac98 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
    b79e:	4669      	mov	r1, sp
    b7a0:	4620      	mov	r0, r4
    b7a2:	f7ff f9c5 	bl	ab30 <lv_obj_get_coords>
    obj->coords.y2 = obj->coords.y1 + h - 1;
    b7a6:	8a62      	ldrh	r2, [r4, #18]
        obj->coords.x2 = obj->coords.x1 + w - 1;
    b7a8:	8a21      	ldrh	r1, [r4, #16]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
    b7aa:	69e3      	ldr	r3, [r4, #28]
    obj->coords.y2 = obj->coords.y1 + h - 1;
    b7ac:	3e01      	subs	r6, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
    b7ae:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
    b7b0:	4416      	add	r6, r2
        obj->coords.x2 = obj->coords.x1 + w - 1;
    b7b2:	440d      	add	r5, r1
    obj->coords.y2 = obj->coords.y1 + h - 1;
    b7b4:	82e6      	strh	r6, [r4, #22]
        obj->coords.x2 = obj->coords.x1 + w - 1;
    b7b6:	82a5      	strh	r5, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
    b7b8:	466a      	mov	r2, sp
    b7ba:	2102      	movs	r1, #2
    b7bc:	4620      	mov	r0, r4
    b7be:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
    b7c0:	4620      	mov	r0, r4
    b7c2:	f7ff f959 	bl	aa78 <lv_obj_get_parent>
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    b7c6:	b9b8      	cbnz	r0, b7f8 <lv_obj_set_size+0x84>
    LV_LL_READ(obj->child_ll, i)
    b7c8:	1d26      	adds	r6, r4, #4
    b7ca:	4630      	mov	r0, r6
    b7cc:	f7f7 fe7f 	bl	34ce <lv_ll_get_head>
    b7d0:	4605      	mov	r5, r0
    b7d2:	b9b0      	cbnz	r0, b802 <lv_obj_set_size+0x8e>
    lv_obj_invalidate(obj);
    b7d4:	4620      	mov	r0, r4
    b7d6:	f7ff fa5f 	bl	ac98 <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
    b7da:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    b7de:	07db      	lsls	r3, r3, #31
    b7e0:	d508      	bpl.n	b7f4 <lv_obj_set_size+0x80>
    b7e2:	4620      	mov	r0, r4
    b7e4:	f7ff fd62 	bl	b2ac <lv_obj_realign>
    b7e8:	e004      	b.n	b7f4 <lv_obj_set_size+0x80>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
    b7ea:	4620      	mov	r0, r4
    b7ec:	f7ff f9f4 	bl	abd8 <lv_obj_get_height>
    b7f0:	42b0      	cmp	r0, r6
    b7f2:	d1d1      	bne.n	b798 <lv_obj_set_size+0x24>
}
    b7f4:	b002      	add	sp, #8
    b7f6:	bd70      	pop	{r4, r5, r6, pc}
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    b7f8:	69c3      	ldr	r3, [r0, #28]
    b7fa:	4622      	mov	r2, r4
    b7fc:	2101      	movs	r1, #1
    b7fe:	4798      	blx	r3
    b800:	e7e2      	b.n	b7c8 <lv_obj_set_size+0x54>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
    b802:	69eb      	ldr	r3, [r5, #28]
    b804:	2200      	movs	r2, #0
    b806:	2103      	movs	r1, #3
    b808:	4628      	mov	r0, r5
    b80a:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
    b80c:	4629      	mov	r1, r5
    b80e:	4630      	mov	r0, r6
    b810:	f7f7 fe63 	bl	34da <lv_ll_get_next>
    b814:	e7dc      	b.n	b7d0 <lv_obj_set_size+0x5c>
    b816:	bf00      	nop
    b818:	0001de08 	.word	0x0001de08

0000b81c <lv_obj_set_width>:
{
    b81c:	b538      	push	{r3, r4, r5, lr}
    b81e:	4604      	mov	r4, r0
    b820:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b822:	f7fe ff7d 	bl	a720 <lv_debug_check_null>
    b826:	4603      	mov	r3, r0
    b828:	b920      	cbnz	r0, b834 <lv_obj_set_width+0x18>
    b82a:	4807      	ldr	r0, [pc, #28]	; (b848 <lv_obj_set_width+0x2c>)
    b82c:	4622      	mov	r2, r4
    b82e:	f7fe ff87 	bl	a740 <lv_debug_log_error>
    b832:	e7fe      	b.n	b832 <lv_obj_set_width+0x16>
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
    b834:	4620      	mov	r0, r4
    b836:	f7ff f9cf 	bl	abd8 <lv_obj_get_height>
    b83a:	4629      	mov	r1, r5
    b83c:	4602      	mov	r2, r0
    b83e:	4620      	mov	r0, r4
}
    b840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
    b844:	f7ff bf96 	b.w	b774 <lv_obj_set_size>
    b848:	0001de08 	.word	0x0001de08

0000b84c <lv_obj_set_height>:
{
    b84c:	b538      	push	{r3, r4, r5, lr}
    b84e:	4604      	mov	r4, r0
    b850:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b852:	f7fe ff65 	bl	a720 <lv_debug_check_null>
    b856:	4603      	mov	r3, r0
    b858:	b920      	cbnz	r0, b864 <lv_obj_set_height+0x18>
    b85a:	4807      	ldr	r0, [pc, #28]	; (b878 <lv_obj_set_height+0x2c>)
    b85c:	4622      	mov	r2, r4
    b85e:	f7fe ff6f 	bl	a740 <lv_debug_log_error>
    b862:	e7fe      	b.n	b862 <lv_obj_set_height+0x16>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
    b864:	4620      	mov	r0, r4
    b866:	f7ff f9a9 	bl	abbc <lv_obj_get_width>
    b86a:	462a      	mov	r2, r5
    b86c:	4601      	mov	r1, r0
    b86e:	4620      	mov	r0, r4
}
    b870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
    b874:	f7ff bf7e 	b.w	b774 <lv_obj_set_size>
    b878:	0001de08 	.word	0x0001de08

0000b87c <lv_obj_get_click>:
{
    b87c:	b510      	push	{r4, lr}
    b87e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b880:	f7fe ff4e 	bl	a720 <lv_debug_check_null>
    b884:	4603      	mov	r3, r0
    b886:	b920      	cbnz	r0, b892 <lv_obj_get_click+0x16>
    b888:	4804      	ldr	r0, [pc, #16]	; (b89c <lv_obj_get_click+0x20>)
    b88a:	4622      	mov	r2, r4
    b88c:	f7fe ff58 	bl	a740 <lv_debug_log_error>
    b890:	e7fe      	b.n	b890 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
    b892:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
}
    b896:	f000 0001 	and.w	r0, r0, #1
    b89a:	bd10      	pop	{r4, pc}
    b89c:	0001de08 	.word	0x0001de08

0000b8a0 <lv_obj_get_drag>:
{
    b8a0:	b510      	push	{r4, lr}
    b8a2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b8a4:	f7fe ff3c 	bl	a720 <lv_debug_check_null>
    b8a8:	4603      	mov	r3, r0
    b8aa:	b920      	cbnz	r0, b8b6 <lv_obj_get_drag+0x16>
    b8ac:	4804      	ldr	r0, [pc, #16]	; (b8c0 <lv_obj_get_drag+0x20>)
    b8ae:	4622      	mov	r2, r4
    b8b0:	f7fe ff46 	bl	a740 <lv_debug_log_error>
    b8b4:	e7fe      	b.n	b8b4 <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
    b8b6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
}
    b8ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
    b8be:	bd10      	pop	{r4, pc}
    b8c0:	0001de08 	.word	0x0001de08

0000b8c4 <lv_obj_get_drag_dir>:
{
    b8c4:	b510      	push	{r4, lr}
    b8c6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b8c8:	f7fe ff2a 	bl	a720 <lv_debug_check_null>
    b8cc:	4603      	mov	r3, r0
    b8ce:	b920      	cbnz	r0, b8da <lv_obj_get_drag_dir+0x16>
    b8d0:	4804      	ldr	r0, [pc, #16]	; (b8e4 <lv_obj_get_drag_dir+0x20>)
    b8d2:	4622      	mov	r2, r4
    b8d4:	f7fe ff34 	bl	a740 <lv_debug_log_error>
    b8d8:	e7fe      	b.n	b8d8 <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
    b8da:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
}
    b8de:	f000 0003 	and.w	r0, r0, #3
    b8e2:	bd10      	pop	{r4, pc}
    b8e4:	0001de08 	.word	0x0001de08

0000b8e8 <lv_obj_get_drag_throw>:
{
    b8e8:	b510      	push	{r4, lr}
    b8ea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b8ec:	f7fe ff18 	bl	a720 <lv_debug_check_null>
    b8f0:	4603      	mov	r3, r0
    b8f2:	b920      	cbnz	r0, b8fe <lv_obj_get_drag_throw+0x16>
    b8f4:	4804      	ldr	r0, [pc, #16]	; (b908 <lv_obj_get_drag_throw+0x20>)
    b8f6:	4622      	mov	r2, r4
    b8f8:	f7fe ff22 	bl	a740 <lv_debug_log_error>
    b8fc:	e7fe      	b.n	b8fc <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
    b8fe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
}
    b902:	f3c0 0080 	ubfx	r0, r0, #2, #1
    b906:	bd10      	pop	{r4, pc}
    b908:	0001de08 	.word	0x0001de08

0000b90c <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
    b90c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
}
    b910:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    b914:	4770      	bx	lr

0000b916 <lv_obj_get_base_dir>:
}
    b916:	2000      	movs	r0, #0
    b918:	4770      	bx	lr

0000b91a <lv_obj_get_opa_scale>:
{
    b91a:	b510      	push	{r4, lr}
    b91c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b91e:	f7fe feff 	bl	a720 <lv_debug_check_null>
    b922:	b968      	cbnz	r0, b940 <lv_obj_get_opa_scale+0x26>
    b924:	4620      	mov	r0, r4
    b926:	f7fe ff41 	bl	a7ac <lv_obj_get_child.part.0>
        if(parent->opa_scale_en) return parent->opa_scale;
    b92a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    b92e:	065b      	lsls	r3, r3, #25
    b930:	d502      	bpl.n	b938 <lv_obj_get_opa_scale+0x1e>
    b932:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
}
    b936:	bd10      	pop	{r4, pc}
        parent = lv_obj_get_parent(parent);
    b938:	4620      	mov	r0, r4
    b93a:	f7ff f89d 	bl	aa78 <lv_obj_get_parent>
    b93e:	4604      	mov	r4, r0
    while(parent) {
    b940:	2c00      	cmp	r4, #0
    b942:	d1f2      	bne.n	b92a <lv_obj_get_opa_scale+0x10>
    return LV_OPA_COVER;
    b944:	20ff      	movs	r0, #255	; 0xff
    b946:	e7f6      	b.n	b936 <lv_obj_get_opa_scale+0x1c>

0000b948 <lv_obj_design>:
{
    b948:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
    b94a:	2a02      	cmp	r2, #2
{
    b94c:	b085      	sub	sp, #20
    b94e:	4604      	mov	r4, r0
    b950:	460d      	mov	r5, r1
    if(mode == LV_DESIGN_COVER_CHK) {
    b952:	d13c      	bne.n	b9ce <lv_obj_design+0x86>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
    b954:	f100 0110 	add.w	r1, r0, #16
    b958:	4628      	mov	r0, r5
    b95a:	f7f8 f905 	bl	3b68 <lv_area_is_in>
    b95e:	b398      	cbz	r0, b9c8 <lv_obj_design+0x80>
        const lv_style_t * style = lv_obj_get_style(obj);
    b960:	4620      	mov	r0, r4
    b962:	f7ff f959 	bl	ac18 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
    b966:	7a03      	ldrb	r3, [r0, #8]
    b968:	2bfa      	cmp	r3, #250	; 0xfa
    b96a:	d92d      	bls.n	b9c8 <lv_obj_design+0x80>
        lv_coord_t r = style->body.radius;
    b96c:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
        if(r == LV_RADIUS_CIRCLE) return false;
    b970:	f647 4318 	movw	r3, #31768	; 0x7c18
    b974:	429e      	cmp	r6, r3
    b976:	d027      	beq.n	b9c8 <lv_obj_design+0x80>
        lv_obj_get_coords(obj, &area_tmp);
    b978:	a902      	add	r1, sp, #8
    b97a:	4620      	mov	r0, r4
    b97c:	f7ff f8d8 	bl	ab30 <lv_obj_get_coords>
        area_tmp.x1 += r;
    b980:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b984:	b2b7      	uxth	r7, r6
    b986:	fa13 f686 	uxtah	r6, r3, r6
        area_tmp.x2 -= r;
    b98a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
        area_tmp.x1 += r;
    b98e:	f8ad 6008 	strh.w	r6, [sp, #8]
        area_tmp.x2 -= r;
    b992:	1bdb      	subs	r3, r3, r7
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
    b994:	a902      	add	r1, sp, #8
    b996:	4628      	mov	r0, r5
        area_tmp.x2 -= r;
    b998:	f8ad 300c 	strh.w	r3, [sp, #12]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
    b99c:	f7f8 f8e4 	bl	3b68 <lv_area_is_in>
    b9a0:	b190      	cbz	r0, b9c8 <lv_obj_design+0x80>
        lv_obj_get_coords(obj, &area_tmp);
    b9a2:	a902      	add	r1, sp, #8
    b9a4:	4620      	mov	r0, r4
    b9a6:	f7ff f8c3 	bl	ab30 <lv_obj_get_coords>
        area_tmp.y1 += r;
    b9aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    b9ae:	443b      	add	r3, r7
    b9b0:	f8ad 300a 	strh.w	r3, [sp, #10]
        area_tmp.y2 -= r;
    b9b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
    b9b8:	a902      	add	r1, sp, #8
        area_tmp.y2 -= r;
    b9ba:	1bdb      	subs	r3, r3, r7
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
    b9bc:	4628      	mov	r0, r5
        area_tmp.y2 -= r;
    b9be:	f8ad 300e 	strh.w	r3, [sp, #14]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
    b9c2:	f7f8 f8d1 	bl	3b68 <lv_area_is_in>
    b9c6:	b900      	cbnz	r0, b9ca <lv_obj_design+0x82>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
    b9c8:	2000      	movs	r0, #0
}
    b9ca:	b005      	add	sp, #20
    b9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
    b9ce:	b962      	cbnz	r2, b9ea <lv_obj_design+0xa2>
        const lv_style_t * style = lv_obj_get_style(obj);
    b9d0:	f7ff f922 	bl	ac18 <lv_obj_get_style>
    b9d4:	9001      	str	r0, [sp, #4]
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
    b9d6:	4620      	mov	r0, r4
    b9d8:	f7ff ff9f 	bl	b91a <lv_obj_get_opa_scale>
    b9dc:	9a01      	ldr	r2, [sp, #4]
    b9de:	4603      	mov	r3, r0
    b9e0:	4629      	mov	r1, r5
    b9e2:	f104 0010 	add.w	r0, r4, #16
    b9e6:	f7f9 fc69 	bl	52bc <lv_draw_rect>
    return true;
    b9ea:	2001      	movs	r0, #1
    b9ec:	e7ed      	b.n	b9ca <lv_obj_design+0x82>

0000b9ee <lv_obj_is_protected>:
{
    b9ee:	b538      	push	{r3, r4, r5, lr}
    b9f0:	4604      	mov	r4, r0
    b9f2:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    b9f4:	f7fe fe94 	bl	a720 <lv_debug_check_null>
    b9f8:	b910      	cbnz	r0, ba00 <lv_obj_is_protected+0x12>
    b9fa:	4620      	mov	r0, r4
    b9fc:	f7fe fed6 	bl	a7ac <lv_obj_get_child.part.0>
    return (obj->protect & prot) == 0 ? false : true;
    ba00:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    ba04:	421d      	tst	r5, r3
}
    ba06:	bf14      	ite	ne
    ba08:	2001      	movne	r0, #1
    ba0a:	2000      	moveq	r0, #0
    ba0c:	bd38      	pop	{r3, r4, r5, pc}
	...

0000ba10 <lv_obj_get_signal_cb>:
{
    ba10:	b510      	push	{r4, lr}
    ba12:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ba14:	f7fe fe84 	bl	a720 <lv_debug_check_null>
    ba18:	4603      	mov	r3, r0
    ba1a:	b920      	cbnz	r0, ba26 <lv_obj_get_signal_cb+0x16>
    ba1c:	4803      	ldr	r0, [pc, #12]	; (ba2c <lv_obj_get_signal_cb+0x1c>)
    ba1e:	4622      	mov	r2, r4
    ba20:	f7fe fe8e 	bl	a740 <lv_debug_log_error>
    ba24:	e7fe      	b.n	ba24 <lv_obj_get_signal_cb+0x14>
}
    ba26:	69e0      	ldr	r0, [r4, #28]
    ba28:	bd10      	pop	{r4, pc}
    ba2a:	bf00      	nop
    ba2c:	0001de08 	.word	0x0001de08

0000ba30 <lv_obj_get_design_cb>:
{
    ba30:	b510      	push	{r4, lr}
    ba32:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ba34:	f7fe fe74 	bl	a720 <lv_debug_check_null>
    ba38:	4603      	mov	r3, r0
    ba3a:	b920      	cbnz	r0, ba46 <lv_obj_get_design_cb+0x16>
    ba3c:	4803      	ldr	r0, [pc, #12]	; (ba4c <lv_obj_get_design_cb+0x1c>)
    ba3e:	4622      	mov	r2, r4
    ba40:	f7fe fe7e 	bl	a740 <lv_debug_log_error>
    ba44:	e7fe      	b.n	ba44 <lv_obj_get_design_cb+0x14>
}
    ba46:	6a20      	ldr	r0, [r4, #32]
    ba48:	bd10      	pop	{r4, pc}
    ba4a:	bf00      	nop
    ba4c:	0001de08 	.word	0x0001de08

0000ba50 <lv_obj_get_ext_attr>:
{
    ba50:	b510      	push	{r4, lr}
    ba52:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    ba54:	f7fe fe64 	bl	a720 <lv_debug_check_null>
    ba58:	4603      	mov	r3, r0
    ba5a:	b920      	cbnz	r0, ba66 <lv_obj_get_ext_attr+0x16>
    ba5c:	4803      	ldr	r0, [pc, #12]	; (ba6c <lv_obj_get_ext_attr+0x1c>)
    ba5e:	4622      	mov	r2, r4
    ba60:	f7fe fe6e 	bl	a740 <lv_debug_log_error>
    ba64:	e7fe      	b.n	ba64 <lv_obj_get_ext_attr+0x14>
}
    ba66:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ba68:	bd10      	pop	{r4, pc}
    ba6a:	bf00      	nop
    ba6c:	0001de08 	.word	0x0001de08

0000ba70 <lv_obj_handle_get_type_signal>:
{
    ba70:	b510      	push	{r4, lr}
    ba72:	2300      	movs	r3, #0
        if(buf->type[i] == NULL) break;
    ba74:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    ba78:	b2da      	uxtb	r2, r3
    ba7a:	b11c      	cbz	r4, ba84 <lv_obj_handle_get_type_signal+0x14>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    ba7c:	3301      	adds	r3, #1
    ba7e:	2b07      	cmp	r3, #7
    ba80:	d1f8      	bne.n	ba74 <lv_obj_handle_get_type_signal+0x4>
    ba82:	461a      	mov	r2, r3
    buf->type[i] = name;
    ba84:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
    ba88:	2001      	movs	r0, #1
    ba8a:	bd10      	pop	{r4, pc}

0000ba8c <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    ba8c:	2907      	cmp	r1, #7
{
    ba8e:	b510      	push	{r4, lr}
    ba90:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    ba92:	d105      	bne.n	baa0 <lv_obj_signal+0x14>
}
    ba94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    ba98:	490e      	ldr	r1, [pc, #56]	; (bad4 <lv_obj_signal+0x48>)
    ba9a:	4610      	mov	r0, r2
    ba9c:	f7ff bfe8 	b.w	ba70 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_CHILD_CHG) {
    baa0:	2901      	cmp	r1, #1
    baa2:	d105      	bne.n	bab0 <lv_obj_signal+0x24>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
    baa4:	f7ff ffa3 	bl	b9ee <lv_obj_is_protected>
    baa8:	f080 0001 	eor.w	r0, r0, #1
    lv_res_t res = LV_RES_OK;
    baac:	b2c0      	uxtb	r0, r0
}
    baae:	bd10      	pop	{r4, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    bab0:	2906      	cmp	r1, #6
    bab2:	d10a      	bne.n	baca <lv_obj_signal+0x3e>
        const lv_style_t * style = lv_obj_get_style(obj);
    bab4:	f7ff f8b0 	bl	ac18 <lv_obj_get_style>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
    bab8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
    babc:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    bac0:	429a      	cmp	r2, r3
    bac2:	bfb8      	it	lt
    bac4:	8623      	strhlt	r3, [r4, #48]	; 0x30
    lv_res_t res = LV_RES_OK;
    bac6:	2001      	movs	r0, #1
    bac8:	e7f1      	b.n	baae <lv_obj_signal+0x22>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
    baca:	2904      	cmp	r1, #4
    bacc:	d1fb      	bne.n	bac6 <lv_obj_signal+0x3a>
        lv_obj_refresh_ext_draw_pad(obj);
    bace:	f7ff fcef 	bl	b4b0 <lv_obj_refresh_ext_draw_pad>
    bad2:	e7f8      	b.n	bac6 <lv_obj_signal+0x3a>
    bad4:	0001de23 	.word	0x0001de23

0000bad8 <lv_ddlist_pos_current_option>:
/**
 * Set the position of list when it is closed to show the selected item
 * @param ddlist pointer to a drop down list
 */
static void lv_ddlist_pos_current_option(lv_obj_t * ddlist)
{
    bad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    badc:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext          = lv_obj_get_ext_attr(ddlist);
    bade:	f7ff ffb7 	bl	ba50 <lv_obj_get_ext_attr>
    bae2:	4605      	mov	r5, r0
    const lv_style_t * style       = lv_obj_get_style(ddlist);
    bae4:	4620      	mov	r0, r4
    bae6:	f7ff f897 	bl	ac18 <lv_obj_get_style>
    const lv_font_t * font         = style->text.font;
    lv_coord_t font_h              = lv_font_get_line_height(font);
    baea:	6a43      	ldr	r3, [r0, #36]	; 0x24
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
    baec:	6b28      	ldr	r0, [r5, #48]	; 0x30
    lv_coord_t font_h              = lv_font_get_line_height(font);
    baee:	7a1f      	ldrb	r7, [r3, #8]
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
    baf0:	f7ff f892 	bl	ac18 <lv_obj_get_style>
    baf4:	4680      	mov	r8, r0
    lv_obj_t * scrl                = lv_page_get_scrl(ddlist);
    baf6:	4620      	mov	r0, r4
    baf8:	f001 f810 	bl	cb1c <lv_page_get_scrl>
    bafc:	4606      	mov	r6, r0

    lv_coord_t h = lv_obj_get_height(ddlist);
    bafe:	4620      	mov	r0, r4
    bb00:	f7ff f86a 	bl	abd8 <lv_obj_get_height>
    lv_coord_t line_y1 =
        ext->sel_opt_id * (font_h + label_style->text.line_space) + ext->label->coords.y1 - scrl->coords.y1;
    bb04:	6b2b      	ldr	r3, [r5, #48]	; 0x30

    lv_obj_set_y(scrl, -line_y1 + (h - font_h) / 2);
    bb06:	8a71      	ldrh	r1, [r6, #18]
    bb08:	8a5b      	ldrh	r3, [r3, #18]
    bb0a:	1ac9      	subs	r1, r1, r3
    bb0c:	1bc3      	subs	r3, r0, r7
    bb0e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    bb12:	eb01 0163 	add.w	r1, r1, r3, asr #1
        ext->sel_opt_id * (font_h + label_style->text.line_space) + ext->label->coords.y1 - scrl->coords.y1;
    bb16:	f9b8 302a 	ldrsh.w	r3, [r8, #42]	; 0x2a
    bb1a:	19da      	adds	r2, r3, r7
    bb1c:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    bb1e:	fb13 f302 	smulbb	r3, r3, r2
    lv_obj_set_y(scrl, -line_y1 + (h - font_h) / 2);
    bb22:	1ac9      	subs	r1, r1, r3
    bb24:	4630      	mov	r0, r6
    bb26:	b209      	sxth	r1, r1
    bb28:	f7ff f9a8 	bl	ae7c <lv_obj_set_y>
    lv_obj_invalidate(ddlist);
    bb2c:	4620      	mov	r0, r4
}
    bb2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_invalidate(ddlist);
    bb32:	f7ff b8b1 	b.w	ac98 <lv_obj_invalidate>

0000bb36 <lv_ddlist_adjust_height>:
{
    bb36:	b510      	push	{r4, lr}
    bb38:	4604      	mov	r4, r0
    lv_obj_set_height(ddlist, height);
    bb3a:	f7ff fe87 	bl	b84c <lv_obj_set_height>
    lv_ddlist_pos_current_option(ddlist);
    bb3e:	4620      	mov	r0, r4
}
    bb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_ddlist_pos_current_option(ddlist);
    bb44:	f7ff bfc8 	b.w	bad8 <lv_ddlist_pos_current_option>

0000bb48 <lv_ddlist_anim_finish>:
{
    bb48:	b538      	push	{r3, r4, r5, lr}
    bb4a:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    bb4c:	f7ff ff80 	bl	ba50 <lv_obj_get_ext_attr>
    bb50:	4605      	mov	r5, r0
    lv_ddlist_pos_current_option(ddlist);
    bb52:	4620      	mov	r0, r4
    bb54:	f7ff ffc0 	bl	bad8 <lv_ddlist_pos_current_option>
    ext->force_sel = 0; /*Turn off drawing of selection*/
    bb58:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
    bb5c:	f36f 0341 	bfc	r3, #1, #1
    bb60:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
    bb64:	07db      	lsls	r3, r3, #31
    bb66:	d505      	bpl.n	bb74 <lv_ddlist_anim_finish+0x2c>
    bb68:	4620      	mov	r0, r4
    bb6a:	2105      	movs	r1, #5
}
    bb6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
    bb70:	f000 bf4c 	b.w	ca0c <lv_page_set_sb_mode>
}
    bb74:	bd38      	pop	{r3, r4, r5, pc}

0000bb76 <lv_ddlist_anim_ready_cb>:
    lv_ddlist_anim_finish(ddlist);
    bb76:	6800      	ldr	r0, [r0, #0]
    bb78:	f7ff bfe6 	b.w	bb48 <lv_ddlist_anim_finish>

0000bb7c <lv_ddlist_refr_size>:
{
    bb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb80:	b08a      	sub	sp, #40	; 0x28
    bb82:	4605      	mov	r5, r0
    bb84:	460f      	mov	r7, r1
    lv_ddlist_ext_t * ext    = lv_obj_get_ext_attr(ddlist);
    bb86:	f7ff ff63 	bl	ba50 <lv_obj_get_ext_attr>
    bb8a:	4606      	mov	r6, r0
    const lv_style_t * style = lv_obj_get_style(ddlist);
    bb8c:	4628      	mov	r0, r5
    bb8e:	f7ff f843 	bl	ac18 <lv_obj_get_style>
    if(ext->opened) {
    bb92:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
    bb96:	07da      	lsls	r2, r3, #31
    const lv_style_t * style = lv_obj_get_style(ddlist);
    bb98:	4680      	mov	r8, r0
    if(ext->opened) {
    bb9a:	d528      	bpl.n	bbee <lv_ddlist_refr_size+0x72>
        if(ext->fix_height == 0) {
    bb9c:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    bba0:	b95c      	cbnz	r4, bbba <lv_ddlist_refr_size+0x3e>
                lv_obj_get_height(lv_page_get_scrl(ddlist)) + style->body.padding.top + style->body.padding.bottom;
    bba2:	4628      	mov	r0, r5
    bba4:	f000 ffba 	bl	cb1c <lv_page_get_scrl>
    bba8:	f7ff f816 	bl	abd8 <lv_obj_get_height>
    bbac:	f8b8 4018 	ldrh.w	r4, [r8, #24]
    bbb0:	f8b8 3016 	ldrh.w	r3, [r8, #22]
    bbb4:	4423      	add	r3, r4
    bbb6:	4418      	add	r0, r3
            new_height =
    bbb8:	b204      	sxth	r4, r0
    if(anim == LV_ANIM_OFF) {
    bbba:	bb37      	cbnz	r7, bc0a <lv_ddlist_refr_size+0x8e>
        lv_obj_set_height(ddlist, new_height);
    bbbc:	4621      	mov	r1, r4
    bbbe:	4628      	mov	r0, r5
    bbc0:	f7ff fe44 	bl	b84c <lv_obj_set_height>
        lv_ddlist_pos_current_option(ddlist);
    bbc4:	4628      	mov	r0, r5
    bbc6:	f7ff ff87 	bl	bad8 <lv_ddlist_pos_current_option>
        if(ext->opened) lv_page_set_sb_mode(ddlist, LV_SB_MODE_UNHIDE);
    bbca:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
    bbce:	07db      	lsls	r3, r3, #31
    bbd0:	d503      	bpl.n	bbda <lv_ddlist_refr_size+0x5e>
    bbd2:	2105      	movs	r1, #5
    bbd4:	4628      	mov	r0, r5
    bbd6:	f000 ff19 	bl	ca0c <lv_page_set_sb_mode>
        lv_anim_del(ddlist, (lv_anim_exec_xcb_t)lv_ddlist_adjust_height); /*If an animation is in progress then
    bbda:	4921      	ldr	r1, [pc, #132]	; (bc60 <lv_ddlist_refr_size+0xe4>)
    bbdc:	4628      	mov	r0, r5
    bbde:	f7f8 f89b 	bl	3d18 <lv_anim_del>
        lv_ddlist_anim_finish(ddlist);
    bbe2:	4628      	mov	r0, r5
    bbe4:	f7ff ffb0 	bl	bb48 <lv_ddlist_anim_finish>
}
    bbe8:	b00a      	add	sp, #40	; 0x28
    bbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        const lv_font_t * font         = style->text.font;
    bbee:	6a44      	ldr	r4, [r0, #36]	; 0x24
        const lv_style_t * label_style = lv_obj_get_style(ext->label);
    bbf0:	6b30      	ldr	r0, [r6, #48]	; 0x30
    bbf2:	f7ff f811 	bl	ac18 <lv_obj_get_style>
        new_height                     = font_h + 2 * label_style->text.line_space;
    bbf6:	7a24      	ldrb	r4, [r4, #8]
    bbf8:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
    bbfa:	2104      	movs	r1, #4
        new_height                     = font_h + 2 * label_style->text.line_space;
    bbfc:	eb04 0440 	add.w	r4, r4, r0, lsl #1
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
    bc00:	4628      	mov	r0, r5
        new_height                     = font_h + 2 * label_style->text.line_space;
    bc02:	b224      	sxth	r4, r4
        lv_page_set_sb_mode(ddlist, LV_SB_MODE_HIDE);
    bc04:	f000 ff02 	bl	ca0c <lv_page_set_sb_mode>
    bc08:	e7d7      	b.n	bbba <lv_ddlist_refr_size+0x3e>
        if(lv_obj_get_height(ddlist) != new_height) {
    bc0a:	4628      	mov	r0, r5
    bc0c:	f7fe ffe4 	bl	abd8 <lv_obj_get_height>
    bc10:	42a0      	cmp	r0, r4
    bc12:	d0e9      	beq.n	bbe8 <lv_ddlist_refr_size+0x6c>
            a.start          = lv_obj_get_height(ddlist);
    bc14:	4628      	mov	r0, r5
            a.var            = ddlist;
    bc16:	9501      	str	r5, [sp, #4]
            a.start          = lv_obj_get_height(ddlist);
    bc18:	f7fe ffde 	bl	abd8 <lv_obj_get_height>
            a.exec_cb        = (lv_anim_exec_xcb_t)lv_ddlist_adjust_height;
    bc1c:	4b10      	ldr	r3, [pc, #64]	; (bc60 <lv_ddlist_refr_size+0xe4>)
    bc1e:	9302      	str	r3, [sp, #8]
            a.path_cb        = lv_anim_path_linear;
    bc20:	4b10      	ldr	r3, [pc, #64]	; (bc64 <lv_ddlist_refr_size+0xe8>)
    bc22:	9303      	str	r3, [sp, #12]
            a.end            = new_height;
    bc24:	e9cd 0405 	strd	r0, r4, [sp, #20]
            a.ready_cb       = lv_ddlist_anim_ready_cb;
    bc28:	4b0f      	ldr	r3, [pc, #60]	; (bc68 <lv_ddlist_refr_size+0xec>)
    bc2a:	9304      	str	r3, [sp, #16]
            a.act_time       = 0;
    bc2c:	2400      	movs	r4, #0
 * @param ddlist pointer to a drop down list
 * @return open/close animation time [ms]
 */
static inline uint16_t lv_ddlist_get_anim_time(const lv_obj_t * ddlist)
{
    return lv_page_get_anim_time(ddlist);
    bc2e:	4628      	mov	r0, r5
    bc30:	f8ad 401e 	strh.w	r4, [sp, #30]
    bc34:	f000 ff86 	bl	cb44 <lv_page_get_anim_time>
            a.playback       = 0;
    bc38:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
            a.time           = lv_ddlist_get_anim_time(ddlist);
    bc3c:	f8ad 001c 	strh.w	r0, [sp, #28]
            a.playback       = 0;
    bc40:	f023 0303 	bic.w	r3, r3, #3
    bc44:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            ext->force_sel = 1; /*Keep the list item selected*/
    bc48:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
            a.playback_pause = 0;
    bc4c:	9408      	str	r4, [sp, #32]
            ext->force_sel = 1; /*Keep the list item selected*/
    bc4e:	f043 0302 	orr.w	r3, r3, #2
    bc52:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
            lv_anim_create(&a);
    bc56:	a801      	add	r0, sp, #4
    bc58:	f7f8 f890 	bl	3d7c <lv_anim_create>
}
    bc5c:	e7c4      	b.n	bbe8 <lv_ddlist_refr_size+0x6c>
    bc5e:	bf00      	nop
    bc60:	0000bb37 	.word	0x0000bb37
    bc64:	00003ba3 	.word	0x00003ba3
    bc68:	0000bb77 	.word	0x0000bb77

0000bc6c <release_handler>:
{
    bc6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc70:	4605      	mov	r5, r0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    bc72:	f7ff feed 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->opened == 0) { /*Open the list*/
    bc76:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    bc7a:	07da      	lsls	r2, r3, #31
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    bc7c:	4604      	mov	r4, r0
    if(ext->opened == 0) { /*Open the list*/
    bc7e:	d412      	bmi.n	bca6 <release_handler+0x3a>
        ext->opened = 1;
    bc80:	f043 0301 	orr.w	r3, r3, #1
    bc84:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        lv_obj_set_drag(lv_page_get_scrl(ddlist), true);
    bc88:	4628      	mov	r0, r5
    bc8a:	f000 ff47 	bl	cb1c <lv_page_get_scrl>
    bc8e:	2101      	movs	r1, #1
    bc90:	f7fe fde4 	bl	a85c <lv_obj_set_drag>
        lv_ddlist_refr_size(ddlist, true);
    bc94:	2101      	movs	r1, #1
    bc96:	4628      	mov	r0, r5
    bc98:	f7ff ff70 	bl	bb7c <lv_ddlist_refr_size>
    return LV_RES_OK;
    bc9c:	2601      	movs	r6, #1
}
    bc9e:	4630      	mov	r0, r6
    bca0:	b003      	add	sp, #12
    bca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_indev_t * indev = lv_indev_get_act();
    bca6:	f7fe f9dd 	bl	a064 <lv_indev_get_act>
    bcaa:	4606      	mov	r6, r0
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
    bcac:	f7fe f9e0 	bl	a070 <lv_indev_get_type>
    bcb0:	2801      	cmp	r0, #1
    bcb2:	d123      	bne.n	bcfc <release_handler+0x90>
            lv_indev_get_point(indev, &p);
    bcb4:	4630      	mov	r0, r6
    bcb6:	4669      	mov	r1, sp
    bcb8:	f7fe f9dd 	bl	a076 <lv_indev_get_point>
            p.y -= ext->label->coords.y1;
    bcbc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bcbe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    bcc2:	8a42      	ldrh	r2, [r0, #18]
                letter = lv_txt_encoded_next(txt, &i);
    bcc4:	f8df b0a0 	ldr.w	fp, [pc, #160]	; bd68 <release_handler+0xfc>
            p.y -= ext->label->coords.y1;
    bcc8:	1a9b      	subs	r3, r3, r2
    bcca:	f8ad 3002 	strh.w	r3, [sp, #2]
            p.x -= ext->label->coords.x1;
    bcce:	8a02      	ldrh	r2, [r0, #16]
    bcd0:	f8bd 3000 	ldrh.w	r3, [sp]
            letter_i = lv_label_get_letter_on(ext->label, &p);
    bcd4:	4669      	mov	r1, sp
            p.x -= ext->label->coords.x1;
    bcd6:	1a9b      	subs	r3, r3, r2
    bcd8:	f8ad 3000 	strh.w	r3, [sp]
            letter_i = lv_label_get_letter_on(ext->label, &p);
    bcdc:	f004 fbb8 	bl	10450 <lv_label_get_letter_on>
    bce0:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(ext->label);
    bce2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bce4:	f004 fb44 	bl	10370 <lv_label_get_text>
            uint32_t i        = 0;
    bce8:	2600      	movs	r6, #0
            const char * txt  = lv_label_get_text(ext->label);
    bcea:	4682      	mov	sl, r0
            uint32_t i        = 0;
    bcec:	9601      	str	r6, [sp, #4]
            uint32_t i_prev   = 0;
    bcee:	46b1      	mov	r9, r6
            uint16_t new_opt  = 0;
    bcf0:	4637      	mov	r7, r6
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
    bcf2:	45b0      	cmp	r8, r6
    bcf4:	d825      	bhi.n	bd42 <release_handler+0xd6>
            ext->sel_opt_id     = new_opt;
    bcf6:	8767      	strh	r7, [r4, #58]	; 0x3a
            ext->sel_opt_id_ori = ext->sel_opt_id;
    bcf8:	87a7      	strh	r7, [r4, #60]	; 0x3c
    bcfa:	e004      	b.n	bd06 <release_handler+0x9a>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
    bcfc:	4630      	mov	r0, r6
    bcfe:	f7fe f9b7 	bl	a070 <lv_indev_get_type>
    bd02:	2803      	cmp	r0, #3
    bd04:	d0d6      	beq.n	bcb4 <release_handler+0x48>
        uint32_t id  = ext->sel_opt_id; /*Just to use uint32_t in event data*/
    bd06:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    bd08:	9301      	str	r3, [sp, #4]
        lv_res_t res = lv_event_send(ddlist, LV_EVENT_VALUE_CHANGED, &id);
    bd0a:	aa01      	add	r2, sp, #4
    bd0c:	210e      	movs	r1, #14
    bd0e:	4628      	mov	r0, r5
    bd10:	f7fe fe5a 	bl	a9c8 <lv_event_send>
        if(res != LV_RES_OK) return res;
    bd14:	2801      	cmp	r0, #1
        lv_res_t res = lv_event_send(ddlist, LV_EVENT_VALUE_CHANGED, &id);
    bd16:	4606      	mov	r6, r0
        if(res != LV_RES_OK) return res;
    bd18:	d1c1      	bne.n	bc9e <release_handler+0x32>
        if(ext->stay_open == 0) {
    bd1a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    bd1e:	f013 0708 	ands.w	r7, r3, #8
    bd22:	d11d      	bne.n	bd60 <release_handler+0xf4>
            ext->opened = 0;
    bd24:	f367 0300 	bfi	r3, r7, #0, #1
    bd28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            lv_obj_set_drag(lv_page_get_scrl(ddlist), false);
    bd2c:	4628      	mov	r0, r5
    bd2e:	f000 fef5 	bl	cb1c <lv_page_get_scrl>
    bd32:	4639      	mov	r1, r7
    bd34:	f7fe fd92 	bl	a85c <lv_obj_set_drag>
            lv_ddlist_refr_size(ddlist, true);
    bd38:	4631      	mov	r1, r6
    bd3a:	4628      	mov	r0, r5
    bd3c:	f7ff ff1e 	bl	bb7c <lv_ddlist_refr_size>
    bd40:	e7ad      	b.n	bc9e <release_handler+0x32>
                letter = lv_txt_encoded_next(txt, &i);
    bd42:	f8db 3000 	ldr.w	r3, [fp]
    bd46:	a901      	add	r1, sp, #4
    bd48:	4650      	mov	r0, sl
    bd4a:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
    bd4c:	280a      	cmp	r0, #10
    bd4e:	d103      	bne.n	bd58 <release_handler+0xec>
    bd50:	45c8      	cmp	r8, r9
    bd52:	bf1c      	itt	ne
    bd54:	3701      	addne	r7, #1
    bd56:	b2bf      	uxthne	r7, r7
                i_prev = i;
    bd58:	f8dd 9004 	ldr.w	r9, [sp, #4]
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
    bd5c:	3601      	adds	r6, #1
    bd5e:	e7c8      	b.n	bcf2 <release_handler+0x86>
            lv_obj_invalidate(ddlist);
    bd60:	4628      	mov	r0, r5
    bd62:	f7fe ff99 	bl	ac98 <lv_obj_invalidate>
    bd66:	e79a      	b.n	bc9e <release_handler+0x32>
    bd68:	2000000c 	.word	0x2000000c

0000bd6c <lv_ddlist_signal>:
    res = ancestor_signal(ddlist, sign, param);
    bd6c:	4b4c      	ldr	r3, [pc, #304]	; (bea0 <lv_ddlist_signal+0x134>)
{
    bd6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(ddlist, sign, param);
    bd72:	681b      	ldr	r3, [r3, #0]
{
    bd74:	4605      	mov	r5, r0
    bd76:	460e      	mov	r6, r1
    bd78:	4690      	mov	r8, r2
    res = ancestor_signal(ddlist, sign, param);
    bd7a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
    bd7c:	2801      	cmp	r0, #1
    res = ancestor_signal(ddlist, sign, param);
    bd7e:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
    bd80:	d112      	bne.n	bda8 <lv_ddlist_signal+0x3c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    bd82:	2e07      	cmp	r6, #7
    bd84:	d106      	bne.n	bd94 <lv_ddlist_signal+0x28>
    bd86:	4947      	ldr	r1, [pc, #284]	; (bea4 <lv_ddlist_signal+0x138>)
    bd88:	4640      	mov	r0, r8
}
    bd8a:	b002      	add	sp, #8
    bd8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    bd90:	f7ff be6e 	b.w	ba70 <lv_obj_handle_get_type_signal>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    bd94:	4628      	mov	r0, r5
    bd96:	f7ff fe5b 	bl	ba50 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_STYLE_CHG) {
    bd9a:	2e04      	cmp	r6, #4
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    bd9c:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_STYLE_CHG) {
    bd9e:	d107      	bne.n	bdb0 <lv_ddlist_signal+0x44>
        lv_ddlist_refr_size(ddlist, 0);
    bda0:	2100      	movs	r1, #0
    bda2:	4628      	mov	r0, r5
    bda4:	f7ff feea 	bl	bb7c <lv_ddlist_refr_size>
}
    bda8:	4638      	mov	r0, r7
    bdaa:	b002      	add	sp, #8
    bdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_BASE_DIR_CHG) {
    bdb0:	2e05      	cmp	r6, #5
    bdb2:	d118      	bne.n	bde6 <lv_ddlist_signal+0x7a>
        lv_label_align_t align = lv_label_get_align(ext->label);
    bdb4:	6b00      	ldr	r0, [r0, #48]	; 0x30
    bdb6:	f004 fb05 	bl	103c4 <lv_label_get_align>
        switch(align) {
    bdba:	2801      	cmp	r0, #1
        lv_label_align_t align = lv_label_get_align(ext->label);
    bdbc:	4603      	mov	r3, r0
        switch(align) {
    bdbe:	d00a      	beq.n	bdd6 <lv_ddlist_signal+0x6a>
    bdc0:	2802      	cmp	r0, #2
    bdc2:	d00c      	beq.n	bdde <lv_ddlist_signal+0x72>
    bdc4:	2800      	cmp	r0, #0
    bdc6:	d1eb      	bne.n	bda0 <lv_ddlist_signal+0x34>
            case LV_LABEL_ALIGN_LEFT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_LEFT_MID, 0, 0); break;
    bdc8:	9000      	str	r0, [sp, #0]
    bdca:	2207      	movs	r2, #7
            case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
    bdcc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bdce:	4619      	mov	r1, r3
    bdd0:	f7ff f86c 	bl	aeac <lv_obj_align>
    bdd4:	e7e4      	b.n	bda0 <lv_ddlist_signal+0x34>
            case LV_LABEL_ALIGN_CENTER: lv_obj_align(ext->label, NULL, LV_ALIGN_CENTER, 0, 0); break;
    bdd6:	2300      	movs	r3, #0
    bdd8:	9300      	str	r3, [sp, #0]
    bdda:	461a      	mov	r2, r3
    bddc:	e7f6      	b.n	bdcc <lv_ddlist_signal+0x60>
            case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
    bdde:	2300      	movs	r3, #0
    bde0:	9300      	str	r3, [sp, #0]
    bde2:	2208      	movs	r2, #8
    bde4:	e7f2      	b.n	bdcc <lv_ddlist_signal+0x60>
    } else if(sign == LV_SIGNAL_CLEANUP) {
    bde6:	b90e      	cbnz	r6, bdec <lv_ddlist_signal+0x80>
        ext->label = NULL;
    bde8:	6306      	str	r6, [r0, #48]	; 0x30
    bdea:	e7dd      	b.n	bda8 <lv_ddlist_signal+0x3c>
    } else if(sign == LV_SIGNAL_FOCUS) {
    bdec:	2e10      	cmp	r6, #16
    bdee:	d0db      	beq.n	bda8 <lv_ddlist_signal+0x3c>
    } else if(sign == LV_SIGNAL_RELEASED) {
    bdf0:	2e0b      	cmp	r6, #11
    bdf2:	d103      	bne.n	bdfc <lv_ddlist_signal+0x90>
        release_handler(ddlist);
    bdf4:	4628      	mov	r0, r5
    bdf6:	f7ff ff39 	bl	bc6c <release_handler>
    bdfa:	e7d5      	b.n	bda8 <lv_ddlist_signal+0x3c>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
    bdfc:	2e11      	cmp	r6, #17
    bdfe:	d110      	bne.n	be22 <lv_ddlist_signal+0xb6>
            if(ext->opened) {
    be00:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    be04:	f013 0601 	ands.w	r6, r3, #1
    be08:	d0ce      	beq.n	bda8 <lv_ddlist_signal+0x3c>
                ext->opened     = 0;
    be0a:	f36f 0300 	bfc	r3, #0, #1
    be0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                ext->sel_opt_id = ext->sel_opt_id_ori;
    be12:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    be14:	8763      	strh	r3, [r4, #58]	; 0x3a
                lv_ddlist_refr_size(ddlist, true);
    be16:	2101      	movs	r1, #1
    be18:	4628      	mov	r0, r5
    be1a:	f7ff feaf 	bl	bb7c <lv_ddlist_refr_size>
    be1e:	4637      	mov	r7, r6
    be20:	e7c2      	b.n	bda8 <lv_ddlist_signal+0x3c>
    } else if(sign == LV_SIGNAL_CONTROL) {
    be22:	2e12      	cmp	r6, #18
    be24:	d136      	bne.n	be94 <lv_ddlist_signal+0x128>
        char c = *((char *)param);
    be26:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
    be2a:	f1a3 0212 	sub.w	r2, r3, #18
    be2e:	2a01      	cmp	r2, #1
    be30:	d818      	bhi.n	be64 <lv_ddlist_signal+0xf8>
            if(!ext->opened) {
    be32:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    be36:	07d9      	lsls	r1, r3, #31
    be38:	d407      	bmi.n	be4a <lv_ddlist_signal+0xde>
                ext->opened = 1;
    be3a:	f043 0301 	orr.w	r3, r3, #1
    be3e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
                lv_ddlist_refr_size(ddlist, true);
    be42:	2101      	movs	r1, #1
    be44:	4628      	mov	r0, r5
    be46:	f7ff fe99 	bl	bb7c <lv_ddlist_refr_size>
            if(ext->sel_opt_id + 1 < ext->option_cnt) {
    be4a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    be4c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    be4e:	3301      	adds	r3, #1
    be50:	4293      	cmp	r3, r2
    be52:	daa9      	bge.n	bda8 <lv_ddlist_signal+0x3c>
                lv_ddlist_pos_current_option(ddlist);
    be54:	4628      	mov	r0, r5
                ext->sel_opt_id--;
    be56:	8763      	strh	r3, [r4, #58]	; 0x3a
                lv_ddlist_pos_current_option(ddlist);
    be58:	f7ff fe3e 	bl	bad8 <lv_ddlist_pos_current_option>
                lv_obj_invalidate(ddlist);
    be5c:	4628      	mov	r0, r5
    be5e:	f7fe ff1b 	bl	ac98 <lv_obj_invalidate>
    be62:	e7a1      	b.n	bda8 <lv_ddlist_signal+0x3c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
    be64:	2b14      	cmp	r3, #20
    be66:	d001      	beq.n	be6c <lv_ddlist_signal+0x100>
    be68:	2b11      	cmp	r3, #17
    be6a:	d110      	bne.n	be8e <lv_ddlist_signal+0x122>
            if(!ext->opened) {
    be6c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    be70:	07da      	lsls	r2, r3, #31
    be72:	d407      	bmi.n	be84 <lv_ddlist_signal+0x118>
                ext->opened = 1;
    be74:	f043 0301 	orr.w	r3, r3, #1
    be78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                lv_ddlist_refr_size(ddlist, true);
    be7c:	2101      	movs	r1, #1
    be7e:	4628      	mov	r0, r5
    be80:	f7ff fe7c 	bl	bb7c <lv_ddlist_refr_size>
            if(ext->sel_opt_id > 0) {
    be84:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    be86:	2b00      	cmp	r3, #0
    be88:	d08e      	beq.n	bda8 <lv_ddlist_signal+0x3c>
                ext->sel_opt_id--;
    be8a:	3b01      	subs	r3, #1
    be8c:	e7e2      	b.n	be54 <lv_ddlist_signal+0xe8>
        } else if(c == LV_KEY_ESC) {
    be8e:	2b1b      	cmp	r3, #27
    be90:	d18a      	bne.n	bda8 <lv_ddlist_signal+0x3c>
    be92:	e7b5      	b.n	be00 <lv_ddlist_signal+0x94>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
    be94:	2e13      	cmp	r6, #19
        *editable       = true;
    be96:	bf04      	itt	eq
    be98:	2301      	moveq	r3, #1
    be9a:	f888 3000 	strbeq.w	r3, [r8]
    be9e:	e783      	b.n	bda8 <lv_ddlist_signal+0x3c>
    bea0:	20005e5c 	.word	0x20005e5c
    bea4:	0001de2a 	.word	0x0001de2a

0000bea8 <lv_page_set_scrl_fit2>:
 * @param page pointer to a page object
 * @param hot horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_page_set_scrl_fit2(lv_obj_t * page, lv_fit_t hor, lv_fit_t ver)
{
    bea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    beaa:	4614      	mov	r4, r2
    beac:	460d      	mov	r5, r1
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
    beae:	f000 fe35 	bl	cb1c <lv_page_get_scrl>
 * @param hor horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
    beb2:	9400      	str	r4, [sp, #0]
    beb4:	4623      	mov	r3, r4
    beb6:	462a      	mov	r2, r5
    beb8:	4629      	mov	r1, r5
    beba:	f003 fdcb 	bl	fa54 <lv_cont_set_fit4>
}
    bebe:	b003      	add	sp, #12
    bec0:	bd30      	pop	{r4, r5, pc}

0000bec2 <lv_ddlist_refr_width>:
/**
 * Be sure the width of the scrollable exactly fits the ddlist
 * @param ddlist pointer to a ddlist
 */
static void lv_ddlist_refr_width(lv_obj_t * ddlist)
{
    bec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bec4:	4604      	mov	r4, r0
    lv_ddlist_ext_t * ext          = lv_obj_get_ext_attr(ddlist);
    bec6:	f7ff fdc3 	bl	ba50 <lv_obj_get_ext_attr>
    beca:	4606      	mov	r6, r0

    /*Save the current x coordinate because it should be kept after the refrsh*/
    lv_coord_t x;
    if(lv_obj_get_base_dir(ddlist) == LV_BIDI_DIR_RTL) x = lv_obj_get_x(ddlist) + lv_obj_get_width(ddlist);
    becc:	4620      	mov	r0, r4
    bece:	f7ff fd22 	bl	b916 <lv_obj_get_base_dir>
    bed2:	2801      	cmp	r0, #1
    bed4:	4620      	mov	r0, r4
    bed6:	d139      	bne.n	bf4c <lv_ddlist_refr_width+0x8a>
    bed8:	f7fe fe3c 	bl	ab54 <lv_obj_get_x>
    bedc:	4605      	mov	r5, r0
    bede:	4620      	mov	r0, r4
    bee0:	f7fe fe6c 	bl	abbc <lv_obj_get_width>
    bee4:	4405      	add	r5, r0
    bee6:	b22d      	sxth	r5, r5
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_bottom(const lv_obj_t * page)
{
    return lv_cont_get_fit_bottom(lv_page_get_scrl(page));
    bee8:	4620      	mov	r0, r4
    beea:	f000 fe17 	bl	cb1c <lv_page_get_scrl>
    beee:	f004 f95b 	bl	101a8 <lv_cont_get_fit_bottom>
    else x = lv_obj_get_x(ddlist);

    /*Set the TIGHT fit horizontally the set the width to the content*/
    lv_page_set_scrl_fit2(ddlist, LV_FIT_TIGHT, lv_page_get_scrl_fit_bottom(ddlist));
    bef2:	2101      	movs	r1, #1
    bef4:	4602      	mov	r2, r0
    bef6:	4620      	mov	r0, r4
    bef8:	f7ff ffd6 	bl	bea8 <lv_page_set_scrl_fit2>
    befc:	4620      	mov	r0, r4
    befe:	f000 fe0d 	bl	cb1c <lv_page_get_scrl>
    bf02:	f004 f951 	bl	101a8 <lv_cont_get_fit_bottom>

    /*Revert FILL fit to fill the parent with the options area. It allows to RIGHT/CENTER align the text*/
    lv_page_set_scrl_fit2(ddlist, LV_FIT_FILL, lv_page_get_scrl_fit_bottom(ddlist));
    bf06:	2103      	movs	r1, #3
    bf08:	4602      	mov	r2, r0
    bf0a:	4620      	mov	r0, r4
    bf0c:	f7ff ffcc 	bl	bea8 <lv_page_set_scrl_fit2>

    if(lv_obj_get_base_dir(ddlist) == LV_BIDI_DIR_RTL) lv_obj_set_x(ddlist, x - lv_obj_get_width(ddlist));
    bf10:	4620      	mov	r0, r4
    bf12:	f7ff fd00 	bl	b916 <lv_obj_get_base_dir>
    bf16:	2801      	cmp	r0, #1
    bf18:	d11c      	bne.n	bf54 <lv_ddlist_refr_width+0x92>
    bf1a:	4620      	mov	r0, r4
    bf1c:	f7fe fe4e 	bl	abbc <lv_obj_get_width>
    bf20:	1a29      	subs	r1, r5, r0
    bf22:	b209      	sxth	r1, r1
    else lv_obj_set_x(ddlist, x);
    bf24:	4620      	mov	r0, r4
    bf26:	f7fe ff91 	bl	ae4c <lv_obj_set_x>

    switch(lv_label_get_align(ext->label)) {
    bf2a:	6b30      	ldr	r0, [r6, #48]	; 0x30
    bf2c:	f004 fa4a 	bl	103c4 <lv_label_get_align>
    bf30:	2801      	cmp	r0, #1
    bf32:	4603      	mov	r3, r0
    bf34:	d010      	beq.n	bf58 <lv_ddlist_refr_width+0x96>
    bf36:	2802      	cmp	r0, #2
    bf38:	d012      	beq.n	bf60 <lv_ddlist_refr_width+0x9e>
    bf3a:	b928      	cbnz	r0, bf48 <lv_ddlist_refr_width+0x86>
        case LV_LABEL_ALIGN_LEFT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_LEFT_MID, 0, 0); break;
    bf3c:	9000      	str	r0, [sp, #0]
    bf3e:	2207      	movs	r2, #7
        case LV_LABEL_ALIGN_CENTER: lv_obj_align(ext->label, NULL, LV_ALIGN_CENTER, 0, 0); break;
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
    bf40:	6b30      	ldr	r0, [r6, #48]	; 0x30
    bf42:	4619      	mov	r1, r3
    bf44:	f7fe ffb2 	bl	aeac <lv_obj_align>
    }
}
    bf48:	b002      	add	sp, #8
    bf4a:	bd70      	pop	{r4, r5, r6, pc}
    else x = lv_obj_get_x(ddlist);
    bf4c:	f7fe fe02 	bl	ab54 <lv_obj_get_x>
    bf50:	4605      	mov	r5, r0
    bf52:	e7c9      	b.n	bee8 <lv_ddlist_refr_width+0x26>
    else lv_obj_set_x(ddlist, x);
    bf54:	4629      	mov	r1, r5
    bf56:	e7e5      	b.n	bf24 <lv_ddlist_refr_width+0x62>
        case LV_LABEL_ALIGN_CENTER: lv_obj_align(ext->label, NULL, LV_ALIGN_CENTER, 0, 0); break;
    bf58:	2300      	movs	r3, #0
    bf5a:	9300      	str	r3, [sp, #0]
    bf5c:	461a      	mov	r2, r3
    bf5e:	e7ef      	b.n	bf40 <lv_ddlist_refr_width+0x7e>
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
    bf60:	2300      	movs	r3, #0
    bf62:	9300      	str	r3, [sp, #0]
    bf64:	2208      	movs	r2, #8
    bf66:	e7eb      	b.n	bf40 <lv_ddlist_refr_width+0x7e>

0000bf68 <lv_ddlist_set_options>:
{
    bf68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bf6a:	4606      	mov	r6, r0
    bf6c:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(ddlist, LV_OBJX_NAME);
    bf6e:	f7fe fbd7 	bl	a720 <lv_debug_check_null>
    bf72:	4603      	mov	r3, r0
    bf74:	b920      	cbnz	r0, bf80 <lv_ddlist_set_options+0x18>
    bf76:	4824      	ldr	r0, [pc, #144]	; (c008 <lv_ddlist_set_options+0xa0>)
    bf78:	4632      	mov	r2, r6
    bf7a:	f7fe fbe1 	bl	a740 <lv_debug_log_error>
    bf7e:	e7fe      	b.n	bf7e <lv_ddlist_set_options+0x16>
    LV_ASSERT_STR(options);
    bf80:	4638      	mov	r0, r7
    bf82:	f7fe fbcd 	bl	a720 <lv_debug_check_null>
    bf86:	4603      	mov	r3, r0
    bf88:	b920      	cbnz	r0, bf94 <lv_ddlist_set_options+0x2c>
    bf8a:	481f      	ldr	r0, [pc, #124]	; (c008 <lv_ddlist_set_options+0xa0>)
    bf8c:	463a      	mov	r2, r7
    bf8e:	f7fe fbd7 	bl	a740 <lv_debug_log_error>
    bf92:	e7fe      	b.n	bf92 <lv_ddlist_set_options+0x2a>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    bf94:	4630      	mov	r0, r6
    bf96:	f7ff fd5b 	bl	ba50 <lv_obj_get_ext_attr>
    ext->option_cnt = 0;
    bf9a:	2200      	movs	r2, #0
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    bf9c:	4604      	mov	r4, r0
    ext->option_cnt = 0;
    bf9e:	8702      	strh	r2, [r0, #56]	; 0x38
    for(i = 0; options[i] != '\0'; i++) {
    bfa0:	b293      	uxth	r3, r2
    bfa2:	5cfd      	ldrb	r5, [r7, r3]
    bfa4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    bfa6:	3301      	adds	r3, #1
    bfa8:	b29b      	uxth	r3, r3
    bfaa:	b9fd      	cbnz	r5, bfec <lv_ddlist_set_options+0x84>
    ext->option_cnt++; /*Last option has no `\n`*/
    bfac:	8723      	strh	r3, [r4, #56]	; 0x38
    lv_label_set_text(ext->label, options);
    bfae:	4639      	mov	r1, r7
    bfb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ext->sel_opt_id     = 0;
    bfb2:	8765      	strh	r5, [r4, #58]	; 0x3a
    ext->sel_opt_id_ori = 0;
    bfb4:	87a5      	strh	r5, [r4, #60]	; 0x3c
    lv_label_set_text(ext->label, options);
    bfb6:	f004 fd7d 	bl	10ab4 <lv_label_set_text>
    lv_ddlist_refr_width(ddlist);
    bfba:	4630      	mov	r0, r6
    bfbc:	f7ff ff81 	bl	bec2 <lv_ddlist_refr_width>
    lv_label_align_t align = lv_label_get_align(ext->label);
    bfc0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bfc2:	f004 f9ff 	bl	103c4 <lv_label_get_align>
    switch(align) {
    bfc6:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(ext->label);
    bfc8:	4603      	mov	r3, r0
    switch(align) {
    bfca:	d014      	beq.n	bff6 <lv_ddlist_set_options+0x8e>
    bfcc:	2802      	cmp	r0, #2
    bfce:	d016      	beq.n	bffe <lv_ddlist_set_options+0x96>
    bfd0:	b928      	cbnz	r0, bfde <lv_ddlist_set_options+0x76>
        case LV_LABEL_ALIGN_LEFT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_LEFT_MID, 0, 0); break;
    bfd2:	9000      	str	r0, [sp, #0]
    bfd4:	2207      	movs	r2, #7
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
    bfd6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    bfd8:	4619      	mov	r1, r3
    bfda:	f7fe ff67 	bl	aeac <lv_obj_align>
    lv_ddlist_refr_size(ddlist, false);
    bfde:	2100      	movs	r1, #0
    bfe0:	4630      	mov	r0, r6
}
    bfe2:	b003      	add	sp, #12
    bfe4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_ddlist_refr_size(ddlist, false);
    bfe8:	f7ff bdc8 	b.w	bb7c <lv_ddlist_refr_size>
        if(options[i] == '\n') ext->option_cnt++;
    bfec:	2d0a      	cmp	r5, #10
    bfee:	bf08      	it	eq
    bff0:	8723      	strheq	r3, [r4, #56]	; 0x38
    for(i = 0; options[i] != '\0'; i++) {
    bff2:	3201      	adds	r2, #1
    bff4:	e7d4      	b.n	bfa0 <lv_ddlist_set_options+0x38>
        case LV_LABEL_ALIGN_CENTER: lv_obj_align(ext->label, NULL, LV_ALIGN_CENTER, 0, 0); break;
    bff6:	9500      	str	r5, [sp, #0]
    bff8:	462b      	mov	r3, r5
    bffa:	462a      	mov	r2, r5
    bffc:	e7eb      	b.n	bfd6 <lv_ddlist_set_options+0x6e>
        case LV_LABEL_ALIGN_RIGHT: lv_obj_align(ext->label, NULL, LV_ALIGN_IN_RIGHT_MID, 0, 0); break;
    bffe:	9500      	str	r5, [sp, #0]
    c000:	462b      	mov	r3, r5
    c002:	2208      	movs	r2, #8
    c004:	e7e7      	b.n	bfd6 <lv_ddlist_set_options+0x6e>
    c006:	bf00      	nop
    c008:	0001de08 	.word	0x0001de08

0000c00c <lv_ddlist_set_style>:
{
    c00c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c00e:	4604      	mov	r4, r0
    c010:	9201      	str	r2, [sp, #4]
    c012:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(ddlist, LV_OBJX_NAME);
    c014:	f7fe fb84 	bl	a720 <lv_debug_check_null>
    c018:	9a01      	ldr	r2, [sp, #4]
    c01a:	4603      	mov	r3, r0
    c01c:	b920      	cbnz	r0, c028 <lv_ddlist_set_style+0x1c>
    c01e:	4815      	ldr	r0, [pc, #84]	; (c074 <lv_ddlist_set_style+0x68>)
    c020:	4622      	mov	r2, r4
    c022:	f7fe fb8d 	bl	a740 <lv_debug_log_error>
    c026:	e7fe      	b.n	c026 <lv_ddlist_set_style+0x1a>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    c028:	4620      	mov	r0, r4
    c02a:	9201      	str	r2, [sp, #4]
    c02c:	f7ff fd10 	bl	ba50 <lv_obj_get_ext_attr>
    switch(type) {
    c030:	2d01      	cmp	r5, #1
    c032:	9a01      	ldr	r2, [sp, #4]
    c034:	d013      	beq.n	c05e <lv_ddlist_set_style+0x52>
    c036:	2d02      	cmp	r5, #2
    c038:	d00a      	beq.n	c050 <lv_ddlist_set_style+0x44>
    c03a:	b9cd      	cbnz	r5, c070 <lv_ddlist_set_style+0x64>
            lv_page_set_style(ddlist, LV_PAGE_STYLE_BG, style);
    c03c:	4620      	mov	r0, r4
    c03e:	4629      	mov	r1, r5
    c040:	f000 fd30 	bl	caa4 <lv_page_set_style>
            lv_ddlist_refr_width(ddlist);
    c044:	4620      	mov	r0, r4
}
    c046:	b003      	add	sp, #12
    c048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lv_ddlist_refr_width(ddlist);
    c04c:	f7ff bf39 	b.w	bec2 <lv_ddlist_refr_width>
        case LV_DDLIST_STYLE_SB: lv_page_set_style(ddlist, LV_PAGE_STYLE_SB, style); break;
    c050:	4629      	mov	r1, r5
    c052:	4620      	mov	r0, r4
}
    c054:	b003      	add	sp, #12
    c056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        case LV_DDLIST_STYLE_SB: lv_page_set_style(ddlist, LV_PAGE_STYLE_SB, style); break;
    c05a:	f000 bd23 	b.w	caa4 <lv_page_set_style>
            ext->sel_style  = style;
    c05e:	6342      	str	r2, [r0, #52]	; 0x34
            lv_obj_t * scrl = lv_page_get_scrl(ddlist);
    c060:	4620      	mov	r0, r4
    c062:	f000 fd5b 	bl	cb1c <lv_page_get_scrl>
}
    c066:	b003      	add	sp, #12
    c068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lv_obj_refresh_ext_draw_pad(scrl); /*Because of the wider selected rectangle*/
    c06c:	f7ff ba20 	b.w	b4b0 <lv_obj_refresh_ext_draw_pad>
}
    c070:	b003      	add	sp, #12
    c072:	bd30      	pop	{r4, r5, pc}
    c074:	0001de08 	.word	0x0001de08

0000c078 <lv_ddlist_get_selected>:
{
    c078:	b507      	push	{r0, r1, r2, lr}
    c07a:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(ddlist, LV_OBJX_NAME);
    c07c:	f7fe fb50 	bl	a720 <lv_debug_check_null>
    c080:	9a01      	ldr	r2, [sp, #4]
    c082:	4603      	mov	r3, r0
    c084:	b918      	cbnz	r0, c08e <lv_ddlist_get_selected+0x16>
    c086:	4805      	ldr	r0, [pc, #20]	; (c09c <lv_ddlist_get_selected+0x24>)
    c088:	f7fe fb5a 	bl	a740 <lv_debug_log_error>
    c08c:	e7fe      	b.n	c08c <lv_ddlist_get_selected+0x14>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    c08e:	4610      	mov	r0, r2
    c090:	f7ff fcde 	bl	ba50 <lv_obj_get_ext_attr>
}
    c094:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
    c096:	b003      	add	sp, #12
    c098:	f85d fb04 	ldr.w	pc, [sp], #4
    c09c:	0001de08 	.word	0x0001de08

0000c0a0 <lv_ddlist_get_style>:
{
    c0a0:	b538      	push	{r3, r4, r5, lr}
    c0a2:	4605      	mov	r5, r0
    c0a4:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(ddlist, LV_OBJX_NAME);
    c0a6:	f7fe fb3b 	bl	a720 <lv_debug_check_null>
    c0aa:	4603      	mov	r3, r0
    c0ac:	b920      	cbnz	r0, c0b8 <lv_ddlist_get_style+0x18>
    c0ae:	480b      	ldr	r0, [pc, #44]	; (c0dc <lv_ddlist_get_style+0x3c>)
    c0b0:	462a      	mov	r2, r5
    c0b2:	f7fe fb45 	bl	a740 <lv_debug_log_error>
    c0b6:	e7fe      	b.n	c0b6 <lv_ddlist_get_style+0x16>
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    c0b8:	4628      	mov	r0, r5
    c0ba:	f7ff fcc9 	bl	ba50 <lv_obj_get_ext_attr>
    switch(type) {
    c0be:	2c01      	cmp	r4, #1
    c0c0:	d008      	beq.n	c0d4 <lv_ddlist_get_style+0x34>
    c0c2:	2c02      	cmp	r4, #2
    c0c4:	d000      	beq.n	c0c8 <lv_ddlist_get_style+0x28>
    c0c6:	b93c      	cbnz	r4, c0d8 <lv_ddlist_get_style+0x38>
        case LV_DDLIST_STYLE_SB: return lv_page_get_style(ddlist, LV_PAGE_STYLE_SB);
    c0c8:	4621      	mov	r1, r4
    c0ca:	4628      	mov	r0, r5
}
    c0cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_DDLIST_STYLE_SB: return lv_page_get_style(ddlist, LV_PAGE_STYLE_SB);
    c0d0:	f000 bd4c 	b.w	cb6c <lv_page_get_style>
        case LV_DDLIST_STYLE_SEL: return ext->sel_style;
    c0d4:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
    c0d6:	bd38      	pop	{r3, r4, r5, pc}
    switch(type) {
    c0d8:	2000      	movs	r0, #0
    c0da:	e7fc      	b.n	c0d6 <lv_ddlist_get_style+0x36>
    c0dc:	0001de08 	.word	0x0001de08

0000c0e0 <lv_ddlist_create>:
{
    c0e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c0e4:	460f      	mov	r7, r1
    lv_obj_t * new_ddlist = lv_page_create(par, copy);
    c0e6:	f000 fd65 	bl	cbb4 <lv_page_create>
    c0ea:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_ddlist);
    c0ec:	f7fe fb18 	bl	a720 <lv_debug_check_null>
    c0f0:	4603      	mov	r3, r0
    c0f2:	b920      	cbnz	r0, c0fe <lv_ddlist_create+0x1e>
    c0f4:	4883      	ldr	r0, [pc, #524]	; (c304 <lv_ddlist_create+0x224>)
    c0f6:	4622      	mov	r2, r4
    c0f8:	f7fe fb22 	bl	a740 <lv_debug_log_error>
    c0fc:	e7fe      	b.n	c0fc <lv_ddlist_create+0x1c>
    if(new_ddlist == NULL) return NULL;
    c0fe:	b924      	cbnz	r4, c10a <lv_ddlist_create+0x2a>
    c100:	2400      	movs	r4, #0
}
    c102:	4620      	mov	r0, r4
    c104:	b003      	add	sp, #12
    c106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_ddlist);
    c10a:	4d7f      	ldr	r5, [pc, #508]	; (c308 <lv_ddlist_create+0x228>)
    c10c:	682b      	ldr	r3, [r5, #0]
    c10e:	b91b      	cbnz	r3, c118 <lv_ddlist_create+0x38>
    c110:	4620      	mov	r0, r4
    c112:	f7ff fc7d 	bl	ba10 <lv_obj_get_signal_cb>
    c116:	6028      	str	r0, [r5, #0]
    if(ancestor_scrl_signal == NULL) ancestor_scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(new_ddlist));
    c118:	4d7c      	ldr	r5, [pc, #496]	; (c30c <lv_ddlist_create+0x22c>)
    c11a:	682b      	ldr	r3, [r5, #0]
    c11c:	b92b      	cbnz	r3, c12a <lv_ddlist_create+0x4a>
    c11e:	4620      	mov	r0, r4
    c120:	f000 fcfc 	bl	cb1c <lv_page_get_scrl>
    c124:	f7ff fc74 	bl	ba10 <lv_obj_get_signal_cb>
    c128:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_ddlist);
    c12a:	4d79      	ldr	r5, [pc, #484]	; (c310 <lv_ddlist_create+0x230>)
    c12c:	682b      	ldr	r3, [r5, #0]
    c12e:	b91b      	cbnz	r3, c138 <lv_ddlist_create+0x58>
    c130:	4620      	mov	r0, r4
    c132:	f7ff fc7d 	bl	ba30 <lv_obj_get_design_cb>
    c136:	6028      	str	r0, [r5, #0]
    lv_ddlist_ext_t * ext = lv_obj_allocate_ext_attr(new_ddlist, sizeof(lv_ddlist_ext_t));
    c138:	2144      	movs	r1, #68	; 0x44
    c13a:	4620      	mov	r0, r4
    c13c:	f7fe fc86 	bl	aa4c <lv_obj_allocate_ext_attr>
    c140:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
    c142:	f7fe faed 	bl	a720 <lv_debug_check_null>
    c146:	4603      	mov	r3, r0
    c148:	b920      	cbnz	r0, c154 <lv_ddlist_create+0x74>
    c14a:	486e      	ldr	r0, [pc, #440]	; (c304 <lv_ddlist_create+0x224>)
    c14c:	462a      	mov	r2, r5
    c14e:	f7fe faf7 	bl	a740 <lv_debug_log_error>
    c152:	e7fe      	b.n	c152 <lv_ddlist_create+0x72>
    if(ext == NULL) return NULL;
    c154:	2d00      	cmp	r5, #0
    c156:	d0d3      	beq.n	c100 <lv_ddlist_create+0x20>
    ext->sel_style      = &lv_style_plain_color;
    c158:	4b6e      	ldr	r3, [pc, #440]	; (c314 <lv_ddlist_create+0x234>)
    lv_obj_set_signal_cb(new_ddlist, lv_ddlist_signal);
    c15a:	496f      	ldr	r1, [pc, #444]	; (c318 <lv_ddlist_create+0x238>)
    ext->label          = NULL;
    c15c:	f04f 0800 	mov.w	r8, #0
    ext->option_cnt     = 0;
    c160:	e9c5 380d 	strd	r3, r8, [r5, #52]	; 0x34
    ext->opened         = 0;
    c164:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
    ext->label          = NULL;
    c168:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
    ext->opened         = 0;
    c16c:	f023 030d 	bic.w	r3, r3, #13
    c170:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    lv_obj_set_signal_cb(new_ddlist, lv_ddlist_signal);
    c174:	4620      	mov	r0, r4
    ext->fix_height     = 0;
    c176:	f8a5 8040 	strh.w	r8, [r5, #64]	; 0x40
    ext->sel_opt_id_ori = 0;
    c17a:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    lv_obj_set_signal_cb(new_ddlist, lv_ddlist_signal);
    c17e:	f7fe fc45 	bl	aa0c <lv_obj_set_signal_cb>
    lv_obj_set_signal_cb(lv_page_get_scrl(new_ddlist), lv_ddlist_scrl_signal);
    c182:	4620      	mov	r0, r4
    c184:	f000 fcca 	bl	cb1c <lv_page_get_scrl>
    c188:	4964      	ldr	r1, [pc, #400]	; (c31c <lv_ddlist_create+0x23c>)
    c18a:	f7fe fc3f 	bl	aa0c <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_ddlist, lv_ddlist_design);
    c18e:	4964      	ldr	r1, [pc, #400]	; (c320 <lv_ddlist_create+0x240>)
    c190:	4620      	mov	r0, r4
    c192:	f7fe fc4b 	bl	aa2c <lv_obj_set_design_cb>
    if(copy == NULL) {
    c196:	2f00      	cmp	r7, #0
    c198:	d16b      	bne.n	c272 <lv_ddlist_create+0x192>
        lv_page_set_anim_time(new_ddlist, LV_DDLIST_DEF_ANIM_TIME);
    c19a:	21c8      	movs	r1, #200	; 0xc8
    c19c:	4620      	mov	r0, r4
    c19e:	f000 fc6d 	bl	ca7c <lv_page_set_anim_time>
        lv_obj_t * scrl = lv_page_get_scrl(new_ddlist);
    c1a2:	4620      	mov	r0, r4
    c1a4:	f000 fcba 	bl	cb1c <lv_page_get_scrl>
        lv_obj_set_drag(scrl, false);
    c1a8:	4639      	mov	r1, r7
    c1aa:	f7fe fb57 	bl	a85c <lv_obj_set_drag>
        lv_page_set_scrl_fit2(new_ddlist, LV_FIT_FILL, LV_FIT_TIGHT);
    c1ae:	2201      	movs	r2, #1
    c1b0:	2103      	movs	r1, #3
    c1b2:	4620      	mov	r0, r4
    c1b4:	f7ff fe78 	bl	bea8 <lv_page_set_scrl_fit2>
        if(lv_obj_get_base_dir(new_ddlist) == LV_BIDI_DIR_RTL) x = lv_obj_get_x(new_ddlist) + lv_obj_get_width(new_ddlist);
    c1b8:	4620      	mov	r0, r4
    c1ba:	f7ff fbac 	bl	b916 <lv_obj_get_base_dir>
    c1be:	2801      	cmp	r0, #1
    c1c0:	4620      	mov	r0, r4
    c1c2:	d144      	bne.n	c24e <lv_ddlist_create+0x16e>
    c1c4:	f7fe fcc6 	bl	ab54 <lv_obj_get_x>
    c1c8:	4606      	mov	r6, r0
    c1ca:	4620      	mov	r0, r4
    c1cc:	f7fe fcf6 	bl	abbc <lv_obj_get_width>
    c1d0:	4430      	add	r0, r6
    c1d2:	b206      	sxth	r6, r0
        ext->label = lv_label_create(new_ddlist, NULL);
    c1d4:	2100      	movs	r1, #0
    c1d6:	4620      	mov	r0, r4
    c1d8:	f004 fd6e 	bl	10cb8 <lv_label_create>
    c1dc:	2300      	movs	r3, #0
    c1de:	2201      	movs	r2, #1
    c1e0:	4611      	mov	r1, r2
    c1e2:	6328      	str	r0, [r5, #48]	; 0x30
    c1e4:	9300      	str	r3, [sp, #0]
    c1e6:	4620      	mov	r0, r4
    c1e8:	f003 fc34 	bl	fa54 <lv_cont_set_fit4>
        lv_page_set_sb_mode(new_ddlist, LV_SB_MODE_HIDE);
    c1ec:	2104      	movs	r1, #4
    c1ee:	4620      	mov	r0, r4
    c1f0:	f000 fc0c 	bl	ca0c <lv_page_set_sb_mode>
        lv_page_set_style(new_ddlist, LV_PAGE_STYLE_SCRL, &lv_style_transp_tight);
    c1f4:	4a4b      	ldr	r2, [pc, #300]	; (c324 <lv_ddlist_create+0x244>)
    c1f6:	2101      	movs	r1, #1
    c1f8:	4620      	mov	r0, r4
    c1fa:	f000 fc53 	bl	caa4 <lv_page_set_style>
        lv_ddlist_set_options(new_ddlist, "Option 1\nOption 2\nOption 3");
    c1fe:	494a      	ldr	r1, [pc, #296]	; (c328 <lv_ddlist_create+0x248>)
    c200:	4620      	mov	r0, r4
    c202:	f7ff feb1 	bl	bf68 <lv_ddlist_set_options>
        if(lv_obj_get_base_dir(new_ddlist) == LV_BIDI_DIR_RTL) lv_obj_set_x(new_ddlist, x - lv_obj_get_width(new_ddlist));
    c206:	4620      	mov	r0, r4
    c208:	f7ff fb85 	bl	b916 <lv_obj_get_base_dir>
    c20c:	2801      	cmp	r0, #1
    c20e:	d122      	bne.n	c256 <lv_ddlist_create+0x176>
    c210:	4620      	mov	r0, r4
    c212:	f7fe fcd3 	bl	abbc <lv_obj_get_width>
    c216:	1a30      	subs	r0, r6, r0
    c218:	b201      	sxth	r1, r0
        else lv_obj_set_x(new_ddlist, x);
    c21a:	4620      	mov	r0, r4
    c21c:	f7fe fe16 	bl	ae4c <lv_obj_set_x>
        lv_theme_t * th = lv_theme_get_current();
    c220:	f7fc fe9c 	bl	8f5c <lv_theme_get_current>
        if(th) {
    c224:	4605      	mov	r5, r0
    c226:	b1c0      	cbz	r0, c25a <lv_ddlist_create+0x17a>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_BG, th->style.ddlist.bg);
    c228:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    c22c:	2100      	movs	r1, #0
    c22e:	4620      	mov	r0, r4
    c230:	f7ff feec 	bl	c00c <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, th->style.ddlist.sel);
    c234:	f8d5 214c 	ldr.w	r2, [r5, #332]	; 0x14c
    c238:	2101      	movs	r1, #1
    c23a:	4620      	mov	r0, r4
    c23c:	f7ff fee6 	bl	c00c <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, th->style.ddlist.sb);
    c240:	f8d5 2150 	ldr.w	r2, [r5, #336]	; 0x150
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, &lv_style_pretty_color);
    c244:	2102      	movs	r1, #2
        lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, lv_ddlist_get_style(copy, LV_DDLIST_STYLE_SEL));
    c246:	4620      	mov	r0, r4
    c248:	f7ff fee0 	bl	c00c <lv_ddlist_set_style>
    c24c:	e759      	b.n	c102 <lv_ddlist_create+0x22>
        else x = lv_obj_get_x(new_ddlist);
    c24e:	f7fe fc81 	bl	ab54 <lv_obj_get_x>
    c252:	4606      	mov	r6, r0
    c254:	e7be      	b.n	c1d4 <lv_ddlist_create+0xf4>
        else lv_obj_set_x(new_ddlist, x);
    c256:	4631      	mov	r1, r6
    c258:	e7df      	b.n	c21a <lv_ddlist_create+0x13a>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_BG, &lv_style_pretty);
    c25a:	4601      	mov	r1, r0
    c25c:	4a33      	ldr	r2, [pc, #204]	; (c32c <lv_ddlist_create+0x24c>)
    c25e:	4620      	mov	r0, r4
    c260:	f7ff fed4 	bl	c00c <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, &lv_style_plain_color);
    c264:	4a2b      	ldr	r2, [pc, #172]	; (c314 <lv_ddlist_create+0x234>)
    c266:	2101      	movs	r1, #1
    c268:	4620      	mov	r0, r4
    c26a:	f7ff fecf 	bl	c00c <lv_ddlist_set_style>
            lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, &lv_style_pretty_color);
    c26e:	4a30      	ldr	r2, [pc, #192]	; (c330 <lv_ddlist_create+0x250>)
    c270:	e7e8      	b.n	c244 <lv_ddlist_create+0x164>
        lv_ddlist_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
    c272:	4638      	mov	r0, r7
    c274:	f7ff fbec 	bl	ba50 <lv_obj_get_ext_attr>
    c278:	4606      	mov	r6, r0
        ext->label                 = lv_label_create(new_ddlist, copy_ext->label);
    c27a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c27c:	4620      	mov	r0, r4
    c27e:	f004 fd1b 	bl	10cb8 <lv_label_create>
    c282:	6328      	str	r0, [r5, #48]	; 0x30
    c284:	4681      	mov	r9, r0
        lv_label_set_text(ext->label, lv_label_get_text(copy_ext->label));
    c286:	6b30      	ldr	r0, [r6, #48]	; 0x30
    c288:	f004 f872 	bl	10370 <lv_label_get_text>
    c28c:	4601      	mov	r1, r0
    c28e:	4648      	mov	r0, r9
    c290:	f004 fc10 	bl	10ab4 <lv_label_set_text>
        ext->sel_opt_id     = copy_ext->sel_opt_id;
    c294:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
    c296:	876b      	strh	r3, [r5, #58]	; 0x3a
        ext->sel_opt_id_ori = copy_ext->sel_opt_id;
    c298:	87ab      	strh	r3, [r5, #60]	; 0x3c
        ext->fix_height     = copy_ext->fix_height;
    c29a:	f9b6 3040 	ldrsh.w	r3, [r6, #64]	; 0x40
    c29e:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
        ext->option_cnt     = copy_ext->option_cnt;
    c2a2:	8f33      	ldrh	r3, [r6, #56]	; 0x38
    c2a4:	872b      	strh	r3, [r5, #56]	; 0x38
        ext->sel_style      = copy_ext->sel_style;
    c2a6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    c2a8:	636b      	str	r3, [r5, #52]	; 0x34
        ext->draw_arrow     = copy_ext->draw_arrow;
    c2aa:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
    c2ae:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
    c2b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c2b6:	f363 0282 	bfi	r2, r3, #2, #1
    c2ba:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        ext->stay_open      = copy_ext->stay_open;
    c2be:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
    c2c2:	b2d2      	uxtb	r2, r2
    c2c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    c2c8:	f363 02c3 	bfi	r2, r3, #3, #1
    c2cc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_BG, lv_ddlist_get_style(copy, LV_DDLIST_STYLE_BG));
    c2d0:	4641      	mov	r1, r8
    c2d2:	4638      	mov	r0, r7
    c2d4:	f7ff fee4 	bl	c0a0 <lv_ddlist_get_style>
    c2d8:	4641      	mov	r1, r8
    c2da:	4602      	mov	r2, r0
    c2dc:	4620      	mov	r0, r4
    c2de:	f7ff fe95 	bl	c00c <lv_ddlist_set_style>
        lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SB, lv_ddlist_get_style(copy, LV_DDLIST_STYLE_SB));
    c2e2:	2102      	movs	r1, #2
    c2e4:	4638      	mov	r0, r7
    c2e6:	f7ff fedb 	bl	c0a0 <lv_ddlist_get_style>
    c2ea:	2102      	movs	r1, #2
    c2ec:	4602      	mov	r2, r0
    c2ee:	4620      	mov	r0, r4
    c2f0:	f7ff fe8c 	bl	c00c <lv_ddlist_set_style>
        lv_ddlist_set_style(new_ddlist, LV_DDLIST_STYLE_SEL, lv_ddlist_get_style(copy, LV_DDLIST_STYLE_SEL));
    c2f4:	2101      	movs	r1, #1
    c2f6:	4638      	mov	r0, r7
    c2f8:	f7ff fed2 	bl	c0a0 <lv_ddlist_get_style>
    c2fc:	2101      	movs	r1, #1
    c2fe:	4602      	mov	r2, r0
    c300:	e7a1      	b.n	c246 <lv_ddlist_create+0x166>
    c302:	bf00      	nop
    c304:	0001a9b8 	.word	0x0001a9b8
    c308:	20005e5c 	.word	0x20005e5c
    c30c:	20005e58 	.word	0x20005e58
    c310:	20005e54 	.word	0x20005e54
    c314:	2000627c 	.word	0x2000627c
    c318:	0000bd6d 	.word	0x0000bd6d
    c31c:	0000c589 	.word	0x0000c589
    c320:	0000c335 	.word	0x0000c335
    c324:	200060bc 	.word	0x200060bc
    c328:	0001de34 	.word	0x0001de34
    c32c:	2000607c 	.word	0x2000607c
    c330:	20005f7c 	.word	0x20005f7c

0000c334 <lv_ddlist_design>:
{
    c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
    c338:	2a02      	cmp	r2, #2
{
    c33a:	b09d      	sub	sp, #116	; 0x74
    c33c:	4604      	mov	r4, r0
    c33e:	460d      	mov	r5, r1
    c340:	4617      	mov	r7, r2
    if(mode == LV_DESIGN_COVER_CHK) {
    c342:	d105      	bne.n	c350 <lv_ddlist_design+0x1c>
        return ancestor_design(ddlist, mask, mode);
    c344:	4b8e      	ldr	r3, [pc, #568]	; (c580 <lv_ddlist_design+0x24c>)
    c346:	681b      	ldr	r3, [r3, #0]
    c348:	4798      	blx	r3
}
    c34a:	b01d      	add	sp, #116	; 0x74
    c34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(mode == LV_DESIGN_DRAW_MAIN) {
    c350:	2a00      	cmp	r2, #0
    c352:	d138      	bne.n	c3c6 <lv_ddlist_design+0x92>
        ancestor_design(ddlist, mask, mode);
    c354:	4b8a      	ldr	r3, [pc, #552]	; (c580 <lv_ddlist_design+0x24c>)
    c356:	681b      	ldr	r3, [r3, #0]
    c358:	4798      	blx	r3
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    c35a:	4620      	mov	r0, r4
    c35c:	f7ff fb78 	bl	ba50 <lv_obj_get_ext_attr>
    c360:	4606      	mov	r6, r0
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
    c362:	4620      	mov	r0, r4
    c364:	f7ff fad9 	bl	b91a <lv_obj_get_opa_scale>
        if(ext->opened != 0 || ext->force_sel) {
    c368:	f896 203e 	ldrb.w	r2, [r6, #62]	; 0x3e
    c36c:	0792      	lsls	r2, r2, #30
    c36e:	d101      	bne.n	c374 <lv_ddlist_design+0x40>
    return true;
    c370:	2001      	movs	r0, #1
    c372:	e7ea      	b.n	c34a <lv_ddlist_design+0x16>
    c374:	9007      	str	r0, [sp, #28]
            const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
    c376:	4639      	mov	r1, r7
    c378:	4620      	mov	r0, r4
    c37a:	f7ff fe91 	bl	c0a0 <lv_ddlist_get_style>
            lv_coord_t font_h        = lv_font_get_line_height(font);
    c37e:	6a42      	ldr	r2, [r0, #36]	; 0x24
            rect_area.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
    c380:	f9b0 102a 	ldrsh.w	r1, [r0, #42]	; 0x2a
            lv_coord_t font_h        = lv_font_get_line_height(font);
    c384:	7a17      	ldrb	r7, [r2, #8]
            rect_area.y1 = ext->label->coords.y1;
    c386:	6b32      	ldr	r2, [r6, #48]	; 0x30
            lv_draw_rect(&rect_area, mask, ext->sel_style, opa_scale);
    c388:	9b07      	ldr	r3, [sp, #28]
            rect_area.y1 -= style->text.line_space / 2;
    c38a:	8a52      	ldrh	r2, [r2, #18]
    c38c:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
    c390:	eba2 0060 	sub.w	r0, r2, r0, asr #1
            rect_area.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
    c394:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
    c396:	eb07 0c01 	add.w	ip, r7, r1
            rect_area.y1 -= style->text.line_space / 2;
    c39a:	fb12 020c 	smlabb	r2, r2, ip, r0
            rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
    c39e:	3901      	subs	r1, #1
    c3a0:	4439      	add	r1, r7
            rect_area.y1 -= style->text.line_space / 2;
    c3a2:	b292      	uxth	r2, r2
    c3a4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
            rect_area.y2 = rect_area.y1 + font_h + style->text.line_space - 1;
    c3a8:	440a      	add	r2, r1
    c3aa:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
            rect_area.x1 = ddlist->coords.x1;
    c3ae:	8a22      	ldrh	r2, [r4, #16]
    c3b0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
            rect_area.x2 = ddlist->coords.x2;
    c3b4:	8aa2      	ldrh	r2, [r4, #20]
    c3b6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
            lv_draw_rect(&rect_area, mask, ext->sel_style, opa_scale);
    c3ba:	4629      	mov	r1, r5
    c3bc:	6b72      	ldr	r2, [r6, #52]	; 0x34
    c3be:	a80c      	add	r0, sp, #48	; 0x30
    c3c0:	f7f8 ff7c 	bl	52bc <lv_draw_rect>
    c3c4:	e7d4      	b.n	c370 <lv_ddlist_design+0x3c>
    else if(mode == LV_DESIGN_DRAW_POST) {
    c3c6:	2a01      	cmp	r2, #1
    c3c8:	d1d2      	bne.n	c370 <lv_ddlist_design+0x3c>
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    c3ca:	f7ff fb41 	bl	ba50 <lv_obj_get_ext_attr>
    c3ce:	4682      	mov	sl, r0
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
    c3d0:	4620      	mov	r0, r4
    c3d2:	f7ff faa2 	bl	b91a <lv_obj_get_opa_scale>
        if(ext->opened || ext->force_sel) {
    c3d6:	f89a 303e 	ldrb.w	r3, [sl, #62]	; 0x3e
    c3da:	f013 0b03 	ands.w	fp, r3, #3
        lv_opa_t opa_scale    = lv_obj_get_opa_scale(ddlist);
    c3de:	4606      	mov	r6, r0
        if(ext->opened || ext->force_sel) {
    c3e0:	d069      	beq.n	c4b6 <lv_ddlist_design+0x182>
            const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
    c3e2:	2100      	movs	r1, #0
    c3e4:	4620      	mov	r0, r4
    c3e6:	f7ff fe5b 	bl	c0a0 <lv_ddlist_get_style>
            lv_coord_t font_h        = lv_font_get_line_height(font);
    c3ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
            const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
    c3ec:	4680      	mov	r8, r0
            lv_coord_t font_h        = lv_font_get_line_height(font);
    c3ee:	7a18      	ldrb	r0, [r3, #8]
            area_sel.y1 -= style->text.line_space / 2;
    c3f0:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
            area_sel.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
    c3f4:	f9b8 202a 	ldrsh.w	r2, [r8, #42]	; 0x2a
            area_sel.y1 -= style->text.line_space / 2;
    c3f8:	8a5b      	ldrh	r3, [r3, #18]
    c3fa:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    c3fe:	eba3 0161 	sub.w	r1, r3, r1, asr #1
            area_sel.y1 += ext->sel_opt_id * (font_h + style->text.line_space);
    c402:	f8ba 303a 	ldrh.w	r3, [sl, #58]	; 0x3a
    c406:	eb00 0c02 	add.w	ip, r0, r2
            area_sel.y1 -= style->text.line_space / 2;
    c40a:	fb13 130c 	smlabb	r3, r3, ip, r1
            area_sel.y2 = area_sel.y1 + font_h + style->text.line_space - 1;
    c40e:	3a01      	subs	r2, #1
    c410:	4402      	add	r2, r0
            area_sel.y1 -= style->text.line_space / 2;
    c412:	b29b      	uxth	r3, r3
    c414:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            area_sel.y2 = area_sel.y1 + font_h + style->text.line_space - 1;
    c418:	4413      	add	r3, r2
    c41a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            area_sel.x1 = ddlist->coords.x1;
    c41e:	8a23      	ldrh	r3, [r4, #16]
    c420:	f8ad 3020 	strh.w	r3, [sp, #32]
            area_ok = lv_area_intersect(&mask_sel, mask, &area_sel);
    c424:	aa08      	add	r2, sp, #32
            area_sel.x2 = ddlist->coords.x2;
    c426:	8aa3      	ldrh	r3, [r4, #20]
    c428:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            area_ok = lv_area_intersect(&mask_sel, mask, &area_sel);
    c42c:	4629      	mov	r1, r5
    c42e:	a80a      	add	r0, sp, #40	; 0x28
    c430:	f7f7 fb18 	bl	3a64 <lv_area_intersect>
            if(area_ok) {
    c434:	b3a8      	cbz	r0, c4a2 <lv_ddlist_design+0x16e>
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_SEL);
    c436:	4639      	mov	r1, r7
    c438:	4620      	mov	r0, r4
    c43a:	f7ff fe31 	bl	c0a0 <lv_ddlist_get_style>
    c43e:	4607      	mov	r7, r0
                lv_style_copy(&new_style, style);
    c440:	4641      	mov	r1, r8
    c442:	a80c      	add	r0, sp, #48	; 0x30
    c444:	f7fd f86f 	bl	9526 <lv_style_copy>
                new_style.text.color = sel_style->text.color;
    c448:	8c3b      	ldrh	r3, [r7, #32]
    c44a:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
                new_style.text.opa   = sel_style->text.opa;
    c44e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    c452:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    c456:	4620      	mov	r0, r4
    c458:	f7ff fafa 	bl	ba50 <lv_obj_get_ext_attr>
    if(!ext->label) return LV_TXT_FLAG_CENTER;
    c45c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    c45e:	b338      	cbz	r0, c4b0 <lv_ddlist_design+0x17c>
    lv_label_align_t align = lv_label_get_align(ext->label);
    c460:	f003 ffb0 	bl	103c4 <lv_label_get_align>
    switch(align) {
    c464:	2801      	cmp	r0, #1
    c466:	d023      	beq.n	c4b0 <lv_ddlist_design+0x17c>
        case LV_LABEL_ALIGN_RIGHT: return LV_TXT_FLAG_RIGHT;
    c468:	2802      	cmp	r0, #2
    c46a:	bf14      	ite	ne
    c46c:	f04f 0800 	movne.w	r8, #0
    c470:	f04f 0808 	moveq.w	r8, #8
                lv_draw_label(&ext->label->coords, &mask_sel, &new_style, opa_scale, lv_label_get_text(ext->label),
    c474:	f8da 9030 	ldr.w	r9, [sl, #48]	; 0x30
    c478:	4648      	mov	r0, r9
    c47a:	f003 ff79 	bl	10370 <lv_label_get_text>
    c47e:	4607      	mov	r7, r0
    c480:	4620      	mov	r0, r4
    c482:	f7ff fa48 	bl	b916 <lv_obj_get_base_dir>
    c486:	2300      	movs	r3, #0
    c488:	e9cd 3303 	strd	r3, r3, [sp, #12]
    c48c:	e9cd 8301 	strd	r8, r3, [sp, #4]
    c490:	9005      	str	r0, [sp, #20]
    c492:	9700      	str	r7, [sp, #0]
    c494:	4633      	mov	r3, r6
    c496:	aa0c      	add	r2, sp, #48	; 0x30
    c498:	a90a      	add	r1, sp, #40	; 0x28
    c49a:	f109 0010 	add.w	r0, r9, #16
                    lv_draw_label(&area_arrow, &mask_arrow, &new_style, opa_scale, LV_SYMBOL_DOWN, LV_TXT_FLAG_NONE,
    c49e:	f7f8 fc47 	bl	4d30 <lv_draw_label>
        ancestor_design(ddlist, mask, mode);
    c4a2:	4b37      	ldr	r3, [pc, #220]	; (c580 <lv_ddlist_design+0x24c>)
    c4a4:	2201      	movs	r2, #1
    c4a6:	681b      	ldr	r3, [r3, #0]
    c4a8:	4629      	mov	r1, r5
    c4aa:	4620      	mov	r0, r4
    c4ac:	4798      	blx	r3
    c4ae:	e75f      	b.n	c370 <lv_ddlist_design+0x3c>
    switch(align) {
    c4b0:	f04f 0804 	mov.w	r8, #4
    c4b4:	e7de      	b.n	c474 <lv_ddlist_design+0x140>
            if(ext->draw_arrow) {
    c4b6:	075b      	lsls	r3, r3, #29
    c4b8:	d5f3      	bpl.n	c4a2 <lv_ddlist_design+0x16e>
                const lv_style_t * style     = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
    c4ba:	4659      	mov	r1, fp
    c4bc:	4620      	mov	r0, r4
    c4be:	f7ff fdef 	bl	c0a0 <lv_ddlist_get_style>
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
    c4c2:	4659      	mov	r1, fp
                const lv_font_t * font       = style->text.font;
    c4c4:	6a47      	ldr	r7, [r0, #36]	; 0x24
                const lv_style_t * style     = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
    c4c6:	4680      	mov	r8, r0
                const lv_style_t * sel_style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
    c4c8:	4620      	mov	r0, r4
    c4ca:	f7ff fde9 	bl	c0a0 <lv_ddlist_get_style>
    c4ce:	4681      	mov	r9, r0
                lv_style_copy(&new_style, style);
    c4d0:	4641      	mov	r1, r8
    c4d2:	a80c      	add	r0, sp, #48	; 0x30
                lv_coord_t font_h            = lv_font_get_line_height(font);
    c4d4:	7a3f      	ldrb	r7, [r7, #8]
                lv_style_copy(&new_style, style);
    c4d6:	f7fd f826 	bl	9526 <lv_style_copy>
                new_style.text.color = sel_style->text.color;
    c4da:	f8b9 3020 	ldrh.w	r3, [r9, #32]
    c4de:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
                new_style.text.opa   = sel_style->text.opa;
    c4e2:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
                lv_coord_t arrow_width = lv_txt_get_width(LV_SYMBOL_DOWN, (uint16_t)strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
    c4e6:	4827      	ldr	r0, [pc, #156]	; (c584 <lv_ddlist_design+0x250>)
                new_style.text.opa   = sel_style->text.opa;
    c4e8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
                lv_coord_t arrow_width = lv_txt_get_width(LV_SYMBOL_DOWN, (uint16_t)strlen(LV_SYMBOL_DOWN), sel_style->text.font, 0, 0);
    c4ec:	f7f3 fe30 	bl	150 <strlen>
    c4f0:	f8cd b000 	str.w	fp, [sp]
    c4f4:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
    c4f8:	b281      	uxth	r1, r0
    c4fa:	465b      	mov	r3, fp
    c4fc:	4821      	ldr	r0, [pc, #132]	; (c584 <lv_ddlist_design+0x250>)
    c4fe:	f7f6 fd67 	bl	2fd0 <lv_txt_get_width>
    c502:	4681      	mov	r9, r0
                if(lv_label_get_align(ext->label) != LV_LABEL_ALIGN_RIGHT) {
    c504:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
    c508:	f003 ff5c 	bl	103c4 <lv_label_get_align>
    c50c:	2802      	cmp	r0, #2
    c50e:	d02b      	beq.n	c568 <lv_ddlist_design+0x234>
                    area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
    c510:	f8b8 101c 	ldrh.w	r1, [r8, #28]
    c514:	8aa2      	ldrh	r2, [r4, #20]
    c516:	1a51      	subs	r1, r2, r1
    c518:	b28a      	uxth	r2, r1
                    area_arrow.x1 = area_arrow.x2 - arrow_width;
    c51a:	eba2 0009 	sub.w	r0, r2, r9
                    area_arrow.x2 = ddlist->coords.x2 - style->body.padding.right;
    c51e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                    area_arrow.x1 = area_arrow.x2 - arrow_width;
    c522:	f8ad 0020 	strh.w	r0, [sp, #32]
                area_arrow.y1 = ddlist->coords.y1 + style->text.line_space;
    c526:	f8b8 202a 	ldrh.w	r2, [r8, #42]	; 0x2a
    c52a:	8a63      	ldrh	r3, [r4, #18]
    c52c:	4413      	add	r3, r2
    c52e:	b29b      	uxth	r3, r3
    c530:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
    c534:	aa08      	add	r2, sp, #32
                area_arrow.y2 = area_arrow.y1 + font_h;
    c536:	443b      	add	r3, r7
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
    c538:	4629      	mov	r1, r5
    c53a:	a80a      	add	r0, sp, #40	; 0x28
                area_arrow.y2 = area_arrow.y1 + font_h;
    c53c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                area_ok = lv_area_intersect(&mask_arrow, mask, &area_arrow);
    c540:	f7f7 fa90 	bl	3a64 <lv_area_intersect>
                if(area_ok) {
    c544:	2800      	cmp	r0, #0
    c546:	d0ac      	beq.n	c4a2 <lv_ddlist_design+0x16e>
                    lv_draw_label(&area_arrow, &mask_arrow, &new_style, opa_scale, LV_SYMBOL_DOWN, LV_TXT_FLAG_NONE,
    c548:	4620      	mov	r0, r4
    c54a:	f7ff f9e4 	bl	b916 <lv_obj_get_base_dir>
    c54e:	2300      	movs	r3, #0
    c550:	e9cd 3303 	strd	r3, r3, [sp, #12]
    c554:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c558:	4b0a      	ldr	r3, [pc, #40]	; (c584 <lv_ddlist_design+0x250>)
    c55a:	9005      	str	r0, [sp, #20]
    c55c:	9300      	str	r3, [sp, #0]
    c55e:	aa0c      	add	r2, sp, #48	; 0x30
    c560:	4633      	mov	r3, r6
    c562:	a90a      	add	r1, sp, #40	; 0x28
    c564:	a808      	add	r0, sp, #32
    c566:	e79a      	b.n	c49e <lv_ddlist_design+0x16a>
                    area_arrow.x1 = ddlist->coords.x1 + style->body.padding.left;
    c568:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    c56c:	8a22      	ldrh	r2, [r4, #16]
    c56e:	441a      	add	r2, r3
    c570:	b293      	uxth	r3, r2
    c572:	f8ad 3020 	strh.w	r3, [sp, #32]
                    area_arrow.x2 = area_arrow.x1 + arrow_width;
    c576:	444b      	add	r3, r9
    c578:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    c57c:	e7d3      	b.n	c526 <lv_ddlist_design+0x1f2>
    c57e:	bf00      	nop
    c580:	20005e54 	.word	0x20005e54
    c584:	0001de4f 	.word	0x0001de4f

0000c588 <lv_ddlist_scrl_signal>:
{
    c588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_scrl_signal(scrl, sign, param);
    c58a:	4b1d      	ldr	r3, [pc, #116]	; (c600 <lv_ddlist_scrl_signal+0x78>)
    c58c:	681b      	ldr	r3, [r3, #0]
{
    c58e:	4605      	mov	r5, r0
    c590:	460c      	mov	r4, r1
    c592:	4617      	mov	r7, r2
    res = ancestor_scrl_signal(scrl, sign, param);
    c594:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
    c596:	2801      	cmp	r0, #1
    res = ancestor_scrl_signal(scrl, sign, param);
    c598:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
    c59a:	d11c      	bne.n	c5d6 <lv_ddlist_scrl_signal+0x4e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
    c59c:	2c07      	cmp	r4, #7
    c59e:	d105      	bne.n	c5ac <lv_ddlist_scrl_signal+0x24>
    c5a0:	4638      	mov	r0, r7
    c5a2:	4918      	ldr	r1, [pc, #96]	; (c604 <lv_ddlist_scrl_signal+0x7c>)
}
    c5a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
    c5a8:	f7ff ba62 	b.w	ba70 <lv_obj_handle_get_type_signal>
    lv_obj_t * ddlist = lv_obj_get_parent(scrl);
    c5ac:	4628      	mov	r0, r5
    c5ae:	f7fe fa63 	bl	aa78 <lv_obj_get_parent>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    c5b2:	2c06      	cmp	r4, #6
    lv_obj_t * ddlist = lv_obj_get_parent(scrl);
    c5b4:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    c5b6:	d110      	bne.n	c5da <lv_ddlist_scrl_signal+0x52>
        const lv_style_t * style = lv_ddlist_get_style(ddlist, LV_DDLIST_STYLE_BG);
    c5b8:	2100      	movs	r1, #0
    c5ba:	f7ff fd71 	bl	c0a0 <lv_ddlist_get_style>
        lv_coord_t hpad          = LV_MATH_MAX(style->body.padding.left, style->body.padding.right);
    c5be:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
    c5c2:	f9b0 201a 	ldrsh.w	r2, [r0, #26]
    c5c6:	4293      	cmp	r3, r2
    c5c8:	bfb8      	it	lt
    c5ca:	4613      	movlt	r3, r2
        if(scrl->ext_draw_pad < hpad) scrl->ext_draw_pad = hpad;
    c5cc:	f9b5 2030 	ldrsh.w	r2, [r5, #48]	; 0x30
    c5d0:	429a      	cmp	r2, r3
    c5d2:	da00      	bge.n	c5d6 <lv_ddlist_scrl_signal+0x4e>
    c5d4:	862b      	strh	r3, [r5, #48]	; 0x30
}
    c5d6:	4630      	mov	r0, r6
    c5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_RELEASED) {
    c5da:	2c0b      	cmp	r4, #11
    c5dc:	d109      	bne.n	c5f2 <lv_ddlist_scrl_signal+0x6a>
        if(lv_indev_is_dragging(lv_indev_get_act()) == false) {
    c5de:	f7fd fd41 	bl	a064 <lv_indev_get_act>
    c5e2:	f7fd fd58 	bl	a096 <lv_indev_is_dragging>
    c5e6:	2800      	cmp	r0, #0
    c5e8:	d1f5      	bne.n	c5d6 <lv_ddlist_scrl_signal+0x4e>
            release_handler(ddlist);
    c5ea:	4638      	mov	r0, r7
    c5ec:	f7ff fb3e 	bl	bc6c <release_handler>
    c5f0:	e7f1      	b.n	c5d6 <lv_ddlist_scrl_signal+0x4e>
    } else if(sign == LV_SIGNAL_CLEANUP) {
    c5f2:	2c00      	cmp	r4, #0
    c5f4:	d1ef      	bne.n	c5d6 <lv_ddlist_scrl_signal+0x4e>
        lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);
    c5f6:	f7ff fa2b 	bl	ba50 <lv_obj_get_ext_attr>
        ext->label            = NULL; /*The label is already deleted*/
    c5fa:	6304      	str	r4, [r0, #48]	; 0x30
    c5fc:	e7eb      	b.n	c5d6 <lv_ddlist_scrl_signal+0x4e>
    c5fe:	bf00      	nop
    c600:	20005e58 	.word	0x20005e58
    c604:	00015655 	.word	0x00015655

0000c608 <lv_area_copy>:
    c608:	2208      	movs	r2, #8
    c60a:	f007 be53 	b.w	142b4 <memcpy>

0000c60e <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
    c60e:	b538      	push	{r3, r4, r5, lr}
    c610:	460c      	mov	r4, r1
    lv_obj_t * page = lv_obj_get_parent(scrl);
    c612:	f7fe fa31 	bl	aa78 <lv_obj_get_parent>

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
    c616:	2c0a      	cmp	r4, #10
    lv_obj_t * page = lv_obj_get_parent(scrl);
    c618:	4605      	mov	r5, r0
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
    c61a:	d808      	bhi.n	c62e <scrl_def_event_cb+0x20>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT ||
       event == LV_EVENT_DRAG_BEGIN || event == LV_EVENT_DRAG_END || event == LV_EVENT_DRAG_THROW_BEGIN) {
        lv_event_send(page, event, lv_event_get_data());
    c61c:	f7fe f9f0 	bl	aa00 <lv_event_get_data>
    c620:	4621      	mov	r1, r4
    c622:	4602      	mov	r2, r0
    c624:	4628      	mov	r0, r5
    }
    /*clang-format on*/
}
    c626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(page, event, lv_event_get_data());
    c62a:	f7fe b9cd 	b.w	a9c8 <lv_event_send>
}
    c62e:	bd38      	pop	{r3, r4, r5, pc}

0000c630 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
    c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c634:	b08d      	sub	sp, #52	; 0x34
    c636:	4606      	mov	r6, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
    c638:	f7ff fa0a 	bl	ba50 <lv_obj_get_ext_attr>
    c63c:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(page);
    c63e:	4630      	mov	r0, r6
    c640:	f7fe faea 	bl	ac18 <lv_obj_get_style>
    lv_obj_t * scrl          = ext->scrl;
    c644:	f8d4 a004 	ldr.w	sl, [r4, #4]
    const lv_style_t * style = lv_obj_get_style(page);
    c648:	4683      	mov	fp, r0
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
    c64a:	4650      	mov	r0, sl
    c64c:	f7fe fab6 	bl	abbc <lv_obj_get_width>
    c650:	9001      	str	r0, [sp, #4]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
    c652:	4650      	mov	r0, sl
    c654:	f7fe fac0 	bl	abd8 <lv_obj_get_height>
    c658:	9002      	str	r0, [sp, #8]
    lv_coord_t obj_w  = lv_obj_get_width(page);
    c65a:	4630      	mov	r0, r6
    c65c:	f7fe faae 	bl	abbc <lv_obj_get_width>
    c660:	4605      	mov	r5, r0
    lv_coord_t obj_h  = lv_obj_get_height(page);
    c662:	4630      	mov	r0, r6
    c664:	f7fe fab8 	bl	abd8 <lv_obj_get_height>
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
    c668:	7f23      	ldrb	r3, [r4, #28]
    lv_coord_t obj_h  = lv_obj_get_height(page);
    c66a:	9000      	str	r0, [sp, #0]
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
    c66c:	f013 021c 	ands.w	r2, r3, #28
    c670:	d066      	beq.n	c740 <lv_page_sb_refresh+0x110>

    if(ext->sb.mode == LV_SB_MODE_ON) {
    c672:	2a04      	cmp	r2, #4
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
    c674:	68a1      	ldr	r1, [r4, #8]
    c676:	f9bb 801c 	ldrsh.w	r8, [fp, #28]
    c67a:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
    c67e:	9105      	str	r1, [sp, #20]
        ext->sb.hor_draw = 1;
    c680:	bf04      	itt	eq
    c682:	f023 0303 	biceq.w	r3, r3, #3
    c686:	f043 0303 	orreq.w	r3, r3, #3
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
    c68a:	f9bb 1018 	ldrsh.w	r1, [fp, #24]
        ext->sb.hor_draw = 1;
    c68e:	bf08      	it	eq
    c690:	7723      	strbeq	r3, [r4, #28]
        ext->sb.ver_draw = 1;
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
    c692:	4630      	mov	r0, r6
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
    c694:	9106      	str	r1, [sp, #24]
    lv_disp_t * disp = lv_obj_get_disp(page);
    c696:	f7fe fa0b 	bl	aab0 <lv_obj_get_disp>
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
    c69a:	7f23      	ldrb	r3, [r4, #28]
    lv_disp_t * disp = lv_obj_get_disp(page);
    c69c:	4607      	mov	r7, r0
    if(ext->sb.hor_draw != 0) {
    c69e:	07d8      	lsls	r0, r3, #31
    c6a0:	d51e      	bpl.n	c6e0 <lv_page_sb_refresh+0xb0>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
    c6a2:	f104 010c 	add.w	r1, r4, #12
    c6a6:	a80a      	add	r0, sp, #40	; 0x28
    c6a8:	f7ff ffae 	bl	c608 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
    c6ac:	8a32      	ldrh	r2, [r6, #16]
    c6ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
        sb_area_tmp.y1 += page->coords.y1;
    c6b2:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
        sb_area_tmp.x1 += page->coords.x1;
    c6b6:	4413      	add	r3, r2
    c6b8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sb_area_tmp.y1 += page->coords.y1;
    c6bc:	8a73      	ldrh	r3, [r6, #18]
    c6be:	4419      	add	r1, r3
    c6c0:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
        sb_area_tmp.x2 += page->coords.x1;
    c6c4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    c6c8:	440a      	add	r2, r1
    c6ca:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        sb_area_tmp.y2 += page->coords.y1;
    c6ce:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
        lv_inv_area(disp, &sb_area_tmp);
    c6d2:	a90a      	add	r1, sp, #40	; 0x28
        sb_area_tmp.y2 += page->coords.y1;
    c6d4:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
    c6d6:	4638      	mov	r0, r7
        sb_area_tmp.y2 += page->coords.y1;
    c6d8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        lv_inv_area(disp, &sb_area_tmp);
    c6dc:	f7fd fe1f 	bl	a31e <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
    c6e0:	7f23      	ldrb	r3, [r4, #28]
    c6e2:	0799      	lsls	r1, r3, #30
    c6e4:	d51e      	bpl.n	c724 <lv_page_sb_refresh+0xf4>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
    c6e6:	f104 0114 	add.w	r1, r4, #20
    c6ea:	a80a      	add	r0, sp, #40	; 0x28
    c6ec:	f7ff ff8c 	bl	c608 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
    c6f0:	8a32      	ldrh	r2, [r6, #16]
    c6f2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
        sb_area_tmp.y1 += page->coords.y1;
    c6f6:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
        sb_area_tmp.x1 += page->coords.x1;
    c6fa:	4413      	add	r3, r2
    c6fc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sb_area_tmp.y1 += page->coords.y1;
    c700:	8a73      	ldrh	r3, [r6, #18]
    c702:	4419      	add	r1, r3
    c704:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
        sb_area_tmp.x2 += page->coords.x1;
    c708:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    c70c:	440a      	add	r2, r1
    c70e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        sb_area_tmp.y2 += page->coords.y1;
    c712:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
        lv_inv_area(disp, &sb_area_tmp);
    c716:	a90a      	add	r1, sp, #40	; 0x28
        sb_area_tmp.y2 += page->coords.y1;
    c718:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
    c71a:	4638      	mov	r0, r7
        sb_area_tmp.y2 += page->coords.y1;
    c71c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        lv_inv_area(disp, &sb_area_tmp);
    c720:	f7fd fdfd 	bl	a31e <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
    c724:	7f23      	ldrb	r3, [r4, #28]
    c726:	f003 031c 	and.w	r3, r3, #28
    c72a:	2b08      	cmp	r3, #8
    c72c:	d10b      	bne.n	c746 <lv_page_sb_refresh+0x116>
    c72e:	f7fd fc99 	bl	a064 <lv_indev_get_act>
    c732:	f7fd fcb0 	bl	a096 <lv_indev_is_dragging>
    c736:	b930      	cbnz	r0, c746 <lv_page_sb_refresh+0x116>
        ext->sb.hor_draw = 0;
    c738:	7f23      	ldrb	r3, [r4, #28]
    c73a:	f023 0303 	bic.w	r3, r3, #3
    c73e:	7723      	strb	r3, [r4, #28]
        sb_area_tmp.y1 += page->coords.y1;
        sb_area_tmp.x2 += page->coords.x1;
        sb_area_tmp.y2 += page->coords.y1;
        lv_inv_area(disp, &sb_area_tmp);
    }
}
    c740:	b00d      	add	sp, #52	; 0x34
    c742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
    c746:	9b05      	ldr	r3, [sp, #20]
    c748:	f8bd 0000 	ldrh.w	r0, [sp]
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
    c74c:	f9bb 101c 	ldrsh.w	r1, [fp, #28]
    c750:	9004      	str	r0, [sp, #16]
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
    c752:	4598      	cmp	r8, r3
    c754:	bfb8      	it	lt
    c756:	4698      	movlt	r8, r3
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
    c758:	f9bb 301a 	ldrsh.w	r3, [fp, #26]
    c75c:	1ae8      	subs	r0, r5, r3
    c75e:	eba0 0c01 	sub.w	ip, r0, r1
    c762:	9801      	ldr	r0, [sp, #4]
    c764:	b2aa      	uxth	r2, r5
    c766:	4560      	cmp	r0, ip
    c768:	9203      	str	r2, [sp, #12]
    c76a:	f104 090c 	add.w	r9, r4, #12
    c76e:	fa1f f288 	uxth.w	r2, r8
    c772:	f300 808e 	bgt.w	c892 <lv_page_sb_refresh+0x262>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
    c776:	9b03      	ldr	r3, [sp, #12]
    c778:	eba3 0142 	sub.w	r1, r3, r2, lsl #1
    c77c:	b209      	sxth	r1, r1
    c77e:	4648      	mov	r0, r9
    c780:	f7f7 f94a 	bl	3a18 <lv_area_set_width>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
    c784:	68a3      	ldr	r3, [r4, #8]
    c786:	8bda      	ldrh	r2, [r3, #30]
    c788:	8b1b      	ldrh	r3, [r3, #24]
    c78a:	441a      	add	r2, r3
    c78c:	9b04      	ldr	r3, [sp, #16]
    c78e:	1a9a      	subs	r2, r3, r2
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
    c790:	b212      	sxth	r2, r2
    c792:	4641      	mov	r1, r8
    c794:	4648      	mov	r0, r9
    c796:	f7f7 f949 	bl	3a2c <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
    c79a:	7f23      	ldrb	r3, [r4, #28]
    c79c:	f003 0218 	and.w	r2, r3, #24
    c7a0:	2a08      	cmp	r2, #8
    c7a2:	d102      	bne.n	c7aa <lv_page_sb_refresh+0x17a>
    c7a4:	f36f 0300 	bfc	r3, #0, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
    c7a8:	7723      	strb	r3, [r4, #28]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
    c7aa:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    c7ae:	4293      	cmp	r3, r2
    c7b0:	bfb8      	it	lt
    c7b2:	4613      	movlt	r3, r2
    c7b4:	461d      	mov	r5, r3
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
    c7b6:	b29b      	uxth	r3, r3
    c7b8:	f9bb 0016 	ldrsh.w	r0, [fp, #22]
    c7bc:	9301      	str	r3, [sp, #4]
    c7be:	9b00      	ldr	r3, [sp, #0]
    c7c0:	f9bb 1018 	ldrsh.w	r1, [fp, #24]
    c7c4:	9a02      	ldr	r2, [sp, #8]
    c7c6:	1a1b      	subs	r3, r3, r0
    c7c8:	1a5b      	subs	r3, r3, r1
    c7ca:	429a      	cmp	r2, r3
    c7cc:	f104 0814 	add.w	r8, r4, #20
    c7d0:	f300 80a8 	bgt.w	c924 <lv_page_sb_refresh+0x2f4>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
    c7d4:	9b04      	ldr	r3, [sp, #16]
    c7d6:	9a01      	ldr	r2, [sp, #4]
    c7d8:	eba3 0142 	sub.w	r1, r3, r2, lsl #1
    c7dc:	b209      	sxth	r1, r1
    c7de:	4640      	mov	r0, r8
    c7e0:	f7f7 f91f 	bl	3a22 <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
    c7e4:	68a3      	ldr	r3, [r4, #8]
    c7e6:	8bd9      	ldrh	r1, [r3, #30]
    c7e8:	8b9b      	ldrh	r3, [r3, #28]
    c7ea:	4419      	add	r1, r3
    c7ec:	9b03      	ldr	r3, [sp, #12]
    c7ee:	1a59      	subs	r1, r3, r1
        lv_area_set_pos(&ext->sb.ver_area,
    c7f0:	462a      	mov	r2, r5
    c7f2:	b209      	sxth	r1, r1
    c7f4:	4640      	mov	r0, r8
    c7f6:	f7f7 f919 	bl	3a2c <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
    c7fa:	7f23      	ldrb	r3, [r4, #28]
    c7fc:	f003 0218 	and.w	r2, r3, #24
    c800:	2a08      	cmp	r2, #8
    c802:	d102      	bne.n	c80a <lv_page_sb_refresh+0x1da>
    c804:	f36f 0341 	bfc	r3, #1, #1
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
    c808:	7723      	strb	r3, [r4, #28]
    if(ext->sb.hor_draw != 0) {
    c80a:	7f23      	ldrb	r3, [r4, #28]
    c80c:	07da      	lsls	r2, r3, #31
    c80e:	d51d      	bpl.n	c84c <lv_page_sb_refresh+0x21c>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
    c810:	4649      	mov	r1, r9
    c812:	a80a      	add	r0, sp, #40	; 0x28
    c814:	f7ff fef8 	bl	c608 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
    c818:	8a32      	ldrh	r2, [r6, #16]
    c81a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
        sb_area_tmp.y1 += page->coords.y1;
    c81e:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
        sb_area_tmp.x1 += page->coords.x1;
    c822:	4413      	add	r3, r2
    c824:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sb_area_tmp.y1 += page->coords.y1;
    c828:	8a73      	ldrh	r3, [r6, #18]
    c82a:	4419      	add	r1, r3
    c82c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
        sb_area_tmp.x2 += page->coords.x1;
    c830:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    c834:	440a      	add	r2, r1
    c836:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        sb_area_tmp.y2 += page->coords.y1;
    c83a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
        lv_inv_area(disp, &sb_area_tmp);
    c83e:	a90a      	add	r1, sp, #40	; 0x28
        sb_area_tmp.y2 += page->coords.y1;
    c840:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
    c842:	4638      	mov	r0, r7
        sb_area_tmp.y2 += page->coords.y1;
    c844:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        lv_inv_area(disp, &sb_area_tmp);
    c848:	f7fd fd69 	bl	a31e <lv_inv_area>
    if(ext->sb.ver_draw != 0) {
    c84c:	7f23      	ldrb	r3, [r4, #28]
    c84e:	079b      	lsls	r3, r3, #30
    c850:	f57f af76 	bpl.w	c740 <lv_page_sb_refresh+0x110>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
    c854:	4641      	mov	r1, r8
    c856:	a80a      	add	r0, sp, #40	; 0x28
    c858:	f7ff fed6 	bl	c608 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
    c85c:	8a32      	ldrh	r2, [r6, #16]
    c85e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
        sb_area_tmp.y1 += page->coords.y1;
    c862:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
        sb_area_tmp.x1 += page->coords.x1;
    c866:	4413      	add	r3, r2
    c868:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sb_area_tmp.y1 += page->coords.y1;
    c86c:	8a73      	ldrh	r3, [r6, #18]
    c86e:	4419      	add	r1, r3
    c870:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
        sb_area_tmp.x2 += page->coords.x1;
    c874:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    c878:	440a      	add	r2, r1
    c87a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        sb_area_tmp.y2 += page->coords.y1;
    c87e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
        lv_inv_area(disp, &sb_area_tmp);
    c882:	a90a      	add	r1, sp, #40	; 0x28
        sb_area_tmp.y2 += page->coords.y1;
    c884:	4413      	add	r3, r2
        lv_inv_area(disp, &sb_area_tmp);
    c886:	4638      	mov	r0, r7
        sb_area_tmp.y2 += page->coords.y1;
    c888:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        lv_inv_area(disp, &sb_area_tmp);
    c88c:	f7fd fd47 	bl	a31e <lv_inv_area>
    c890:	e756      	b.n	c740 <lv_page_sb_refresh+0x110>
    c892:	9209      	str	r2, [sp, #36]	; 0x24
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
    c894:	ea4f 0248 	mov.w	r2, r8, lsl #1
    c898:	9207      	str	r2, [sp, #28]
    c89a:	9a01      	ldr	r2, [sp, #4]
    c89c:	eba5 0848 	sub.w	r8, r5, r8, lsl #1
    c8a0:	4413      	add	r3, r2
    c8a2:	440b      	add	r3, r1
    c8a4:	fb05 f808 	mul.w	r8, r5, r8
    c8a8:	fb98 f8f3 	sdiv	r8, r8, r3
        size_tmp =
    c8ac:	fa0f f888 	sxth.w	r8, r8
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
    c8b0:	f1b8 0f14 	cmp.w	r8, #20
    c8b4:	bfb8      	it	lt
    c8b6:	f04f 0814 	movlt.w	r8, #20
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
    c8ba:	4641      	mov	r1, r8
    c8bc:	4648      	mov	r0, r9
    c8be:	f7f7 f8ab 	bl	3a18 <lv_area_set_width>
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
    c8c2:	f9bb 301a 	ldrsh.w	r3, [fp, #26]
    c8c6:	9308      	str	r3, [sp, #32]
    c8c8:	4650      	mov	r0, sl
    c8ca:	f7fe f943 	bl	ab54 <lv_obj_get_x>
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
    c8ce:	68a1      	ldr	r1, [r4, #8]
    c8d0:	9b04      	ldr	r3, [sp, #16]
    c8d2:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
    c8d6:	8b09      	ldrh	r1, [r1, #24]
                        sb_hor_pad +
    c8d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
    c8da:	448c      	add	ip, r1
    c8dc:	eba3 0c0c 	sub.w	ip, r3, ip
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
    c8e0:	9b07      	ldr	r3, [sp, #28]
    c8e2:	eba5 0808 	sub.w	r8, r5, r8
    c8e6:	eba8 0103 	sub.w	r1, r8, r3
    c8ea:	9b08      	ldr	r3, [sp, #32]
    c8ec:	1a18      	subs	r0, r3, r0
    c8ee:	4348      	muls	r0, r1
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
    c8f0:	9b01      	ldr	r3, [sp, #4]
    c8f2:	f9bb 101a 	ldrsh.w	r1, [fp, #26]
    c8f6:	4419      	add	r1, r3
    c8f8:	f9bb 301c 	ldrsh.w	r3, [fp, #28]
    c8fc:	4419      	add	r1, r3
    c8fe:	1b4d      	subs	r5, r1, r5
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
    c900:	fb90 f5f5 	sdiv	r5, r0, r5
                        sb_hor_pad +
    c904:	1951      	adds	r1, r2, r5
        lv_area_set_pos(&ext->sb.hor_area,
    c906:	b209      	sxth	r1, r1
    c908:	fa0f f28c 	sxth.w	r2, ip
    c90c:	4648      	mov	r0, r9
    c90e:	f7f7 f88d 	bl	3a2c <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
    c912:	7f23      	ldrb	r3, [r4, #28]
    c914:	f003 0218 	and.w	r2, r3, #24
    c918:	2a08      	cmp	r2, #8
    c91a:	f47f af46 	bne.w	c7aa <lv_page_sb_refresh+0x17a>
    c91e:	f043 0301 	orr.w	r3, r3, #1
    c922:	e741      	b.n	c7a8 <lv_page_sb_refresh+0x178>
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
    c924:	006b      	lsls	r3, r5, #1
    c926:	9305      	str	r3, [sp, #20]
    c928:	9b00      	ldr	r3, [sp, #0]
    c92a:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
    c92e:	435d      	muls	r5, r3
    c930:	9b02      	ldr	r3, [sp, #8]
    c932:	4418      	add	r0, r3
    c934:	4408      	add	r0, r1
    c936:	fb95 f5f0 	sdiv	r5, r5, r0
        size_tmp =
    c93a:	b22d      	sxth	r5, r5
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
    c93c:	2d14      	cmp	r5, #20
    c93e:	bfb8      	it	lt
    c940:	2514      	movlt	r5, #20
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
    c942:	4629      	mov	r1, r5
    c944:	4640      	mov	r0, r8
    c946:	f7f7 f86c 	bl	3a22 <lv_area_set_height>
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
    c94a:	68a2      	ldr	r2, [r4, #8]
    c94c:	9b03      	ldr	r3, [sp, #12]
    c94e:	8b90      	ldrh	r0, [r2, #28]
    c950:	8bd1      	ldrh	r1, [r2, #30]
    c952:	4401      	add	r1, r0
    c954:	1a59      	subs	r1, r3, r1
        lv_area_set_pos(&ext->sb.ver_area,
    c956:	b209      	sxth	r1, r1
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
    c958:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
        lv_area_set_pos(&ext->sb.ver_area,
    c95c:	9104      	str	r1, [sp, #16]
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
    c95e:	4650      	mov	r0, sl
    c960:	9303      	str	r3, [sp, #12]
    c962:	f7fe f911 	bl	ab88 <lv_obj_get_y>
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
    c966:	9b00      	ldr	r3, [sp, #0]
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
    c968:	9a02      	ldr	r2, [sp, #8]
        lv_area_set_pos(&ext->sb.ver_area,
    c96a:	9904      	ldr	r1, [sp, #16]
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
    c96c:	1b5d      	subs	r5, r3, r5
    c96e:	9b05      	ldr	r3, [sp, #20]
    c970:	1aed      	subs	r5, r5, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
    c972:	9b03      	ldr	r3, [sp, #12]
    c974:	1a18      	subs	r0, r3, r0
    c976:	fb00 f305 	mul.w	r3, r0, r5
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
    c97a:	f9bb 0016 	ldrsh.w	r0, [fp, #22]
    c97e:	4410      	add	r0, r2
    c980:	f9bb 2018 	ldrsh.w	r2, [fp, #24]
    c984:	4410      	add	r0, r2
    c986:	9a00      	ldr	r2, [sp, #0]
    c988:	1a80      	subs	r0, r0, r2
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
    c98a:	9a01      	ldr	r2, [sp, #4]
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
    c98c:	fb93 f3f0 	sdiv	r3, r3, r0
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
    c990:	441a      	add	r2, r3
        lv_area_set_pos(&ext->sb.ver_area,
    c992:	b212      	sxth	r2, r2
    c994:	4640      	mov	r0, r8
    c996:	f7f7 f849 	bl	3a2c <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
    c99a:	7f23      	ldrb	r3, [r4, #28]
    c99c:	f003 0218 	and.w	r2, r3, #24
    c9a0:	2a08      	cmp	r2, #8
    c9a2:	f47f af32 	bne.w	c80a <lv_page_sb_refresh+0x1da>
    c9a6:	f043 0302 	orr.w	r3, r3, #2
    c9aa:	e72d      	b.n	c808 <lv_page_sb_refresh+0x1d8>

0000c9ac <edge_flash_anim_end>:
    ext->edge_flash.state = v;
    lv_obj_invalidate(page);
}

static void edge_flash_anim_end(lv_anim_t * a)
{
    c9ac:	b510      	push	{r4, lr}
    c9ae:	4604      	mov	r4, r0
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
    c9b0:	6800      	ldr	r0, [r0, #0]
    c9b2:	f7ff f84d 	bl	ba50 <lv_obj_get_ext_attr>
    ext->edge_flash.top_ip    = 0;
    c9b6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    c9ba:	f023 031e 	bic.w	r3, r3, #30
    c9be:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    ext->edge_flash.bottom_ip = 0;
    ext->edge_flash.left_ip   = 0;
    ext->edge_flash.right_ip  = 0;
    lv_obj_invalidate(a->var);
    c9c2:	6820      	ldr	r0, [r4, #0]
}
    c9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(a->var);
    c9c8:	f7fe b966 	b.w	ac98 <lv_obj_invalidate>

0000c9cc <edge_flash_anim>:
{
    c9cc:	b538      	push	{r3, r4, r5, lr}
    c9ce:	4604      	mov	r4, r0
    c9d0:	460d      	mov	r5, r1
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
    c9d2:	f7ff f83d 	bl	ba50 <lv_obj_get_ext_attr>
    ext->edge_flash.state = v;
    c9d6:	8405      	strh	r5, [r0, #32]
    lv_obj_invalidate(page);
    c9d8:	4620      	mov	r0, r4
}
    c9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
    c9de:	f7fe b95b 	b.w	ac98 <lv_obj_invalidate>
	...

0000c9e4 <lv_scrl_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
    c9e4:	2a02      	cmp	r2, #2
{
    c9e6:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
    c9e8:	d104      	bne.n	c9f4 <lv_scrl_design+0x10>
        return ancestor_design(scrl, mask, mode);
    c9ea:	4b07      	ldr	r3, [pc, #28]	; (ca08 <lv_scrl_design+0x24>)
}
    c9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return ancestor_design(scrl, mask, mode);
    c9f0:	681b      	ldr	r3, [r3, #0]
    c9f2:	4718      	bx	r3
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
    c9f4:	b91a      	cbnz	r2, c9fe <lv_scrl_design+0x1a>
        ancestor_design(scrl, mask, mode);
    c9f6:	4b04      	ldr	r3, [pc, #16]	; (ca08 <lv_scrl_design+0x24>)
    c9f8:	681b      	ldr	r3, [r3, #0]
    c9fa:	4798      	blx	r3
    c9fc:	e001      	b.n	ca02 <lv_scrl_design+0x1e>
    } else if(mode == LV_DESIGN_DRAW_POST) {
    c9fe:	2a01      	cmp	r2, #1
    ca00:	d0f9      	beq.n	c9f6 <lv_scrl_design+0x12>
}
    ca02:	2001      	movs	r0, #1
    ca04:	bd10      	pop	{r4, pc}
    ca06:	bf00      	nop
    ca08:	20005e60 	.word	0x20005e60

0000ca0c <lv_page_set_sb_mode>:
{
    ca0c:	b538      	push	{r3, r4, r5, lr}
    ca0e:	4605      	mov	r5, r0
    ca10:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
    ca12:	f7fd fe85 	bl	a720 <lv_debug_check_null>
    ca16:	4603      	mov	r3, r0
    ca18:	b920      	cbnz	r0, ca24 <lv_page_set_sb_mode+0x18>
    ca1a:	4817      	ldr	r0, [pc, #92]	; (ca78 <lv_page_set_sb_mode+0x6c>)
    ca1c:	462a      	mov	r2, r5
    ca1e:	f7fd fe8f 	bl	a740 <lv_debug_log_error>
    ca22:	e7fe      	b.n	ca22 <lv_page_set_sb_mode+0x16>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    ca24:	4628      	mov	r0, r5
    ca26:	f7ff f813 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->sb.mode == sb_mode) return;
    ca2a:	7f03      	ldrb	r3, [r0, #28]
    ca2c:	f3c3 0182 	ubfx	r1, r3, #2, #3
    ca30:	42a1      	cmp	r1, r4
    ca32:	d01f      	beq.n	ca74 <lv_page_set_sb_mode+0x68>
    if(sb_mode == LV_SB_MODE_HIDE)
    ca34:	2c04      	cmp	r4, #4
    ca36:	d110      	bne.n	ca5a <lv_page_set_sb_mode+0x4e>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
    ca38:	f041 0104 	orr.w	r1, r1, #4
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
    ca3c:	f361 0384 	bfi	r3, r1, #2, #3
        ext->sb.mode = sb_mode;
    ca40:	7703      	strb	r3, [r0, #28]
    ext->sb.hor_draw = 0;
    ca42:	7f03      	ldrb	r3, [r0, #28]
    ca44:	f023 0303 	bic.w	r3, r3, #3
    ca48:	7703      	strb	r3, [r0, #28]
    lv_page_sb_refresh(page);
    ca4a:	4628      	mov	r0, r5
    ca4c:	f7ff fdf0 	bl	c630 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
    ca50:	4628      	mov	r0, r5
}
    ca52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
    ca56:	f7fe b91f 	b.w	ac98 <lv_obj_invalidate>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
    ca5a:	2c05      	cmp	r4, #5
    ca5c:	d102      	bne.n	ca64 <lv_page_set_sb_mode+0x58>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
    ca5e:	f001 0103 	and.w	r1, r1, #3
    ca62:	e7eb      	b.n	ca3c <lv_page_set_sb_mode+0x30>
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
    ca64:	074b      	lsls	r3, r1, #29
        ext->sb.mode = sb_mode;
    ca66:	7f03      	ldrb	r3, [r0, #28]
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
    ca68:	bf48      	it	mi
    ca6a:	f044 0404 	orrmi.w	r4, r4, #4
        ext->sb.mode = sb_mode;
    ca6e:	f364 0384 	bfi	r3, r4, #2, #3
    ca72:	e7e5      	b.n	ca40 <lv_page_set_sb_mode+0x34>
}
    ca74:	bd38      	pop	{r3, r4, r5, pc}
    ca76:	bf00      	nop
    ca78:	0001de08 	.word	0x0001de08

0000ca7c <lv_page_set_anim_time>:
{
    ca7c:	b513      	push	{r0, r1, r4, lr}
    ca7e:	460c      	mov	r4, r1
    ca80:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
    ca82:	f7fd fe4d 	bl	a720 <lv_debug_check_null>
    ca86:	9a01      	ldr	r2, [sp, #4]
    ca88:	4603      	mov	r3, r0
    ca8a:	b918      	cbnz	r0, ca94 <lv_page_set_anim_time+0x18>
    ca8c:	4804      	ldr	r0, [pc, #16]	; (caa0 <lv_page_set_anim_time+0x24>)
    ca8e:	f7fd fe57 	bl	a740 <lv_debug_log_error>
    ca92:	e7fe      	b.n	ca92 <lv_page_set_anim_time+0x16>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    ca94:	4610      	mov	r0, r2
    ca96:	f7fe ffdb 	bl	ba50 <lv_obj_get_ext_attr>
    ext->anim_time      = anim_time;
    ca9a:	8584      	strh	r4, [r0, #44]	; 0x2c
}
    ca9c:	b002      	add	sp, #8
    ca9e:	bd10      	pop	{r4, pc}
    caa0:	0001de08 	.word	0x0001de08

0000caa4 <lv_page_set_style>:
{
    caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    caa6:	4605      	mov	r5, r0
    caa8:	460f      	mov	r7, r1
    caaa:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
    caac:	f7fd fe38 	bl	a720 <lv_debug_check_null>
    cab0:	4603      	mov	r3, r0
    cab2:	b920      	cbnz	r0, cabe <lv_page_set_style+0x1a>
    cab4:	4818      	ldr	r0, [pc, #96]	; (cb18 <lv_page_set_style+0x74>)
    cab6:	462a      	mov	r2, r5
    cab8:	f7fd fe42 	bl	a740 <lv_debug_log_error>
    cabc:	e7fe      	b.n	cabc <lv_page_set_style+0x18>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    cabe:	4628      	mov	r0, r5
    cac0:	f7fe ffc6 	bl	ba50 <lv_obj_get_ext_attr>
    cac4:	4604      	mov	r4, r0
    switch(type) {
    cac6:	2f03      	cmp	r7, #3
    cac8:	d825      	bhi.n	cb16 <lv_page_set_style+0x72>
    caca:	e8df f007 	tbb	[pc, r7]
    cace:	0802      	.short	0x0802
    cad0:	230b      	.short	0x230b
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
    cad2:	4631      	mov	r1, r6
    cad4:	4628      	mov	r0, r5
}
    cad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
    cada:	f7fe bc7d 	b.w	b3d8 <lv_obj_set_style>
    cade:	6840      	ldr	r0, [r0, #4]
    cae0:	4631      	mov	r1, r6
    cae2:	e7f8      	b.n	cad6 <lv_page_set_style+0x32>
            ext->sb.style = style;
    cae4:	6086      	str	r6, [r0, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
    cae6:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
    caea:	300c      	adds	r0, #12
    caec:	f7f6 ff99 	bl	3a22 <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
    caf0:	68a3      	ldr	r3, [r4, #8]
    caf2:	f104 0014 	add.w	r0, r4, #20
    caf6:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
    cafa:	f7f6 ff8d 	bl	3a18 <lv_area_set_width>
            lv_page_sb_refresh(page);
    cafe:	4628      	mov	r0, r5
    cb00:	f7ff fd96 	bl	c630 <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
    cb04:	4628      	mov	r0, r5
    cb06:	f7fe fcd3 	bl	b4b0 <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
    cb0a:	4628      	mov	r0, r5
}
    cb0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_obj_invalidate(page);
    cb10:	f7fe b8c2 	b.w	ac98 <lv_obj_invalidate>
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
    cb14:	6246      	str	r6, [r0, #36]	; 0x24
}
    cb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb18:	0001de08 	.word	0x0001de08

0000cb1c <lv_page_get_scrl>:
{
    cb1c:	b507      	push	{r0, r1, r2, lr}
    cb1e:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
    cb20:	f7fd fdfe 	bl	a720 <lv_debug_check_null>
    cb24:	9a01      	ldr	r2, [sp, #4]
    cb26:	4603      	mov	r3, r0
    cb28:	b918      	cbnz	r0, cb32 <lv_page_get_scrl+0x16>
    cb2a:	4805      	ldr	r0, [pc, #20]	; (cb40 <lv_page_get_scrl+0x24>)
    cb2c:	f7fd fe08 	bl	a740 <lv_debug_log_error>
    cb30:	e7fe      	b.n	cb30 <lv_page_get_scrl+0x14>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    cb32:	4610      	mov	r0, r2
    cb34:	f7fe ff8c 	bl	ba50 <lv_obj_get_ext_attr>
}
    cb38:	6840      	ldr	r0, [r0, #4]
    cb3a:	b003      	add	sp, #12
    cb3c:	f85d fb04 	ldr.w	pc, [sp], #4
    cb40:	0001de08 	.word	0x0001de08

0000cb44 <lv_page_get_anim_time>:
{
    cb44:	b507      	push	{r0, r1, r2, lr}
    cb46:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
    cb48:	f7fd fdea 	bl	a720 <lv_debug_check_null>
    cb4c:	9a01      	ldr	r2, [sp, #4]
    cb4e:	4603      	mov	r3, r0
    cb50:	b918      	cbnz	r0, cb5a <lv_page_get_anim_time+0x16>
    cb52:	4805      	ldr	r0, [pc, #20]	; (cb68 <lv_page_get_anim_time+0x24>)
    cb54:	f7fd fdf4 	bl	a740 <lv_debug_log_error>
    cb58:	e7fe      	b.n	cb58 <lv_page_get_anim_time+0x14>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    cb5a:	4610      	mov	r0, r2
    cb5c:	f7fe ff78 	bl	ba50 <lv_obj_get_ext_attr>
}
    cb60:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    cb62:	b003      	add	sp, #12
    cb64:	f85d fb04 	ldr.w	pc, [sp], #4
    cb68:	0001de08 	.word	0x0001de08

0000cb6c <lv_page_get_style>:
{
    cb6c:	b538      	push	{r3, r4, r5, lr}
    cb6e:	4604      	mov	r4, r0
    cb70:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
    cb72:	f7fd fdd5 	bl	a720 <lv_debug_check_null>
    cb76:	4603      	mov	r3, r0
    cb78:	b920      	cbnz	r0, cb84 <lv_page_get_style+0x18>
    cb7a:	480d      	ldr	r0, [pc, #52]	; (cbb0 <lv_page_get_style+0x44>)
    cb7c:	4622      	mov	r2, r4
    cb7e:	f7fd fddf 	bl	a740 <lv_debug_log_error>
    cb82:	e7fe      	b.n	cb82 <lv_page_get_style+0x16>
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
    cb84:	4620      	mov	r0, r4
    cb86:	f7fe ff63 	bl	ba50 <lv_obj_get_ext_attr>
    switch(type) {
    cb8a:	2d03      	cmp	r5, #3
    cb8c:	d80e      	bhi.n	cbac <lv_page_get_style+0x40>
    cb8e:	e8df f005 	tbb	[pc, r5]
    cb92:	0702      	.short	0x0702
    cb94:	0b09      	.short	0x0b09
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
    cb96:	4620      	mov	r0, r4
}
    cb98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
    cb9c:	f7fe b83c 	b.w	ac18 <lv_obj_get_style>
    cba0:	6840      	ldr	r0, [r0, #4]
    cba2:	e7f9      	b.n	cb98 <lv_page_get_style+0x2c>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
    cba4:	6880      	ldr	r0, [r0, #8]
}
    cba6:	bd38      	pop	{r3, r4, r5, pc}
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
    cba8:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cbaa:	e7fc      	b.n	cba6 <lv_page_get_style+0x3a>
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
    cbac:	2000      	movs	r0, #0
    return style;
    cbae:	e7fa      	b.n	cba6 <lv_page_get_style+0x3a>
    cbb0:	0001de08 	.word	0x0001de08

0000cbb4 <lv_page_create>:
{
    cbb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    cbb8:	460e      	mov	r6, r1
    cbba:	4607      	mov	r7, r0
    lv_obj_t * new_page = lv_cont_create(par, copy);
    cbbc:	f002 feb6 	bl	f92c <lv_cont_create>
    cbc0:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_page);
    cbc2:	f7fd fdad 	bl	a720 <lv_debug_check_null>
    cbc6:	4603      	mov	r3, r0
    cbc8:	b920      	cbnz	r0, cbd4 <lv_page_create+0x20>
    cbca:	4872      	ldr	r0, [pc, #456]	; (cd94 <lv_page_create+0x1e0>)
    cbcc:	4622      	mov	r2, r4
    cbce:	f7fd fdb7 	bl	a740 <lv_debug_log_error>
    cbd2:	e7fe      	b.n	cbd2 <lv_page_create+0x1e>
    if(new_page == NULL) return NULL;
    cbd4:	b924      	cbnz	r4, cbe0 <lv_page_create+0x2c>
    cbd6:	2400      	movs	r4, #0
}
    cbd8:	4620      	mov	r0, r4
    cbda:	b003      	add	sp, #12
    cbdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
    cbe0:	4d6d      	ldr	r5, [pc, #436]	; (cd98 <lv_page_create+0x1e4>)
    cbe2:	682b      	ldr	r3, [r5, #0]
    cbe4:	b91b      	cbnz	r3, cbee <lv_page_create+0x3a>
    cbe6:	4620      	mov	r0, r4
    cbe8:	f7fe ff12 	bl	ba10 <lv_obj_get_signal_cb>
    cbec:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
    cbee:	4d6b      	ldr	r5, [pc, #428]	; (cd9c <lv_page_create+0x1e8>)
    cbf0:	682b      	ldr	r3, [r5, #0]
    cbf2:	b91b      	cbnz	r3, cbfc <lv_page_create+0x48>
    cbf4:	4620      	mov	r0, r4
    cbf6:	f7fe ff1b 	bl	ba30 <lv_obj_get_design_cb>
    cbfa:	6028      	str	r0, [r5, #0]
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
    cbfc:	2130      	movs	r1, #48	; 0x30
    cbfe:	4620      	mov	r0, r4
    cc00:	f7fd ff24 	bl	aa4c <lv_obj_allocate_ext_attr>
    cc04:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
    cc06:	f7fd fd8b 	bl	a720 <lv_debug_check_null>
    cc0a:	4603      	mov	r3, r0
    cc0c:	b920      	cbnz	r0, cc18 <lv_page_create+0x64>
    cc0e:	4861      	ldr	r0, [pc, #388]	; (cd94 <lv_page_create+0x1e0>)
    cc10:	462a      	mov	r2, r5
    cc12:	f7fd fd95 	bl	a740 <lv_debug_log_error>
    cc16:	e7fe      	b.n	cc16 <lv_page_create+0x62>
    if(ext == NULL) return NULL;
    cc18:	2d00      	cmp	r5, #0
    cc1a:	d0dc      	beq.n	cbd6 <lv_page_create+0x22>
    ext->sb.hor_draw = 0;
    cc1c:	7f2b      	ldrb	r3, [r5, #28]
    ext->sb.style    = &lv_style_pretty;
    cc1e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; cdc0 <lv_page_create+0x20c>
    cc22:	f8c5 8008 	str.w	r8, [r5, #8]
    ext->sb.hor_draw = 0;
    cc26:	f023 031f 	bic.w	r3, r3, #31
    cc2a:	f043 030c 	orr.w	r3, r3, #12
    cc2e:	772b      	strb	r3, [r5, #28]
    ext->edge_flash.enabled   = 0;
    cc30:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    cc34:	f023 031f 	bic.w	r3, r3, #31
    cc38:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    ext->edge_flash.style     = &lv_style_plain_color;
    cc3c:	4b58      	ldr	r3, [pc, #352]	; (cda0 <lv_page_create+0x1ec>)
    cc3e:	626b      	str	r3, [r5, #36]	; 0x24
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
    cc40:	f44f 73c8 	mov.w	r3, #400	; 0x190
    cc44:	85ab      	strh	r3, [r5, #44]	; 0x2c
    ext->scroll_prop    = 0;
    cc46:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    ext->scrl        = NULL;
    cc4a:	f04f 0900 	mov.w	r9, #0
    ext->scroll_prop    = 0;
    cc4e:	f023 0303 	bic.w	r3, r3, #3
    ext->scrl        = NULL;
    cc52:	f8c5 9004 	str.w	r9, [r5, #4]
    ext->edge_flash.state     = 0;
    cc56:	f8a5 9020 	strh.w	r9, [r5, #32]
    ext->scroll_prop    = 0;
    cc5a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
    if(copy == NULL) {
    cc5e:	2e00      	cmp	r6, #0
    cc60:	d15e      	bne.n	cd20 <lv_page_create+0x16c>
        ext->scrl = lv_cont_create(new_page, NULL);
    cc62:	4631      	mov	r1, r6
    cc64:	4620      	mov	r0, r4
    cc66:	f002 fe61 	bl	f92c <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
    cc6a:	494e      	ldr	r1, [pc, #312]	; (cda4 <lv_page_create+0x1f0>)
        ext->scrl = lv_cont_create(new_page, NULL);
    cc6c:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
    cc6e:	f7fd fecd 	bl	aa0c <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
    cc72:	6868      	ldr	r0, [r5, #4]
    cc74:	494c      	ldr	r1, [pc, #304]	; (cda8 <lv_page_create+0x1f4>)
    cc76:	f7fd fed9 	bl	aa2c <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
    cc7a:	6868      	ldr	r0, [r5, #4]
    cc7c:	2101      	movs	r1, #1
    cc7e:	f7fd fded 	bl	a85c <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
    cc82:	6868      	ldr	r0, [r5, #4]
    cc84:	2101      	movs	r1, #1
    cc86:	f7fd fdff 	bl	a888 <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
    cc8a:	6868      	ldr	r0, [r5, #4]
    cc8c:	2112      	movs	r1, #18
    cc8e:	f7fd fe11 	bl	a8b4 <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
    cc92:	2303      	movs	r3, #3
    cc94:	9300      	str	r3, [sp, #0]
    cc96:	4619      	mov	r1, r3
    cc98:	461a      	mov	r2, r3
    cc9a:	6868      	ldr	r0, [r5, #4]
    cc9c:	f002 feda 	bl	fa54 <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
    cca0:	6868      	ldr	r0, [r5, #4]
    cca2:	4942      	ldr	r1, [pc, #264]	; (cdac <lv_page_create+0x1f8>)
    cca4:	f7fd fe30 	bl	a908 <lv_obj_set_event_cb>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
    cca8:	4941      	ldr	r1, [pc, #260]	; (cdb0 <lv_page_create+0x1fc>)
    ccaa:	4620      	mov	r0, r4
    ccac:	f7fd feae 	bl	aa0c <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
    ccb0:	4940      	ldr	r1, [pc, #256]	; (cdb4 <lv_page_create+0x200>)
    ccb2:	4620      	mov	r0, r4
    ccb4:	f7fd feba 	bl	aa2c <lv_obj_set_design_cb>
        lv_page_set_sb_mode(new_page, ext->sb.mode);
    ccb8:	7f29      	ldrb	r1, [r5, #28]
    ccba:	4620      	mov	r0, r4
    ccbc:	f3c1 0182 	ubfx	r1, r1, #2, #3
    ccc0:	f7ff fea4 	bl	ca0c <lv_page_set_sb_mode>
        lv_theme_t * th = lv_theme_get_current();
    ccc4:	f7fc f94a 	bl	8f5c <lv_theme_get_current>
        if(th) {
    ccc8:	4605      	mov	r5, r0
    ccca:	b1e8      	cbz	r0, cd08 <lv_page_create+0x154>
            if(par == NULL) { /*Different styles if it is screen*/
    cccc:	b99f      	cbnz	r7, ccf6 <lv_page_create+0x142>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
    ccce:	6842      	ldr	r2, [r0, #4]
    ccd0:	4639      	mov	r1, r7
    ccd2:	4620      	mov	r0, r4
    ccd4:	f7ff fee6 	bl	caa4 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
    ccd8:	4a37      	ldr	r2, [pc, #220]	; (cdb8 <lv_page_create+0x204>)
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
    ccda:	2101      	movs	r1, #1
    ccdc:	4620      	mov	r0, r4
    ccde:	f7ff fee1 	bl	caa4 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
    cce2:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
    cce6:	2102      	movs	r1, #2
    cce8:	4620      	mov	r0, r4
    ccea:	f7ff fedb 	bl	caa4 <lv_page_set_style>
    lv_page_sb_refresh(new_page);
    ccee:	4620      	mov	r0, r4
    ccf0:	f7ff fc9e 	bl	c630 <lv_page_sb_refresh>
    return new_page;
    ccf4:	e770      	b.n	cbd8 <lv_page_create+0x24>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
    ccf6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
    ccfa:	4631      	mov	r1, r6
    ccfc:	4620      	mov	r0, r4
    ccfe:	f7ff fed1 	bl	caa4 <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
    cd02:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    cd06:	e7e8      	b.n	ccda <lv_page_create+0x126>
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
    cd08:	4a2c      	ldr	r2, [pc, #176]	; (cdbc <lv_page_create+0x208>)
    cd0a:	4631      	mov	r1, r6
    cd0c:	4620      	mov	r0, r4
    cd0e:	f7ff fec9 	bl	caa4 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
    cd12:	4642      	mov	r2, r8
    cd14:	2101      	movs	r1, #1
    cd16:	4620      	mov	r0, r4
    cd18:	f7ff fec4 	bl	caa4 <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
    cd1c:	4a27      	ldr	r2, [pc, #156]	; (cdbc <lv_page_create+0x208>)
    cd1e:	e7e2      	b.n	cce6 <lv_page_create+0x132>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
    cd20:	4630      	mov	r0, r6
    cd22:	f7fe fe95 	bl	ba50 <lv_obj_get_ext_attr>
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
    cd26:	6841      	ldr	r1, [r0, #4]
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
    cd28:	4607      	mov	r7, r0
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
    cd2a:	4620      	mov	r0, r4
    cd2c:	f002 fdfe 	bl	f92c <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
    cd30:	491c      	ldr	r1, [pc, #112]	; (cda4 <lv_page_create+0x1f0>)
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
    cd32:	6068      	str	r0, [r5, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
    cd34:	f7fd fe6a 	bl	aa0c <lv_obj_set_signal_cb>
        lv_obj_set_signal_cb(new_page, lv_page_signal);
    cd38:	4620      	mov	r0, r4
    cd3a:	491d      	ldr	r1, [pc, #116]	; (cdb0 <lv_page_create+0x1fc>)
    cd3c:	f7fd fe66 	bl	aa0c <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
    cd40:	4620      	mov	r0, r4
    cd42:	491c      	ldr	r1, [pc, #112]	; (cdb4 <lv_page_create+0x200>)
    cd44:	f7fd fe72 	bl	aa2c <lv_obj_set_design_cb>
        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
    cd48:	4649      	mov	r1, r9
    cd4a:	4630      	mov	r0, r6
    cd4c:	f7ff ff0e 	bl	cb6c <lv_page_get_style>
    cd50:	4649      	mov	r1, r9
    cd52:	4602      	mov	r2, r0
    cd54:	4620      	mov	r0, r4
    cd56:	f7ff fea5 	bl	caa4 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
    cd5a:	2101      	movs	r1, #1
    cd5c:	4630      	mov	r0, r6
    cd5e:	f7ff ff05 	bl	cb6c <lv_page_get_style>
    cd62:	2101      	movs	r1, #1
    cd64:	4602      	mov	r2, r0
    cd66:	4620      	mov	r0, r4
    cd68:	f7ff fe9c 	bl	caa4 <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
    cd6c:	2102      	movs	r1, #2
    cd6e:	4630      	mov	r0, r6
    cd70:	f7ff fefc 	bl	cb6c <lv_page_get_style>
    cd74:	2102      	movs	r1, #2
    cd76:	4602      	mov	r2, r0
    cd78:	4620      	mov	r0, r4
    cd7a:	f7ff fe93 	bl	caa4 <lv_page_set_style>
        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
    cd7e:	7f39      	ldrb	r1, [r7, #28]
    cd80:	4620      	mov	r0, r4
    cd82:	f3c1 0182 	ubfx	r1, r1, #2, #3
    cd86:	f7ff fe41 	bl	ca0c <lv_page_set_sb_mode>
        lv_obj_refresh_style(new_page);
    cd8a:	4620      	mov	r0, r4
    cd8c:	f7fe faf0 	bl	b370 <lv_obj_refresh_style>
    cd90:	e7ad      	b.n	ccee <lv_page_create+0x13a>
    cd92:	bf00      	nop
    cd94:	0001a9b8 	.word	0x0001a9b8
    cd98:	20005e64 	.word	0x20005e64
    cd9c:	20005e60 	.word	0x20005e60
    cda0:	2000627c 	.word	0x2000627c
    cda4:	0000d369 	.word	0x0000d369
    cda8:	0000c9e5 	.word	0x0000c9e5
    cdac:	0000c60f 	.word	0x0000c60f
    cdb0:	0000d079 	.word	0x0000d079
    cdb4:	0000cdc5 	.word	0x0000cdc5
    cdb8:	20005fbc 	.word	0x20005fbc
    cdbc:	20005f7c 	.word	0x20005f7c
    cdc0:	2000607c 	.word	0x2000607c

0000cdc4 <lv_page_design>:
{
    cdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
    cdc6:	2a02      	cmp	r2, #2
{
    cdc8:	b0a7      	sub	sp, #156	; 0x9c
    cdca:	4604      	mov	r4, r0
    cdcc:	460f      	mov	r7, r1
    cdce:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
    cdd0:	d104      	bne.n	cddc <lv_page_design+0x18>
        return ancestor_design(page, mask, mode);
    cdd2:	4b84      	ldr	r3, [pc, #528]	; (cfe4 <lv_page_design+0x220>)
    cdd4:	681b      	ldr	r3, [r3, #0]
    cdd6:	4798      	blx	r3
}
    cdd8:	b027      	add	sp, #156	; 0x9c
    cdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
    cddc:	2100      	movs	r1, #0
    cdde:	f7ff fec5 	bl	cb6c <lv_page_get_style>
    cde2:	4601      	mov	r1, r0
    lv_style_copy(&style_tmp, style);
    cde4:	a806      	add	r0, sp, #24
    cde6:	f7fc fb9e 	bl	9526 <lv_style_copy>
    if(mode == LV_DESIGN_DRAW_MAIN) {
    cdea:	b96d      	cbnz	r5, ce08 <lv_page_design+0x44>
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
    cdec:	4620      	mov	r0, r4
        style_tmp.body.border.width = 0;
    cdee:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
    cdf2:	f7fe fd92 	bl	b91a <lv_obj_get_opa_scale>
    cdf6:	aa06      	add	r2, sp, #24
    cdf8:	4603      	mov	r3, r0
    cdfa:	4639      	mov	r1, r7
    cdfc:	f104 0010 	add.w	r0, r4, #16
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
    ce00:	f7f8 fa5c 	bl	52bc <lv_draw_rect>
    ce04:	2001      	movs	r0, #1
    ce06:	e7e7      	b.n	cdd8 <lv_page_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
    ce08:	2d01      	cmp	r5, #1
    ce0a:	d1fb      	bne.n	ce04 <lv_page_design+0x40>
        style_tmp.body.shadow.width = 0;
    ce0c:	2300      	movs	r3, #0
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
    ce0e:	4620      	mov	r0, r4
        style_tmp.body.shadow.width = 0;
    ce10:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        style_tmp.body.opa          = LV_OPA_TRANSP;
    ce14:	f88d 3020 	strb.w	r3, [sp, #32]
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
    ce18:	f7fe fd7f 	bl	b91a <lv_obj_get_opa_scale>
    ce1c:	aa06      	add	r2, sp, #24
    ce1e:	4603      	mov	r3, r0
    ce20:	4639      	mov	r1, r7
    ce22:	f104 0010 	add.w	r0, r4, #16
    ce26:	f7f8 fa49 	bl	52bc <lv_draw_rect>
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    ce2a:	4620      	mov	r0, r4
    ce2c:	f7fe fe10 	bl	ba50 <lv_obj_get_ext_attr>
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
    ce30:	7f03      	ldrb	r3, [r0, #28]
    ce32:	07da      	lsls	r2, r3, #31
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    ce34:	4606      	mov	r6, r0
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
    ce36:	d529      	bpl.n	ce8c <lv_page_design+0xc8>
    ce38:	f3c3 0382 	ubfx	r3, r3, #2, #3
    ce3c:	075b      	lsls	r3, r3, #29
    ce3e:	d425      	bmi.n	ce8c <lv_page_design+0xc8>
            lv_area_copy(&sb_area, &ext->sb.hor_area);
    ce40:	f100 010c 	add.w	r1, r0, #12
    ce44:	a802      	add	r0, sp, #8
    ce46:	f7ff fbdf 	bl	c608 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
    ce4a:	8a22      	ldrh	r2, [r4, #16]
    ce4c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
            sb_area.y1 += page->coords.y1;
    ce50:	f8bd 100a 	ldrh.w	r1, [sp, #10]
            sb_area.x1 += page->coords.x1;
    ce54:	4413      	add	r3, r2
    ce56:	f8ad 3008 	strh.w	r3, [sp, #8]
            sb_area.y1 += page->coords.y1;
    ce5a:	8a63      	ldrh	r3, [r4, #18]
    ce5c:	4419      	add	r1, r3
    ce5e:	f8ad 100a 	strh.w	r1, [sp, #10]
            sb_area.x2 += page->coords.x1;
    ce62:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ce66:	440a      	add	r2, r1
    ce68:	f8ad 200c 	strh.w	r2, [sp, #12]
            sb_area.y2 += page->coords.y1;
    ce6c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
    ce70:	4620      	mov	r0, r4
            sb_area.y2 += page->coords.y1;
    ce72:	4413      	add	r3, r2
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
    ce74:	68b2      	ldr	r2, [r6, #8]
            sb_area.y2 += page->coords.y1;
    ce76:	f8ad 300e 	strh.w	r3, [sp, #14]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
    ce7a:	9201      	str	r2, [sp, #4]
    ce7c:	f7fe fd4d 	bl	b91a <lv_obj_get_opa_scale>
    ce80:	9a01      	ldr	r2, [sp, #4]
    ce82:	4603      	mov	r3, r0
    ce84:	4639      	mov	r1, r7
    ce86:	a802      	add	r0, sp, #8
    ce88:	f7f8 fa18 	bl	52bc <lv_draw_rect>
        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
    ce8c:	7f33      	ldrb	r3, [r6, #28]
    ce8e:	079d      	lsls	r5, r3, #30
    ce90:	d529      	bpl.n	cee6 <lv_page_design+0x122>
    ce92:	f3c3 0382 	ubfx	r3, r3, #2, #3
    ce96:	0758      	lsls	r0, r3, #29
    ce98:	d425      	bmi.n	cee6 <lv_page_design+0x122>
            lv_area_copy(&sb_area, &ext->sb.ver_area);
    ce9a:	f106 0114 	add.w	r1, r6, #20
    ce9e:	a802      	add	r0, sp, #8
    cea0:	f7ff fbb2 	bl	c608 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
    cea4:	8a22      	ldrh	r2, [r4, #16]
    cea6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
            sb_area.y1 += page->coords.y1;
    ceaa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
            sb_area.x1 += page->coords.x1;
    ceae:	4413      	add	r3, r2
    ceb0:	f8ad 3008 	strh.w	r3, [sp, #8]
            sb_area.y1 += page->coords.y1;
    ceb4:	8a63      	ldrh	r3, [r4, #18]
    ceb6:	4419      	add	r1, r3
    ceb8:	f8ad 100a 	strh.w	r1, [sp, #10]
            sb_area.x2 += page->coords.x1;
    cebc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    cec0:	440a      	add	r2, r1
    cec2:	f8ad 200c 	strh.w	r2, [sp, #12]
            sb_area.y2 += page->coords.y1;
    cec6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
    ceca:	4620      	mov	r0, r4
            sb_area.y2 += page->coords.y1;
    cecc:	4413      	add	r3, r2
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
    cece:	68b2      	ldr	r2, [r6, #8]
            sb_area.y2 += page->coords.y1;
    ced0:	f8ad 300e 	strh.w	r3, [sp, #14]
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
    ced4:	9201      	str	r2, [sp, #4]
    ced6:	f7fe fd20 	bl	b91a <lv_obj_get_opa_scale>
    ceda:	9a01      	ldr	r2, [sp, #4]
    cedc:	4603      	mov	r3, r0
    cede:	4639      	mov	r1, r7
    cee0:	a802      	add	r0, sp, #8
    cee2:	f7f8 f9eb 	bl	52bc <lv_draw_rect>
            lv_coord_t page_w = lv_obj_get_width(page);
    cee6:	4620      	mov	r0, r4
    cee8:	f7fd fe68 	bl	abbc <lv_obj_get_width>
    ceec:	4605      	mov	r5, r0
            lv_coord_t page_h = lv_obj_get_height(page);
    ceee:	4620      	mov	r0, r4
    cef0:	f7fd fe72 	bl	abd8 <lv_obj_get_height>
            if(ext->edge_flash.top_ip) {
    cef4:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
    cef8:	0791      	lsls	r1, r2, #30
    cefa:	d533      	bpl.n	cf64 <lv_page_design+0x1a0>
                flash_area.x1 = page->coords.x1 - page_w;
    cefc:	8a21      	ldrh	r1, [r4, #16]
    cefe:	8c30      	ldrh	r0, [r6, #32]
    cf00:	b2ab      	uxth	r3, r5
    cf02:	1ac9      	subs	r1, r1, r3
    cf04:	f8ad 1010 	strh.w	r1, [sp, #16]
                flash_area.x2 = page->coords.x2 + page_w;
    cf08:	8aa1      	ldrh	r1, [r4, #20]
    cf0a:	4419      	add	r1, r3
    cf0c:	f8ad 1014 	strh.w	r1, [sp, #20]
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
    cf10:	8a61      	ldrh	r1, [r4, #18]
    cf12:	4401      	add	r1, r0
    cf14:	ebc3 3083 	rsb	r0, r3, r3, lsl #14
    cf18:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    cf1c:	fa13 f381 	uxtah	r3, r3, r1
    cf20:	f8ad 3012 	strh.w	r3, [sp, #18]
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
    cf24:	f8ad 1016 	strh.w	r1, [sp, #22]
            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
    cf28:	f012 0f1e 	tst.w	r2, #30
    cf2c:	f43f af6a 	beq.w	ce04 <lv_page_design+0x40>
                lv_style_copy(&flash_style, ext->edge_flash.style);
    cf30:	6a71      	ldr	r1, [r6, #36]	; 0x24
    cf32:	a816      	add	r0, sp, #88	; 0x58
    cf34:	f7fc faf7 	bl	9526 <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
    cf38:	f647 4318 	movw	r3, #31768	; 0x7c18
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
    cf3c:	8c32      	ldrh	r2, [r6, #32]
                flash_style.body.radius = LV_RADIUS_CIRCLE;
    cf3e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
    cf42:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
    cf46:	4620      	mov	r0, r4
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
    cf48:	fb13 f302 	smulbb	r3, r3, r2
    cf4c:	2229      	movs	r2, #41	; 0x29
    cf4e:	fb93 f3f2 	sdiv	r3, r3, r2
                flash_style.body.opa    = opa;
    cf52:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
    cf56:	f7fe fce0 	bl	b91a <lv_obj_get_opa_scale>
    cf5a:	aa16      	add	r2, sp, #88	; 0x58
    cf5c:	4603      	mov	r3, r0
    cf5e:	4639      	mov	r1, r7
    cf60:	a804      	add	r0, sp, #16
    cf62:	e74d      	b.n	ce00 <lv_page_design+0x3c>
            } else if(ext->edge_flash.bottom_ip) {
    cf64:	0753      	lsls	r3, r2, #29
    cf66:	d514      	bpl.n	cf92 <lv_page_design+0x1ce>
                flash_area.x1 = page->coords.x1 - page_w;
    cf68:	8a21      	ldrh	r1, [r4, #16]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
    cf6a:	8c30      	ldrh	r0, [r6, #32]
                flash_area.x1 = page->coords.x1 - page_w;
    cf6c:	b2ab      	uxth	r3, r5
    cf6e:	1ac9      	subs	r1, r1, r3
    cf70:	f8ad 1010 	strh.w	r1, [sp, #16]
                flash_area.x2 = page->coords.x2 + page_w;
    cf74:	8aa1      	ldrh	r1, [r4, #20]
    cf76:	4419      	add	r1, r3
    cf78:	f8ad 1014 	strh.w	r1, [sp, #20]
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
    cf7c:	8ae1      	ldrh	r1, [r4, #22]
    cf7e:	1a09      	subs	r1, r1, r0
    cf80:	b289      	uxth	r1, r1
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
    cf82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cf86:	440b      	add	r3, r1
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
    cf88:	f8ad 1012 	strh.w	r1, [sp, #18]
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
    cf8c:	f8ad 3016 	strh.w	r3, [sp, #22]
    cf90:	e7ca      	b.n	cf28 <lv_page_design+0x164>
            } else if(ext->edge_flash.right_ip) {
    cf92:	0711      	lsls	r1, r2, #28
    cf94:	d514      	bpl.n	cfc0 <lv_page_design+0x1fc>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
    cf96:	8c31      	ldrh	r1, [r6, #32]
    cf98:	8aa3      	ldrh	r3, [r4, #20]
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
    cf9a:	b280      	uxth	r0, r0
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
    cf9c:	1a5b      	subs	r3, r3, r1
    cf9e:	b29b      	uxth	r3, r3
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
    cfa0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
    cfa4:	f8ad 3010 	strh.w	r3, [sp, #16]
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
    cfa8:	440b      	add	r3, r1
    cfaa:	f8ad 3014 	strh.w	r3, [sp, #20]
                flash_area.y1 = page->coords.y1 - page_h;
    cfae:	8a63      	ldrh	r3, [r4, #18]
    cfb0:	1a1b      	subs	r3, r3, r0
    cfb2:	f8ad 3012 	strh.w	r3, [sp, #18]
                flash_area.y2 = page->coords.y2 + page_h;
    cfb6:	8ae3      	ldrh	r3, [r4, #22]
    cfb8:	4418      	add	r0, r3
    cfba:	f8ad 0016 	strh.w	r0, [sp, #22]
    cfbe:	e7b3      	b.n	cf28 <lv_page_design+0x164>
            } else if(ext->edge_flash.left_ip) {
    cfc0:	06d3      	lsls	r3, r2, #27
    cfc2:	d5b1      	bpl.n	cf28 <lv_page_design+0x164>
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
    cfc4:	8c33      	ldrh	r3, [r6, #32]
    cfc6:	8a21      	ldrh	r1, [r4, #16]
    cfc8:	b280      	uxth	r0, r0
    cfca:	4419      	add	r1, r3
    cfcc:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
    cfd0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    cfd4:	fa13 f381 	uxtah	r3, r3, r1
    cfd8:	f8ad 3010 	strh.w	r3, [sp, #16]
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
    cfdc:	f8ad 1014 	strh.w	r1, [sp, #20]
    cfe0:	e7e5      	b.n	cfae <lv_page_design+0x1ea>
    cfe2:	bf00      	nop
    cfe4:	20005e60 	.word	0x20005e60

0000cfe8 <lv_page_scroll_hor>:
{
    cfe8:	b510      	push	{r4, lr}
    cfea:	b08a      	sub	sp, #40	; 0x28
    cfec:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
    cfee:	f7ff fd95 	bl	cb1c <lv_page_get_scrl>
    a.var            = scrl;
    cff2:	9001      	str	r0, [sp, #4]
    a.start          = lv_obj_get_x(scrl);
    cff4:	f7fd fdae 	bl	ab54 <lv_obj_get_x>
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
    cff8:	4b0b      	ldr	r3, [pc, #44]	; (d028 <lv_page_scroll_hor+0x40>)
    cffa:	9302      	str	r3, [sp, #8]
    a.path_cb        = lv_anim_path_linear;
    cffc:	4b0b      	ldr	r3, [pc, #44]	; (d02c <lv_page_scroll_hor+0x44>)
    cffe:	9303      	str	r3, [sp, #12]
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
    d000:	22c8      	movs	r2, #200	; 0xc8
    a.ready_cb       = NULL;
    d002:	2300      	movs	r3, #0
    a.playback_pause = 0;
    d004:	e9cd 2307 	strd	r2, r3, [sp, #28]
    a.ready_cb       = NULL;
    d008:	9304      	str	r3, [sp, #16]
    a.playback       = 0;
    d00a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a.start          = lv_obj_get_x(scrl);
    d00e:	9005      	str	r0, [sp, #20]
    a.end            = a.start + dist;
    d010:	4420      	add	r0, r4
    d012:	9006      	str	r0, [sp, #24]
    a.playback       = 0;
    d014:	f023 0303 	bic.w	r3, r3, #3
    lv_anim_create(&a);
    d018:	a801      	add	r0, sp, #4
    a.playback       = 0;
    d01a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    lv_anim_create(&a);
    d01e:	f7f6 fead 	bl	3d7c <lv_anim_create>
}
    d022:	b00a      	add	sp, #40	; 0x28
    d024:	bd10      	pop	{r4, pc}
    d026:	bf00      	nop
    d028:	0000ae4d 	.word	0x0000ae4d
    d02c:	00003ba3 	.word	0x00003ba3

0000d030 <lv_page_scroll_ver>:
{
    d030:	b510      	push	{r4, lr}
    d032:	b08a      	sub	sp, #40	; 0x28
    d034:	460c      	mov	r4, r1
    lv_obj_t * scrl = lv_page_get_scrl(page);
    d036:	f7ff fd71 	bl	cb1c <lv_page_get_scrl>
    a.var            = scrl;
    d03a:	9001      	str	r0, [sp, #4]
    a.start          = lv_obj_get_y(scrl);
    d03c:	f7fd fda4 	bl	ab88 <lv_obj_get_y>
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
    d040:	4b0b      	ldr	r3, [pc, #44]	; (d070 <lv_page_scroll_ver+0x40>)
    d042:	9302      	str	r3, [sp, #8]
    a.path_cb        = lv_anim_path_linear;
    d044:	4b0b      	ldr	r3, [pc, #44]	; (d074 <lv_page_scroll_ver+0x44>)
    d046:	9303      	str	r3, [sp, #12]
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
    d048:	22c8      	movs	r2, #200	; 0xc8
    a.ready_cb       = NULL;
    d04a:	2300      	movs	r3, #0
    a.playback_pause = 0;
    d04c:	e9cd 2307 	strd	r2, r3, [sp, #28]
    a.ready_cb       = NULL;
    d050:	9304      	str	r3, [sp, #16]
    a.playback       = 0;
    d052:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    a.start          = lv_obj_get_y(scrl);
    d056:	9005      	str	r0, [sp, #20]
    a.end            = a.start + dist;
    d058:	4420      	add	r0, r4
    d05a:	9006      	str	r0, [sp, #24]
    a.playback       = 0;
    d05c:	f023 0303 	bic.w	r3, r3, #3
    lv_anim_create(&a);
    d060:	a801      	add	r0, sp, #4
    a.playback       = 0;
    d062:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    lv_anim_create(&a);
    d066:	f7f6 fe89 	bl	3d7c <lv_anim_create>
}
    d06a:	b00a      	add	sp, #40	; 0x28
    d06c:	bd10      	pop	{r4, pc}
    d06e:	bf00      	nop
    d070:	0000ae7d 	.word	0x0000ae7d
    d074:	00003ba3 	.word	0x00003ba3

0000d078 <lv_page_signal>:
    res = ancestor_signal(page, sign, param);
    d078:	4ba3      	ldr	r3, [pc, #652]	; (d308 <lv_page_signal+0x290>)
{
    d07a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(page, sign, param);
    d07e:	681b      	ldr	r3, [r3, #0]
{
    d080:	4604      	mov	r4, r0
    d082:	4688      	mov	r8, r1
    d084:	4617      	mov	r7, r2
    res = ancestor_signal(page, sign, param);
    d086:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
    d088:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
    d08a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
    d08c:	d136      	bne.n	d0fc <lv_page_signal+0x84>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    d08e:	f1b8 0f07 	cmp.w	r8, #7
    d092:	d106      	bne.n	d0a2 <lv_page_signal+0x2a>
    d094:	499d      	ldr	r1, [pc, #628]	; (d30c <lv_page_signal+0x294>)
    d096:	4638      	mov	r0, r7
}
    d098:	b003      	add	sp, #12
    d09a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    d09e:	f7fe bce7 	b.w	ba70 <lv_obj_handle_get_type_signal>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    d0a2:	4620      	mov	r0, r4
    d0a4:	f7fe fcd4 	bl	ba50 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
    d0a8:	f1b8 0f01 	cmp.w	r8, #1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    d0ac:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
    d0ae:	d17c      	bne.n	d1aa <lv_page_signal+0x132>
        const lv_style_t * style_bg = lv_page_get_style(page, LV_PAGE_STYLE_BG);
    d0b0:	2100      	movs	r1, #0
    d0b2:	4620      	mov	r0, r4
    d0b4:	f7ff fd5a 	bl	cb6c <lv_page_get_style>
        const lv_style_t * style_scrl = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
    d0b8:	4631      	mov	r1, r6
        const lv_style_t * style_bg = lv_page_get_style(page, LV_PAGE_STYLE_BG);
    d0ba:	9000      	str	r0, [sp, #0]
        const lv_style_t * style_scrl = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
    d0bc:	4620      	mov	r0, r4
    d0be:	f7ff fd55 	bl	cb6c <lv_page_get_style>
    d0c2:	4607      	mov	r7, r0
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
    d0c4:	4620      	mov	r0, r4
    d0c6:	f7ff fd29 	bl	cb1c <lv_page_get_scrl>
    d0ca:	f003 f82b 	bl	10124 <lv_cont_get_fit_left>
    d0ce:	4683      	mov	fp, r0
    return lv_cont_get_fit_right(lv_page_get_scrl(page));
    d0d0:	4620      	mov	r0, r4
    d0d2:	f7ff fd23 	bl	cb1c <lv_page_get_scrl>
    d0d6:	f003 f83b 	bl	10150 <lv_cont_get_fit_right>
    d0da:	4682      	mov	sl, r0
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
    d0dc:	4620      	mov	r0, r4
    d0de:	f7ff fd1d 	bl	cb1c <lv_page_get_scrl>
    d0e2:	f003 f84b 	bl	1017c <lv_cont_get_fit_top>
        child                    = lv_obj_get_child(page, NULL);
    d0e6:	2100      	movs	r1, #0
    d0e8:	4680      	mov	r8, r0
    d0ea:	4620      	mov	r0, r4
    d0ec:	f7fd fd0c 	bl	ab08 <lv_obj_get_child>
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
    d0f0:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
        child                    = lv_obj_get_child(page, NULL);
    d0f4:	4681      	mov	r9, r0
        while(child != NULL) {
    d0f6:	f1b9 0f00 	cmp.w	r9, #0
    d0fa:	d103      	bne.n	d104 <lv_page_signal+0x8c>
}
    d0fc:	4630      	mov	r0, r6
    d0fe:	b003      	add	sp, #12
    d100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
    d104:	2102      	movs	r1, #2
    d106:	4648      	mov	r0, r9
    d108:	f7fe fc71 	bl	b9ee <lv_obj_is_protected>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
    d10c:	4649      	mov	r1, r9
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
    d10e:	2800      	cmp	r0, #0
    d110:	d146      	bne.n	d1a0 <lv_page_signal+0x128>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
    d112:	4620      	mov	r0, r4
    d114:	f7fd fcf8 	bl	ab08 <lv_obj_get_child>
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
    d118:	f9b9 c010 	ldrsh.w	ip, [r9, #16]
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
    d11c:	4602      	mov	r2, r0
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
    d11e:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
    d122:	4560      	cmp	r0, ip
    d124:	d126      	bne.n	d174 <lv_page_signal+0xfc>
    d126:	f00b 01fd 	and.w	r1, fp, #253	; 0xfd
    d12a:	2901      	cmp	r1, #1
    d12c:	d122      	bne.n	d174 <lv_page_signal+0xfc>
                    tmp->coords.x1 += style_scrl->body.padding.left;
    d12e:	8b79      	ldrh	r1, [r7, #26]
    d130:	4408      	add	r0, r1
    d132:	f8a9 0010 	strh.w	r0, [r9, #16]
                    tmp->coords.x2 += style_scrl->body.padding.left;
    d136:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    d13a:	4401      	add	r1, r0
                    tmp->coords.x2 -= style_scrl->body.padding.right + style_bg->body.padding.right;
    d13c:	f8a9 1014 	strh.w	r1, [r9, #20]
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
    d140:	f9b9 1012 	ldrsh.w	r1, [r9, #18]
    d144:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
    d148:	4288      	cmp	r0, r1
    d14a:	d10b      	bne.n	d164 <lv_page_signal+0xec>
    d14c:	f1b8 0f01 	cmp.w	r8, #1
    d150:	d108      	bne.n	d164 <lv_page_signal+0xec>
                    tmp->coords.y1 += style_scrl->body.padding.top;
    d152:	8af9      	ldrh	r1, [r7, #22]
    d154:	4408      	add	r0, r1
    d156:	f8a9 0012 	strh.w	r0, [r9, #18]
                    tmp->coords.y2 += style_scrl->body.padding.top;
    d15a:	f8b9 0016 	ldrh.w	r0, [r9, #22]
    d15e:	4401      	add	r1, r0
    d160:	f8a9 1016 	strh.w	r1, [r9, #22]
                lv_obj_set_parent(tmp, ext->scrl);
    d164:	4648      	mov	r0, r9
    d166:	6869      	ldr	r1, [r5, #4]
    d168:	9201      	str	r2, [sp, #4]
    d16a:	f7fe f8bb 	bl	b2e4 <lv_obj_set_parent>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
    d16e:	9a01      	ldr	r2, [sp, #4]
    d170:	4691      	mov	r9, r2
    d172:	e7c0      	b.n	d0f6 <lv_page_signal+0x7e>
                else if((tmp->coords.x2 == page->coords.x2) && (fit_right == LV_FIT_TIGHT || fit_right == LV_FIT_FILL)) {
    d174:	f9b9 1014 	ldrsh.w	r1, [r9, #20]
    d178:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
    d17c:	4288      	cmp	r0, r1
    d17e:	d1df      	bne.n	d140 <lv_page_signal+0xc8>
    d180:	f00a 01fd 	and.w	r1, sl, #253	; 0xfd
    d184:	2901      	cmp	r1, #1
    d186:	d1db      	bne.n	d140 <lv_page_signal+0xc8>
                    tmp->coords.x1 -= style_scrl->body.padding.right + style_bg->body.padding.right;
    d188:	9b00      	ldr	r3, [sp, #0]
    d18a:	8bb9      	ldrh	r1, [r7, #28]
    d18c:	f8b3 e01c 	ldrh.w	lr, [r3, #28]
    d190:	4471      	add	r1, lr
    d192:	b289      	uxth	r1, r1
    d194:	ebac 0c01 	sub.w	ip, ip, r1
    d198:	f8a9 c010 	strh.w	ip, [r9, #16]
                    tmp->coords.x2 -= style_scrl->body.padding.right + style_bg->body.padding.right;
    d19c:	1a41      	subs	r1, r0, r1
    d19e:	e7cd      	b.n	d13c <lv_page_signal+0xc4>
                child = lv_obj_get_child(page, child);
    d1a0:	4620      	mov	r0, r4
    d1a2:	f7fd fcb1 	bl	ab08 <lv_obj_get_child>
    d1a6:	4681      	mov	r9, r0
    d1a8:	e7a5      	b.n	d0f6 <lv_page_signal+0x7e>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
    d1aa:	f1b8 0f04 	cmp.w	r8, #4
    d1ae:	d10f      	bne.n	d1d0 <lv_page_signal+0x158>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
    d1b0:	6840      	ldr	r0, [r0, #4]
    d1b2:	2102      	movs	r1, #2
    d1b4:	69c3      	ldr	r3, [r0, #28]
    d1b6:	f100 0210 	add.w	r2, r0, #16
    d1ba:	4798      	blx	r3
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
    d1bc:	7f2b      	ldrb	r3, [r5, #28]
    d1be:	079a      	lsls	r2, r3, #30
    d1c0:	d002      	beq.n	d1c8 <lv_page_signal+0x150>
    d1c2:	4620      	mov	r0, r4
    d1c4:	f7ff fa34 	bl	c630 <lv_page_sb_refresh>
        lv_obj_refresh_ext_draw_pad(page);
    d1c8:	4620      	mov	r0, r4
    d1ca:	f7fe f971 	bl	b4b0 <lv_obj_refresh_ext_draw_pad>
    d1ce:	e795      	b.n	d0fc <lv_page_signal+0x84>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
    d1d0:	f1b8 0f02 	cmp.w	r8, #2
    d1d4:	d125      	bne.n	d222 <lv_page_signal+0x1aa>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
    d1d6:	6843      	ldr	r3, [r0, #4]
    d1d8:	2b00      	cmp	r3, #0
    d1da:	d08f      	beq.n	d0fc <lv_page_signal+0x84>
    d1dc:	4620      	mov	r0, r4
    d1de:	f7fd fced 	bl	abbc <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d1e2:	88bb      	ldrh	r3, [r7, #4]
    d1e4:	883a      	ldrh	r2, [r7, #0]
    d1e6:	3301      	adds	r3, #1
    d1e8:	1a9b      	subs	r3, r3, r2
    d1ea:	b21b      	sxth	r3, r3
    d1ec:	4298      	cmp	r0, r3
    d1ee:	d00d      	beq.n	d20c <lv_page_signal+0x194>
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
    d1f0:	6868      	ldr	r0, [r5, #4]
    d1f2:	2102      	movs	r1, #2
    d1f4:	69c3      	ldr	r3, [r0, #28]
    d1f6:	f100 0210 	add.w	r2, r0, #16
    d1fa:	4798      	blx	r3
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
    d1fc:	7f2b      	ldrb	r3, [r5, #28]
    d1fe:	079b      	lsls	r3, r3, #30
    d200:	f43f af7c 	beq.w	d0fc <lv_page_signal+0x84>
    d204:	4620      	mov	r0, r4
    d206:	f7ff fa13 	bl	c630 <lv_page_sb_refresh>
    d20a:	e777      	b.n	d0fc <lv_page_signal+0x84>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
    d20c:	4620      	mov	r0, r4
    d20e:	f7fd fce3 	bl	abd8 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d212:	88fb      	ldrh	r3, [r7, #6]
    d214:	887a      	ldrh	r2, [r7, #2]
    d216:	3301      	adds	r3, #1
    d218:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
    d21a:	b21b      	sxth	r3, r3
    d21c:	4298      	cmp	r0, r3
    d21e:	d1e7      	bne.n	d1f0 <lv_page_signal+0x178>
    d220:	e76c      	b.n	d0fc <lv_page_signal+0x84>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    d222:	f1b8 0f06 	cmp.w	r8, #6
    d226:	d112      	bne.n	d24e <lv_page_signal+0x1d6>
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
    d228:	6882      	ldr	r2, [r0, #8]
    d22a:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    d22e:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
    d232:	425b      	negs	r3, r3
    d234:	4299      	cmp	r1, r3
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
    d236:	bfb8      	it	lt
    d238:	8623      	strhlt	r3, [r4, #48]	; 0x30
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
    d23a:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
    d23e:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
    d242:	425b      	negs	r3, r3
    d244:	429a      	cmp	r2, r3
    d246:	f6bf af59 	bge.w	d0fc <lv_page_signal+0x84>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
    d24a:	8623      	strh	r3, [r4, #48]	; 0x30
    d24c:	e756      	b.n	d0fc <lv_page_signal+0x84>
    } else if(sign == LV_SIGNAL_CONTROL) {
    d24e:	f1b8 0f12 	cmp.w	r8, #18
    d252:	d154      	bne.n	d2fe <lv_page_signal+0x286>
        uint32_t c = *((uint32_t *)param);
    d254:	683b      	ldr	r3, [r7, #0]
        if(c == LV_KEY_DOWN) {
    d256:	2b12      	cmp	r3, #18
    d258:	d109      	bne.n	d26e <lv_page_signal+0x1f6>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
    d25a:	4620      	mov	r0, r4
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
    d25c:	f7fd fcbc 	bl	abd8 <lv_obj_get_height>
    d260:	2800      	cmp	r0, #0
    d262:	bfb8      	it	lt
    d264:	3003      	addlt	r0, #3
    d266:	1081      	asrs	r1, r0, #2
    d268:	4249      	negs	r1, r1
    d26a:	b209      	sxth	r1, r1
    d26c:	e00a      	b.n	d284 <lv_page_signal+0x20c>
        } else if(c == LV_KEY_UP) {
    d26e:	2b11      	cmp	r3, #17
    d270:	d10c      	bne.n	d28c <lv_page_signal+0x214>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
    d272:	4620      	mov	r0, r4
    d274:	f7fd fcb0 	bl	abd8 <lv_obj_get_height>
    d278:	2800      	cmp	r0, #0
    d27a:	4601      	mov	r1, r0
    d27c:	bfb8      	it	lt
    d27e:	1cc1      	addlt	r1, r0, #3
    d280:	f341 018f 	sbfx	r1, r1, #2, #16
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
    d284:	4620      	mov	r0, r4
    d286:	f7ff fed3 	bl	d030 <lv_page_scroll_ver>
    d28a:	e737      	b.n	d0fc <lv_page_signal+0x84>
        } else if(c == LV_KEY_RIGHT) {
    d28c:	2b13      	cmp	r3, #19
    d28e:	d117      	bne.n	d2c0 <lv_page_signal+0x248>
    return lv_obj_get_width(lv_page_get_scrl(page));
    d290:	4620      	mov	r0, r4
    d292:	f7ff fc43 	bl	cb1c <lv_page_get_scrl>
    d296:	f7fd fc91 	bl	abbc <lv_obj_get_width>
    d29a:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
    d29c:	4620      	mov	r0, r4
    d29e:	f7fd fc8d 	bl	abbc <lv_obj_get_width>
    d2a2:	42a8      	cmp	r0, r5
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
    d2a4:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
    d2a6:	dad9      	bge.n	d25c <lv_page_signal+0x1e4>
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
    d2a8:	f7fd fc88 	bl	abbc <lv_obj_get_width>
    d2ac:	2800      	cmp	r0, #0
    d2ae:	bfb8      	it	lt
    d2b0:	3003      	addlt	r0, #3
    d2b2:	1081      	asrs	r1, r0, #2
    d2b4:	4249      	negs	r1, r1
    d2b6:	b209      	sxth	r1, r1
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
    d2b8:	4620      	mov	r0, r4
    d2ba:	f7ff fe95 	bl	cfe8 <lv_page_scroll_hor>
    d2be:	e71d      	b.n	d0fc <lv_page_signal+0x84>
        } else if(c == LV_KEY_LEFT) {
    d2c0:	2b14      	cmp	r3, #20
    d2c2:	f47f af1b 	bne.w	d0fc <lv_page_signal+0x84>
    d2c6:	4620      	mov	r0, r4
    d2c8:	f7ff fc28 	bl	cb1c <lv_page_get_scrl>
    d2cc:	f7fd fc76 	bl	abbc <lv_obj_get_width>
    d2d0:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
    d2d2:	4620      	mov	r0, r4
    d2d4:	f7fd fc72 	bl	abbc <lv_obj_get_width>
    d2d8:	42a8      	cmp	r0, r5
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
    d2da:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
    d2dc:	db07      	blt.n	d2ee <lv_page_signal+0x276>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
    d2de:	f7fd fc7b 	bl	abd8 <lv_obj_get_height>
    d2e2:	2800      	cmp	r0, #0
    d2e4:	bfb8      	it	lt
    d2e6:	3003      	addlt	r0, #3
    d2e8:	f340 018f 	sbfx	r1, r0, #2, #16
    d2ec:	e7ca      	b.n	d284 <lv_page_signal+0x20c>
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
    d2ee:	f7fd fc65 	bl	abbc <lv_obj_get_width>
    d2f2:	2800      	cmp	r0, #0
    d2f4:	bfb8      	it	lt
    d2f6:	3003      	addlt	r0, #3
    d2f8:	f340 018f 	sbfx	r1, r0, #2, #16
    d2fc:	e7dc      	b.n	d2b8 <lv_page_signal+0x240>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
    d2fe:	f1b8 0f13 	cmp.w	r8, #19
        *editable       = true;
    d302:	bf08      	it	eq
    d304:	703e      	strbeq	r6, [r7, #0]
    d306:	e6f9      	b.n	d0fc <lv_page_signal+0x84>
    d308:	20005e64 	.word	0x20005e64
    d30c:	0001de53 	.word	0x0001de53

0000d310 <lv_page_start_edge_flash>:
{
    d310:	b510      	push	{r4, lr}
    d312:	b08a      	sub	sp, #40	; 0x28
    d314:	4604      	mov	r4, r0
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
    d316:	f7fe fb9b 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->edge_flash.enabled) {
    d31a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    d31e:	07d9      	lsls	r1, r3, #31
    d320:	d519      	bpl.n	d356 <lv_page_start_edge_flash+0x46>
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
    d322:	4b0e      	ldr	r3, [pc, #56]	; (d35c <lv_page_start_edge_flash+0x4c>)
    d324:	9302      	str	r3, [sp, #8]
        a.path_cb        = lv_anim_path_linear;
    d326:	4b0e      	ldr	r3, [pc, #56]	; (d360 <lv_page_start_edge_flash+0x50>)
    d328:	9303      	str	r3, [sp, #12]
        a.ready_cb       = edge_flash_anim_end;
    d32a:	4b0e      	ldr	r3, [pc, #56]	; (d364 <lv_page_start_edge_flash+0x54>)
    d32c:	9304      	str	r3, [sp, #16]
        a.end            = LV_PAGE_END_FLASH_SIZE;
    d32e:	2200      	movs	r2, #0
    d330:	2329      	movs	r3, #41	; 0x29
    d332:	e9cd 2305 	strd	r2, r3, [sp, #20]
        a.time           = LV_PAGE_END_ANIM_TIME;
    d336:	f44f 7396 	mov.w	r3, #300	; 0x12c
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
    d33a:	e9cd 3307 	strd	r3, r3, [sp, #28]
        a.playback       = 1;
    d33e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        a.var            = page;
    d342:	9401      	str	r4, [sp, #4]
        a.playback       = 1;
    d344:	f023 0303 	bic.w	r3, r3, #3
    d348:	f043 0301 	orr.w	r3, r3, #1
        lv_anim_create(&a);
    d34c:	a801      	add	r0, sp, #4
        a.playback       = 1;
    d34e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        lv_anim_create(&a);
    d352:	f7f6 fd13 	bl	3d7c <lv_anim_create>
}
    d356:	b00a      	add	sp, #40	; 0x28
    d358:	bd10      	pop	{r4, pc}
    d35a:	bf00      	nop
    d35c:	0000c9cd 	.word	0x0000c9cd
    d360:	00003ba3 	.word	0x00003ba3
    d364:	0000c9ad 	.word	0x0000c9ad

0000d368 <lv_page_scrollable_signal>:
{
    d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = ancestor_signal(scrl, sign, param);
    d36c:	4bb8      	ldr	r3, [pc, #736]	; (d650 <lv_page_scrollable_signal+0x2e8>)
{
    d36e:	b091      	sub	sp, #68	; 0x44
    res = ancestor_signal(scrl, sign, param);
    d370:	681b      	ldr	r3, [r3, #0]
{
    d372:	4680      	mov	r8, r0
    d374:	460d      	mov	r5, r1
    d376:	4693      	mov	fp, r2
    res = ancestor_signal(scrl, sign, param);
    d378:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
    d37a:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
    d37c:	9001      	str	r0, [sp, #4]
    if(res != LV_RES_OK) return res;
    d37e:	d106      	bne.n	d38e <lv_page_scrollable_signal+0x26>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
    d380:	2d07      	cmp	r5, #7
    d382:	d108      	bne.n	d396 <lv_page_scrollable_signal+0x2e>
    d384:	49b3      	ldr	r1, [pc, #716]	; (d654 <lv_page_scrollable_signal+0x2ec>)
    d386:	4658      	mov	r0, fp
    d388:	f7fe fb72 	bl	ba70 <lv_obj_handle_get_type_signal>
    d38c:	9001      	str	r0, [sp, #4]
}
    d38e:	9801      	ldr	r0, [sp, #4]
    d390:	b011      	add	sp, #68	; 0x44
    d392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * page               = lv_obj_get_parent(scrl);
    d396:	4640      	mov	r0, r8
    d398:	f7fd fb6e 	bl	aa78 <lv_obj_get_parent>
    d39c:	4607      	mov	r7, r0
    const lv_style_t * page_style = lv_obj_get_style(page);
    d39e:	f7fd fc3b 	bl	ac18 <lv_obj_get_style>
    d3a2:	4606      	mov	r6, r0
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
    d3a4:	4638      	mov	r0, r7
    d3a6:	f7fe fb53 	bl	ba50 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_CORD_CHG) {
    d3aa:	2d02      	cmp	r5, #2
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
    d3ac:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CORD_CHG) {
    d3ae:	f040 8187 	bne.w	d6c0 <lv_page_scrollable_signal+0x358>
        lv_coord_t new_x = lv_obj_get_x(scrl);
    d3b2:	4640      	mov	r0, r8
    d3b4:	f7fd fbce 	bl	ab54 <lv_obj_get_x>
    d3b8:	9000      	str	r0, [sp, #0]
        lv_coord_t new_y = lv_obj_get_y(scrl);
    d3ba:	4640      	mov	r0, r8
    d3bc:	f7fd fbe4 	bl	ab88 <lv_obj_get_y>
        lv_obj_get_coords(scrl, &scrl_coords);
    d3c0:	a90e      	add	r1, sp, #56	; 0x38
        lv_coord_t new_y = lv_obj_get_y(scrl);
    d3c2:	9002      	str	r0, [sp, #8]
        lv_obj_get_coords(scrl, &scrl_coords);
    d3c4:	4640      	mov	r0, r8
    d3c6:	f7fd fbb3 	bl	ab30 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
    d3ca:	a90c      	add	r1, sp, #48	; 0x30
    d3cc:	4638      	mov	r0, r7
    d3ce:	f7fd fbaf 	bl	ab30 <lv_obj_get_coords>
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
    d3d2:	f8bb 0000 	ldrh.w	r0, [fp]
    d3d6:	f8b8 1010 	ldrh.w	r1, [r8, #16]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
    d3da:	8b75      	ldrh	r5, [r6, #26]
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
    d3dc:	1a09      	subs	r1, r1, r0
    d3de:	b28b      	uxth	r3, r1
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
    d3e0:	f8bb 0002 	ldrh.w	r0, [fp, #2]
    d3e4:	f8b8 1012 	ldrh.w	r1, [r8, #18]
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
    d3e8:	9303      	str	r3, [sp, #12]
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
    d3ea:	1a09      	subs	r1, r1, r0
    d3ec:	b28b      	uxth	r3, r1
    d3ee:	9304      	str	r3, [sp, #16]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
    d3f0:	8bb3      	ldrh	r3, [r6, #28]
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
    d3f2:	8af0      	ldrh	r0, [r6, #22]
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
    d3f4:	441d      	add	r5, r3
    d3f6:	b22b      	sxth	r3, r5
    d3f8:	9307      	str	r3, [sp, #28]
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
    d3fa:	8b33      	ldrh	r3, [r6, #24]
    d3fc:	4418      	add	r0, r3
    d3fe:	b203      	sxth	r3, r0
        lv_obj_t * page_parent = lv_obj_get_parent(page);
    d400:	4638      	mov	r0, r7
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
    d402:	9308      	str	r3, [sp, #32]
        lv_obj_t * page_parent = lv_obj_get_parent(page);
    d404:	f7fd fb38 	bl	aa78 <lv_obj_get_parent>
    d408:	4681      	mov	r9, r0
        lv_indev_t * indev = lv_indev_get_act();
    d40a:	f7fc fe2b 	bl	a064 <lv_indev_get_act>
        lv_indev_get_vect(indev, &drag_vect);
    d40e:	a90b      	add	r1, sp, #44	; 0x2c
        lv_indev_t * indev = lv_indev_get_act();
    d410:	4605      	mov	r5, r0
        lv_indev_get_vect(indev, &drag_vect);
    d412:	f7fc fe4d 	bl	a0b0 <lv_indev_get_vect>
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
    d416:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    d41a:	f003 0303 	and.w	r3, r3, #3
    d41e:	2b01      	cmp	r3, #1
    d420:	d129      	bne.n	d476 <lv_page_scrollable_signal+0x10e>
    d422:	4628      	mov	r0, r5
    d424:	f7fc fe37 	bl	a096 <lv_indev_is_dragging>
    d428:	bb28      	cbnz	r0, d476 <lv_page_scrollable_signal+0x10e>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
    d42a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
    d42e:	2b00      	cmp	r3, #0
    d430:	f340 8099 	ble.w	d566 <lv_page_scrollable_signal+0x1fe>
    d434:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
    d438:	f9b6 1016 	ldrsh.w	r1, [r6, #22]
    d43c:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
    d440:	440b      	add	r3, r1
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
    d442:	429a      	cmp	r2, r3
    d444:	d117      	bne.n	d476 <lv_page_scrollable_signal+0x10e>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
    d446:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
    d44a:	2b00      	cmp	r3, #0
    d44c:	f340 8094 	ble.w	d578 <lv_page_scrollable_signal+0x210>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
    d450:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    d454:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
    d458:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
    d45c:	440b      	add	r3, r1
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
    d45e:	429a      	cmp	r2, r3
    d460:	d109      	bne.n	d476 <lv_page_scrollable_signal+0x10e>
                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
    d462:	4648      	mov	r0, r9
    d464:	f7fd fb08 	bl	aa78 <lv_obj_get_parent>
    d468:	b128      	cbz	r0, d476 <lv_page_scrollable_signal+0x10e>
                    page_ext->scroll_prop_ip = 1;
    d46a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    d46e:	f043 0302 	orr.w	r3, r3, #2
    d472:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d476:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    d47a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
    d47e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    d482:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
    d486:	9309      	str	r3, [sp, #36]	; 0x24
    d488:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    d48c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    d490:	9305      	str	r3, [sp, #20]
    d492:	ebac 0100 	sub.w	r1, ip, r0
    d496:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    d49a:	9306      	str	r3, [sp, #24]
    d49c:	b289      	uxth	r1, r1
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
    d49e:	9b07      	ldr	r3, [sp, #28]
    d4a0:	f10a 0501 	add.w	r5, sl, #1
    d4a4:	1aad      	subs	r5, r5, r2
    d4a6:	f101 0e01 	add.w	lr, r1, #1
    d4aa:	fa03 f585 	sxtah	r5, r3, r5
    d4ae:	fa0f fe8e 	sxth.w	lr, lr
    d4b2:	4575      	cmp	r5, lr
    d4b4:	dc6a      	bgt.n	d58c <lv_page_scrollable_signal+0x224>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
    d4b6:	f9b6 201a 	ldrsh.w	r2, [r6, #26]
    d4ba:	9b06      	ldr	r3, [sp, #24]
                new_x  = page_style->body.padding.left;
    d4bc:	9905      	ldr	r1, [sp, #20]
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
    d4be:	4413      	add	r3, r2
                new_x  = page_style->body.padding.left;
    d4c0:	4299      	cmp	r1, r3
    d4c2:	9b00      	ldr	r3, [sp, #0]
    d4c4:	bf18      	it	ne
    d4c6:	4613      	movne	r3, r2
    d4c8:	9300      	str	r3, [sp, #0]
    d4ca:	bf0c      	ite	eq
    d4cc:	2500      	moveq	r5, #0
    d4ce:	2501      	movne	r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d4d0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    d4d4:	9309      	str	r3, [sp, #36]	; 0x24
    d4d6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    d4da:	9305      	str	r3, [sp, #20]
    d4dc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
    d4e0:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
    d4e4:	9805      	ldr	r0, [sp, #20]
    d4e6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    d4ea:	9107      	str	r1, [sp, #28]
    d4ec:	3001      	adds	r0, #1
    d4ee:	ebac 0101 	sub.w	r1, ip, r1
    d4f2:	1ac0      	subs	r0, r0, r3
    d4f4:	9306      	str	r3, [sp, #24]
    d4f6:	b289      	uxth	r1, r1
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
    d4f8:	9b08      	ldr	r3, [sp, #32]
    d4fa:	f9bd a03a 	ldrsh.w	sl, [sp, #58]	; 0x3a
    d4fe:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
    d502:	f101 0e01 	add.w	lr, r1, #1
    d506:	fa03 f080 	sxtah	r0, r3, r0
    d50a:	fa0f fe8e 	sxth.w	lr, lr
    d50e:	4570      	cmp	r0, lr
    d510:	f300 8089 	bgt.w	d626 <lv_page_scrollable_signal+0x2be>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
    d514:	f9b6 b016 	ldrsh.w	fp, [r6, #22]
    d518:	445a      	add	r2, fp
    d51a:	4592      	cmp	sl, r2
    d51c:	f040 8094 	bne.w	d648 <lv_page_scrollable_signal+0x2e0>
        if(refr_x || refr_y) {
    d520:	b1ed      	cbz	r5, d55e <lv_page_scrollable_signal+0x1f6>
    d522:	2600      	movs	r6, #0
            lv_obj_set_pos(scrl, new_x, new_y);
    d524:	9900      	ldr	r1, [sp, #0]
    d526:	9a02      	ldr	r2, [sp, #8]
    d528:	4640      	mov	r0, r8
    d52a:	f7fd fc43 	bl	adb4 <lv_obj_set_pos>
            if(page_ext->scroll_prop_ip) {
    d52e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    d532:	0799      	lsls	r1, r3, #30
    d534:	d513      	bpl.n	d55e <lv_page_scrollable_signal+0x1f6>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
    d536:	b146      	cbz	r6, d54a <lv_page_scrollable_signal+0x1e2>
    d538:	4648      	mov	r0, r9
    d53a:	f7fd fb25 	bl	ab88 <lv_obj_get_y>
    d53e:	9b04      	ldr	r3, [sp, #16]
    d540:	4403      	add	r3, r0
    d542:	b219      	sxth	r1, r3
    d544:	4648      	mov	r0, r9
    d546:	f7fd fc99 	bl	ae7c <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
    d54a:	b145      	cbz	r5, d55e <lv_page_scrollable_signal+0x1f6>
    d54c:	4648      	mov	r0, r9
    d54e:	f7fd fb01 	bl	ab54 <lv_obj_get_x>
    d552:	9b03      	ldr	r3, [sp, #12]
    d554:	4403      	add	r3, r0
    d556:	b219      	sxth	r1, r3
    d558:	4648      	mov	r0, r9
    d55a:	f7fd fc77 	bl	ae4c <lv_obj_set_x>
        lv_page_sb_refresh(page);
    d55e:	4638      	mov	r0, r7
    d560:	f7ff f866 	bl	c630 <lv_page_sb_refresh>
    d564:	e713      	b.n	d38e <lv_page_scrollable_signal+0x26>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
    d566:	d086      	beq.n	d476 <lv_page_scrollable_signal+0x10e>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
    d568:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
    d56c:	f9b6 1018 	ldrsh.w	r1, [r6, #24]
    d570:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
    d574:	1a5b      	subs	r3, r3, r1
    d576:	e764      	b.n	d442 <lv_page_scrollable_signal+0xda>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
    d578:	f43f af7d 	beq.w	d476 <lv_page_scrollable_signal+0x10e>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
    d57c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
    d580:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
    d584:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
    d588:	1a5b      	subs	r3, r3, r1
    d58a:	e768      	b.n	d45e <lv_page_scrollable_signal+0xf6>
            if(page_ext->scroll_prop_ip) {
    d58c:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
    d590:	f015 0502 	ands.w	r5, r5, #2
    d594:	d00b      	beq.n	d5ae <lv_page_scrollable_signal+0x246>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
    d596:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    d59a:	9a03      	ldr	r2, [sp, #12]
    d59c:	429a      	cmp	r2, r3
    d59e:	d13d      	bne.n	d61c <lv_page_scrollable_signal+0x2b4>
                    new_x  = ori_coords->x1 - page_coords.x1;
    d5a0:	f8bb 3000 	ldrh.w	r3, [fp]
    d5a4:	1a18      	subs	r0, r3, r0
    d5a6:	b203      	sxth	r3, r0
    d5a8:	9300      	str	r3, [sp, #0]
                refr_x = true;
    d5aa:	2501      	movs	r5, #1
    d5ac:	e790      	b.n	d4d0 <lv_page_scrollable_signal+0x168>
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
    d5ae:	f9b6 001c 	ldrsh.w	r0, [r6, #28]
    d5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5b4:	ebac 0c00 	sub.w	ip, ip, r0
    d5b8:	4563      	cmp	r3, ip
    d5ba:	da15      	bge.n	d5e8 <lv_page_scrollable_signal+0x280>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
    d5bc:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
    d5c0:	eba1 010a 	sub.w	r1, r1, sl
    d5c4:	440a      	add	r2, r1
    d5c6:	1a10      	subs	r0, r2, r0
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
    d5c8:	f005 051f 	and.w	r5, r5, #31
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
    d5cc:	b203      	sxth	r3, r0
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
    d5ce:	2d01      	cmp	r5, #1
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
    d5d0:	9300      	str	r3, [sp, #0]
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
    d5d2:	d1ea      	bne.n	d5aa <lv_page_scrollable_signal+0x242>
                    lv_page_start_edge_flash(page);
    d5d4:	4638      	mov	r0, r7
    d5d6:	f7ff fe9b 	bl	d310 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
    d5da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    d5de:	f043 0308 	orr.w	r3, r3, #8
    d5e2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    d5e6:	e773      	b.n	d4d0 <lv_page_scrollable_signal+0x168>
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
    d5e8:	f9b6 a01a 	ldrsh.w	sl, [r6, #26]
    d5ec:	9b06      	ldr	r3, [sp, #24]
    d5ee:	9a05      	ldr	r2, [sp, #20]
    d5f0:	4453      	add	r3, sl
    d5f2:	429a      	cmp	r2, r3
    d5f4:	f77f af6c 	ble.w	d4d0 <lv_page_scrollable_signal+0x168>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
    d5f8:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
    d5fc:	f005 051f 	and.w	r5, r5, #31
    d600:	2d01      	cmp	r5, #1
    d602:	d10d      	bne.n	d620 <lv_page_scrollable_signal+0x2b8>
                    lv_page_start_edge_flash(page);
    d604:	4638      	mov	r0, r7
    d606:	f7ff fe83 	bl	d310 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
    d60a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                new_x  = page_style->body.padding.left; /*Left align*/
    d60e:	f8cd a000 	str.w	sl, [sp]
                    page_ext->edge_flash.left_ip = 1;
    d612:	f043 0310 	orr.w	r3, r3, #16
    d616:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    d61a:	e759      	b.n	d4d0 <lv_page_scrollable_signal+0x168>
        bool refr_x      = false;
    d61c:	2500      	movs	r5, #0
    d61e:	e757      	b.n	d4d0 <lv_page_scrollable_signal+0x168>
                new_x  = page_style->body.padding.left; /*Left align*/
    d620:	f8cd a000 	str.w	sl, [sp]
    d624:	e7c1      	b.n	d5aa <lv_page_scrollable_signal+0x242>
            if(page_ext->scroll_prop_ip) {
    d626:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    d62a:	0780      	lsls	r0, r0, #30
    d62c:	d514      	bpl.n	d658 <lv_page_scrollable_signal+0x2f0>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
    d62e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    d632:	9a04      	ldr	r2, [sp, #16]
    d634:	429a      	cmp	r2, r3
    d636:	f47f af73 	bne.w	d520 <lv_page_scrollable_signal+0x1b8>
                    new_y  = ori_coords->y1 - page_coords.y1;
    d63a:	f8bb 0002 	ldrh.w	r0, [fp, #2]
    d63e:	9b07      	ldr	r3, [sp, #28]
    d640:	eba0 0b03 	sub.w	fp, r0, r3
    d644:	fa0f fb8b 	sxth.w	fp, fp
                refr_x = true;
    d648:	f8cd b008 	str.w	fp, [sp, #8]
    d64c:	2601      	movs	r6, #1
    d64e:	e769      	b.n	d524 <lv_page_scrollable_signal+0x1bc>
    d650:	20005e64 	.word	0x20005e64
    d654:	00015655 	.word	0x00015655
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
    d658:	f9b6 0018 	ldrsh.w	r0, [r6, #24]
    d65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d65e:	ebac 0c00 	sub.w	ip, ip, r0
    d662:	4563      	cmp	r3, ip
    d664:	da18      	bge.n	d698 <lv_page_scrollable_signal+0x330>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
    d666:	9b05      	ldr	r3, [sp, #20]
    d668:	eba1 0b03 	sub.w	fp, r1, r3
    d66c:	9b06      	ldr	r3, [sp, #24]
    d66e:	449b      	add	fp, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
    d670:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
    d674:	f003 031f 	and.w	r3, r3, #31
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
    d678:	ebab 0b00 	sub.w	fp, fp, r0
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
    d67c:	2b01      	cmp	r3, #1
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
    d67e:	fa0f fb8b 	sxth.w	fp, fp
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
    d682:	d1e1      	bne.n	d648 <lv_page_scrollable_signal+0x2e0>
                    lv_page_start_edge_flash(page);
    d684:	4638      	mov	r0, r7
    d686:	f7ff fe43 	bl	d310 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
    d68a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    d68e:	f043 0304 	orr.w	r3, r3, #4
                    page_ext->edge_flash.top_ip = 1;
    d692:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    d696:	e7d7      	b.n	d648 <lv_page_scrollable_signal+0x2e0>
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
    d698:	f9b6 b016 	ldrsh.w	fp, [r6, #22]
    d69c:	445a      	add	r2, fp
    d69e:	4592      	cmp	sl, r2
    d6a0:	f77f af3e 	ble.w	d520 <lv_page_scrollable_signal+0x1b8>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
    d6a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
    d6a8:	f003 031f 	and.w	r3, r3, #31
    d6ac:	2b01      	cmp	r3, #1
    d6ae:	d1cb      	bne.n	d648 <lv_page_scrollable_signal+0x2e0>
                    lv_page_start_edge_flash(page);
    d6b0:	4638      	mov	r0, r7
    d6b2:	f7ff fe2d 	bl	d310 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
    d6b6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    d6ba:	f043 0302 	orr.w	r3, r3, #2
    d6be:	e7e8      	b.n	d692 <lv_page_scrollable_signal+0x32a>
    } else if(sign == LV_SIGNAL_DRAG_END) {
    d6c0:	2d0f      	cmp	r5, #15
    d6c2:	f47f ae64 	bne.w	d38e <lv_page_scrollable_signal+0x26>
        page_ext->scroll_prop_ip = 0;
    d6c6:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    d6ca:	f36f 0341 	bfc	r3, #1, #1
    d6ce:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
    d6d2:	7f03      	ldrb	r3, [r0, #28]
    d6d4:	f003 031c 	and.w	r3, r3, #28
    d6d8:	2b08      	cmp	r3, #8
    d6da:	f47f ae58 	bne.w	d38e <lv_page_scrollable_signal+0x26>
            lv_disp_t * disp = lv_obj_get_disp(page);
    d6de:	4638      	mov	r0, r7
    d6e0:	f7fd f9e6 	bl	aab0 <lv_obj_get_disp>
            if(page_ext->sb.hor_draw) {
    d6e4:	7f23      	ldrb	r3, [r4, #28]
    d6e6:	07da      	lsls	r2, r3, #31
            lv_disp_t * disp = lv_obj_get_disp(page);
    d6e8:	4605      	mov	r5, r0
            if(page_ext->sb.hor_draw) {
    d6ea:	d522      	bpl.n	d732 <lv_page_scrollable_signal+0x3ca>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
    d6ec:	f104 010c 	add.w	r1, r4, #12
    d6f0:	a80e      	add	r0, sp, #56	; 0x38
    d6f2:	f7fe ff89 	bl	c608 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
    d6f6:	8a3a      	ldrh	r2, [r7, #16]
    d6f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
                sb_area_tmp.y1 += page->coords.y1;
    d6fc:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
                sb_area_tmp.x1 += page->coords.x1;
    d700:	4413      	add	r3, r2
    d702:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                sb_area_tmp.y1 += page->coords.y1;
    d706:	8a7b      	ldrh	r3, [r7, #18]
    d708:	4419      	add	r1, r3
    d70a:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
                sb_area_tmp.x2 += page->coords.x1;
    d70e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
    d712:	440a      	add	r2, r1
    d714:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
                sb_area_tmp.y2 += page->coords.y1;
    d718:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
                lv_inv_area(disp, &sb_area_tmp);
    d71c:	a90e      	add	r1, sp, #56	; 0x38
                sb_area_tmp.y2 += page->coords.y1;
    d71e:	4413      	add	r3, r2
                lv_inv_area(disp, &sb_area_tmp);
    d720:	4628      	mov	r0, r5
                sb_area_tmp.y2 += page->coords.y1;
    d722:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                lv_inv_area(disp, &sb_area_tmp);
    d726:	f7fc fdfa 	bl	a31e <lv_inv_area>
                page_ext->sb.hor_draw = 0;
    d72a:	7f23      	ldrb	r3, [r4, #28]
    d72c:	f36f 0300 	bfc	r3, #0, #1
    d730:	7723      	strb	r3, [r4, #28]
            if(page_ext->sb.ver_draw) {
    d732:	7f23      	ldrb	r3, [r4, #28]
    d734:	079b      	lsls	r3, r3, #30
    d736:	f57f ae2a 	bpl.w	d38e <lv_page_scrollable_signal+0x26>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
    d73a:	f104 0114 	add.w	r1, r4, #20
    d73e:	a80e      	add	r0, sp, #56	; 0x38
    d740:	f7fe ff62 	bl	c608 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
    d744:	8a3a      	ldrh	r2, [r7, #16]
    d746:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
                sb_area_tmp.y1 += page->coords.y1;
    d74a:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
                sb_area_tmp.x1 += page->coords.x1;
    d74e:	4413      	add	r3, r2
    d750:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                sb_area_tmp.y1 += page->coords.y1;
    d754:	8a7b      	ldrh	r3, [r7, #18]
    d756:	4419      	add	r1, r3
    d758:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
                sb_area_tmp.x2 += page->coords.x1;
    d75c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
    d760:	440a      	add	r2, r1
    d762:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
                sb_area_tmp.y2 += page->coords.y1;
    d766:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
                lv_inv_area(disp, &sb_area_tmp);
    d76a:	a90e      	add	r1, sp, #56	; 0x38
                sb_area_tmp.y2 += page->coords.y1;
    d76c:	4413      	add	r3, r2
                lv_inv_area(disp, &sb_area_tmp);
    d76e:	4628      	mov	r0, r5
                sb_area_tmp.y2 += page->coords.y1;
    d770:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                lv_inv_area(disp, &sb_area_tmp);
    d774:	f7fc fdd3 	bl	a31e <lv_inv_area>
                page_ext->sb.ver_draw = 0;
    d778:	7f23      	ldrb	r3, [r4, #28]
    d77a:	f36f 0341 	bfc	r3, #1, #1
    d77e:	7723      	strb	r3, [r4, #28]
    d780:	e605      	b.n	d38e <lv_page_scrollable_signal+0x26>
    d782:	bf00      	nop

0000d784 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
    d784:	2a02      	cmp	r2, #2
{
    d786:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
    d788:	d008      	beq.n	d79c <lv_btn_design+0x18>
        return false;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
    d78a:	b91a      	cbnz	r2, d794 <lv_btn_design+0x10>
        }
#else
        ancestor_design(btn, mask, mode);
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, mask, mode);
    d78c:	4b04      	ldr	r3, [pc, #16]	; (d7a0 <lv_btn_design+0x1c>)
    d78e:	681b      	ldr	r3, [r3, #0]
    d790:	4798      	blx	r3
    d792:	e001      	b.n	d798 <lv_btn_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
    d794:	2a01      	cmp	r2, #1
    d796:	d0f9      	beq.n	d78c <lv_btn_design+0x8>
    }

    return true;
    d798:	2001      	movs	r0, #1
    d79a:	e000      	b.n	d79e <lv_btn_design+0x1a>
        return false;
    d79c:	2000      	movs	r0, #0
}
    d79e:	bd10      	pop	{r4, pc}
    d7a0:	20005e68 	.word	0x20005e68

0000d7a4 <lv_btn_set_state>:
{
    d7a4:	b538      	push	{r3, r4, r5, lr}
    d7a6:	4604      	mov	r4, r0
    d7a8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
    d7aa:	f7fc ffb9 	bl	a720 <lv_debug_check_null>
    d7ae:	4603      	mov	r3, r0
    d7b0:	b920      	cbnz	r0, d7bc <lv_btn_set_state+0x18>
    d7b2:	480c      	ldr	r0, [pc, #48]	; (d7e4 <lv_btn_set_state+0x40>)
    d7b4:	4622      	mov	r2, r4
    d7b6:	f7fc ffc3 	bl	a740 <lv_debug_log_error>
    d7ba:	e7fe      	b.n	d7ba <lv_btn_set_state+0x16>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
    d7bc:	4620      	mov	r0, r4
    d7be:	f7fe f947 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->state != state) {
    d7c2:	7e03      	ldrb	r3, [r0, #24]
    d7c4:	f003 0207 	and.w	r2, r3, #7
    d7c8:	42aa      	cmp	r2, r5
    d7ca:	d00a      	beq.n	d7e2 <lv_btn_set_state+0x3e>
        lv_obj_set_style(btn, ext->styles[state]);
    d7cc:	eb00 0185 	add.w	r1, r0, r5, lsl #2
        ext->state = state;
    d7d0:	f365 0302 	bfi	r3, r5, #0, #3
    d7d4:	7603      	strb	r3, [r0, #24]
        lv_obj_set_style(btn, ext->styles[state]);
    d7d6:	6849      	ldr	r1, [r1, #4]
    d7d8:	4620      	mov	r0, r4
}
    d7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
    d7de:	f7fd bdfb 	b.w	b3d8 <lv_obj_set_style>
}
    d7e2:	bd38      	pop	{r3, r4, r5, pc}
    d7e4:	0001de08 	.word	0x0001de08

0000d7e8 <lv_btn_set_style>:
{
    d7e8:	b570      	push	{r4, r5, r6, lr}
    d7ea:	4605      	mov	r5, r0
    d7ec:	460e      	mov	r6, r1
    d7ee:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
    d7f0:	f7fc ff96 	bl	a720 <lv_debug_check_null>
    d7f4:	4603      	mov	r3, r0
    d7f6:	b920      	cbnz	r0, d802 <lv_btn_set_style+0x1a>
    d7f8:	4811      	ldr	r0, [pc, #68]	; (d840 <lv_btn_set_style+0x58>)
    d7fa:	462a      	mov	r2, r5
    d7fc:	f7fc ffa0 	bl	a740 <lv_debug_log_error>
    d800:	e7fe      	b.n	d800 <lv_btn_set_style+0x18>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
    d802:	4628      	mov	r0, r5
    d804:	f7fe f924 	bl	ba50 <lv_obj_get_ext_attr>
    switch(type) {
    d808:	2e04      	cmp	r6, #4
    d80a:	d805      	bhi.n	d818 <lv_btn_set_style+0x30>
    d80c:	e8df f006 	tbb	[pc, r6]
    d810:	13110f03 	.word	0x13110f03
    d814:	15          	.byte	0x15
    d815:	00          	.byte	0x00
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
    d816:	6044      	str	r4, [r0, #4]
    lv_obj_set_style(btn, ext->styles[ext->state]);
    d818:	7e03      	ldrb	r3, [r0, #24]
    d81a:	f003 0307 	and.w	r3, r3, #7
    d81e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    d822:	4628      	mov	r0, r5
    d824:	6859      	ldr	r1, [r3, #4]
}
    d826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
    d82a:	f7fd bdd5 	b.w	b3d8 <lv_obj_set_style>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
    d82e:	6084      	str	r4, [r0, #8]
    d830:	e7f2      	b.n	d818 <lv_btn_set_style+0x30>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
    d832:	60c4      	str	r4, [r0, #12]
    d834:	e7f0      	b.n	d818 <lv_btn_set_style+0x30>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
    d836:	6104      	str	r4, [r0, #16]
    d838:	e7ee      	b.n	d818 <lv_btn_set_style+0x30>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
    d83a:	6144      	str	r4, [r0, #20]
    d83c:	e7ec      	b.n	d818 <lv_btn_set_style+0x30>
    d83e:	bf00      	nop
    d840:	0001de08 	.word	0x0001de08

0000d844 <lv_btn_create>:
{
    d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d846:	460e      	mov	r6, r1
    d848:	4607      	mov	r7, r0
    new_btn = lv_cont_create(par, copy);
    d84a:	f002 f86f 	bl	f92c <lv_cont_create>
    d84e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_btn);
    d850:	f7fc ff66 	bl	a720 <lv_debug_check_null>
    d854:	4603      	mov	r3, r0
    d856:	b920      	cbnz	r0, d862 <lv_btn_create+0x1e>
    d858:	4840      	ldr	r0, [pc, #256]	; (d95c <lv_btn_create+0x118>)
    d85a:	4622      	mov	r2, r4
    d85c:	f7fc ff70 	bl	a740 <lv_debug_log_error>
    d860:	e7fe      	b.n	d860 <lv_btn_create+0x1c>
    if(new_btn == NULL) return NULL;
    d862:	b914      	cbnz	r4, d86a <lv_btn_create+0x26>
    d864:	2400      	movs	r4, #0
}
    d866:	4620      	mov	r0, r4
    d868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
    d86a:	4d3d      	ldr	r5, [pc, #244]	; (d960 <lv_btn_create+0x11c>)
    d86c:	682b      	ldr	r3, [r5, #0]
    d86e:	b91b      	cbnz	r3, d878 <lv_btn_create+0x34>
    d870:	4620      	mov	r0, r4
    d872:	f7fe f8cd 	bl	ba10 <lv_obj_get_signal_cb>
    d876:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
    d878:	4d3a      	ldr	r5, [pc, #232]	; (d964 <lv_btn_create+0x120>)
    d87a:	682b      	ldr	r3, [r5, #0]
    d87c:	b91b      	cbnz	r3, d886 <lv_btn_create+0x42>
    d87e:	4620      	mov	r0, r4
    d880:	f7fe f8d6 	bl	ba30 <lv_obj_get_design_cb>
    d884:	6028      	str	r0, [r5, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
    d886:	211c      	movs	r1, #28
    d888:	4620      	mov	r0, r4
    d88a:	f7fd f8df 	bl	aa4c <lv_obj_allocate_ext_attr>
    d88e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
    d890:	f7fc ff46 	bl	a720 <lv_debug_check_null>
    d894:	4603      	mov	r3, r0
    d896:	b920      	cbnz	r0, d8a2 <lv_btn_create+0x5e>
    d898:	4830      	ldr	r0, [pc, #192]	; (d95c <lv_btn_create+0x118>)
    d89a:	462a      	mov	r2, r5
    d89c:	f7fc ff50 	bl	a740 <lv_debug_log_error>
    d8a0:	e7fe      	b.n	d8a0 <lv_btn_create+0x5c>
    if(ext == NULL) return NULL;
    d8a2:	2d00      	cmp	r5, #0
    d8a4:	d0de      	beq.n	d864 <lv_btn_create+0x20>
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
    d8a6:	4b30      	ldr	r3, [pc, #192]	; (d968 <lv_btn_create+0x124>)
    d8a8:	606b      	str	r3, [r5, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
    d8aa:	4b30      	ldr	r3, [pc, #192]	; (d96c <lv_btn_create+0x128>)
    d8ac:	60ab      	str	r3, [r5, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
    d8ae:	4b30      	ldr	r3, [pc, #192]	; (d970 <lv_btn_create+0x12c>)
    d8b0:	60eb      	str	r3, [r5, #12]
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
    d8b2:	4b30      	ldr	r3, [pc, #192]	; (d974 <lv_btn_create+0x130>)
    d8b4:	612b      	str	r3, [r5, #16]
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
    d8b6:	4b30      	ldr	r3, [pc, #192]	; (d978 <lv_btn_create+0x134>)
    d8b8:	616b      	str	r3, [r5, #20]
    ext->state = LV_BTN_STATE_REL;
    d8ba:	7e2b      	ldrb	r3, [r5, #24]
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
    d8bc:	492f      	ldr	r1, [pc, #188]	; (d97c <lv_btn_create+0x138>)
    ext->state = LV_BTN_STATE_REL;
    d8be:	f023 030f 	bic.w	r3, r3, #15
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
    d8c2:	4620      	mov	r0, r4
    ext->state = LV_BTN_STATE_REL;
    d8c4:	762b      	strb	r3, [r5, #24]
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
    d8c6:	f7fd f8a1 	bl	aa0c <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
    d8ca:	492d      	ldr	r1, [pc, #180]	; (d980 <lv_btn_create+0x13c>)
    d8cc:	4620      	mov	r0, r4
    d8ce:	f7fd f8ad 	bl	aa2c <lv_obj_set_design_cb>
    if(copy == NULL) {
    d8d2:	bb5e      	cbnz	r6, d92c <lv_btn_create+0xe8>
        if(par != NULL) {
    d8d4:	b11f      	cbz	r7, d8de <lv_btn_create+0x9a>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
    d8d6:	2101      	movs	r1, #1
    d8d8:	4620      	mov	r0, r4
    d8da:	f002 f899 	bl	fa10 <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
    d8de:	2101      	movs	r1, #1
    d8e0:	4620      	mov	r0, r4
    d8e2:	f7fc ff95 	bl	a810 <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
    d8e6:	f7fb fb39 	bl	8f5c <lv_theme_get_current>
        if(th) {
    d8ea:	4606      	mov	r6, r0
    d8ec:	b1c8      	cbz	r0, d922 <lv_btn_create+0xde>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
    d8ee:	6902      	ldr	r2, [r0, #16]
    d8f0:	2100      	movs	r1, #0
    d8f2:	4620      	mov	r0, r4
    d8f4:	f7ff ff78 	bl	d7e8 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
    d8f8:	6972      	ldr	r2, [r6, #20]
    d8fa:	4620      	mov	r0, r4
    d8fc:	2101      	movs	r1, #1
    d8fe:	f7ff ff73 	bl	d7e8 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
    d902:	69b2      	ldr	r2, [r6, #24]
    d904:	4620      	mov	r0, r4
    d906:	2102      	movs	r1, #2
    d908:	f7ff ff6e 	bl	d7e8 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
    d90c:	69f2      	ldr	r2, [r6, #28]
    d90e:	4620      	mov	r0, r4
    d910:	2103      	movs	r1, #3
    d912:	f7ff ff69 	bl	d7e8 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
    d916:	6a32      	ldr	r2, [r6, #32]
    d918:	2104      	movs	r1, #4
    d91a:	4620      	mov	r0, r4
    d91c:	f7ff ff64 	bl	d7e8 <lv_btn_set_style>
    d920:	e7a1      	b.n	d866 <lv_btn_create+0x22>
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
    d922:	6869      	ldr	r1, [r5, #4]
    d924:	4620      	mov	r0, r4
    d926:	f7fd fd57 	bl	b3d8 <lv_obj_set_style>
    d92a:	e79c      	b.n	d866 <lv_btn_create+0x22>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
    d92c:	4630      	mov	r0, r6
    d92e:	f7fe f88f 	bl	ba50 <lv_obj_get_ext_attr>
        ext->state              = copy_ext->state;
    d932:	7e2b      	ldrb	r3, [r5, #24]
    d934:	7e02      	ldrb	r2, [r0, #24]
    d936:	f362 0302 	bfi	r3, r2, #0, #3
    d93a:	762b      	strb	r3, [r5, #24]
        ext->toggle             = copy_ext->toggle;
    d93c:	7e03      	ldrb	r3, [r0, #24]
    d93e:	7e2a      	ldrb	r2, [r5, #24]
    d940:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d944:	f363 02c3 	bfi	r2, r3, #3, #1
    d948:	762a      	strb	r2, [r5, #24]
        memcpy((void*) ext->styles, copy_ext->styles, sizeof(ext->styles));
    d94a:	1d01      	adds	r1, r0, #4
    d94c:	2214      	movs	r2, #20
    d94e:	1d28      	adds	r0, r5, #4
    d950:	f006 fcb0 	bl	142b4 <memcpy>
        lv_obj_refresh_style(new_btn);
    d954:	4620      	mov	r0, r4
    d956:	f7fd fd0b 	bl	b370 <lv_obj_refresh_style>
    d95a:	e784      	b.n	d866 <lv_btn_create+0x22>
    d95c:	0001a9b8 	.word	0x0001a9b8
    d960:	20005e6c 	.word	0x20005e6c
    d964:	20005e68 	.word	0x20005e68
    d968:	20005ffc 	.word	0x20005ffc
    d96c:	2000603c 	.word	0x2000603c
    d970:	200061bc 	.word	0x200061bc
    d974:	2000623c 	.word	0x2000623c
    d978:	200060fc 	.word	0x200060fc
    d97c:	0000d9b1 	.word	0x0000d9b1
    d980:	0000d785 	.word	0x0000d785

0000d984 <lv_btn_get_toggle>:
{
    d984:	b507      	push	{r0, r1, r2, lr}
    d986:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
    d988:	f7fc feca 	bl	a720 <lv_debug_check_null>
    d98c:	9a01      	ldr	r2, [sp, #4]
    d98e:	4603      	mov	r3, r0
    d990:	b918      	cbnz	r0, d99a <lv_btn_get_toggle+0x16>
    d992:	4806      	ldr	r0, [pc, #24]	; (d9ac <lv_btn_get_toggle+0x28>)
    d994:	f7fc fed4 	bl	a740 <lv_debug_log_error>
    d998:	e7fe      	b.n	d998 <lv_btn_get_toggle+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
    d99a:	4610      	mov	r0, r2
    d99c:	f7fe f858 	bl	ba50 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
    d9a0:	7e00      	ldrb	r0, [r0, #24]
}
    d9a2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d9a6:	b003      	add	sp, #12
    d9a8:	f85d fb04 	ldr.w	pc, [sp], #4
    d9ac:	0001de08 	.word	0x0001de08

0000d9b0 <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
    d9b0:	4b4c      	ldr	r3, [pc, #304]	; (dae4 <lv_btn_signal+0x134>)
{
    d9b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(btn, sign, param);
    d9b6:	681b      	ldr	r3, [r3, #0]
{
    d9b8:	4604      	mov	r4, r0
    d9ba:	460e      	mov	r6, r1
    d9bc:	4617      	mov	r7, r2
    res = ancestor_signal(btn, sign, param);
    d9be:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
    d9c0:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
    d9c2:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
    d9c4:	d134      	bne.n	da30 <lv_btn_signal+0x80>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    d9c6:	2e07      	cmp	r6, #7
    d9c8:	d105      	bne.n	d9d6 <lv_btn_signal+0x26>
    d9ca:	4947      	ldr	r1, [pc, #284]	; (dae8 <lv_btn_signal+0x138>)
    d9cc:	4638      	mov	r0, r7
    d9ce:	f7fe f84f 	bl	ba70 <lv_obj_handle_get_type_signal>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
            if(lv_btn_get_toggle(btn)) {
                lv_btn_set_state(btn, LV_BTN_STATE_REL);

                uint32_t state = 0;
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
    d9d2:	4605      	mov	r5, r0
                if(res != LV_RES_OK) return res;
    d9d4:	e02c      	b.n	da30 <lv_btn_signal+0x80>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
    d9d6:	4620      	mov	r0, r4
    d9d8:	f7fe f83a 	bl	ba50 <lv_obj_get_ext_attr>
    d9dc:	4681      	mov	r9, r0
    bool tgl           = lv_btn_get_toggle(btn);
    d9de:	4620      	mov	r0, r4
    d9e0:	f7ff ffd0 	bl	d984 <lv_btn_get_toggle>
    if(sign == LV_SIGNAL_PRESSED) {
    d9e4:	2e08      	cmp	r6, #8
    bool tgl           = lv_btn_get_toggle(btn);
    d9e6:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_PRESSED) {
    d9e8:	d10d      	bne.n	da06 <lv_btn_signal+0x56>
        if(ext->state == LV_BTN_STATE_REL) {
    d9ea:	f899 3018 	ldrb.w	r3, [r9, #24]
    d9ee:	f013 0307 	ands.w	r3, r3, #7
    d9f2:	d104      	bne.n	d9fe <lv_btn_signal+0x4e>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
    d9f4:	4629      	mov	r1, r5
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
    d9f6:	4620      	mov	r0, r4
    d9f8:	f7ff fed4 	bl	d7a4 <lv_btn_set_state>
                toggled = 1;
    d9fc:	e018      	b.n	da30 <lv_btn_signal+0x80>
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
    d9fe:	2b02      	cmp	r3, #2
    da00:	d116      	bne.n	da30 <lv_btn_signal+0x80>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
    da02:	2103      	movs	r1, #3
    da04:	e7f7      	b.n	d9f6 <lv_btn_signal+0x46>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
    da06:	2e0a      	cmp	r6, #10
    da08:	d10b      	bne.n	da22 <lv_btn_signal+0x72>
        if(ext->state == LV_BTN_STATE_PR)
    da0a:	f899 3018 	ldrb.w	r3, [r9, #24]
    da0e:	f003 0307 	and.w	r3, r3, #7
    da12:	2b01      	cmp	r3, #1
    da14:	d101      	bne.n	da1a <lv_btn_signal+0x6a>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
    da16:	2100      	movs	r1, #0
    da18:	e7ed      	b.n	d9f6 <lv_btn_signal+0x46>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
    da1a:	2b03      	cmp	r3, #3
    da1c:	d108      	bne.n	da30 <lv_btn_signal+0x80>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
    da1e:	2102      	movs	r1, #2
    da20:	e7e9      	b.n	d9f6 <lv_btn_signal+0x46>
    } else if(sign == LV_SIGNAL_PRESSING) {
    da22:	2e09      	cmp	r6, #9
    da24:	d108      	bne.n	da38 <lv_btn_signal+0x88>
        if(lv_indev_is_dragging(param) != false) {
    da26:	4638      	mov	r0, r7
    da28:	f7fc fb35 	bl	a096 <lv_indev_is_dragging>
    da2c:	2800      	cmp	r0, #0
    da2e:	d1ec      	bne.n	da0a <lv_btn_signal+0x5a>
        }
#endif
    }

    return res;
}
    da30:	4628      	mov	r0, r5
    da32:	b003      	add	sp, #12
    da34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(sign == LV_SIGNAL_RELEASED) {
    da38:	2e0b      	cmp	r6, #11
    da3a:	d12c      	bne.n	da96 <lv_btn_signal+0xe6>
        if(lv_indev_is_dragging(param) == false) {
    da3c:	4638      	mov	r0, r7
    da3e:	f7fc fb2a 	bl	a096 <lv_indev_is_dragging>
    da42:	f899 3018 	ldrb.w	r3, [r9, #24]
    da46:	2800      	cmp	r0, #0
    da48:	d1e1      	bne.n	da0e <lv_btn_signal+0x5e>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
    da4a:	f003 0307 	and.w	r3, r3, #7
    da4e:	2b01      	cmp	r3, #1
            uint32_t toggled = 0;
    da50:	9001      	str	r0, [sp, #4]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
    da52:	d110      	bne.n	da76 <lv_btn_signal+0xc6>
    da54:	f1b8 0f00 	cmp.w	r8, #0
    da58:	d0dd      	beq.n	da16 <lv_btn_signal+0x66>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
    da5a:	2102      	movs	r1, #2
    da5c:	4620      	mov	r0, r4
    da5e:	f7ff fea1 	bl	d7a4 <lv_btn_set_state>
                toggled = 1;
    da62:	9501      	str	r5, [sp, #4]
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
    da64:	aa01      	add	r2, sp, #4
    da66:	210e      	movs	r1, #14
    da68:	4620      	mov	r0, r4
    da6a:	f7fc ffad 	bl	a9c8 <lv_event_send>
                if(res != LV_RES_OK) return res;
    da6e:	2801      	cmp	r0, #1
    da70:	bf18      	it	ne
    da72:	4605      	movne	r5, r0
    da74:	e7dc      	b.n	da30 <lv_btn_signal+0x80>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
    da76:	2b03      	cmp	r3, #3
    da78:	d109      	bne.n	da8e <lv_btn_signal+0xde>
    da7a:	f1b8 0f00 	cmp.w	r8, #0
    da7e:	d0ce      	beq.n	da1e <lv_btn_signal+0x6e>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
    da80:	2100      	movs	r1, #0
    da82:	4620      	mov	r0, r4
    da84:	f7ff fe8e 	bl	d7a4 <lv_btn_set_state>
                toggled = 0;
    da88:	2300      	movs	r3, #0
    da8a:	9301      	str	r3, [sp, #4]
    da8c:	e7ea      	b.n	da64 <lv_btn_signal+0xb4>
            if(tgl) {
    da8e:	f1b8 0f00 	cmp.w	r8, #0
    da92:	d1e7      	bne.n	da64 <lv_btn_signal+0xb4>
    da94:	e7cc      	b.n	da30 <lv_btn_signal+0x80>
    } else if(sign == LV_SIGNAL_CONTROL) {
    da96:	2e12      	cmp	r6, #18
    da98:	d1ca      	bne.n	da30 <lv_btn_signal+0x80>
        char c = *((char *)param);
    da9a:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
    da9c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    daa0:	2a11      	cmp	r2, #17
    daa2:	d10f      	bne.n	dac4 <lv_btn_signal+0x114>
            if(lv_btn_get_toggle(btn)) {
    daa4:	4620      	mov	r0, r4
    daa6:	f7ff ff6d 	bl	d984 <lv_btn_get_toggle>
    daaa:	2800      	cmp	r0, #0
    daac:	d0c0      	beq.n	da30 <lv_btn_signal+0x80>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
    daae:	2102      	movs	r1, #2
    dab0:	4620      	mov	r0, r4
    dab2:	f7ff fe77 	bl	d7a4 <lv_btn_set_state>
                uint32_t state = 1;
    dab6:	9501      	str	r5, [sp, #4]
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
    dab8:	aa01      	add	r2, sp, #4
    daba:	210e      	movs	r1, #14
    dabc:	4620      	mov	r0, r4
    dabe:	f7fc ff83 	bl	a9c8 <lv_event_send>
    dac2:	e786      	b.n	d9d2 <lv_btn_signal+0x22>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
    dac4:	2b14      	cmp	r3, #20
    dac6:	d001      	beq.n	dacc <lv_btn_signal+0x11c>
    dac8:	2b12      	cmp	r3, #18
    daca:	d1b1      	bne.n	da30 <lv_btn_signal+0x80>
            if(lv_btn_get_toggle(btn)) {
    dacc:	4620      	mov	r0, r4
    dace:	f7ff ff59 	bl	d984 <lv_btn_get_toggle>
    dad2:	2800      	cmp	r0, #0
    dad4:	d0ac      	beq.n	da30 <lv_btn_signal+0x80>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
    dad6:	2100      	movs	r1, #0
    dad8:	4620      	mov	r0, r4
    dada:	f7ff fe63 	bl	d7a4 <lv_btn_set_state>
                uint32_t state = 0;
    dade:	2300      	movs	r3, #0
    dae0:	9301      	str	r3, [sp, #4]
    dae2:	e7e9      	b.n	dab8 <lv_btn_signal+0x108>
    dae4:	20005e6c 	.word	0x20005e6c
    dae8:	0001de5b 	.word	0x0001de5b

0000daec <lv_slider_set_style>:
 * @param slider pointer to a slider object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_slider_set_style(lv_obj_t * slider, lv_slider_style_t type, const lv_style_t * style)
{
    daec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    daee:	4604      	mov	r4, r0
    daf0:	9201      	str	r2, [sp, #4]
    daf2:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(slider, LV_OBJX_NAME);
    daf4:	f7fc fe14 	bl	a720 <lv_debug_check_null>
    daf8:	9a01      	ldr	r2, [sp, #4]
    dafa:	4603      	mov	r3, r0
    dafc:	b920      	cbnz	r0, db08 <lv_slider_set_style+0x1c>
    dafe:	480f      	ldr	r0, [pc, #60]	; (db3c <lv_slider_set_style+0x50>)
    db00:	4622      	mov	r2, r4
    db02:	f7fc fe1d 	bl	a740 <lv_debug_log_error>
    db06:	e7fe      	b.n	db06 <lv_slider_set_style+0x1a>

    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
    db08:	4620      	mov	r0, r4
    db0a:	9201      	str	r2, [sp, #4]
    db0c:	f7fd ffa0 	bl	ba50 <lv_obj_get_ext_attr>

    switch(type) {
    db10:	2d01      	cmp	r5, #1
    db12:	9a01      	ldr	r2, [sp, #4]
    db14:	d002      	beq.n	db1c <lv_slider_set_style+0x30>
    db16:	2d02      	cmp	r5, #2
    db18:	d007      	beq.n	db2a <lv_slider_set_style+0x3e>
    db1a:	b96d      	cbnz	r5, db38 <lv_slider_set_style+0x4c>
        case LV_SLIDER_STYLE_BG: lv_bar_set_style(slider, LV_BAR_STYLE_BG, style); break;
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
    db1c:	4629      	mov	r1, r5
    db1e:	4620      	mov	r0, r4
        case LV_SLIDER_STYLE_KNOB:
            ext->style_knob = style;
            lv_obj_refresh_ext_draw_pad(slider);
            break;
    }
}
    db20:	b003      	add	sp, #12
    db22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
    db26:	f003 bb3f 	b.w	111a8 <lv_bar_set_style>
            ext->style_knob = style;
    db2a:	6142      	str	r2, [r0, #20]
            lv_obj_refresh_ext_draw_pad(slider);
    db2c:	4620      	mov	r0, r4
}
    db2e:	b003      	add	sp, #12
    db30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lv_obj_refresh_ext_draw_pad(slider);
    db34:	f7fd bcbc 	b.w	b4b0 <lv_obj_refresh_ext_draw_pad>
}
    db38:	b003      	add	sp, #12
    db3a:	bd30      	pop	{r4, r5, pc}
    db3c:	0001de08 	.word	0x0001de08

0000db40 <lv_slider_create>:
{
    db40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db42:	460f      	mov	r7, r1
    lv_obj_t * new_slider = lv_bar_create(par, copy);
    db44:	f003 fb52 	bl	111ec <lv_bar_create>
    db48:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_slider);
    db4a:	f7fc fde9 	bl	a720 <lv_debug_check_null>
    db4e:	4603      	mov	r3, r0
    db50:	b920      	cbnz	r0, db5c <lv_slider_create+0x1c>
    db52:	4832      	ldr	r0, [pc, #200]	; (dc1c <lv_slider_create+0xdc>)
    db54:	4622      	mov	r2, r4
    db56:	f7fc fdf3 	bl	a740 <lv_debug_log_error>
    db5a:	e7fe      	b.n	db5a <lv_slider_create+0x1a>
    if(new_slider == NULL) return NULL;
    db5c:	b914      	cbnz	r4, db64 <lv_slider_create+0x24>
    db5e:	2400      	movs	r4, #0
}
    db60:	4620      	mov	r0, r4
    db62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_slider);
    db64:	4d2e      	ldr	r5, [pc, #184]	; (dc20 <lv_slider_create+0xe0>)
    db66:	682b      	ldr	r3, [r5, #0]
    db68:	b91b      	cbnz	r3, db72 <lv_slider_create+0x32>
    db6a:	4620      	mov	r0, r4
    db6c:	f7fd ff60 	bl	ba30 <lv_obj_get_design_cb>
    db70:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_slider);
    db72:	4d2c      	ldr	r5, [pc, #176]	; (dc24 <lv_slider_create+0xe4>)
    db74:	682b      	ldr	r3, [r5, #0]
    db76:	b91b      	cbnz	r3, db80 <lv_slider_create+0x40>
    db78:	4620      	mov	r0, r4
    db7a:	f7fd ff49 	bl	ba10 <lv_obj_get_signal_cb>
    db7e:	6028      	str	r0, [r5, #0]
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
    db80:	211c      	movs	r1, #28
    db82:	4620      	mov	r0, r4
    db84:	f7fc ff62 	bl	aa4c <lv_obj_allocate_ext_attr>
    db88:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
    db8a:	f7fc fdc9 	bl	a720 <lv_debug_check_null>
    db8e:	4603      	mov	r3, r0
    db90:	b920      	cbnz	r0, db9c <lv_slider_create+0x5c>
    db92:	4822      	ldr	r0, [pc, #136]	; (dc1c <lv_slider_create+0xdc>)
    db94:	462a      	mov	r2, r5
    db96:	f7fc fdd3 	bl	a740 <lv_debug_log_error>
    db9a:	e7fe      	b.n	db9a <lv_slider_create+0x5a>
    if(ext == NULL) return NULL;
    db9c:	2d00      	cmp	r5, #0
    db9e:	d0de      	beq.n	db5e <lv_slider_create+0x1e>
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
    dba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    dba4:	832b      	strh	r3, [r5, #24]
    ext->style_knob = &lv_style_pretty;
    dba6:	4b20      	ldr	r3, [pc, #128]	; (dc28 <lv_slider_create+0xe8>)
    dba8:	616b      	str	r3, [r5, #20]
    ext->knob_in    = 0;
    dbaa:	7eab      	ldrb	r3, [r5, #26]
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
    dbac:	491f      	ldr	r1, [pc, #124]	; (dc2c <lv_slider_create+0xec>)
    ext->knob_in    = 0;
    dbae:	f36f 0300 	bfc	r3, #0, #1
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
    dbb2:	4620      	mov	r0, r4
    ext->knob_in    = 0;
    dbb4:	76ab      	strb	r3, [r5, #26]
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
    dbb6:	f7fc ff29 	bl	aa0c <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_slider, lv_slider_design);
    dbba:	491d      	ldr	r1, [pc, #116]	; (dc30 <lv_slider_create+0xf0>)
    dbbc:	4620      	mov	r0, r4
    dbbe:	f7fc ff35 	bl	aa2c <lv_obj_set_design_cb>
    if(copy == NULL) {
    dbc2:	b9ef      	cbnz	r7, dc00 <lv_slider_create+0xc0>
        lv_obj_set_click(new_slider, true);
    dbc4:	2101      	movs	r1, #1
    dbc6:	4620      	mov	r0, r4
    dbc8:	f7fc fe22 	bl	a810 <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
    dbcc:	2110      	movs	r1, #16
    dbce:	4620      	mov	r0, r4
    dbd0:	f7fc fe70 	bl	a8b4 <lv_obj_set_protect>
        lv_theme_t * th = lv_theme_get_current();
    dbd4:	f7fb f9c2 	bl	8f5c <lv_theme_get_current>
        if(th) {
    dbd8:	4606      	mov	r6, r0
    dbda:	b178      	cbz	r0, dbfc <lv_slider_create+0xbc>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->style.slider.bg);
    dbdc:	6d82      	ldr	r2, [r0, #88]	; 0x58
    dbde:	4639      	mov	r1, r7
    dbe0:	4620      	mov	r0, r4
    dbe2:	f7ff ff83 	bl	daec <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->style.slider.indic);
    dbe6:	6df2      	ldr	r2, [r6, #92]	; 0x5c
    dbe8:	2101      	movs	r1, #1
    dbea:	4620      	mov	r0, r4
    dbec:	f7ff ff7e 	bl	daec <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->style.slider.knob);
    dbf0:	6e32      	ldr	r2, [r6, #96]	; 0x60
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
    dbf2:	2102      	movs	r1, #2
    dbf4:	4620      	mov	r0, r4
    dbf6:	f7ff ff79 	bl	daec <lv_slider_set_style>
    dbfa:	e7b1      	b.n	db60 <lv_slider_create+0x20>
    dbfc:	696a      	ldr	r2, [r5, #20]
    dbfe:	e7f8      	b.n	dbf2 <lv_slider_create+0xb2>
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
    dc00:	4638      	mov	r0, r7
    dc02:	f7fd ff25 	bl	ba50 <lv_obj_get_ext_attr>
        ext->style_knob            = copy_ext->style_knob;
    dc06:	6943      	ldr	r3, [r0, #20]
        ext->knob_in               = copy_ext->knob_in;
    dc08:	7e82      	ldrb	r2, [r0, #26]
        ext->style_knob            = copy_ext->style_knob;
    dc0a:	616b      	str	r3, [r5, #20]
        ext->knob_in               = copy_ext->knob_in;
    dc0c:	7eab      	ldrb	r3, [r5, #26]
    dc0e:	f362 0300 	bfi	r3, r2, #0, #1
    dc12:	76ab      	strb	r3, [r5, #26]
        lv_obj_refresh_style(new_slider);
    dc14:	4620      	mov	r0, r4
    dc16:	f7fd fbab 	bl	b370 <lv_obj_refresh_style>
    dc1a:	e7a1      	b.n	db60 <lv_slider_create+0x20>
    dc1c:	0001a9b8 	.word	0x0001a9b8
    dc20:	20005e70 	.word	0x20005e70
    dc24:	20005e74 	.word	0x20005e74
    dc28:	2000607c 	.word	0x2000607c
    dc2c:	0000e1d1 	.word	0x0000e1d1
    dc30:	0000dcad 	.word	0x0000dcad

0000dc34 <lv_slider_get_value>:
 * Get the value of a slider
 * @param slider pointer to a slider object
 * @return the value of the slider
 */
int16_t lv_slider_get_value(const lv_obj_t * slider)
{
    dc34:	b510      	push	{r4, lr}
    dc36:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(slider, LV_OBJX_NAME);
    dc38:	f7fc fd72 	bl	a720 <lv_debug_check_null>
    dc3c:	4603      	mov	r3, r0
    dc3e:	b920      	cbnz	r0, dc4a <lv_slider_get_value+0x16>
    dc40:	4809      	ldr	r0, [pc, #36]	; (dc68 <lv_slider_get_value+0x34>)
    dc42:	4622      	mov	r2, r4
    dc44:	f7fc fd7c 	bl	a740 <lv_debug_log_error>
    dc48:	e7fe      	b.n	dc48 <lv_slider_get_value+0x14>

    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
    dc4a:	4620      	mov	r0, r4
    dc4c:	f7fd ff00 	bl	ba50 <lv_obj_get_ext_attr>

    if(ext->drag_value != LV_SLIDER_NOT_PRESSED)
    dc50:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
    dc54:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
    dc58:	d104      	bne.n	dc64 <lv_slider_get_value+0x30>
        return ext->drag_value;
    else
        return lv_bar_get_value(slider);
    dc5a:	4620      	mov	r0, r4
}
    dc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return lv_bar_get_value(slider);
    dc60:	f003 bb5c 	b.w	1131c <lv_bar_get_value>
}
    dc64:	bd10      	pop	{r4, pc}
    dc66:	bf00      	nop
    dc68:	0001de08 	.word	0x0001de08

0000dc6c <lv_slider_get_style>:
 * @param slider pointer to a slider object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_slider_get_style(const lv_obj_t * slider, lv_slider_style_t type)
{
    dc6c:	b538      	push	{r3, r4, r5, lr}
    dc6e:	4605      	mov	r5, r0
    dc70:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(slider, LV_OBJX_NAME);
    dc72:	f7fc fd55 	bl	a720 <lv_debug_check_null>
    dc76:	4603      	mov	r3, r0
    dc78:	b920      	cbnz	r0, dc84 <lv_slider_get_style+0x18>
    dc7a:	480b      	ldr	r0, [pc, #44]	; (dca8 <lv_slider_get_style+0x3c>)
    dc7c:	462a      	mov	r2, r5
    dc7e:	f7fc fd5f 	bl	a740 <lv_debug_log_error>
    dc82:	e7fe      	b.n	dc82 <lv_slider_get_style+0x16>

    const lv_style_t * style = NULL;
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
    dc84:	4628      	mov	r0, r5
    dc86:	f7fd fee3 	bl	ba50 <lv_obj_get_ext_attr>

    switch(type) {
    dc8a:	2c01      	cmp	r4, #1
    dc8c:	d002      	beq.n	dc94 <lv_slider_get_style+0x28>
    dc8e:	2c02      	cmp	r4, #2
    dc90:	d006      	beq.n	dca0 <lv_slider_get_style+0x34>
    dc92:	b93c      	cbnz	r4, dca4 <lv_slider_get_style+0x38>
        case LV_SLIDER_STYLE_BG: style = lv_bar_get_style(slider, LV_BAR_STYLE_BG); break;
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
    dc94:	4621      	mov	r1, r4
    dc96:	4628      	mov	r0, r5
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
        default: style = NULL; break;
    }

    return style;
}
    dc98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
    dc9c:	f003 bb86 	b.w	113ac <lv_bar_get_style>
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
    dca0:	6940      	ldr	r0, [r0, #20]
}
    dca2:	bd38      	pop	{r3, r4, r5, pc}
    switch(type) {
    dca4:	2000      	movs	r0, #0
    return style;
    dca6:	e7fc      	b.n	dca2 <lv_slider_get_style+0x36>
    dca8:	0001de08 	.word	0x0001de08

0000dcac <lv_slider_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_slider_design(lv_obj_t * slider, const lv_area_t * mask, lv_design_mode_t mode)
{
    dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcb0:	ed2d 8b04 	vpush	{d8-d9}
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
    dcb4:	2a02      	cmp	r2, #2
{
    dcb6:	ee08 1a10 	vmov	s16, r1
    dcba:	b093      	sub	sp, #76	; 0x4c
    dcbc:	4606      	mov	r6, r0
    dcbe:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
    dcc0:	f000 8280 	beq.w	e1c4 <lv_slider_design+0x518>
        return false;
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
    dcc4:	2a00      	cmp	r2, #0
    dcc6:	f040 8199 	bne.w	dffc <lv_slider_design+0x350>
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
    dcca:	f7fd fec1 	bl	ba50 <lv_obj_get_ext_attr>

        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
    dcce:	4621      	mov	r1, r4
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
    dcd0:	4605      	mov	r5, r0
        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
    dcd2:	4630      	mov	r0, r6
    dcd4:	f7ff ffca 	bl	dc6c <lv_slider_get_style>
        const lv_style_t * style_knob  = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
    dcd8:	2102      	movs	r1, #2
        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
    dcda:	4604      	mov	r4, r0
        const lv_style_t * style_knob  = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
    dcdc:	4630      	mov	r0, r6
    dcde:	f7ff ffc5 	bl	dc6c <lv_slider_get_style>
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
    dce2:	2101      	movs	r1, #1
        const lv_style_t * style_knob  = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
    dce4:	ee09 0a90 	vmov	s19, r0
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
    dce8:	4630      	mov	r0, r6
    dcea:	f7ff ffbf 	bl	dc6c <lv_slider_get_style>
    dcee:	9002      	str	r0, [sp, #8]

        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
    dcf0:	4630      	mov	r0, r6
    dcf2:	f7fd fe12 	bl	b91a <lv_obj_get_opa_scale>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    dcf6:	8ab3      	ldrh	r3, [r6, #20]
    dcf8:	9304      	str	r3, [sp, #16]
    dcfa:	8a33      	ldrh	r3, [r6, #16]
    dcfc:	9305      	str	r3, [sp, #20]
    dcfe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    dd02:	1a9b      	subs	r3, r3, r2
    dd04:	b29b      	uxth	r3, r3
    dd06:	9306      	str	r3, [sp, #24]
    dd08:	3301      	adds	r3, #1
    dd0a:	b29a      	uxth	r2, r3
    dd0c:	fa0f f983 	sxth.w	r9, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    dd10:	8af3      	ldrh	r3, [r6, #22]
    dd12:	9308      	str	r3, [sp, #32]
    dd14:	8a73      	ldrh	r3, [r6, #18]
    dd16:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    dd18:	9207      	str	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    dd1a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    dd1e:	1a9b      	subs	r3, r3, r2
    dd20:	b29b      	uxth	r3, r3
    dd22:	9303      	str	r3, [sp, #12]
    dd24:	3301      	adds	r3, #1
    dd26:	b29a      	uxth	r2, r3
    dd28:	b21b      	sxth	r3, r3
    dd2a:	9301      	str	r3, [sp, #4]
        lv_coord_t slider_w = lv_area_get_width(&slider->coords);
        lv_coord_t slider_h = lv_area_get_height(&slider->coords);

        /*Draw the bar*/
        lv_area_t area_bg;
        lv_area_copy(&area_bg, &slider->coords);
    dd2c:	f106 0310 	add.w	r3, r6, #16
    memcpy(dest, src, sizeof(lv_area_t));
    dd30:	4619      	mov	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    dd32:	920b      	str	r2, [sp, #44]	; 0x2c
        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
    dd34:	ee08 0a90 	vmov	s17, r0
    memcpy(dest, src, sizeof(lv_area_t));
    dd38:	2208      	movs	r2, #8
    dd3a:	a80c      	add	r0, sp, #48	; 0x30
        lv_area_copy(&area_bg, &slider->coords);
    dd3c:	ee09 3a10 	vmov	s18, r3
    dd40:	f006 fab8 	bl	142b4 <memcpy>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    dd44:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36

        /*Be sure at least LV_SLIDER_SIZE_MIN  size will remain*/
        lv_coord_t pad_top_bg    = style_bg->body.padding.top;
    dd48:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        lv_coord_t pad_bottom_bg = style_bg->body.padding.bottom;
    dd4c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dd50:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
        lv_coord_t pad_left_bg   = style_bg->body.padding.left;
    dd54:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        lv_coord_t pad_right_bg  = style_bg->body.padding.right;
    dd58:	f9b4 e01c 	ldrsh.w	lr, [r4, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    dd5c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    dd60:	f108 0101 	add.w	r1, r8, #1
        if(pad_top_bg + pad_bottom_bg + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
    dd64:	1898      	adds	r0, r3, r2
    dd66:	eba1 010a 	sub.w	r1, r1, sl
    dd6a:	b209      	sxth	r1, r1
    dd6c:	3003      	adds	r0, #3
    dd6e:	4288      	cmp	r0, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    dd70:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
            pad_top_bg    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
    dd74:	bfa8      	it	ge
    dd76:	1f0b      	subge	r3, r1, #4
    dd78:	f100 0101 	add.w	r1, r0, #1
            pad_bottom_bg = pad_top_bg;
        }
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
    dd7c:	eb0c 0b0e 	add.w	fp, ip, lr
    dd80:	eba1 0107 	sub.w	r1, r1, r7
    dd84:	b209      	sxth	r1, r1
            pad_top_bg    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
    dd86:	bfa8      	it	ge
    dd88:	105b      	asrge	r3, r3, #1
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
    dd8a:	f10b 0b03 	add.w	fp, fp, #3
            pad_bottom_bg = pad_top_bg;
    dd8e:	bfa8      	it	ge
    dd90:	461a      	movge	r2, r3
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
    dd92:	458b      	cmp	fp, r1
            pad_left_bg  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
    dd94:	bfa4      	itt	ge
    dd96:	3904      	subge	r1, #4
    dd98:	ea4f 0c61 	movge.w	ip, r1, asr #1
            pad_right_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
        }

        if(ext->knob_in) { /*Enable extra size if the knob is inside */
    dd9c:	7ea9      	ldrb	r1, [r5, #26]
            pad_right_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
    dd9e:	bfa8      	it	ge
    dda0:	46e6      	movge	lr, ip
        if(ext->knob_in) { /*Enable extra size if the knob is inside */
    dda2:	07c9      	lsls	r1, r1, #31
    dda4:	f140 80d0 	bpl.w	df48 <lv_slider_design+0x29c>
            area_bg.x1 += pad_left_bg;
    dda8:	4467      	add	r7, ip
            area_bg.x2 -= pad_right_bg;
    ddaa:	eba0 000e 	sub.w	r0, r0, lr
            area_bg.y1 += pad_top_bg;
    ddae:	4453      	add	r3, sl
            area_bg.x1 += pad_left_bg;
    ddb0:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
            area_bg.x2 -= pad_right_bg;
    ddb4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            area_bg.y1 += pad_top_bg;
    ddb8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            area_bg.y2 -= pad_bottom_bg;
        } else {                                                   /*Let space only in the perpendicular directions*/
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
    ddbc:	eba8 0202 	sub.w	r2, r8, r2
        }

#if LV_USE_GROUP == 0
        lv_draw_rect(&area_bg, mask, style_bg, lv_obj_get_opa_scale(slider));
    ddc0:	4630      	mov	r0, r6
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
    ddc2:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
        lv_draw_rect(&area_bg, mask, style_bg, lv_obj_get_opa_scale(slider));
    ddc6:	f7fd fda8 	bl	b91a <lv_obj_get_opa_scale>
    ddca:	4622      	mov	r2, r4
    ddcc:	4603      	mov	r3, r0
    ddce:	ee18 1a10 	vmov	r1, s16
    ddd2:	a80c      	add	r0, sp, #48	; 0x30
    ddd4:	f7f7 fa72 	bl	52bc <lv_draw_rect>
    memcpy(dest, src, sizeof(lv_area_t));
    ddd8:	2208      	movs	r2, #8
    ddda:	a90c      	add	r1, sp, #48	; 0x30
    dddc:	a80e      	add	r0, sp, #56	; 0x38
    ddde:	f006 fa69 	bl	142b4 <memcpy>
        /*Draw the indicator*/
        lv_area_t area_indic;
        lv_area_copy(&area_indic, &area_bg);

        /*Be sure at least ver pad/hor pad width indicator will remain*/
        lv_coord_t pad_top_indic    = style_indic->body.padding.top;
    dde2:	9b02      	ldr	r3, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    dde4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    dde8:	f9b3 1016 	ldrsh.w	r1, [r3, #22]
        lv_coord_t pad_bottom_indic = style_indic->body.padding.bottom;
        lv_coord_t pad_left_indic   = style_indic->body.padding.left;
    ddec:	f9b3 001a 	ldrsh.w	r0, [r3, #26]
        lv_coord_t pad_bottom_indic = style_indic->body.padding.bottom;
    ddf0:	f9b3 4018 	ldrsh.w	r4, [r3, #24]
        lv_coord_t pad_right_indic  = style_indic->body.padding.right;
    ddf4:	f9b3 701c 	ldrsh.w	r7, [r3, #28]
    ddf8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    ddfc:	3201      	adds	r2, #1
    ddfe:	1ad2      	subs	r2, r2, r3
        if(pad_top_indic + pad_bottom_indic + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
    de00:	190b      	adds	r3, r1, r4
    de02:	b212      	sxth	r2, r2
    de04:	3303      	adds	r3, #3
    de06:	4293      	cmp	r3, r2
            pad_top_indic    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
    de08:	bfa8      	it	ge
    de0a:	3a04      	subge	r2, #4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    de0c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    de10:	bfa8      	it	ge
    de12:	1051      	asrge	r1, r2, #1
    de14:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    de18:	f103 0301 	add.w	r3, r3, #1
    de1c:	eba3 0302 	sub.w	r3, r3, r2
            pad_bottom_indic = pad_top_indic;
        }
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
    de20:	eb00 0207 	add.w	r2, r0, r7
    de24:	b21b      	sxth	r3, r3
    de26:	f102 0203 	add.w	r2, r2, #3
            pad_bottom_indic = pad_top_indic;
    de2a:	bfa8      	it	ge
    de2c:	460c      	movge	r4, r1
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
    de2e:	429a      	cmp	r2, r3
            pad_left_indic  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
    de30:	bfa4      	itt	ge
    de32:	3b04      	subge	r3, #4
    de34:	1058      	asrge	r0, r3, #1
            pad_right_indic = pad_left_indic;
        }

        area_indic.x1 += pad_left_indic;
    de36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        area_indic.x2 -= pad_right_indic;
        area_indic.y1 += pad_top_indic;
    de3a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
            pad_right_indic = pad_left_indic;
    de3e:	bfa8      	it	ge
    de40:	4607      	movge	r7, r0
        area_indic.x1 += pad_left_indic;
    de42:	4418      	add	r0, r3
        area_indic.x2 -= pad_right_indic;
    de44:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
        area_indic.x1 += pad_left_indic;
    de48:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
        area_indic.x2 -= pad_right_indic;
    de4c:	1bdf      	subs	r7, r3, r7
        area_indic.y2 -= pad_bottom_indic;
    de4e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
        area_indic.x2 -= pad_right_indic;
    de52:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
        area_indic.y2 -= pad_bottom_indic;
    de56:	1b1c      	subs	r4, r3, r4
        area_indic.y1 += pad_top_indic;
    de58:	4411      	add	r1, r2

        lv_coord_t cur_value = lv_slider_get_value(slider);
    de5a:	4630      	mov	r0, r6
        area_indic.y1 += pad_top_indic;
    de5c:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        area_indic.y2 -= pad_bottom_indic;
    de60:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
        lv_coord_t cur_value = lv_slider_get_value(slider);
    de64:	f7ff fee6 	bl	dc34 <lv_slider_get_value>
    de68:	4604      	mov	r4, r0
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
    return lv_bar_get_min_value(slider);
    de6a:	4630      	mov	r0, r6
    de6c:	f003 fa72 	bl	11354 <lv_bar_get_min_value>
    de70:	4680      	mov	r8, r0
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
    return lv_bar_get_max_value(slider);
    de72:	4630      	mov	r0, r6
    de74:	f003 fa84 	bl	11380 <lv_bar_get_max_value>
        lv_coord_t min_value = lv_slider_get_min_value(slider);
        lv_coord_t max_value = lv_slider_get_max_value(slider);

        /*If dragged draw to the drag position*/
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
    de78:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
    de7c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    de80:	bf18      	it	ne
    de82:	461c      	movne	r4, r3
        bool sym = false;
        if(ext->bar.sym && ext->bar.min_value < 0 && ext->bar.max_value > 0) sym = true;
    de84:	7bab      	ldrb	r3, [r5, #14]
    de86:	f013 0301 	ands.w	r3, r3, #1
    de8a:	d073      	beq.n	df74 <lv_slider_design+0x2c8>
    de8c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    de90:	2b00      	cmp	r3, #0
    de92:	da6f      	bge.n	df74 <lv_slider_design+0x2c8>
    de94:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
    de98:	2b00      	cmp	r3, #0
    de9a:	bfd4      	ite	le
    de9c:	f04f 0b00 	movle.w	fp, #0
    dea0:	f04f 0b01 	movgt.w	fp, #1

        if(slider_w >= slider_h) {
    dea4:	9a01      	ldr	r2, [sp, #4]
    dea6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    deaa:	f9b5 a00a 	ldrsh.w	sl, [r5, #10]
    deae:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
    deb2:	930a      	str	r3, [sp, #40]	; 0x28
    deb4:	4591      	cmp	r9, r2
    deb6:	eba0 0708 	sub.w	r7, r0, r8
    deba:	f2c0 80a1 	blt.w	e000 <lv_slider_design+0x354>
    debe:	3301      	adds	r3, #1
    dec0:	b289      	uxth	r1, r1
    dec2:	eba3 0c01 	sub.w	ip, r3, r1
            lv_coord_t indic_w = lv_area_get_width(&area_indic);
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
    dec6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    deca:	fa0f f38c 	sxth.w	r3, ip
    dece:	d054      	beq.n	df7a <lv_slider_design+0x2ce>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    ded0:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
                lv_coord_t anim_end_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    ded4:	f9b5 c008 	ldrsh.w	ip, [r5, #8]
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    ded8:	eba2 0208 	sub.w	r2, r2, r8
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    dedc:	ebac 0c08 	sub.w	ip, ip, r8
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    dee0:	435a      	muls	r2, r3
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    dee2:	fb03 fc0c 	mul.w	ip, r3, ip
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    dee6:	fb92 f2f7 	sdiv	r2, r2, r7
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    deea:	fb9c fcf7 	sdiv	ip, ip, r7

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.x2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
    deee:	b213      	sxth	r3, r2
    def0:	fa0f fc8c 	sxth.w	ip, ip
    def4:	ebac 0c03 	sub.w	ip, ip, r3
    def8:	fb0a fa0c 	mul.w	sl, sl, ip
    defc:	eb02 2a2a 	add.w	sl, r2, sl, asr #8
            } else
#endif
            {
                area_indic.x2 = (int32_t)((int32_t)indic_w * (cur_value - min_value)) / (max_value - min_value);
    df00:	fa0f fa8a 	sxth.w	sl, sl
            }

            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
    df04:	1e4a      	subs	r2, r1, #1
    df06:	4492      	add	sl, r2
    df08:	fa0f fa8a 	sxth.w	sl, sl
    df0c:	f8ad a03c 	strh.w	sl, [sp, #60]	; 0x3c
            if(sym) {
    df10:	f1bb 0f00 	cmp.w	fp, #0
    df14:	d03c      	beq.n	df90 <lv_slider_design+0x2e4>
                /*Calculate the coordinate of the zero point*/
                lv_coord_t zero;
                zero = area_indic.x1 + (-ext->bar.min_value * slider_w) / (ext->bar.max_value - ext->bar.min_value);
    df16:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    df1a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
    df1e:	4243      	negs	r3, r0
    df20:	fb09 f303 	mul.w	r3, r9, r3
    df24:	1a12      	subs	r2, r2, r0
    df26:	fb93 f3f2 	sdiv	r3, r3, r2
    df2a:	4419      	add	r1, r3
    df2c:	b209      	sxth	r1, r1
                if(area_indic.x2 > zero)
    df2e:	458a      	cmp	sl, r1
    df30:	dd2a      	ble.n	df88 <lv_slider_design+0x2dc>
                    area_indic.x1 = zero;
    df32:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
                }
            }

            /*Draw the indicator but don't draw an ugly 1px height rectangle on the bottom on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
    df36:	ee18 3a90 	vmov	r3, s17
    df3a:	9a02      	ldr	r2, [sp, #8]
    df3c:	ee18 1a10 	vmov	r1, s16
    df40:	a80e      	add	r0, sp, #56	; 0x38
    df42:	f7f7 f9bb 	bl	52bc <lv_draw_rect>
    df46:	e029      	b.n	df9c <lv_slider_design+0x2f0>
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
    df48:	9901      	ldr	r1, [sp, #4]
    df4a:	4589      	cmp	r9, r1
    df4c:	bfa4      	itt	ge
    df4e:	f04f 0c00 	movge.w	ip, #0
    df52:	f04f 0e00 	movge.w	lr, #0
    df56:	bfd8      	it	le
    df58:	2300      	movle	r3, #0
    df5a:	4467      	add	r7, ip
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
    df5c:	eba0 000e 	sub.w	r0, r0, lr
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
    df60:	4453      	add	r3, sl
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
    df62:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
    df66:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
    df6a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
    df6e:	bfd8      	it	le
    df70:	2200      	movle	r2, #0
    df72:	e723      	b.n	ddbc <lv_slider_design+0x110>
        bool sym = false;
    df74:	f04f 0b00 	mov.w	fp, #0
    df78:	e794      	b.n	dea4 <lv_slider_design+0x1f8>
                area_indic.x2 = (int32_t)((int32_t)indic_w * (cur_value - min_value)) / (max_value - min_value);
    df7a:	eba4 0a08 	sub.w	sl, r4, r8
    df7e:	fb03 fa0a 	mul.w	sl, r3, sl
    df82:	fb9a faf7 	sdiv	sl, sl, r7
    df86:	e7bb      	b.n	df00 <lv_slider_design+0x254>
                    area_indic.x1 = area_indic.x2;
    df88:	f8ad a038 	strh.w	sl, [sp, #56]	; 0x38
                    area_indic.x2 = zero;
    df8c:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
    df90:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
    df94:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    df98:	429a      	cmp	r2, r3
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
    df9a:	d1cc      	bne.n	df36 <lv_slider_design+0x28a>
    memcpy(dest, src, sizeof(lv_area_t));
    df9c:	ee19 1a10 	vmov	r1, s18
    dfa0:	2208      	movs	r2, #8
    dfa2:	a810      	add	r0, sp, #64	; 0x40
    dfa4:	f006 f986 	bl	142b4 <memcpy>

        /*Draw the knob*/
        lv_area_t knob_area;
        lv_area_copy(&knob_area, &slider->coords);

        if(slider_w >= slider_h) {
    dfa8:	9b01      	ldr	r3, [sp, #4]
    dfaa:	4599      	cmp	r9, r3
    dfac:	7eab      	ldrb	r3, [r5, #26]
    dfae:	f2c0 80b1 	blt.w	e114 <lv_slider_design+0x468>
            if(ext->knob_in == 0) {
    dfb2:	07db      	lsls	r3, r3, #31
    dfb4:	d478      	bmi.n	e0a8 <lv_slider_design+0x3fc>
                if(sym == false) {
    dfb6:	9b01      	ldr	r3, [sp, #4]
    dfb8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    dfbc:	f3c3 034f 	ubfx	r3, r3, #1, #16
    dfc0:	f1bb 0f00 	cmp.w	fp, #0
    dfc4:	d16b      	bne.n	e09e <lv_slider_design+0x3f2>
                    knob_area.x1 = area_indic.x2 - slider_h / 2;
                } else {
                    if(cur_value > 0) knob_area.x1 = area_indic.x2 - slider_h / 2;
    dfc6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
                    else knob_area.x1 = area_indic.x1 - slider_h / 2;
    dfca:	1ad3      	subs	r3, r2, r3
    dfcc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                }
                knob_area.x2 = knob_area.x1 + slider_h - 1;
    dfd0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    dfd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dfd6:	3b01      	subs	r3, #1
    dfd8:	441a      	add	r2, r3
    dfda:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44

                knob_area.x1 += slider->coords.x1;
                knob_area.x2 = knob_area.x1 + slider_h - 1;
            }

            knob_area.y1 = slider->coords.y1;
    dfde:	8a73      	ldrh	r3, [r6, #18]
    dfe0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            knob_area.y2 = slider->coords.y2;
    dfe4:	8af3      	ldrh	r3, [r6, #22]
    dfe6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                knob_area.y1 = knob_area.y2 - slider_w - 1;
            }
            knob_area.x1 = slider->coords.x1;
            knob_area.x2 = slider->coords.x2;
        }
        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
    dfea:	ee18 3a90 	vmov	r3, s17
    dfee:	ee19 2a90 	vmov	r2, s19
    dff2:	ee18 1a10 	vmov	r1, s16
    dff6:	a810      	add	r0, sp, #64	; 0x40
    dff8:	f7f7 f960 	bl	52bc <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
    dffc:	2001      	movs	r0, #1
    dffe:	e0e2      	b.n	e1c6 <lv_slider_design+0x51a>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    e000:	f8bd e03e 	ldrh.w	lr, [sp, #62]	; 0x3e
    e004:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
    e008:	f10e 0001 	add.w	r0, lr, #1
    e00c:	b280      	uxth	r0, r0
    e00e:	1a82      	subs	r2, r0, r2
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
    e010:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    e014:	b212      	sxth	r2, r2
    e016:	d03b      	beq.n	e090 <lv_slider_design+0x3e4>
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e018:	f9b5 c006 	ldrsh.w	ip, [r5, #6]
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e01c:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e020:	ebac 0c08 	sub.w	ip, ip, r8
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e024:	eba3 0308 	sub.w	r3, r3, r8
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e028:	fb02 fc0c 	mul.w	ip, r2, ip
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e02c:	435a      	muls	r2, r3
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e02e:	fb9c fcf7 	sdiv	ip, ip, r7
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e032:	fb92 f2f7 	sdiv	r2, r2, r7
                area_indic.y1 = anim_start_y + (((anim_end_y - anim_start_y) * ext->bar.anim_state) >> 8);
    e036:	fa0f f38c 	sxth.w	r3, ip
    e03a:	b212      	sxth	r2, r2
    e03c:	1ad2      	subs	r2, r2, r3
    e03e:	fb0a f202 	mul.w	r2, sl, r2
    e042:	eb0c 2c22 	add.w	ip, ip, r2, asr #8
                area_indic.y1 = (int32_t)((int32_t)indic_h * (cur_value - min_value)) / (max_value - min_value);
    e046:	fa0f fc8c 	sxth.w	ip, ip
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
    e04a:	eba0 000c 	sub.w	r0, r0, ip
    e04e:	b200      	sxth	r0, r0
    e050:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
            if(sym) {
    e054:	f1bb 0f00 	cmp.w	fp, #0
    e058:	d017      	beq.n	e08a <lv_slider_design+0x3de>
                zero = area_indic.y2 - (-ext->bar.min_value * slider_h) / (ext->bar.max_value - ext->bar.min_value);
    e05a:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
    e05e:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
    e062:	9b01      	ldr	r3, [sp, #4]
    e064:	f1ca 0200 	rsb	r2, sl, #0
    e068:	435a      	muls	r2, r3
    e06a:	ebac 0c0a 	sub.w	ip, ip, sl
    e06e:	fb92 f2fc 	sdiv	r2, r2, ip
    e072:	ebae 0e02 	sub.w	lr, lr, r2
    e076:	fa0f fe8e 	sxth.w	lr, lr
                if(area_indic.y1 < zero)
    e07a:	4570      	cmp	r0, lr
                    area_indic.y2 = zero;
    e07c:	bfb2      	itee	lt
    e07e:	f8ad e03e 	strhlt.w	lr, [sp, #62]	; 0x3e
                    area_indic.y2 = area_indic.y1;
    e082:	f8ad 003e 	strhge.w	r0, [sp, #62]	; 0x3e
                    area_indic.y1 = zero;
    e086:	f8ad e03a 	strhge.w	lr, [sp, #58]	; 0x3a
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
    e08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e08c:	428b      	cmp	r3, r1
    e08e:	e784      	b.n	df9a <lv_slider_design+0x2ee>
                area_indic.y1 = (int32_t)((int32_t)indic_h * (cur_value - min_value)) / (max_value - min_value);
    e090:	eba4 0c08 	sub.w	ip, r4, r8
    e094:	fb02 fc0c 	mul.w	ip, r2, ip
    e098:	fb9c fcf7 	sdiv	ip, ip, r7
    e09c:	e7d3      	b.n	e046 <lv_slider_design+0x39a>
                    if(cur_value > 0) knob_area.x1 = area_indic.x2 - slider_h / 2;
    e09e:	2c00      	cmp	r4, #0
    e0a0:	dc91      	bgt.n	dfc6 <lv_slider_design+0x31a>
                    else knob_area.x1 = area_indic.x1 - slider_h / 2;
    e0a2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    e0a6:	e790      	b.n	dfca <lv_slider_design+0x31e>
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
    e0a8:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
    e0ac:	1c48      	adds	r0, r1, #1
    e0ae:	d027      	beq.n	e100 <lv_slider_design+0x454>
                    lv_coord_t w = slider_w - slider_h - 1;
    e0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e0b2:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
                    lv_coord_t w = slider_w - slider_h - 1;
    e0b6:	1e5a      	subs	r2, r3, #1
    e0b8:	9b06      	ldr	r3, [sp, #24]
    e0ba:	4413      	add	r3, r2
    e0bc:	461a      	mov	r2, r3
    e0be:	9b08      	ldr	r3, [sp, #32]
    e0c0:	1ad2      	subs	r2, r2, r3
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e0c2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
    e0c6:	b212      	sxth	r2, r2
    e0c8:	eba3 0308 	sub.w	r3, r3, r8
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e0cc:	eba0 0808 	sub.w	r8, r0, r8
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e0d0:	4353      	muls	r3, r2
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e0d2:	fb02 f208 	mul.w	r2, r2, r8
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e0d6:	fb93 f3f7 	sdiv	r3, r3, r7
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e0da:	fb92 f7f7 	sdiv	r7, r2, r7
                    knob_area.x1 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
    e0de:	b21a      	sxth	r2, r3
    e0e0:	b23f      	sxth	r7, r7
    e0e2:	1abf      	subs	r7, r7, r2
    e0e4:	434f      	muls	r7, r1
    e0e6:	eb03 2727 	add.w	r7, r3, r7, asr #8
                knob_area.x1 += slider->coords.x1;
    e0ea:	8a33      	ldrh	r3, [r6, #16]
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
    e0ec:	b23f      	sxth	r7, r7
                knob_area.x1 += slider->coords.x1;
    e0ee:	441f      	add	r7, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
    e0f0:	9b03      	ldr	r3, [sp, #12]
                knob_area.x1 += slider->coords.x1;
    e0f2:	b2bf      	uxth	r7, r7
                knob_area.x2 = knob_area.x1 + slider_h - 1;
    e0f4:	443b      	add	r3, r7
                knob_area.x1 += slider->coords.x1;
    e0f6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
                knob_area.x2 = knob_area.x1 + slider_h - 1;
    e0fa:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    e0fe:	e76e      	b.n	dfde <lv_slider_design+0x332>
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
    e100:	9b01      	ldr	r3, [sp, #4]
    e102:	eba9 0003 	sub.w	r0, r9, r3
    e106:	3801      	subs	r0, #1
    e108:	eba4 0408 	sub.w	r4, r4, r8
    e10c:	4344      	muls	r4, r0
    e10e:	fb94 f7f7 	sdiv	r7, r4, r7
    e112:	e7ea      	b.n	e0ea <lv_slider_design+0x43e>
            if(ext->knob_in == 0) {
    e114:	07da      	lsls	r2, r3, #31
    e116:	d41e      	bmi.n	e156 <lv_slider_design+0x4aa>
                if(sym == false) {
    e118:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
    e11c:	f3c3 034f 	ubfx	r3, r3, #1, #16
    e120:	f1bb 0f00 	cmp.w	fp, #0
    e124:	d112      	bne.n	e14c <lv_slider_design+0x4a0>
                    if(cur_value > 0)  knob_area.y1 = area_indic.y1 - slider_w / 2;
    e126:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
                    else  knob_area.y1 = area_indic.y2 - slider_w / 2;
    e12a:	1ad3      	subs	r3, r2, r3
    e12c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
                knob_area.y2 = knob_area.y1 + slider_w - 1;
    e130:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    e134:	9a07      	ldr	r2, [sp, #28]
    e136:	3b01      	subs	r3, #1
    e138:	441a      	add	r2, r3
    e13a:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
            knob_area.x1 = slider->coords.x1;
    e13e:	8a33      	ldrh	r3, [r6, #16]
    e140:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            knob_area.x2 = slider->coords.x2;
    e144:	8ab3      	ldrh	r3, [r6, #20]
    e146:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    e14a:	e74e      	b.n	dfea <lv_slider_design+0x33e>
                    if(cur_value > 0)  knob_area.y1 = area_indic.y1 - slider_w / 2;
    e14c:	2c00      	cmp	r4, #0
    e14e:	dcea      	bgt.n	e126 <lv_slider_design+0x47a>
                    else  knob_area.y1 = area_indic.y2 - slider_w / 2;
    e150:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    e154:	e7e9      	b.n	e12a <lv_slider_design+0x47e>
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
    e156:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
    e15a:	1c4b      	adds	r3, r1, #1
    e15c:	d028      	beq.n	e1b0 <lv_slider_design+0x504>
                    lv_coord_t h = slider_h - slider_w - 1;
    e15e:	9b05      	ldr	r3, [sp, #20]
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e160:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
                    lv_coord_t h = slider_h - slider_w - 1;
    e164:	1e5a      	subs	r2, r3, #1
    e166:	9b03      	ldr	r3, [sp, #12]
    e168:	4413      	add	r3, r2
    e16a:	461a      	mov	r2, r3
    e16c:	9b04      	ldr	r3, [sp, #16]
    e16e:	1ad2      	subs	r2, r2, r3
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e170:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
    e174:	b212      	sxth	r2, r2
    e176:	eba3 0308 	sub.w	r3, r3, r8
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e17a:	eba0 0808 	sub.w	r8, r0, r8
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e17e:	4353      	muls	r3, r2
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e180:	fb02 f208 	mul.w	r2, r2, r8
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
    e184:	fb93 f3f7 	sdiv	r3, r3, r7
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
    e188:	fb92 f7f7 	sdiv	r7, r2, r7
                    knob_area.y2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
    e18c:	b21a      	sxth	r2, r3
    e18e:	b23f      	sxth	r7, r7
    e190:	1abf      	subs	r7, r7, r2
    e192:	434f      	muls	r7, r1
    e194:	eb03 2727 	add.w	r7, r3, r7, asr #8
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
    e198:	8af3      	ldrh	r3, [r6, #22]
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
    e19a:	b23f      	sxth	r7, r7
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
    e19c:	1bdf      	subs	r7, r3, r7
                knob_area.y1 = knob_area.y2 - slider_w - 1;
    e19e:	9b07      	ldr	r3, [sp, #28]
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
    e1a0:	b2bf      	uxth	r7, r7
                knob_area.y1 = knob_area.y2 - slider_w - 1;
    e1a2:	43db      	mvns	r3, r3
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
    e1a4:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
                knob_area.y1 = knob_area.y2 - slider_w - 1;
    e1a8:	441f      	add	r7, r3
    e1aa:	f8ad 7042 	strh.w	r7, [sp, #66]	; 0x42
    e1ae:	e7c6      	b.n	e13e <lv_slider_design+0x492>
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
    e1b0:	9b01      	ldr	r3, [sp, #4]
    e1b2:	eba3 0009 	sub.w	r0, r3, r9
    e1b6:	3801      	subs	r0, #1
    e1b8:	eba4 0408 	sub.w	r4, r4, r8
    e1bc:	4344      	muls	r4, r0
    e1be:	fb94 f7f7 	sdiv	r7, r4, r7
    e1c2:	e7e9      	b.n	e198 <lv_slider_design+0x4ec>
        return false;
    e1c4:	2000      	movs	r0, #0
}
    e1c6:	b013      	add	sp, #76	; 0x4c
    e1c8:	ecbd 8b04 	vpop	{d8-d9}
    e1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e1d0 <lv_slider_signal>:
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
    e1d0:	4b90      	ldr	r3, [pc, #576]	; (e414 <lv_slider_signal+0x244>)
{
    e1d2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(slider, sign, param);
    e1d6:	681b      	ldr	r3, [r3, #0]
{
    e1d8:	4604      	mov	r4, r0
    e1da:	4689      	mov	r9, r1
    e1dc:	4692      	mov	sl, r2
    res = ancestor_signal(slider, sign, param);
    e1de:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
    e1e0:	2801      	cmp	r0, #1
    res = ancestor_signal(slider, sign, param);
    e1e2:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
    e1e4:	d11b      	bne.n	e21e <lv_slider_signal+0x4e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    e1e6:	f1b9 0f07 	cmp.w	r9, #7
    e1ea:	d105      	bne.n	e1f8 <lv_slider_signal+0x28>
    e1ec:	498a      	ldr	r1, [pc, #552]	; (e418 <lv_slider_signal+0x248>)
    e1ee:	4650      	mov	r0, sl
    e1f0:	f7fd fc3e 	bl	ba70 <lv_obj_handle_get_type_signal>
            tmp = ext->bar.max_value;

        if(tmp != ext->drag_value) {
            ext->drag_value = tmp;
            lv_obj_invalidate(slider);
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
    e1f4:	4605      	mov	r5, r0
            if(res != LV_RES_OK) return res;
    e1f6:	e012      	b.n	e21e <lv_slider_signal+0x4e>
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
    e1f8:	4620      	mov	r0, r4
    e1fa:	f7fd fc29 	bl	ba50 <lv_obj_get_ext_attr>
    e1fe:	4606      	mov	r6, r0
    lv_coord_t w = lv_obj_get_width(slider);
    e200:	4620      	mov	r0, r4
    e202:	f7fc fcdb 	bl	abbc <lv_obj_get_width>
    e206:	4680      	mov	r8, r0
    lv_coord_t h = lv_obj_get_height(slider);
    e208:	4620      	mov	r0, r4
    e20a:	f7fc fce5 	bl	abd8 <lv_obj_get_height>
    if(sign == LV_SIGNAL_PRESSED) {
    e20e:	f1b9 0f08 	cmp.w	r9, #8
    lv_coord_t h = lv_obj_get_height(slider);
    e212:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_PRESSED) {
    e214:	d107      	bne.n	e226 <lv_slider_signal+0x56>
        ext->drag_value = lv_slider_get_value(slider);
    e216:	4620      	mov	r0, r4
    e218:	f7ff fd0c 	bl	dc34 <lv_slider_get_value>
    e21c:	8330      	strh	r0, [r6, #24]
        bool * editable = (bool *)param;
        *editable       = true;
    }

    return res;
}
    e21e:	4628      	mov	r0, r5
    e220:	b002      	add	sp, #8
    e222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(sign == LV_SIGNAL_PRESSING) {
    e226:	f1b9 0f09 	cmp.w	r9, #9
    e22a:	d149      	bne.n	e2c0 <lv_slider_signal+0xf0>
        lv_indev_get_point(param, &p);
    e22c:	a901      	add	r1, sp, #4
    e22e:	4650      	mov	r0, sl
    e230:	f7fb ff21 	bl	a076 <lv_indev_get_point>
        if(w > h) {
    e234:	45b8      	cmp	r8, r7
    e236:	f9b6 c002 	ldrsh.w	ip, [r6, #2]
    e23a:	f9b6 e004 	ldrsh.w	lr, [r6, #4]
    e23e:	dd29      	ble.n	e294 <lv_slider_signal+0xc4>
            p.x -=
    e240:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e244:	8a23      	ldrh	r3, [r4, #16]
    e246:	1ac9      	subs	r1, r1, r3
                slider->coords.x1 + h / 2; /*Modify the point to shift with half knob (important on the start and end)*/
    e248:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
            p.x -=
    e24c:	eba1 0163 	sub.w	r1, r1, r3, asr #1
    e250:	b209      	sxth	r1, r1
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
    e252:	ebae 030c 	sub.w	r3, lr, ip
            p.x -=
    e256:	f8ad 1004 	strh.w	r1, [sp, #4]
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
    e25a:	fb03 1101 	mla	r1, r3, r1, r1
    e25e:	eba8 0307 	sub.w	r3, r8, r7
    e262:	fb91 f3f3 	sdiv	r3, r1, r3
            tmp += ext->bar.min_value;
    e266:	4463      	add	r3, ip
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
    e268:	b21b      	sxth	r3, r3
        if(tmp < ext->bar.min_value)
    e26a:	459c      	cmp	ip, r3
    e26c:	dc03      	bgt.n	e276 <lv_slider_signal+0xa6>
        else if(tmp > ext->bar.max_value)
    e26e:	459e      	cmp	lr, r3
    e270:	46f4      	mov	ip, lr
    e272:	bfa8      	it	ge
    e274:	469c      	movge	ip, r3
        if(tmp != ext->drag_value) {
    e276:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
    e27a:	4563      	cmp	r3, ip
    e27c:	d0cf      	beq.n	e21e <lv_slider_signal+0x4e>
            ext->drag_value = tmp;
    e27e:	f8a6 c018 	strh.w	ip, [r6, #24]
            lv_obj_invalidate(slider);
    e282:	4620      	mov	r0, r4
    e284:	f7fc fd08 	bl	ac98 <lv_obj_invalidate>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
    e288:	2200      	movs	r2, #0
    e28a:	210e      	movs	r1, #14
    e28c:	4620      	mov	r0, r4
    e28e:	f7fc fb9b 	bl	a9c8 <lv_event_send>
    e292:	e7af      	b.n	e1f4 <lv_slider_signal+0x24>
            p.y -=
    e294:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    e298:	8a63      	ldrh	r3, [r4, #18]
    e29a:	1ad2      	subs	r2, r2, r3
                slider->coords.y1 + w / 2; /*Modify the point to shift with half knob (important on the start and end)*/
    e29c:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
            p.y -=
    e2a0:	eba2 0263 	sub.w	r2, r2, r3, asr #1
    e2a4:	b212      	sxth	r2, r2
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
    e2a6:	ebae 030c 	sub.w	r3, lr, ip
            p.y -=
    e2aa:	f8ad 2006 	strh.w	r2, [sp, #6]
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
    e2ae:	fb03 2202 	mla	r2, r3, r2, r2
    e2b2:	eba7 0308 	sub.w	r3, r7, r8
    e2b6:	fb92 f3f3 	sdiv	r3, r2, r3
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
    e2ba:	ebae 0303 	sub.w	r3, lr, r3
    e2be:	e7d3      	b.n	e268 <lv_slider_signal+0x98>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
    e2c0:	f1a9 030a 	sub.w	r3, r9, #10
    e2c4:	2b01      	cmp	r3, #1
    e2c6:	d80c      	bhi.n	e2e2 <lv_slider_signal+0x112>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) lv_slider_set_value(slider, ext->drag_value, false);
    e2c8:	f9b6 1018 	ldrsh.w	r1, [r6, #24]
    e2cc:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    e2d0:	d003      	beq.n	e2da <lv_slider_signal+0x10a>
    lv_bar_set_value(slider, value, anim);
    e2d2:	2200      	movs	r2, #0
    e2d4:	4620      	mov	r0, r4
    e2d6:	f002 ff03 	bl	110e0 <lv_bar_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
    e2da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e2de:	8333      	strh	r3, [r6, #24]
    e2e0:	e79d      	b.n	e21e <lv_slider_signal+0x4e>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
    e2e2:	f1b9 0f02 	cmp.w	r9, #2
    e2e6:	d11e      	bne.n	e326 <lv_slider_signal+0x156>
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
    e2e8:	4620      	mov	r0, r4
    e2ea:	f7fc fc67 	bl	abbc <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    e2ee:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    e2f2:	f8ba 2000 	ldrh.w	r2, [sl]
    e2f6:	3301      	adds	r3, #1
    e2f8:	1a9b      	subs	r3, r3, r2
    e2fa:	b21b      	sxth	r3, r3
    e2fc:	4298      	cmp	r0, r3
    e2fe:	d005      	beq.n	e30c <lv_slider_signal+0x13c>
            slider->signal_cb(slider, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
    e300:	69e3      	ldr	r3, [r4, #28]
    e302:	2200      	movs	r2, #0
    e304:	2106      	movs	r1, #6
    e306:	4620      	mov	r0, r4
    e308:	4798      	blx	r3
    e30a:	e788      	b.n	e21e <lv_slider_signal+0x4e>
           lv_obj_get_height(slider) != lv_area_get_height(param)) {
    e30c:	4620      	mov	r0, r4
    e30e:	f7fc fc63 	bl	abd8 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    e312:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    e316:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    e31a:	3301      	adds	r3, #1
    e31c:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
    e31e:	b21b      	sxth	r3, r3
    e320:	4298      	cmp	r0, r3
    e322:	d1ed      	bne.n	e300 <lv_slider_signal+0x130>
    e324:	e77b      	b.n	e21e <lv_slider_signal+0x4e>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    e326:	f1b9 0f06 	cmp.w	r9, #6
    e32a:	d14c      	bne.n	e3c6 <lv_slider_signal+0x1f6>
        const lv_style_t * style      = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
    e32c:	2100      	movs	r1, #0
    e32e:	4620      	mov	r0, r4
    e330:	f7ff fc9c 	bl	dc6c <lv_slider_get_style>
        const lv_style_t * knob_style = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
    e334:	2102      	movs	r1, #2
        const lv_style_t * style      = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
    e336:	4681      	mov	r9, r0
        const lv_style_t * knob_style = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
    e338:	4620      	mov	r0, r4
    e33a:	f7ff fc97 	bl	dc6c <lv_slider_get_style>
        if(ext->knob_in == 0) {
    e33e:	7eb1      	ldrb	r1, [r6, #26]
        lv_coord_t shadow_w = knob_style->body.shadow.width;
    e340:	f9b0 c012 	ldrsh.w	ip, [r0, #18]
        if(ext->knob_in == 0) {
    e344:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
    e348:	f011 0101 	ands.w	r1, r1, #1
    e34c:	d119      	bne.n	e382 <lv_slider_signal+0x1b2>
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
    e34e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    e352:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    e356:	f347 074f 	sbfx	r7, r7, #1, #16
    e35a:	f348 084f 	sbfx	r8, r8, #1, #16
    e35e:	45b8      	cmp	r8, r7
    e360:	bfb4      	ite	lt
    e362:	f108 0801 	addlt.w	r8, r8, #1
    e366:	3701      	addge	r7, #1
    e368:	fa1f fc8c 	uxth.w	ip, ip
    e36c:	bfb5      	itete	lt
    e36e:	44e0      	addlt	r8, ip
    e370:	4467      	addge	r7, ip
    e372:	fa0f f788 	sxthlt.w	r7, r8
    e376:	b23f      	sxthge	r7, r7
            if(slider->ext_draw_pad < x) slider->ext_draw_pad = x;
    e378:	42bb      	cmp	r3, r7
    e37a:	f6bf af50 	bge.w	e21e <lv_slider_signal+0x4e>
    e37e:	8627      	strh	r7, [r4, #48]	; 0x30
    e380:	e74d      	b.n	e21e <lv_slider_signal+0x4e>
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
    e382:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
    e386:	f9b9 0018 	ldrsh.w	r0, [r9, #24]
    e38a:	4282      	cmp	r2, r0
    e38c:	bfa8      	it	ge
    e38e:	4602      	movge	r2, r0
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
    e390:	f9b9 001a 	ldrsh.w	r0, [r9, #26]
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
    e394:	ea02 72e2 	and.w	r2, r2, r2, asr #31
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
    e398:	4290      	cmp	r0, r2
    e39a:	bfa8      	it	ge
    e39c:	4610      	movge	r0, r2
            pad            = LV_MATH_MIN(pad, style->body.padding.right);
    e39e:	f9b9 201c 	ldrsh.w	r2, [r9, #28]
    e3a2:	4282      	cmp	r2, r0
    e3a4:	bfa8      	it	ge
    e3a6:	4602      	movge	r2, r0
            if(pad < 0) pad = -pad;
    e3a8:	b10a      	cbz	r2, e3ae <lv_slider_signal+0x1de>
    e3aa:	4252      	negs	r2, r2
    e3ac:	b212      	sxth	r2, r2
            if(slider->ext_draw_pad < pad) slider->ext_draw_pad = pad;
    e3ae:	4293      	cmp	r3, r2
    e3b0:	bfb8      	it	lt
    e3b2:	8622      	strhlt	r2, [r4, #48]	; 0x30
            if(slider->ext_draw_pad < shadow_w) slider->ext_draw_pad = shadow_w;
    e3b4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
    e3b8:	4563      	cmp	r3, ip
    e3ba:	f6bf af30 	bge.w	e21e <lv_slider_signal+0x4e>
    e3be:	f8a4 c030 	strh.w	ip, [r4, #48]	; 0x30
    res = ancestor_signal(slider, sign, param);
    e3c2:	460d      	mov	r5, r1
    e3c4:	e72b      	b.n	e21e <lv_slider_signal+0x4e>
    } else if(sign == LV_SIGNAL_CONTROL) {
    e3c6:	f1b9 0f12 	cmp.w	r9, #18
    e3ca:	d11c      	bne.n	e406 <lv_slider_signal+0x236>
        char c = *((char *)param);
    e3cc:	f89a 3000 	ldrb.w	r3, [sl]
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
    e3d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e3d4:	8332      	strh	r2, [r6, #24]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
    e3d6:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    e3da:	2a11      	cmp	r2, #17
    e3dc:	d109      	bne.n	e3f2 <lv_slider_signal+0x222>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1, true);
    e3de:	4620      	mov	r0, r4
    e3e0:	f7ff fc28 	bl	dc34 <lv_slider_get_value>
    e3e4:	3001      	adds	r0, #1
    e3e6:	b201      	sxth	r1, r0
    e3e8:	2201      	movs	r2, #1
    e3ea:	4620      	mov	r0, r4
    e3ec:	f002 fe78 	bl	110e0 <lv_bar_set_value>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
    e3f0:	e74a      	b.n	e288 <lv_slider_signal+0xb8>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
    e3f2:	2b14      	cmp	r3, #20
    e3f4:	d002      	beq.n	e3fc <lv_slider_signal+0x22c>
    e3f6:	2b12      	cmp	r3, #18
    e3f8:	f47f af11 	bne.w	e21e <lv_slider_signal+0x4e>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1, true);
    e3fc:	4620      	mov	r0, r4
    e3fe:	f7ff fc19 	bl	dc34 <lv_slider_get_value>
    e402:	3801      	subs	r0, #1
    e404:	e7ef      	b.n	e3e6 <lv_slider_signal+0x216>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
    e406:	f1b9 0f13 	cmp.w	r9, #19
        *editable       = true;
    e40a:	bf08      	it	eq
    e40c:	f88a 5000 	strbeq.w	r5, [sl]
    e410:	e705      	b.n	e21e <lv_slider_signal+0x4e>
    e412:	bf00      	nop
    e414:	20005e74 	.word	0x20005e74
    e418:	0001de62 	.word	0x0001de62

0000e41c <lv_chart_create_label_iter>:
 * @param list pointer to newline-separated labels list
 * @param iterator_dir LV_CHART_ITERATOR_FORWARD or LV_CHART_LABEL_ITERATOR_REVERSE
 * @return lv_chart_label_iterator_t
 */
static lv_chart_label_iterator_t lv_chart_create_label_iter(const char * list, uint8_t iterator_dir)
{
    e41c:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_chart_label_iterator_t iterator = {0};
    e41e:	2400      	movs	r4, #0
    e420:	8144      	strh	r4, [r0, #10]
    e422:	4627      	mov	r7, r4
    uint8_t j;

    iterator.list_start = list;

    /* count number of list items */
    for(j = 0; list[j] != '\0'; j++) {
    e424:	b2e3      	uxtb	r3, r4
    e426:	1c7e      	adds	r6, r7, #1
    e428:	5ccd      	ldrb	r5, [r1, r3]
    e42a:	b2f6      	uxtb	r6, r6
    e42c:	b95d      	cbnz	r5, e446 <lv_chart_create_label_iter+0x2a>
            if(list[j] == '\n')
               iterator.items_left++;
    }

    if(iterator_dir == LV_CHART_LABEL_ITERATOR_FORWARD) {
    e42e:	2a01      	cmp	r2, #1
        iterator.is_reverse_iter = 0;
        iterator.current_pos = list;
    } else {
        iterator.is_reverse_iter = 1;
        // -1 to skip '\0' at the end of the string
        iterator.current_pos = list + j - 1;
    e430:	bf1d      	ittte	ne
    e432:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    e436:	185b      	addne	r3, r3, r1
        iterator.is_reverse_iter = 1;
    e438:	2501      	movne	r5, #1
        iterator.current_pos = list;
    e43a:	460b      	moveq	r3, r1
    }
    iterator.items_left++;
    return iterator;
    e43c:	e9c0 1300 	strd	r1, r3, [r0]
    e440:	7206      	strb	r6, [r0, #8]
    e442:	7245      	strb	r5, [r0, #9]
}
    e444:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(list[j] == '\n')
    e446:	2d0a      	cmp	r5, #10
    e448:	bf08      	it	eq
    e44a:	4637      	moveq	r7, r6
    for(j = 0; list[j] != '\0'; j++) {
    e44c:	3401      	adds	r4, #1
    e44e:	e7e9      	b.n	e424 <lv_chart_create_label_iter+0x8>

0000e450 <lv_chart_draw_lines>:
{
    e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e454:	ed2d 8b02 	vpush	{d8}
    e458:	b099      	sub	sp, #100	; 0x64
    e45a:	4605      	mov	r5, r0
    e45c:	ee08 1a10 	vmov	s16, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    e460:	f7fd faf6 	bl	ba50 <lv_obj_get_ext_attr>
    e464:	4604      	mov	r4, r0
    lv_coord_t w     = lv_obj_get_width(chart);
    e466:	4628      	mov	r0, r5
    e468:	f7fc fba8 	bl	abbc <lv_obj_get_width>
    e46c:	9003      	str	r0, [sp, #12]
    lv_coord_t h     = lv_obj_get_height(chart);
    e46e:	4628      	mov	r0, r5
    e470:	f7fc fbb2 	bl	abd8 <lv_obj_get_height>
    lv_coord_t y_ofs = chart->coords.y1;
    e474:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    e478:	9304      	str	r3, [sp, #16]
    lv_coord_t h     = lv_obj_get_height(chart);
    e47a:	4680      	mov	r8, r0
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    e47c:	4628      	mov	r0, r5
    lv_coord_t x_ofs = chart->coords.x1;
    e47e:	f9b5 b010 	ldrsh.w	fp, [r5, #16]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    e482:	f7fd fa4a 	bl	b91a <lv_obj_get_opa_scale>
    lv_style_copy(&style, &lv_style_plain);
    e486:	493f      	ldr	r1, [pc, #252]	; (e584 <lv_chart_draw_lines+0x134>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    e488:	9005      	str	r0, [sp, #20]
    lv_style_copy(&style, &lv_style_plain);
    e48a:	a808      	add	r0, sp, #32
    e48c:	f7fb f84b 	bl	9526 <lv_style_copy>
    style.line.opa   = ext->series.opa;
    e490:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    e494:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    style.line.width = ext->series.width;
    e498:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    e49a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    LV_LL_READ_BACK(ext->series_ll, ser)
    e49e:	4620      	mov	r0, r4
    e4a0:	f7f5 f818 	bl	34d4 <lv_ll_get_tail>
    e4a4:	4605      	mov	r5, r0
    e4a6:	b920      	cbnz	r0, e4b2 <lv_chart_draw_lines+0x62>
}
    e4a8:	b019      	add	sp, #100	; 0x64
    e4aa:	ecbd 8b02 	vpop	{d8}
    e4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        style.line.color = ser->color;
    e4b2:	88ab      	ldrh	r3, [r5, #4]
    e4b4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    e4b8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    e4bc:	9a04      	ldr	r2, [sp, #16]
        p1.x = 0 + x_ofs;
    e4be:	f8ad b018 	strh.w	fp, [sp, #24]
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    e4c2:	07db      	lsls	r3, r3, #31
    e4c4:	bf58      	it	pl
    e4c6:	f9b5 9006 	ldrshpl.w	r9, [r5, #6]
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
    e4ca:	682b      	ldr	r3, [r5, #0]
        p2.x = 0 + x_ofs;
    e4cc:	f8ad b01c 	strh.w	fp, [sp, #28]
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    e4d0:	bf48      	it	mi
    e4d2:	f04f 0900 	movmi.w	r9, #0
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
    e4d6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    e4da:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
    e4de:	eb08 0a02 	add.w	sl, r8, r2
        y_tmp  = y_tmp / (ext->ymax - ext->ymin);
    e4e2:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
    e4e6:	1a5b      	subs	r3, r3, r1
    e4e8:	fa1f fa8a 	uxth.w	sl, sl
        y_tmp  = y_tmp / (ext->ymax - ext->ymin);
    e4ec:	1a52      	subs	r2, r2, r1
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
    e4ee:	fb08 f303 	mul.w	r3, r8, r3
        y_tmp  = y_tmp / (ext->ymax - ext->ymin);
    e4f2:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
    e4f6:	ebaa 0303 	sub.w	r3, sl, r3
    e4fa:	f8ad 301e 	strh.w	r3, [sp, #30]
        p_prev = start_point;
    e4fe:	4649      	mov	r1, r9
        for(i = 1; i < ext->point_cnt; i++) {
    e500:	2601      	movs	r6, #1
    e502:	8a62      	ldrh	r2, [r4, #18]
    e504:	42b2      	cmp	r2, r6
    e506:	d804      	bhi.n	e512 <lv_chart_draw_lines+0xc2>
    LV_LL_READ_BACK(ext->series_ll, ser)
    e508:	4629      	mov	r1, r5
    e50a:	4620      	mov	r0, r4
    e50c:	f7f4 fff5 	bl	34fa <lv_ll_get_prev>
    e510:	e7c8      	b.n	e4a4 <lv_chart_draw_lines+0x54>
            p1.x = p2.x;
    e512:	9b07      	ldr	r3, [sp, #28]
    e514:	9306      	str	r3, [sp, #24]
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    e516:	9b03      	ldr	r3, [sp, #12]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
    e518:	f9b4 c00e 	ldrsh.w	ip, [r4, #14]
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    e51c:	1e50      	subs	r0, r2, #1
    e51e:	4373      	muls	r3, r6
    e520:	fb93 f3f0 	sdiv	r3, r3, r0
    e524:	445b      	add	r3, fp
    e526:	f8ad 301c 	strh.w	r3, [sp, #28]
            p_act = (start_point + i) % ext->point_cnt;
    e52a:	eb09 0306 	add.w	r3, r9, r6
    e52e:	fb93 f7f2 	sdiv	r7, r3, r2
    e532:	fb02 3717 	mls	r7, r2, r7, r3
    e536:	b23f      	sxth	r7, r7
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    e538:	682a      	ldr	r2, [r5, #0]
    e53a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    e53e:	f932 3017 	ldrsh.w	r3, [r2, r7, lsl #1]
    e542:	1a1b      	subs	r3, r3, r0
    e544:	fb08 f303 	mul.w	r3, r8, r3
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
    e548:	ebac 0000 	sub.w	r0, ip, r0
    e54c:	fb93 f3f0 	sdiv	r3, r3, r0
            p2.y  = h - y_tmp + y_ofs;
    e550:	ebaa 0303 	sub.w	r3, sl, r3
    e554:	f8ad 301e 	strh.w	r3, [sp, #30]
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF)
    e558:	f932 3011 	ldrsh.w	r3, [r2, r1, lsl #1]
    e55c:	490a      	ldr	r1, [pc, #40]	; (e588 <lv_chart_draw_lines+0x138>)
    e55e:	428b      	cmp	r3, r1
    e560:	d00c      	beq.n	e57c <lv_chart_draw_lines+0x12c>
    e562:	f932 3017 	ldrsh.w	r3, [r2, r7, lsl #1]
    e566:	428b      	cmp	r3, r1
    e568:	d008      	beq.n	e57c <lv_chart_draw_lines+0x12c>
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
    e56a:	9b05      	ldr	r3, [sp, #20]
    e56c:	9300      	str	r3, [sp, #0]
    e56e:	ee18 2a10 	vmov	r2, s16
    e572:	ab08      	add	r3, sp, #32
    e574:	a907      	add	r1, sp, #28
    e576:	a806      	add	r0, sp, #24
    e578:	f7f5 fd13 	bl	3fa2 <lv_draw_line>
        for(i = 1; i < ext->point_cnt; i++) {
    e57c:	3601      	adds	r6, #1
    e57e:	b2b6      	uxth	r6, r6
            p_prev = p_act;
    e580:	4639      	mov	r1, r7
    e582:	e7be      	b.n	e502 <lv_chart_draw_lines+0xb2>
    e584:	2000617c 	.word	0x2000617c
    e588:	ffff83e8 	.word	0xffff83e8

0000e58c <lv_chart_get_next_label>:
 * Get next label from iterator created by lv_chart_create_label_iter()
 * @param iterator iterator to get label from
 * @param[out] buf buffer to point next label to
 */
static void lv_chart_get_next_label(lv_chart_label_iterator_t * iterator, char * buf)
{
    e58c:	b538      	push	{r3, r4, r5, lr}
    uint8_t label_len = 0;
    if (iterator->is_reverse_iter) {
    e58e:	7a43      	ldrb	r3, [r0, #9]
{
    e590:	460d      	mov	r5, r1
    if (iterator->is_reverse_iter) {
    e592:	bb43      	cbnz	r3, e5e6 <lv_chart_get_next_label+0x5a>
        }

        strncpy(buf, label_start, label_len);
    } else {
        /* search for tick string */
        while(iterator->current_pos[label_len] != '\n' &&
    e594:	6844      	ldr	r4, [r0, #4]
    e596:	b2da      	uxtb	r2, r3
    e598:	fa54 f183 	uxtab	r1, r4, r3
    e59c:	5ca4      	ldrb	r4, [r4, r2]
    e59e:	2c0a      	cmp	r4, #10
    e5a0:	d000      	beq.n	e5a4 <lv_chart_get_next_label+0x18>
    e5a2:	bb14      	cbnz	r4, e5ea <lv_chart_get_next_label+0x5e>
            } else {
                label_len++;
            }
        }

        iterator->current_pos += label_len;
    e5a4:	6041      	str	r1, [r0, #4]
        /* do not allow output buffer overflow */
        if (label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
            label_len = LV_CHART_AXIS_TICK_LABEL_MAX_LEN;
        }

        if(*iterator->current_pos == '\n') iterator->current_pos++;
    e5a6:	780b      	ldrb	r3, [r1, #0]
    e5a8:	2a14      	cmp	r2, #20
    e5aa:	bf28      	it	cs
    e5ac:	2214      	movcs	r2, #20
    e5ae:	2b0a      	cmp	r3, #10
    e5b0:	bf08      	it	eq
    e5b2:	3101      	addeq	r1, #1
    e5b4:	4614      	mov	r4, r2
    e5b6:	bf08      	it	eq
    e5b8:	6041      	streq	r1, [r0, #4]
    e5ba:	e011      	b.n	e5e0 <lv_chart_get_next_label+0x54>
            iterator->current_pos--;
    e5bc:	3b01      	subs	r3, #1
    e5be:	6043      	str	r3, [r0, #4]
        while ((*iterator->current_pos != '\n') &&
    e5c0:	6843      	ldr	r3, [r0, #4]
    e5c2:	7819      	ldrb	r1, [r3, #0]
    e5c4:	290a      	cmp	r1, #10
    e5c6:	d015      	beq.n	e5f4 <lv_chart_get_next_label+0x68>
                (iterator->current_pos != iterator->list_start)) {
    e5c8:	6801      	ldr	r1, [r0, #0]
    e5ca:	3201      	adds	r2, #1
        while ((*iterator->current_pos != '\n') &&
    e5cc:	428b      	cmp	r3, r1
    e5ce:	b2d2      	uxtb	r2, r2
    e5d0:	d1f4      	bne.n	e5bc <lv_chart_get_next_label+0x30>
        if (label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
    e5d2:	2a14      	cmp	r2, #20
    e5d4:	bf28      	it	cs
    e5d6:	2214      	movcs	r2, #20
        strncpy(buf, label_start, label_len);
    e5d8:	4628      	mov	r0, r5
    e5da:	4614      	mov	r4, r2
    e5dc:	f005 ff42 	bl	14464 <strncpy>
    }

    /* terminate the string */
    buf[label_len] = '\0';
    e5e0:	2300      	movs	r3, #0
    e5e2:	552b      	strb	r3, [r5, r4]
}
    e5e4:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t label_len = 0;
    e5e6:	2200      	movs	r2, #0
    e5e8:	e7ea      	b.n	e5c0 <lv_chart_get_next_label+0x34>
            if(label_len < LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
    e5ea:	2a13      	cmp	r2, #19
                buf[label_len] = iterator->current_pos[label_len];
    e5ec:	bf98      	it	ls
    e5ee:	54ac      	strbls	r4, [r5, r2]
                label_len++;
    e5f0:	3301      	adds	r3, #1
    e5f2:	e7cf      	b.n	e594 <lv_chart_get_next_label+0x8>
            label_start++;
    e5f4:	1c59      	adds	r1, r3, #1
            iterator->current_pos--;
    e5f6:	3b01      	subs	r3, #1
    e5f8:	6043      	str	r3, [r0, #4]
    e5fa:	e7ea      	b.n	e5d2 <lv_chart_get_next_label+0x46>

0000e5fc <lv_chart_inv_lines>:
/**
 * invalid area of the new line data lines on a chart
 * @param obj pointer to chart object
 */
static void lv_chart_inv_lines(lv_obj_t * chart, uint16_t i)
{
    e5fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e600:	460d      	mov	r5, r1
    e602:	4606      	mov	r6, r0
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    e604:	f7fd fa24 	bl	ba50 <lv_obj_get_ext_attr>
    e608:	4680      	mov	r8, r0

    lv_coord_t w     = lv_obj_get_width(chart);
    e60a:	4630      	mov	r0, r6
    e60c:	f7fc fad6 	bl	abbc <lv_obj_get_width>
    lv_coord_t x_ofs = chart->coords.x1;

    if(i < ext->point_cnt) {
    e610:	f8b8 3012 	ldrh.w	r3, [r8, #18]
    e614:	42ab      	cmp	r3, r5
    lv_coord_t w     = lv_obj_get_width(chart);
    e616:	4604      	mov	r4, r0
    if(i < ext->point_cnt) {
    e618:	d93f      	bls.n	e69a <lv_chart_inv_lines+0x9e>
        lv_area_t coords;
        lv_obj_get_coords(chart, &coords);
    e61a:	4669      	mov	r1, sp
    e61c:	4630      	mov	r0, r6
    lv_coord_t x_ofs = chart->coords.x1;
    e61e:	f9b6 7010 	ldrsh.w	r7, [r6, #16]
        lv_obj_get_coords(chart, &coords);
    e622:	f7fc fa85 	bl	ab30 <lv_obj_get_coords>
        if(i < ext->point_cnt - 1) {
    e626:	f8b8 3012 	ldrh.w	r3, [r8, #18]
    e62a:	1e59      	subs	r1, r3, #1
    e62c:	428d      	cmp	r5, r1
    e62e:	da18      	bge.n	e662 <lv_chart_inv_lines+0x66>
            coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
    e630:	f8b8 c034 	ldrh.w	ip, [r8, #52]	; 0x34
    e634:	b2ba      	uxth	r2, r7
    e636:	eba2 0e0c 	sub.w	lr, r2, ip
    e63a:	fb04 f305 	mul.w	r3, r4, r5
            coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
    e63e:	4462      	add	r2, ip
            coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
    e640:	fb93 f0f1 	sdiv	r0, r3, r1
    e644:	4470      	add	r0, lr
    e646:	f8ad 0000 	strh.w	r0, [sp]
            coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
    e64a:	4423      	add	r3, r4
            lv_inv_area(lv_obj_get_disp(chart), &coords);
    e64c:	4630      	mov	r0, r6
            coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
    e64e:	fb93 f3f1 	sdiv	r3, r3, r1
    e652:	4413      	add	r3, r2
    e654:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_inv_area(lv_obj_get_disp(chart), &coords);
    e658:	f7fc fa2a 	bl	aab0 <lv_obj_get_disp>
    e65c:	4669      	mov	r1, sp
    e65e:	f7fb fe5e 	bl	a31e <lv_inv_area>
        }

        if(i > 0) {
    e662:	b1d5      	cbz	r5, e69a <lv_chart_inv_lines+0x9e>
            coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
    e664:	f8b8 2034 	ldrh.w	r2, [r8, #52]	; 0x34
    e668:	f8b8 0012 	ldrh.w	r0, [r8, #18]
    e66c:	b2bf      	uxth	r7, r7
    e66e:	3d01      	subs	r5, #1
    e670:	1ab9      	subs	r1, r7, r2
    e672:	4365      	muls	r5, r4
            coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
    e674:	4417      	add	r7, r2
            coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
    e676:	3801      	subs	r0, #1
            coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
    e678:	442c      	add	r4, r5
            coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
    e67a:	fb95 f3f0 	sdiv	r3, r5, r0
            coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
    e67e:	fb94 f4f0 	sdiv	r4, r4, r0
            coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
    e682:	440b      	add	r3, r1
            coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
    e684:	443c      	add	r4, r7
            lv_inv_area(lv_obj_get_disp(chart), &coords);
    e686:	4630      	mov	r0, r6
            coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - ext->series.width;
    e688:	f8ad 3000 	strh.w	r3, [sp]
            coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + ext->series.width;
    e68c:	f8ad 4004 	strh.w	r4, [sp, #4]
            lv_inv_area(lv_obj_get_disp(chart), &coords);
    e690:	f7fc fa0e 	bl	aab0 <lv_obj_get_disp>
    e694:	4669      	mov	r1, sp
    e696:	f7fb fe42 	bl	a31e <lv_inv_area>
        }
    }
}
    e69a:	b002      	add	sp, #8
    e69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e6a0 <lv_chart_draw_y_ticks>:
{
    e6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6a4:	b0a1      	sub	sp, #132	; 0x84
    e6a6:	4607      	mov	r7, r0
    e6a8:	468a      	mov	sl, r1
    e6aa:	9208      	str	r2, [sp, #32]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    e6ac:	f7fd f9d0 	bl	ba50 <lv_obj_get_ext_attr>
                                            &ext->y_axis : &ext->secondary_y_axis;
    e6b0:	9b08      	ldr	r3, [sp, #32]
    e6b2:	2b01      	cmp	r3, #1
    e6b4:	bf0c      	ite	eq
    e6b6:	f100 0418 	addeq.w	r4, r0, #24
    e6ba:	f100 0428 	addne.w	r4, r0, #40	; 0x28
    if(y_axis->list_of_values != NULL || y_axis->num_tick_marks != 0) {
    e6be:	6823      	ldr	r3, [r4, #0]
    e6c0:	b91b      	cbnz	r3, e6ca <lv_chart_draw_y_ticks+0x2a>
    e6c2:	7963      	ldrb	r3, [r4, #5]
    e6c4:	2b00      	cmp	r3, #0
    e6c6:	f000 80aa 	beq.w	e81e <lv_chart_draw_y_ticks+0x17e>
        const lv_style_t * style = lv_obj_get_style(chart);
    e6ca:	4638      	mov	r0, r7
    e6cc:	f7fc faa4 	bl	ac18 <lv_obj_get_style>
    e6d0:	4606      	mov	r6, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
    e6d2:	4638      	mov	r0, r7
    e6d4:	f7fd f921 	bl	b91a <lv_obj_get_opa_scale>
        lv_coord_t y_ofs = chart->coords.y1;
    e6d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
    e6dc:	9007      	str	r0, [sp, #28]
        lv_coord_t h     = lv_obj_get_height(chart);
    e6de:	4638      	mov	r0, r7
        lv_coord_t y_ofs = chart->coords.y1;
    e6e0:	930c      	str	r3, [sp, #48]	; 0x30
        lv_coord_t h     = lv_obj_get_height(chart);
    e6e2:	f7fc fa79 	bl	abd8 <lv_obj_get_height>
    e6e6:	900d      	str	r0, [sp, #52]	; 0x34
        lv_coord_t w     = lv_obj_get_width(chart);
    e6e8:	4638      	mov	r0, r7
    e6ea:	f7fc fa67 	bl	abbc <lv_obj_get_width>
        if(which_axis == LV_CHART_AXIS_PRIMARY_Y)
    e6ee:	9b08      	ldr	r3, [sp, #32]
        if(y_axis->major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
    e6f0:	f894 8006 	ldrb.w	r8, [r4, #6]
        if(y_axis->minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
    e6f4:	79e5      	ldrb	r5, [r4, #7]
        if(which_axis == LV_CHART_AXIS_PRIMARY_Y)
    e6f6:	2b01      	cmp	r3, #1
            x_ofs = chart->coords.x1;
    e6f8:	bf0c      	ite	eq
    e6fa:	f9b7 3010 	ldrsheq.w	r3, [r7, #16]
            x_ofs = chart->coords.x2;
    e6fe:	f9b7 3014 	ldrshne.w	r3, [r7, #20]
        if(y_axis->major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
    e702:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
            major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
    e706:	bf09      	itett	eq
    e708:	f04f 080f 	moveq.w	r8, #15
            major_tick_len = y_axis->major_tick_len;
    e70c:	fa4f f888 	sxtbne.w	r8, r8
            major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
    e710:	fb90 f0f8 	sdiveq	r0, r0, r8
    e714:	fa4f f880 	sxtbeq.w	r8, r0
        if(y_axis->minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
    e718:	2dff      	cmp	r5, #255	; 0xff
            minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    e71a:	bf02      	ittt	eq
    e71c:	ea4f 0548 	moveq.w	r5, r8, lsl #1
    e720:	2203      	moveq	r2, #3
    e722:	fb95 f5f2 	sdiveq	r5, r5, r2
        if(which_axis == LV_CHART_AXIS_SECONDARY_Y) {
    e726:	9a08      	ldr	r2, [sp, #32]
            minor_tick_len = y_axis->minor_tick_len;
    e728:	b26d      	sxtb	r5, r5
        if(which_axis == LV_CHART_AXIS_SECONDARY_Y) {
    e72a:	b92a      	cbnz	r2, e738 <lv_chart_draw_y_ticks+0x98>
            major_tick_len *= -1;
    e72c:	f1c8 0800 	rsb	r8, r8, #0
            minor_tick_len *= -1;
    e730:	426d      	negs	r5, r5
            major_tick_len *= -1;
    e732:	fa4f f888 	sxtb.w	r8, r8
            minor_tick_len *= -1;
    e736:	b26d      	sxtb	r5, r5
        iter_dir = (y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) ? LV_CHART_LABEL_ITERATOR_REVERSE : LV_CHART_LABEL_ITERATOR_FORWARD;
    e738:	7922      	ldrb	r2, [r4, #4]
        iter = lv_chart_create_label_iter(y_axis->list_of_values, iter_dir);
    e73a:	6821      	ldr	r1, [r4, #0]
    e73c:	9309      	str	r3, [sp, #36]	; 0x24
        iter_dir = (y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) ? LV_CHART_LABEL_ITERATOR_REVERSE : LV_CHART_LABEL_ITERATOR_FORWARD;
    e73e:	f082 0202 	eor.w	r2, r2, #2
        iter = lv_chart_create_label_iter(y_axis->list_of_values, iter_dir);
    e742:	a80e      	add	r0, sp, #56	; 0x38
    e744:	f3c2 0240 	ubfx	r2, r2, #1, #1
    e748:	f7ff fe68 	bl	e41c <lv_chart_create_label_iter>
    e74c:	c807      	ldmia	r0, {r0, r1, r2}
    e74e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
    e752:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        if(y_axis->num_tick_marks == 0) y_axis->num_tick_marks = 1;
    e756:	7962      	ldrb	r2, [r4, #5]
        num_of_labels = iter.items_left;
    e758:	f89d b064 	ldrb.w	fp, [sp, #100]	; 0x64
        if(y_axis->num_tick_marks == 0) y_axis->num_tick_marks = 1;
    e75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e75e:	b90a      	cbnz	r2, e764 <lv_chart_draw_y_ticks+0xc4>
    e760:	2201      	movs	r2, #1
    e762:	7162      	strb	r2, [r4, #5]
        if(num_of_labels < 2)
    e764:	f1bb 0f01 	cmp.w	fp, #1
            num_scale_ticks = (y_axis->num_tick_marks * (num_of_labels - 1));
    e768:	f894 9005 	ldrb.w	r9, [r4, #5]
    e76c:	9908      	ldr	r1, [sp, #32]
    e76e:	bf84      	itt	hi
    e770:	f10b 32ff 	addhi.w	r2, fp, #4294967295	; 0xffffffff
    e774:	fb12 f209 	smulbbhi	r2, r2, r9
                p1.x++;
    e778:	b29b      	uxth	r3, r3
            num_scale_ticks = (y_axis->num_tick_marks * (num_of_labels - 1));
    e77a:	bf88      	it	hi
    e77c:	fa5f f982 	uxtbhi.w	r9, r2
                p1.x--;
    e780:	1e5a      	subs	r2, r3, #1
                p1.x++;
    e782:	3301      	adds	r3, #1
    e784:	2901      	cmp	r1, #1
    e786:	bf08      	it	eq
    e788:	4613      	moveq	r3, r2
    e78a:	b21a      	sxth	r2, r3
                p2.x = p1.x - minor_tick_len; /* minor tick */
    e78c:	b29b      	uxth	r3, r3
    e78e:	1b5d      	subs	r5, r3, r5
                p2.x = p1.x - major_tick_len; /* major tick */
    e790:	eba3 0808 	sub.w	r8, r3, r8
    e794:	fa0f f388 	sxth.w	r3, r8
    e798:	920b      	str	r2, [sp, #44]	; 0x2c
                p2.x = p1.x - minor_tick_len; /* minor tick */
    e79a:	b22a      	sxth	r2, r5
    e79c:	920a      	str	r2, [sp, #40]	; 0x28
                p2.x = p1.x - major_tick_len; /* major tick */
    e79e:	9309      	str	r3, [sp, #36]	; 0x24
    e7a0:	f04f 0800 	mov.w	r8, #0
    e7a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e7a6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    e7aa:	fa5f f588 	uxtb.w	r5, r8
            if((num_of_labels != 0) && (i == 0 || i % y_axis->num_tick_marks == 0))
    e7ae:	f1bb 0f00 	cmp.w	fp, #0
    e7b2:	d037      	beq.n	e824 <lv_chart_draw_y_ticks+0x184>
    e7b4:	2d00      	cmp	r5, #0
    e7b6:	d037      	beq.n	e828 <lv_chart_draw_y_ticks+0x188>
    e7b8:	7962      	ldrb	r2, [r4, #5]
    e7ba:	fbb5 f3f2 	udiv	r3, r5, r2
    e7be:	fb02 5313 	mls	r3, r2, r3, r5
                p2.x = p1.x - major_tick_len; /* major tick */
    e7c2:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
            if((num_of_labels != 0) && (i == 0 || i % y_axis->num_tick_marks == 0))
    e7c6:	b2db      	uxtb	r3, r3
                p2.x = p1.x - major_tick_len; /* major tick */
    e7c8:	2b00      	cmp	r3, #0
    e7ca:	bf08      	it	eq
    e7cc:	460a      	moveq	r2, r1
    e7ce:	4613      	mov	r3, r2
                y_ofs + (int32_t)((int32_t)(h - style->line.width) * i) / num_scale_ticks;
    e7d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e7d2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    e7d6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
    e7da:	1ad2      	subs	r2, r2, r3
    e7dc:	fa5f f388 	uxtb.w	r3, r8
    e7e0:	4353      	muls	r3, r2
    e7e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e7e4:	fb93 f3f9 	sdiv	r3, r3, r9
    e7e8:	4413      	add	r3, r2
    e7ea:	b21b      	sxth	r3, r3
            p2.y = p1.y =
    e7ec:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    e7f0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            if(y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) {
    e7f4:	7923      	ldrb	r3, [r4, #4]
    e7f6:	079a      	lsls	r2, r3, #30
    e7f8:	d526      	bpl.n	e848 <lv_chart_draw_y_ticks+0x1a8>
                if(i != 0)
    e7fa:	b1bd      	cbz	r5, e82c <lv_chart_draw_y_ticks+0x18c>
                    lv_draw_line(&p1, &p2, mask, style, opa_scale);
    e7fc:	9b07      	ldr	r3, [sp, #28]
    e7fe:	9300      	str	r3, [sp, #0]
    e800:	4652      	mov	r2, sl
    e802:	4633      	mov	r3, r6
    e804:	a913      	add	r1, sp, #76	; 0x4c
    e806:	a812      	add	r0, sp, #72	; 0x48
    e808:	f7f5 fbcb 	bl	3fa2 <lv_draw_line>
            if(num_of_labels != 0) {
    e80c:	f1bb 0f00 	cmp.w	fp, #0
    e810:	d16e      	bne.n	e8f0 <lv_chart_draw_y_ticks+0x250>
        for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
    e812:	f108 0801 	add.w	r8, r8, #1
    e816:	fa5f f388 	uxtb.w	r3, r8
    e81a:	4599      	cmp	r9, r3
    e81c:	d2c2      	bcs.n	e7a4 <lv_chart_draw_y_ticks+0x104>
}
    e81e:	b021      	add	sp, #132	; 0x84
    e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                p2.x = p1.x - minor_tick_len; /* minor tick */
    e824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e826:	e7d3      	b.n	e7d0 <lv_chart_draw_y_ticks+0x130>
                p2.x = p1.x - major_tick_len; /* major tick */
    e828:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e82a:	e7d1      	b.n	e7d0 <lv_chart_draw_y_ticks+0x130>
                else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
    e82c:	07dd      	lsls	r5, r3, #31
    e82e:	d507      	bpl.n	e840 <lv_chart_draw_y_ticks+0x1a0>
                    lv_draw_line(&p1, &p2, mask, style, opa_scale);
    e830:	9b07      	ldr	r3, [sp, #28]
    e832:	9300      	str	r3, [sp, #0]
    e834:	4652      	mov	r2, sl
    e836:	4633      	mov	r3, r6
    e838:	a913      	add	r1, sp, #76	; 0x4c
    e83a:	a812      	add	r0, sp, #72	; 0x48
    e83c:	f7f5 fbb1 	bl	3fa2 <lv_draw_line>
            if(num_of_labels != 0) {
    e840:	f1bb 0f00 	cmp.w	fp, #0
    e844:	d112      	bne.n	e86c <lv_chart_draw_y_ticks+0x1cc>
    e846:	e7e4      	b.n	e812 <lv_chart_draw_y_ticks+0x172>
                if(i != num_scale_ticks)
    e848:	45a9      	cmp	r9, r5
    e84a:	d008      	beq.n	e85e <lv_chart_draw_y_ticks+0x1be>
                    lv_draw_line(&p1, &p2, mask, style, opa_scale);
    e84c:	9b07      	ldr	r3, [sp, #28]
    e84e:	9300      	str	r3, [sp, #0]
    e850:	4652      	mov	r2, sl
    e852:	4633      	mov	r3, r6
    e854:	a913      	add	r1, sp, #76	; 0x4c
    e856:	a812      	add	r0, sp, #72	; 0x48
    e858:	f7f5 fba3 	bl	3fa2 <lv_draw_line>
    e85c:	e001      	b.n	e862 <lv_chart_draw_y_ticks+0x1c2>
                else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
    e85e:	07d8      	lsls	r0, r3, #31
    e860:	d4f4      	bmi.n	e84c <lv_chart_draw_y_ticks+0x1ac>
            if(num_of_labels != 0) {
    e862:	f1bb 0f00 	cmp.w	fp, #0
    e866:	d0d4      	beq.n	e812 <lv_chart_draw_y_ticks+0x172>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
    e868:	2d00      	cmp	r5, #0
    e86a:	d141      	bne.n	e8f0 <lv_chart_draw_y_ticks+0x250>
                    lv_chart_get_next_label(&iter, buf);
    e86c:	a91a      	add	r1, sp, #104	; 0x68
    e86e:	a817      	add	r0, sp, #92	; 0x5c
    e870:	f7ff fe8c 	bl	e58c <lv_chart_get_next_label>
                    lv_txt_get_size(&size, buf, style->text.font, style->text.letter_space, style->text.line_space,
    e874:	f647 4218 	movw	r2, #31768	; 0x7c18
    e878:	2104      	movs	r1, #4
    e87a:	f9b6 3028 	ldrsh.w	r3, [r6, #40]	; 0x28
    e87e:	e9cd 2101 	strd	r2, r1, [sp, #4]
    e882:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    e886:	9200      	str	r2, [sp, #0]
    e888:	6a72      	ldr	r2, [r6, #36]	; 0x24
    e88a:	a91a      	add	r1, sp, #104	; 0x68
    e88c:	a814      	add	r0, sp, #80	; 0x50
    e88e:	f7f4 fce3 	bl	3258 <lv_txt_get_size>
                    lv_area_t a = {.y1 = p2.y - size.y / 2, .y2 = p2.y + size.y / 2};
    e892:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    e896:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
    e89a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    e89e:	f3c3 034f 	ubfx	r3, r3, #1, #16
    e8a2:	1ad1      	subs	r1, r2, r3
    e8a4:	4413      	add	r3, r2
    e8a6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
                    if(which_axis == LV_CHART_AXIS_PRIMARY_Y) {
    e8aa:	9b08      	ldr	r3, [sp, #32]
                    lv_area_t a = {.y1 = p2.y - size.y / 2, .y2 = p2.y + size.y / 2};
    e8ac:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
                    if(which_axis == LV_CHART_AXIS_PRIMARY_Y) {
    e8b0:	2b01      	cmp	r3, #1
    e8b2:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
    e8b6:	d124      	bne.n	e902 <lv_chart_draw_y_ticks+0x262>
                        a.x1 = p2.x - size.x - LV_CHART_AXIS_TO_LABEL_DISTANCE;
    e8b8:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    e8bc:	3a04      	subs	r2, #4
    e8be:	b292      	uxth	r2, r2
    e8c0:	1a53      	subs	r3, r2, r1
    e8c2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                        a.x2 = p2.x - LV_CHART_AXIS_TO_LABEL_DISTANCE;
    e8c6:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, NULL, NULL, lv_obj_get_base_dir(chart));
    e8ca:	4638      	mov	r0, r7
    e8cc:	f7fd f823 	bl	b916 <lv_obj_get_base_dir>
    e8d0:	2300      	movs	r3, #0
    e8d2:	e9cd 3303 	strd	r3, r3, [sp, #12]
    e8d6:	9302      	str	r3, [sp, #8]
    e8d8:	2304      	movs	r3, #4
    e8da:	9301      	str	r3, [sp, #4]
    e8dc:	ab1a      	add	r3, sp, #104	; 0x68
    e8de:	9005      	str	r0, [sp, #20]
    e8e0:	9300      	str	r3, [sp, #0]
    e8e2:	4632      	mov	r2, r6
    e8e4:	9b07      	ldr	r3, [sp, #28]
    e8e6:	4651      	mov	r1, sl
    e8e8:	a815      	add	r0, sp, #84	; 0x54
    e8ea:	f7f6 fa21 	bl	4d30 <lv_draw_label>
    e8ee:	e790      	b.n	e812 <lv_chart_draw_y_ticks+0x172>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
    e8f0:	7962      	ldrb	r2, [r4, #5]
    e8f2:	fbb5 f3f2 	udiv	r3, r5, r2
    e8f6:	fb02 5513 	mls	r5, r2, r3, r5
                if(lv_chart_is_tick_with_label(i, y_axis)) {
    e8fa:	f015 0fff 	tst.w	r5, #255	; 0xff
    e8fe:	d188      	bne.n	e812 <lv_chart_draw_y_ticks+0x172>
    e900:	e7b4      	b.n	e86c <lv_chart_draw_y_ticks+0x1cc>
                        a.x1 = p2.x + LV_CHART_AXIS_TO_LABEL_DISTANCE;
    e902:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    e906:	1d1a      	adds	r2, r3, #4
                        a.x2 = p2.x + size.x + LV_CHART_AXIS_TO_LABEL_DISTANCE;
    e908:	440b      	add	r3, r1
    e90a:	3304      	adds	r3, #4
                        a.x1 = p2.x + LV_CHART_AXIS_TO_LABEL_DISTANCE;
    e90c:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
                        a.x2 = p2.x + size.x + LV_CHART_AXIS_TO_LABEL_DISTANCE;
    e910:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    e914:	e7d9      	b.n	e8ca <lv_chart_draw_y_ticks+0x22a>
	...

0000e918 <lv_chart_signal>:
{
    e918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(chart, sign, param);
    e91a:	4b16      	ldr	r3, [pc, #88]	; (e974 <lv_chart_signal+0x5c>)
    e91c:	681b      	ldr	r3, [r3, #0]
{
    e91e:	4607      	mov	r7, r0
    e920:	460c      	mov	r4, r1
    e922:	4615      	mov	r5, r2
    res = ancestor_signal(chart, sign, param);
    e924:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
    e926:	2801      	cmp	r0, #1
    res = ancestor_signal(chart, sign, param);
    e928:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
    e92a:	d113      	bne.n	e954 <lv_chart_signal+0x3c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    e92c:	2c07      	cmp	r4, #7
    e92e:	d105      	bne.n	e93c <lv_chart_signal+0x24>
    e930:	4628      	mov	r0, r5
    e932:	4911      	ldr	r1, [pc, #68]	; (e978 <lv_chart_signal+0x60>)
}
    e934:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    e938:	f7fd b89a 	b.w	ba70 <lv_obj_handle_get_type_signal>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    e93c:	4638      	mov	r0, r7
    e93e:	f7fd f887 	bl	ba50 <lv_obj_get_ext_attr>
    e942:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
    e944:	b984      	cbnz	r4, e968 <lv_chart_signal+0x50>
        LV_LL_READ(ext->series_ll, datal)
    e946:	f7f4 fdc2 	bl	34ce <lv_ll_get_head>
    e94a:	4604      	mov	r4, r0
    e94c:	b920      	cbnz	r0, e958 <lv_chart_signal+0x40>
        lv_ll_clear(&ext->series_ll);
    e94e:	4628      	mov	r0, r5
    e950:	f7f4 fe51 	bl	35f6 <lv_ll_clear>
}
    e954:	4630      	mov	r0, r6
    e956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_mem_free(*datal);
    e958:	6820      	ldr	r0, [r4, #0]
    e95a:	f7f4 fce9 	bl	3330 <lv_mem_free>
        LV_LL_READ(ext->series_ll, datal)
    e95e:	4621      	mov	r1, r4
    e960:	4628      	mov	r0, r5
    e962:	f7f4 fdba 	bl	34da <lv_ll_get_next>
    e966:	e7f0      	b.n	e94a <lv_chart_signal+0x32>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    e968:	2c06      	cmp	r4, #6
        chart->ext_draw_pad = ext->margin;
    e96a:	bf04      	itt	eq
    e96c:	8e03      	ldrheq	r3, [r0, #48]	; 0x30
    e96e:	863b      	strheq	r3, [r7, #48]	; 0x30
    e970:	e7f0      	b.n	e954 <lv_chart_signal+0x3c>
    e972:	bf00      	nop
    e974:	20005e7c 	.word	0x20005e7c
    e978:	0001de6c 	.word	0x0001de6c

0000e97c <lv_chart_design>:
{
    e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e980:	ed2d 8b02 	vpush	{d8}
    if(mode == LV_DESIGN_COVER_CHK) {
    e984:	2a02      	cmp	r2, #2
{
    e986:	ee08 1a10 	vmov	s16, r1
    e98a:	b0ad      	sub	sp, #180	; 0xb4
    e98c:	4604      	mov	r4, r0
    e98e:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
    e990:	d107      	bne.n	e9a2 <lv_chart_design+0x26>
        return ancestor_design_f(chart, mask, mode);
    e992:	4ba7      	ldr	r3, [pc, #668]	; (ec30 <lv_chart_design+0x2b4>)
    e994:	681b      	ldr	r3, [r3, #0]
    e996:	4798      	blx	r3
}
    e998:	b02d      	add	sp, #180	; 0xb4
    e99a:	ecbd 8b02 	vpop	{d8}
    e99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
    e9a2:	2a00      	cmp	r2, #0
    e9a4:	f040 8467 	bne.w	f276 <lv_chart_design+0x8fa>
        lv_draw_rect(&chart->coords, mask, lv_obj_get_style(chart), lv_obj_get_opa_scale(chart));
    e9a8:	f100 0310 	add.w	r3, r0, #16
    e9ac:	ee08 3a90 	vmov	s17, r3
    e9b0:	f7fc f932 	bl	ac18 <lv_obj_get_style>
    e9b4:	9006      	str	r0, [sp, #24]
    e9b6:	4620      	mov	r0, r4
    e9b8:	f7fc ffaf 	bl	b91a <lv_obj_get_opa_scale>
    e9bc:	9a06      	ldr	r2, [sp, #24]
    e9be:	4603      	mov	r3, r0
    e9c0:	ee18 1a10 	vmov	r1, s16
    e9c4:	ee18 0a90 	vmov	r0, s17
    e9c8:	f7f6 fc78 	bl	52bc <lv_draw_rect>
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    e9cc:	4620      	mov	r0, r4
    e9ce:	f7fd f83f 	bl	ba50 <lv_obj_get_ext_attr>
    e9d2:	9006      	str	r0, [sp, #24]
    lv_chart_ext_t * ext     = lv_obj_get_ext_attr(chart);
    e9d4:	4620      	mov	r0, r4
    e9d6:	f7fd f83b 	bl	ba50 <lv_obj_get_ext_attr>
    e9da:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(chart);
    e9dc:	4620      	mov	r0, r4
    e9de:	f7fc f91b 	bl	ac18 <lv_obj_get_style>
    e9e2:	4682      	mov	sl, r0
    lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
    e9e4:	4620      	mov	r0, r4
    e9e6:	f7fc ff98 	bl	b91a <lv_obj_get_opa_scale>
    e9ea:	9007      	str	r0, [sp, #28]
    lv_coord_t w     = lv_obj_get_width(chart);
    e9ec:	4620      	mov	r0, r4
    e9ee:	f7fc f8e5 	bl	abbc <lv_obj_get_width>
    e9f2:	9008      	str	r0, [sp, #32]
    lv_coord_t h     = lv_obj_get_height(chart);
    e9f4:	4620      	mov	r0, r4
    e9f6:	f7fc f8ef 	bl	abd8 <lv_obj_get_height>
    if(ext->hdiv_cnt != 0) {
    e9fa:	f897 8010 	ldrb.w	r8, [r7, #16]
    lv_coord_t x_ofs = chart->coords.x1;
    e9fe:	f9b4 b010 	ldrsh.w	fp, [r4, #16]
    lv_coord_t y_ofs = chart->coords.y1;
    ea02:	f9b4 9012 	ldrsh.w	r9, [r4, #18]
    lv_coord_t h     = lv_obj_get_height(chart);
    ea06:	9009      	str	r0, [sp, #36]	; 0x24
    if(ext->hdiv_cnt != 0) {
    ea08:	f1b8 0f00 	cmp.w	r8, #0
    ea0c:	f040 80b5 	bne.w	eb7a <lv_chart_design+0x1fe>
    if(ext->vdiv_cnt != 0) {
    ea10:	7c7e      	ldrb	r6, [r7, #17]
    ea12:	2e00      	cmp	r6, #0
    ea14:	f040 80e0 	bne.w	ebd8 <lv_chart_design+0x25c>
        lv_obj_get_coords(chart, &mask_tmp);
    ea18:	a913      	add	r1, sp, #76	; 0x4c
    ea1a:	4620      	mov	r0, r4
    ea1c:	f7fc f888 	bl	ab30 <lv_obj_get_coords>
        bool union_ok = lv_area_intersect(&adjusted_mask, mask, &mask_tmp);
    ea20:	ee18 1a10 	vmov	r1, s16
    ea24:	aa13      	add	r2, sp, #76	; 0x4c
    ea26:	a815      	add	r0, sp, #84	; 0x54
    ea28:	f7f5 f81c 	bl	3a64 <lv_area_intersect>
        if(union_ok) {
    ea2c:	2800      	cmp	r0, #0
    ea2e:	f040 8101 	bne.w	ec34 <lv_chart_design+0x2b8>
    lv_chart_draw_y_ticks(chart, mask, LV_CHART_AXIS_PRIMARY_Y);
    ea32:	ee18 1a10 	vmov	r1, s16
    ea36:	2201      	movs	r2, #1
    ea38:	4620      	mov	r0, r4
    ea3a:	f7ff fe31 	bl	e6a0 <lv_chart_draw_y_ticks>
    lv_chart_draw_y_ticks(chart, mask, LV_CHART_AXIS_SECONDARY_Y);
    ea3e:	ee18 1a10 	vmov	r1, s16
    ea42:	2200      	movs	r2, #0
    ea44:	4620      	mov	r0, r4
    ea46:	f7ff fe2b 	bl	e6a0 <lv_chart_draw_y_ticks>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    ea4a:	4620      	mov	r0, r4
    ea4c:	f7fd f800 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->x_axis.list_of_values != NULL || ext->x_axis.num_tick_marks != 0) {
    ea50:	6a03      	ldr	r3, [r0, #32]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    ea52:	4605      	mov	r5, r0
    if(ext->x_axis.list_of_values != NULL || ext->x_axis.num_tick_marks != 0) {
    ea54:	b923      	cbnz	r3, ea60 <lv_chart_design+0xe4>
    ea56:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    ea5a:	2b00      	cmp	r3, #0
    ea5c:	f000 840b 	beq.w	f276 <lv_chart_design+0x8fa>
        const lv_style_t * style = lv_obj_get_style(chart);
    ea60:	4620      	mov	r0, r4
    ea62:	f7fc f8d9 	bl	ac18 <lv_obj_get_style>
    ea66:	4606      	mov	r6, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
    ea68:	4620      	mov	r0, r4
    ea6a:	f7fc ff56 	bl	b91a <lv_obj_get_opa_scale>
        lv_coord_t x_ofs = chart->coords.x1;
    ea6e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(chart);
    ea72:	9007      	str	r0, [sp, #28]
        lv_coord_t h     = lv_obj_get_height(chart);
    ea74:	4620      	mov	r0, r4
        lv_coord_t x_ofs = chart->coords.x1;
    ea76:	9309      	str	r3, [sp, #36]	; 0x24
        lv_coord_t y_ofs = chart->coords.y1;
    ea78:	f9b4 b012 	ldrsh.w	fp, [r4, #18]
        lv_coord_t h     = lv_obj_get_height(chart);
    ea7c:	f7fc f8ac 	bl	abd8 <lv_obj_get_height>
    ea80:	4607      	mov	r7, r0
        lv_coord_t w     = lv_obj_get_width(chart);
    ea82:	4620      	mov	r0, r4
    ea84:	f7fc f89a 	bl	abbc <lv_obj_get_width>
        if(ext->x_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
    ea88:	f895 a026 	ldrb.w	sl, [r5, #38]	; 0x26
        iter = lv_chart_create_label_iter(ext->x_axis.list_of_values, LV_CHART_LABEL_ITERATOR_FORWARD);
    ea8c:	6a29      	ldr	r1, [r5, #32]
        lv_coord_t w     = lv_obj_get_width(chart);
    ea8e:	9008      	str	r0, [sp, #32]
        if(ext->x_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
    ea90:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
            major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
    ea94:	bf01      	itttt	eq
    ea96:	230f      	moveq	r3, #15
    ea98:	4602      	moveq	r2, r0
    ea9a:	fb92 f3f3 	sdiveq	r3, r2, r3
    ea9e:	fa5f fa83 	uxtbeq.w	sl, r3
        if(ext->x_axis.minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
    eaa2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    eaa6:	2bff      	cmp	r3, #255	; 0xff
            minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    eaa8:	bf04      	itt	eq
    eaaa:	ea4f 034a 	moveq.w	r3, sl, lsl #1
    eaae:	2203      	moveq	r2, #3
        iter = lv_chart_create_label_iter(ext->x_axis.list_of_values, LV_CHART_LABEL_ITERATOR_FORWARD);
    eab0:	a80c      	add	r0, sp, #48	; 0x30
            minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    eab2:	bf08      	it	eq
    eab4:	fbb3 f3f2 	udiveq	r3, r3, r2
        iter = lv_chart_create_label_iter(ext->x_axis.list_of_values, LV_CHART_LABEL_ITERATOR_FORWARD);
    eab8:	f04f 0201 	mov.w	r2, #1
            minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    eabc:	bf08      	it	eq
    eabe:	b2db      	uxtbeq	r3, r3
    eac0:	930a      	str	r3, [sp, #40]	; 0x28
        iter = lv_chart_create_label_iter(ext->x_axis.list_of_values, LV_CHART_LABEL_ITERATOR_FORWARD);
    eac2:	f7ff fcab 	bl	e41c <lv_chart_create_label_iter>
    eac6:	c807      	ldmia	r0, {r0, r1, r2}
    eac8:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
    eacc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        if(ext->x_axis.num_tick_marks == 0) ext->x_axis.num_tick_marks = 1;
    ead0:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
        num_of_labels = iter.items_left;
    ead4:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    ead8:	9306      	str	r3, [sp, #24]
        if(ext->x_axis.num_tick_marks == 0) ext->x_axis.num_tick_marks = 1;
    eada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eadc:	b912      	cbnz	r2, eae4 <lv_chart_design+0x168>
    eade:	2201      	movs	r2, #1
    eae0:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
        if(num_of_labels < 2)
    eae4:	9a06      	ldr	r2, [sp, #24]
    eae6:	f895 8025 	ldrb.w	r8, [r5, #37]	; 0x25
    eaea:	2a01      	cmp	r2, #1
            p1.y = h + y_ofs;
    eaec:	445f      	add	r7, fp
            num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
    eaee:	bf88      	it	hi
    eaf0:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
            p1.y = h + y_ofs;
    eaf4:	fa1f fb87 	uxth.w	fp, r7
                p2.y = p1.y + minor_tick_len; /* minor tick */
    eaf8:	fa13 f787 	uxtah	r7, r3, r7
            num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
    eafc:	bf88      	it	hi
    eafe:	fb12 f808 	smulbbhi	r8, r2, r8
                p2.y = p1.y + minor_tick_len; /* minor tick */
    eb02:	b23b      	sxth	r3, r7
            num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
    eb04:	bf88      	it	hi
    eb06:	fa5f f888 	uxtbhi.w	r8, r8
            p_prev = p_act;
    eb0a:	f04f 0900 	mov.w	r9, #0
                p2.y = p1.y + minor_tick_len; /* minor tick */
    eb0e:	930a      	str	r3, [sp, #40]	; 0x28
            if((num_of_labels != 0) && (i == 0 || i % ext->x_axis.num_tick_marks == 0))
    eb10:	9b06      	ldr	r3, [sp, #24]
            p1.y = h + y_ofs;
    eb12:	f8ad b042 	strh.w	fp, [sp, #66]	; 0x42
    eb16:	fa5f f789 	uxtb.w	r7, r9
            if((num_of_labels != 0) && (i == 0 || i % ext->x_axis.num_tick_marks == 0))
    eb1a:	2b00      	cmp	r3, #0
    eb1c:	f000 8351 	beq.w	f1c2 <lv_chart_design+0x846>
    eb20:	b14f      	cbz	r7, eb36 <lv_chart_design+0x1ba>
    eb22:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    eb26:	fbb7 f3f2 	udiv	r3, r7, r2
    eb2a:	fb02 7313 	mls	r3, r2, r3, r7
    eb2e:	f013 0fff 	tst.w	r3, #255	; 0xff
    eb32:	f040 8346 	bne.w	f1c2 <lv_chart_design+0x846>
                p2.y = p1.y + major_tick_len; /* major tick */
    eb36:	eb0b 030a 	add.w	r3, fp, sl
    eb3a:	b21b      	sxth	r3, r3
            p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - style->line.width) * i) / num_scale_ticks;
    eb3c:	9a08      	ldr	r2, [sp, #32]
    eb3e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    eb42:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
    eb46:	1ad2      	subs	r2, r2, r3
    eb48:	fa5f f389 	uxtb.w	r3, r9
    eb4c:	4353      	muls	r3, r2
    eb4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eb50:	fb93 f3f8 	sdiv	r3, r3, r8
    eb54:	4413      	add	r3, r2
    eb56:	b21b      	sxth	r3, r3
            if(i != num_scale_ticks)
    eb58:	45b8      	cmp	r8, r7
            p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - style->line.width) * i) / num_scale_ticks;
    eb5a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    eb5e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            if(i != num_scale_ticks)
    eb62:	f000 8330 	beq.w	f1c6 <lv_chart_design+0x84a>
                lv_draw_line(&p1, &p2, mask, style, opa_scale);
    eb66:	9b07      	ldr	r3, [sp, #28]
    eb68:	9300      	str	r3, [sp, #0]
    eb6a:	ee18 2a10 	vmov	r2, s16
    eb6e:	4633      	mov	r3, r6
    eb70:	a911      	add	r1, sp, #68	; 0x44
    eb72:	a810      	add	r0, sp, #64	; 0x40
    eb74:	f7f5 fa15 	bl	3fa2 <lv_draw_line>
    eb78:	e32a      	b.n	f1d0 <lv_chart_design+0x854>
        if(style->body.border.width != 0) {
    eb7a:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
    eb7e:	bb4a      	cbnz	r2, ebd4 <lv_chart_design+0x258>
            div_i_end   = ext->hdiv_cnt + 1;
    eb80:	f108 0801 	add.w	r8, r8, #1
    eb84:	fa5f f888 	uxtb.w	r8, r8
            div_i_start = 0;
    eb88:	462e      	mov	r6, r5
        p2.x = w + x_ofs;
    eb8a:	9b08      	ldr	r3, [sp, #32]
        p1.x = 0 + x_ofs;
    eb8c:	f8ad b064 	strh.w	fp, [sp, #100]	; 0x64
        p2.x = w + x_ofs;
    eb90:	eb0b 0203 	add.w	r2, fp, r3
    eb94:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
    eb98:	4546      	cmp	r6, r8
    eb9a:	f63f af39 	bhi.w	ea10 <lv_chart_design+0x94>
            p1.y = (int32_t)((int32_t)(h - style->line.width) * div_i) / (ext->hdiv_cnt + 1);
    eb9e:	f9ba 2036 	ldrsh.w	r2, [sl, #54]	; 0x36
    eba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eba4:	7c39      	ldrb	r1, [r7, #16]
    eba6:	1a9a      	subs	r2, r3, r2
    eba8:	4372      	muls	r2, r6
    ebaa:	3101      	adds	r1, #1
    ebac:	fb92 f2f1 	sdiv	r2, r2, r1
            p1.y += y_ofs;
    ebb0:	444a      	add	r2, r9
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
    ebb2:	9b07      	ldr	r3, [sp, #28]
    ebb4:	9300      	str	r3, [sp, #0]
            p1.y += y_ofs;
    ebb6:	b212      	sxth	r2, r2
    ebb8:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
            p2.y = p1.y;
    ebbc:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
    ebc0:	4653      	mov	r3, sl
    ebc2:	ee18 2a10 	vmov	r2, s16
    ebc6:	a91c      	add	r1, sp, #112	; 0x70
    ebc8:	a819      	add	r0, sp, #100	; 0x64
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
    ebca:	3601      	adds	r6, #1
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
    ebcc:	f7f5 f9e9 	bl	3fa2 <lv_draw_line>
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
    ebd0:	b2f6      	uxtb	r6, r6
    ebd2:	e7e1      	b.n	eb98 <lv_chart_design+0x21c>
            div_i_start = 1;
    ebd4:	2601      	movs	r6, #1
    ebd6:	e7d8      	b.n	eb8a <lv_chart_design+0x20e>
        if(style->body.border.width != 0) {
    ebd8:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
    ebdc:	bb2a      	cbnz	r2, ec2a <lv_chart_design+0x2ae>
            div_i_end   = ext->vdiv_cnt + 1;
    ebde:	3601      	adds	r6, #1
    ebe0:	b2f6      	uxtb	r6, r6
        p2.y = h + y_ofs;
    ebe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
        p1.y = 0 + y_ofs;
    ebe4:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
        p2.y = h + y_ofs;
    ebe8:	4499      	add	r9, r3
    ebea:	f8ad 9072 	strh.w	r9, [sp, #114]	; 0x72
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
    ebee:	42b5      	cmp	r5, r6
    ebf0:	f63f af12 	bhi.w	ea18 <lv_chart_design+0x9c>
            p1.x = (int32_t)((int32_t)(w - style->line.width) * div_i) / (ext->vdiv_cnt + 1);
    ebf4:	f9ba 2036 	ldrsh.w	r2, [sl, #54]	; 0x36
    ebf8:	9b08      	ldr	r3, [sp, #32]
    ebfa:	7c79      	ldrb	r1, [r7, #17]
    ebfc:	1a9a      	subs	r2, r3, r2
    ebfe:	436a      	muls	r2, r5
    ec00:	3101      	adds	r1, #1
    ec02:	fb92 f2f1 	sdiv	r2, r2, r1
            p1.x += x_ofs;
    ec06:	445a      	add	r2, fp
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
    ec08:	9b07      	ldr	r3, [sp, #28]
    ec0a:	9300      	str	r3, [sp, #0]
            p1.x += x_ofs;
    ec0c:	b212      	sxth	r2, r2
    ec0e:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            p2.x = p1.x;
    ec12:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
    ec16:	4653      	mov	r3, sl
    ec18:	ee18 2a10 	vmov	r2, s16
    ec1c:	a91c      	add	r1, sp, #112	; 0x70
    ec1e:	a819      	add	r0, sp, #100	; 0x64
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
    ec20:	3501      	adds	r5, #1
            lv_draw_line(&p1, &p2, mask, style, opa_scale);
    ec22:	f7f5 f9be 	bl	3fa2 <lv_draw_line>
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
    ec26:	b2ed      	uxtb	r5, r5
    ec28:	e7e1      	b.n	ebee <lv_chart_design+0x272>
            div_i_start = 1;
    ec2a:	2501      	movs	r5, #1
    ec2c:	e7d9      	b.n	ebe2 <lv_chart_design+0x266>
    ec2e:	bf00      	nop
    ec30:	20005e78 	.word	0x20005e78
                if(ext->type & LV_CHART_TYPE_LINE) lv_chart_draw_lines(chart, &adjusted_mask);
    ec34:	9b06      	ldr	r3, [sp, #24]
    ec36:	7d1b      	ldrb	r3, [r3, #20]
    ec38:	07dd      	lsls	r5, r3, #31
    ec3a:	d503      	bpl.n	ec44 <lv_chart_design+0x2c8>
    ec3c:	a915      	add	r1, sp, #84	; 0x54
    ec3e:	4620      	mov	r0, r4
    ec40:	f7ff fc06 	bl	e450 <lv_chart_draw_lines>
                if(ext->type & LV_CHART_TYPE_COLUMN) lv_chart_draw_cols(chart, &adjusted_mask);
    ec44:	9b06      	ldr	r3, [sp, #24]
    ec46:	7d1b      	ldrb	r3, [r3, #20]
    ec48:	0798      	lsls	r0, r3, #30
    ec4a:	d52e      	bpl.n	ecaa <lv_chart_design+0x32e>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    ec4c:	4620      	mov	r0, r4
    ec4e:	f7fc feff 	bl	ba50 <lv_obj_get_ext_attr>
    ec52:	4606      	mov	r6, r0
    lv_coord_t w = lv_obj_get_width(chart);
    ec54:	4620      	mov	r0, r4
    ec56:	f7fb ffb1 	bl	abbc <lv_obj_get_width>
    ec5a:	4683      	mov	fp, r0
    lv_coord_t h = lv_obj_get_height(chart);
    ec5c:	4620      	mov	r0, r4
    ec5e:	f7fb ffbb 	bl	abd8 <lv_obj_get_height>
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
    ec62:	f896 3036 	ldrb.w	r3, [r6, #54]	; 0x36
    ec66:	f8b6 8012 	ldrh.w	r8, [r6, #18]
    lv_coord_t h = lv_obj_get_height(chart);
    ec6a:	9007      	str	r0, [sp, #28]
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
    ec6c:	fb03 8808 	mla	r8, r3, r8, r8
    ec70:	fb9b f8f8 	sdiv	r8, fp, r8
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
    ec74:	f3c8 33c0 	ubfx	r3, r8, #15, #1
    ec78:	fa03 f388 	sxtah	r3, r3, r8
    ec7c:	105b      	asrs	r3, r3, #1
    rects.body.border.width = 0;
    ec7e:	2700      	movs	r7, #0
    lv_style_copy(&rects, &lv_style_plain);
    ec80:	49b7      	ldr	r1, [pc, #732]	; (ef60 <lv_chart_design+0x5e4>)
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
    ec82:	9308      	str	r3, [sp, #32]
    lv_style_copy(&rects, &lv_style_plain);
    ec84:	a81c      	add	r0, sp, #112	; 0x70
    ec86:	f7fa fc4e 	bl	9526 <lv_style_copy>
    rects.body.border.width = 0;
    ec8a:	f8ad 707c 	strh.w	r7, [sp, #124]	; 0x7c
    rects.body.radius       = 0;
    ec8e:	f8ad 7076 	strh.w	r7, [sp, #118]	; 0x76
    rects.body.opa          = ext->series.opa;
    ec92:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
    ec96:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    col_a.y2 = chart->coords.y2;
    ec9a:	8ae3      	ldrh	r3, [r4, #22]
    ec9c:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    for(i = 0; i < ext->point_cnt; i++) {
    eca0:	8a71      	ldrh	r1, [r6, #18]
    eca2:	b2bb      	uxth	r3, r7
    eca4:	4299      	cmp	r1, r3
    eca6:	f200 8096 	bhi.w	edd6 <lv_chart_design+0x45a>
                if(ext->type & LV_CHART_TYPE_POINT) lv_chart_draw_points(chart, &adjusted_mask);
    ecaa:	9b06      	ldr	r3, [sp, #24]
    ecac:	7d1b      	ldrb	r3, [r3, #20]
    ecae:	075a      	lsls	r2, r3, #29
    ecb0:	d526      	bpl.n	ed00 <lv_chart_design+0x384>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    ecb2:	4620      	mov	r0, r4
    ecb4:	f7fc fecc 	bl	ba50 <lv_obj_get_ext_attr>
    ecb8:	4606      	mov	r6, r0
    lv_coord_t w     = lv_obj_get_width(chart);
    ecba:	4620      	mov	r0, r4
    ecbc:	f7fb ff7e 	bl	abbc <lv_obj_get_width>
    ecc0:	4682      	mov	sl, r0
    lv_coord_t h     = lv_obj_get_height(chart);
    ecc2:	4620      	mov	r0, r4
    ecc4:	f7fb ff88 	bl	abd8 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
    ecc8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
    eccc:	9307      	str	r3, [sp, #28]
    lv_style_copy(&style_point, &lv_style_plain);
    ecce:	49a4      	ldr	r1, [pc, #656]	; (ef60 <lv_chart_design+0x5e4>)
    lv_coord_t y_ofs = chart->coords.y1;
    ecd0:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
    ecd4:	9308      	str	r3, [sp, #32]
    lv_coord_t h     = lv_obj_get_height(chart);
    ecd6:	4607      	mov	r7, r0
    lv_style_copy(&style_point, &lv_style_plain);
    ecd8:	a81c      	add	r0, sp, #112	; 0x70
    ecda:	f7fa fc24 	bl	9526 <lv_style_copy>
    style_point.body.border.width = 0;
    ecde:	2300      	movs	r3, #0
    ece0:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    style_point.body.opa          = ext->series.opa;
    ece4:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
    ece8:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    style_point.body.radius       = ext->series.width;
    ecec:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
    ecee:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    LV_LL_READ_BACK(ext->series_ll, ser)
    ecf2:	4630      	mov	r0, r6
    ecf4:	f7f4 fbee 	bl	34d4 <lv_ll_get_tail>
    ecf8:	4605      	mov	r5, r0
    ecfa:	2800      	cmp	r0, #0
    ecfc:	f040 80f5 	bne.w	eeea <lv_chart_design+0x56e>
                if(ext->type & LV_CHART_TYPE_VERTICAL_LINE) lv_chart_draw_vertical_lines(chart, &adjusted_mask);
    ed00:	9b06      	ldr	r3, [sp, #24]
    ed02:	7d1b      	ldrb	r3, [r3, #20]
    ed04:	071d      	lsls	r5, r3, #28
    ed06:	d50f      	bpl.n	ed28 <lv_chart_design+0x3ac>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    ed08:	4620      	mov	r0, r4
    ed0a:	f7fc fea1 	bl	ba50 <lv_obj_get_ext_attr>
    ed0e:	4606      	mov	r6, r0
    lv_coord_t w         = lv_obj_get_width(chart);
    ed10:	4620      	mov	r0, r4
    ed12:	f7fb ff53 	bl	abbc <lv_obj_get_width>
    if(ext->point_cnt != w) {
    ed16:	8a73      	ldrh	r3, [r6, #18]
    lv_coord_t w         = lv_obj_get_width(chart);
    ed18:	9007      	str	r0, [sp, #28]
    if(ext->point_cnt != w) {
    ed1a:	4283      	cmp	r3, r0
    ed1c:	f000 8165 	beq.w	efea <lv_chart_design+0x66e>
        lv_chart_draw_lines(chart, mask);
    ed20:	a915      	add	r1, sp, #84	; 0x54
    ed22:	4620      	mov	r0, r4
    ed24:	f7ff fb94 	bl	e450 <lv_chart_draw_lines>
                if(ext->type & LV_CHART_TYPE_AREA) lv_chart_draw_areas(chart, &adjusted_mask);
    ed28:	9b06      	ldr	r3, [sp, #24]
    ed2a:	7d1b      	ldrb	r3, [r3, #20]
    ed2c:	06d9      	lsls	r1, r3, #27
    ed2e:	f57f ae80 	bpl.w	ea32 <lv_chart_design+0xb6>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    ed32:	4620      	mov	r0, r4
    ed34:	f7fc fe8c 	bl	ba50 <lv_obj_get_ext_attr>
    ed38:	4606      	mov	r6, r0
    lv_coord_t w     = lv_obj_get_width(chart);
    ed3a:	4620      	mov	r0, r4
    ed3c:	f7fb ff3e 	bl	abbc <lv_obj_get_width>
    ed40:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t h     = lv_obj_get_height(chart);
    ed42:	4620      	mov	r0, r4
    ed44:	f7fb ff48 	bl	abd8 <lv_obj_get_height>
    lv_coord_t x_ofs = chart->coords.x1;
    ed48:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
    lv_coord_t h     = lv_obj_get_height(chart);
    ed4c:	9006      	str	r0, [sp, #24]
    lv_coord_t x_ofs = chart->coords.x1;
    ed4e:	9308      	str	r3, [sp, #32]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    ed50:	4620      	mov	r0, r4
    lv_coord_t y_ofs = chart->coords.y1;
    ed52:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
    ed56:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    ed58:	f7fc fddf 	bl	b91a <lv_obj_get_opa_scale>
    lv_style_copy(&style, &lv_style_plain);
    ed5c:	4980      	ldr	r1, [pc, #512]	; (ef60 <lv_chart_design+0x5e4>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    ed5e:	4683      	mov	fp, r0
    lv_style_copy(&style, &lv_style_plain);
    ed60:	a81c      	add	r0, sp, #112	; 0x70
    ed62:	f7fa fbe0 	bl	9526 <lv_style_copy>
    LV_LL_READ_BACK(ext->series_ll, ser)
    ed66:	4630      	mov	r0, r6
    ed68:	f7f4 fbb4 	bl	34d4 <lv_ll_get_tail>
    ed6c:	4605      	mov	r5, r0
    ed6e:	2800      	cmp	r0, #0
    ed70:	f43f ae5f 	beq.w	ea32 <lv_chart_design+0xb6>
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    ed74:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
    ed78:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ed7a:	07da      	lsls	r2, r3, #31
        style.body.main_color  = ser->color;
    ed7c:	88ab      	ldrh	r3, [r5, #4]
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    ed7e:	bf58      	it	pl
    ed80:	f9b5 a006 	ldrshpl.w	sl, [r5, #6]
        style.body.main_color  = ser->color;
    ed84:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        style.body.opa         = ext->series.opa;
    ed88:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
    ed8c:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    ed90:	bf48      	it	mi
    ed92:	f04f 0a00 	movmi.w	sl, #0
        y_tmp  = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin) * h;
    ed96:	682b      	ldr	r3, [r5, #0]
    ed98:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
    ed9c:	f933 301a 	ldrsh.w	r3, [r3, sl, lsl #1]
    eda0:	9a06      	ldr	r2, [sp, #24]
    eda2:	1a5b      	subs	r3, r3, r1
    eda4:	4353      	muls	r3, r2
        p2.y   = h - y_tmp + y_ofs;
    eda6:	4402      	add	r2, r0
    eda8:	b292      	uxth	r2, r2
    edaa:	9207      	str	r2, [sp, #28]
        y_tmp  = y_tmp / (ext->ymax - ext->ymin);
    edac:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
    edb0:	1a52      	subs	r2, r2, r1
    edb2:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
    edb6:	9a07      	ldr	r2, [sp, #28]
    edb8:	1ad3      	subs	r3, r2, r3
        p2.x = 0 + x_ofs;
    edba:	9a08      	ldr	r2, [sp, #32]
        p2.y   = h - y_tmp + y_ofs;
    edbc:	b21b      	sxth	r3, r3
        p_prev = start_point;
    edbe:	4650      	mov	r0, sl
        for(i = 1; i < ext->point_cnt; i++) {
    edc0:	f04f 0901 	mov.w	r9, #1
    edc4:	8a71      	ldrh	r1, [r6, #18]
    edc6:	4589      	cmp	r9, r1
    edc8:	f0c0 81a5 	bcc.w	f116 <lv_chart_design+0x79a>
    LV_LL_READ_BACK(ext->series_ll, ser)
    edcc:	4629      	mov	r1, r5
    edce:	4630      	mov	r0, r6
    edd0:	f7f4 fb93 	bl	34fa <lv_ll_get_prev>
    edd4:	e7ca      	b.n	ed6c <lv_chart_design+0x3f0>
        x_act += chart->coords.x1 + x_ofs;
    edd6:	9a08      	ldr	r2, [sp, #32]
    edd8:	8a23      	ldrh	r3, [r4, #16]
        x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
    edda:	fa1f fa87 	uxth.w	sl, r7
        x_act += chart->coords.x1 + x_ofs;
    edde:	4413      	add	r3, r2
        x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
    ede0:	fb0a f20b 	mul.w	r2, sl, fp
    ede4:	fb92 f2f1 	sdiv	r2, r2, r1
        x_act += chart->coords.x1 + x_ofs;
    ede8:	4413      	add	r3, r2
    edea:	b21b      	sxth	r3, r3
        LV_LL_READ_BACK(ext->series_ll, ser)
    edec:	4630      	mov	r0, r6
        x_act += chart->coords.x1 + x_ofs;
    edee:	9309      	str	r3, [sp, #36]	; 0x24
        LV_LL_READ_BACK(ext->series_ll, ser)
    edf0:	f7f4 fb70 	bl	34d4 <lv_ll_get_tail>
    edf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edf6:	4605      	mov	r5, r0
    edf8:	b90d      	cbnz	r5, edfe <lv_chart_design+0x482>
    for(i = 0; i < ext->point_cnt; i++) {
    edfa:	3701      	adds	r7, #1
    edfc:	e750      	b.n	eca0 <lv_chart_design+0x324>
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    edfe:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
    ee02:	eb03 0908 	add.w	r9, r3, r8
    ee06:	07d1      	lsls	r1, r2, #31
            if(col_a.x2 < mask->x1) continue;
    ee08:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    ee0c:	bf58      	it	pl
    ee0e:	f9b5 1006 	ldrshpl.w	r1, [r5, #6]
            col_a.x1 = x_act;
    ee12:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    ee16:	fa0f f989 	sxth.w	r9, r9
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    ee1a:	bf48      	it	mi
    ee1c:	2100      	movmi	r1, #0
            if(col_a.x2 < mask->x1) continue;
    ee1e:	454a      	cmp	r2, r9
            col_a.x2 = col_a.x1 + col_w;
    ee20:	f8ad 9060 	strh.w	r9, [sp, #96]	; 0x60
            if(col_a.x2 < mask->x1) continue;
    ee24:	dd06      	ble.n	ee34 <lv_chart_design+0x4b8>
        LV_LL_READ_BACK(ext->series_ll, ser)
    ee26:	4629      	mov	r1, r5
    ee28:	4630      	mov	r0, r6
    ee2a:	f7f4 fb66 	bl	34fa <lv_ll_get_prev>
    ee2e:	464b      	mov	r3, r9
    ee30:	4605      	mov	r5, r0
    ee32:	e7e1      	b.n	edf8 <lv_chart_design+0x47c>
            if(col_a.x1 > mask->x2) break;
    ee34:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
    ee38:	8a70      	ldrh	r0, [r6, #18]
    ee3a:	429a      	cmp	r2, r3
    ee3c:	dbdd      	blt.n	edfa <lv_chart_design+0x47e>
            rects.body.main_color = ser->color;
    ee3e:	88ab      	ldrh	r3, [r5, #4]
    ee40:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    ee44:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    ee48:	88ab      	ldrh	r3, [r5, #4]
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    ee4a:	f1c2 0cff 	rsb	ip, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    ee4e:	f3c3 1345 	ubfx	r3, r3, #5, #6
    ee52:	fb03 f30c 	mul.w	r3, r3, ip
    ee56:	f3c3 2207 	ubfx	r2, r3, #8, #8
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
    ee5a:	792b      	ldrb	r3, [r5, #4]
    ee5c:	f003 031f 	and.w	r3, r3, #31
    ee60:	fb03 f30c 	mul.w	r3, r3, ip
    ee64:	f3c3 2307 	ubfx	r3, r3, #8, #8
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
    ee68:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    ee6c:	796a      	ldrb	r2, [r5, #5]
    ee6e:	08d2      	lsrs	r2, r2, #3
    ee70:	fb02 f20c 	mul.w	r2, r2, ip
    ee74:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ee78:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
            lv_coord_t p_act = (start_point + i) % ext->point_cnt;
    ee7c:	4451      	add	r1, sl
            rects.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
    ee7e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            lv_coord_t p_act = (start_point + i) % ext->point_cnt;
    ee82:	fb91 f3f0 	sdiv	r3, r1, r0
    ee86:	fb00 1113 	mls	r1, r0, r3, r1
            y_tmp            = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    ee8a:	b20b      	sxth	r3, r1
    ee8c:	682a      	ldr	r2, [r5, #0]
    ee8e:	f9b6 c00c 	ldrsh.w	ip, [r6, #12]
    ee92:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
    ee96:	9309      	str	r3, [sp, #36]	; 0x24
    ee98:	9b07      	ldr	r3, [sp, #28]
    ee9a:	eba2 020c 	sub.w	r2, r2, ip
    ee9e:	fb03 f102 	mul.w	r1, r3, r2
            col_a.y1         = h - y_tmp + chart->coords.y1;
    eea2:	8a62      	ldrh	r2, [r4, #18]
    eea4:	1898      	adds	r0, r3, r2
            y_tmp            = y_tmp / (ext->ymax - ext->ymin);
    eea6:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
    eeaa:	eba2 020c 	sub.w	r2, r2, ip
    eeae:	fb91 f2f2 	sdiv	r2, r1, r2
            col_a.y1         = h - y_tmp + chart->coords.y1;
    eeb2:	1a82      	subs	r2, r0, r2
    eeb4:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
            mask_ret = lv_area_intersect(&col_mask, mask, &col_a);
    eeb8:	a915      	add	r1, sp, #84	; 0x54
    eeba:	aa17      	add	r2, sp, #92	; 0x5c
    eebc:	a819      	add	r0, sp, #100	; 0x64
    eebe:	f7f4 fdd1 	bl	3a64 <lv_area_intersect>
            if(mask_ret != false && ser->points[p_act] != LV_CHART_POINT_DEF) {
    eec2:	2800      	cmp	r0, #0
    eec4:	d0af      	beq.n	ee26 <lv_chart_design+0x4aa>
    eec6:	682a      	ldr	r2, [r5, #0]
    eec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eeca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
    eece:	4a25      	ldr	r2, [pc, #148]	; (ef64 <lv_chart_design+0x5e8>)
    eed0:	4293      	cmp	r3, r2
    eed2:	d0a8      	beq.n	ee26 <lv_chart_design+0x4aa>
                lv_draw_rect(&chart->coords, &col_mask, &rects, lv_obj_get_opa_scale(chart));
    eed4:	4620      	mov	r0, r4
    eed6:	f7fc fd20 	bl	b91a <lv_obj_get_opa_scale>
    eeda:	aa1c      	add	r2, sp, #112	; 0x70
    eedc:	4603      	mov	r3, r0
    eede:	a919      	add	r1, sp, #100	; 0x64
    eee0:	ee18 0a90 	vmov	r0, s17
    eee4:	f7f6 f9ea 	bl	52bc <lv_draw_rect>
    eee8:	e79d      	b.n	ee26 <lv_chart_design+0x4aa>
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    eeea:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
    eeee:	07db      	lsls	r3, r3, #31
        style_point.body.main_color = ser->color;
    eef0:	88ab      	ldrh	r3, [r5, #4]
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    eef2:	bf58      	it	pl
    eef4:	f9b5 9006 	ldrshpl.w	r9, [r5, #6]
        style_point.body.main_color = ser->color;
    eef8:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    eefc:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    ef00:	88ab      	ldrh	r3, [r5, #4]
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    ef02:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)) >> 8);
    ef06:	f3c3 1345 	ubfx	r3, r3, #5, #6
    ef0a:	fb03 f301 	mul.w	r3, r3, r1
    ef0e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)) >> 8);
    ef12:	792b      	ldrb	r3, [r5, #4]
    ef14:	f003 031f 	and.w	r3, r3, #31
    ef18:	fb03 f301 	mul.w	r3, r3, r1
    ef1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
        style_point.body.grad_color = lv_color_mix(LV_COLOR_BLACK, ser->color, ext->series.dark);
    ef20:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)) >> 8);
    ef24:	796a      	ldrb	r2, [r5, #5]
    ef26:	ea4f 02d2 	mov.w	r2, r2, lsr #3
    ef2a:	fb02 f201 	mul.w	r2, r2, r1
    ef2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    ef32:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    ef36:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            cir_a.y1 = h - y_tmp + y_ofs;
    ef3a:	9b08      	ldr	r3, [sp, #32]
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    ef3c:	bf48      	it	mi
    ef3e:	f04f 0900 	movmi.w	r9, #0
        for(i = 0; i < ext->point_cnt; i++) {
    ef42:	f04f 0800 	mov.w	r8, #0
            cir_a.y1 = h - y_tmp + y_ofs;
    ef46:	eb07 0b03 	add.w	fp, r7, r3
        for(i = 0; i < ext->point_cnt; i++) {
    ef4a:	f8b6 c012 	ldrh.w	ip, [r6, #18]
    ef4e:	fa1f f388 	uxth.w	r3, r8
    ef52:	459c      	cmp	ip, r3
    ef54:	d808      	bhi.n	ef68 <lv_chart_design+0x5ec>
    LV_LL_READ_BACK(ext->series_ll, ser)
    ef56:	4629      	mov	r1, r5
    ef58:	4630      	mov	r0, r6
    ef5a:	f7f4 face 	bl	34fa <lv_ll_get_prev>
    ef5e:	e6cb      	b.n	ecf8 <lv_chart_design+0x37c>
    ef60:	2000617c 	.word	0x2000617c
    ef64:	ffff83e8 	.word	0xffff83e8
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    ef68:	fa1f f188 	uxth.w	r1, r8
    ef6c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    ef70:	fb01 f30a 	mul.w	r3, r1, sl
    ef74:	fb93 f3f2 	sdiv	r3, r3, r2
    ef78:	9a07      	ldr	r2, [sp, #28]
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
    ef7a:	f8bd 0076 	ldrh.w	r0, [sp, #118]	; 0x76
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    ef7e:	f9b6 e00c 	ldrsh.w	lr, [r6, #12]
            cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    ef82:	4413      	add	r3, r2
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
    ef84:	fa10 f283 	uxtah	r2, r0, r3
            p_act = (start_point + i) % ext->point_cnt;
    ef88:	4449      	add	r1, r9
            cir_a.x2 = cir_a.x1 + style_point.body.radius;
    ef8a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            p_act = (start_point + i) % ext->point_cnt;
    ef8e:	fb91 f2fc 	sdiv	r2, r1, ip
    ef92:	fb0c 1112 	mls	r1, ip, r2, r1
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    ef96:	b20a      	sxth	r2, r1
            cir_a.x1 -= style_point.body.radius;
    ef98:	1a1b      	subs	r3, r3, r0
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    ef9a:	6829      	ldr	r1, [r5, #0]
            cir_a.x1 -= style_point.body.radius;
    ef9c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    efa0:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
    efa4:	f9b6 c00e 	ldrsh.w	ip, [r6, #14]
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    efa8:	eba3 030e 	sub.w	r3, r3, lr
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
    efac:	ebac 0c0e 	sub.w	ip, ip, lr
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    efb0:	437b      	muls	r3, r7
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
    efb2:	fb93 f3fc 	sdiv	r3, r3, ip
            cir_a.y1 = h - y_tmp + y_ofs;
    efb6:	ebab 0303 	sub.w	r3, fp, r3
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
    efba:	fa10 fc83 	uxtah	ip, r0, r3
            cir_a.y1 -= style_point.body.radius;
    efbe:	1a1b      	subs	r3, r3, r0
            cir_a.y2 = cir_a.y1 + style_point.body.radius;
    efc0:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
            cir_a.y1 -= style_point.body.radius;
    efc4:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            if(ser->points[p_act] != LV_CHART_POINT_DEF)
    efc8:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
    efcc:	4aab      	ldr	r2, [pc, #684]	; (f27c <lv_chart_design+0x900>)
    efce:	4293      	cmp	r3, r2
    efd0:	d008      	beq.n	efe4 <lv_chart_design+0x668>
                lv_draw_rect(&cir_a, mask, &style_point, lv_obj_get_opa_scale(chart));
    efd2:	4620      	mov	r0, r4
    efd4:	f7fc fca1 	bl	b91a <lv_obj_get_opa_scale>
    efd8:	aa1c      	add	r2, sp, #112	; 0x70
    efda:	4603      	mov	r3, r0
    efdc:	a915      	add	r1, sp, #84	; 0x54
    efde:	a819      	add	r0, sp, #100	; 0x64
    efe0:	f7f6 f96c 	bl	52bc <lv_draw_rect>
        for(i = 0; i < ext->point_cnt; i++) {
    efe4:	f108 0801 	add.w	r8, r8, #1
    efe8:	e7af      	b.n	ef4a <lv_chart_design+0x5ce>
    lv_coord_t h     = lv_obj_get_height(chart);
    efea:	4620      	mov	r0, r4
    efec:	f7fb fdf4 	bl	abd8 <lv_obj_get_height>
    lv_coord_t y_ofs = chart->coords.y1;
    eff0:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
    eff4:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t h     = lv_obj_get_height(chart);
    eff6:	4680      	mov	r8, r0
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    eff8:	4620      	mov	r0, r4
    lv_coord_t x_ofs = chart->coords.x1;
    effa:	f9b4 b010 	ldrsh.w	fp, [r4, #16]
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    effe:	f7fc fc8c 	bl	b91a <lv_obj_get_opa_scale>
    lv_style_copy(&style, &lv_style_plain);
    f002:	499f      	ldr	r1, [pc, #636]	; (f280 <lv_chart_design+0x904>)
    lv_opa_t opa_scale = lv_obj_get_opa_scale(chart);
    f004:	900a      	str	r0, [sp, #40]	; 0x28
    lv_style_copy(&style, &lv_style_plain);
    f006:	a81c      	add	r0, sp, #112	; 0x70
    f008:	f7fa fa8d 	bl	9526 <lv_style_copy>
    style.line.opa   = ext->series.opa;
    f00c:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
    f010:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
    style.line.width = ext->series.width;
    f014:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
    f016:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    LV_LL_READ_BACK(ext->series_ll, ser)
    f01a:	4630      	mov	r0, r6
    f01c:	f7f4 fa5a 	bl	34d4 <lv_ll_get_tail>
    f020:	4607      	mov	r7, r0
    f022:	2800      	cmp	r0, #0
    f024:	f43f ae80 	beq.w	ed28 <lv_chart_design+0x3ac>
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    f028:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
    f02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
        y_tmp = (int32_t)((int32_t)ser->points[0] - ext->ymin) * h;
    f02e:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
    f032:	07d8      	lsls	r0, r3, #31
    f034:	bf54      	ite	pl
    f036:	f9b7 3006 	ldrshpl.w	r3, [r7, #6]
    f03a:	2300      	movmi	r3, #0
    f03c:	9308      	str	r3, [sp, #32]
        style.line.color       = ser->color;
    f03e:	88bb      	ldrh	r3, [r7, #4]
    f040:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        y_tmp = (int32_t)((int32_t)ser->points[0] - ext->ymin) * h;
    f044:	683b      	ldr	r3, [r7, #0]
        p1.x  = 0 + x_ofs;
    f046:	f8ad b05c 	strh.w	fp, [sp, #92]	; 0x5c
        p2.x  = 0 + x_ofs;
    f04a:	f8ad b064 	strh.w	fp, [sp, #100]	; 0x64
        y_tmp = (int32_t)((int32_t)ser->points[0] - ext->ymin) * h;
    f04e:	f9b3 3000 	ldrsh.w	r3, [r3]
    f052:	eb08 0a02 	add.w	sl, r8, r2
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
    f056:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
        y_tmp = (int32_t)((int32_t)ser->points[0] - ext->ymin) * h;
    f05a:	1a5b      	subs	r3, r3, r1
    f05c:	fa1f fa8a 	uxth.w	sl, sl
    f060:	fb08 f303 	mul.w	r3, r8, r3
        y_tmp = y_tmp / (ext->ymax - ext->ymin);
    f064:	1a52      	subs	r2, r2, r1
    f066:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y  = h - y_tmp + y_ofs;
    f06a:	ebaa 0303 	sub.w	r3, sl, r3
    f06e:	b21b      	sxth	r3, r3
    f070:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        p1.y  = p2.y;
    f074:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        for(i = 0; i < ext->point_cnt; i++) {
    f078:	f04f 0900 	mov.w	r9, #0
    f07c:	8a73      	ldrh	r3, [r6, #18]
    f07e:	fa1f f289 	uxth.w	r2, r9
    f082:	4293      	cmp	r3, r2
    f084:	d804      	bhi.n	f090 <lv_chart_design+0x714>
    LV_LL_READ_BACK(ext->series_ll, ser)
    f086:	4639      	mov	r1, r7
    f088:	4630      	mov	r0, r6
    f08a:	f7f4 fa36 	bl	34fa <lv_ll_get_prev>
    f08e:	e7c7      	b.n	f020 <lv_chart_design+0x6a4>
            p_act = (start_point + i) % ext->point_cnt;
    f090:	9a08      	ldr	r2, [sp, #32]
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    f092:	f9b6 000c 	ldrsh.w	r0, [r6, #12]
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
    f096:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
            p_act = (start_point + i) % ext->point_cnt;
    f09a:	fa12 f289 	uxtah	r2, r2, r9
    f09e:	fb92 f5f3 	sdiv	r5, r2, r3
    f0a2:	fb03 2515 	mls	r5, r3, r5, r2
    f0a6:	b22d      	sxth	r5, r5
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    f0a8:	683a      	ldr	r2, [r7, #0]
    f0aa:	f932 3015 	ldrsh.w	r3, [r2, r5, lsl #1]
    f0ae:	1a1b      	subs	r3, r3, r0
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
    f0b0:	1a09      	subs	r1, r1, r0
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    f0b2:	fb08 f303 	mul.w	r3, r8, r3
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
    f0b6:	fb93 f3f1 	sdiv	r3, r3, r1
            if(p1.y == p2.y) {
    f0ba:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
            p2.y  = h - y_tmp + y_ofs;
    f0be:	ebaa 0303 	sub.w	r3, sl, r3
    f0c2:	b21b      	sxth	r3, r3
            if(p1.y == p2.y) {
    f0c4:	4299      	cmp	r1, r3
            p2.y  = h - y_tmp + y_ofs;
    f0c6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                p2.x++;
    f0ca:	bf02      	ittt	eq
    f0cc:	f8bd 3064 	ldrheq.w	r3, [sp, #100]	; 0x64
    f0d0:	3301      	addeq	r3, #1
    f0d2:	f8ad 3064 	strheq.w	r3, [sp, #100]	; 0x64
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
    f0d6:	f932 3015 	ldrsh.w	r3, [r2, r5, lsl #1]
    f0da:	4a68      	ldr	r2, [pc, #416]	; (f27c <lv_chart_design+0x900>)
    f0dc:	4293      	cmp	r3, r2
    f0de:	d007      	beq.n	f0f0 <lv_chart_design+0x774>
                lv_draw_line(&p1, &p2, mask, &style, opa_scale);
    f0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0e2:	9300      	str	r3, [sp, #0]
    f0e4:	aa15      	add	r2, sp, #84	; 0x54
    f0e6:	ab1c      	add	r3, sp, #112	; 0x70
    f0e8:	a919      	add	r1, sp, #100	; 0x64
    f0ea:	a817      	add	r0, sp, #92	; 0x5c
    f0ec:	f7f4 ff59 	bl	3fa2 <lv_draw_line>
            p2.x = ((w * p_act) / (ext->point_cnt - 1)) + x_ofs;
    f0f0:	9b07      	ldr	r3, [sp, #28]
    f0f2:	435d      	muls	r5, r3
    f0f4:	8a73      	ldrh	r3, [r6, #18]
    f0f6:	3b01      	subs	r3, #1
    f0f8:	fb95 f5f3 	sdiv	r5, r5, r3
    f0fc:	445d      	add	r5, fp
    f0fe:	b22d      	sxth	r5, r5
            p1.y = p2.y;
    f100:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
            p2.x = ((w * p_act) / (ext->point_cnt - 1)) + x_ofs;
    f104:	f8ad 5064 	strh.w	r5, [sp, #100]	; 0x64
            p1.x = p2.x;
    f108:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
            p1.y = p2.y;
    f10c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        for(i = 0; i < ext->point_cnt; i++) {
    f110:	f109 0901 	add.w	r9, r9, #1
    f114:	e7b2      	b.n	f07c <lv_chart_design+0x700>
            p_act = (start_point + i) % ext->point_cnt;
    f116:	eb0a 0c09 	add.w	ip, sl, r9
    f11a:	fb9c f7f1 	sdiv	r7, ip, r1
    f11e:	fb01 c717 	mls	r7, r1, r7, ip
    f122:	b23f      	sxth	r7, r7
    f124:	9709      	str	r7, [sp, #36]	; 0x24
            p2.x  = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    f126:	9f0a      	ldr	r7, [sp, #40]	; 0x28
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    f128:	f9b6 e00c 	ldrsh.w	lr, [r6, #12]
            p2.x  = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    f12c:	3901      	subs	r1, #1
    f12e:	fb09 f707 	mul.w	r7, r9, r7
    f132:	fb97 f7f1 	sdiv	r7, r7, r1
    f136:	9908      	ldr	r1, [sp, #32]
    f138:	440f      	add	r7, r1
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin) * h;
    f13a:	6829      	ldr	r1, [r5, #0]
    f13c:	468c      	mov	ip, r1
    f13e:	9909      	ldr	r1, [sp, #36]	; 0x24
    f140:	f93c c011 	ldrsh.w	ip, [ip, r1, lsl #1]
    f144:	9906      	ldr	r1, [sp, #24]
    f146:	ebac 080e 	sub.w	r8, ip, lr
    f14a:	fb01 f808 	mul.w	r8, r1, r8
            y_tmp = y_tmp / (ext->ymax - ext->ymin);
    f14e:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
    f152:	eba1 010e 	sub.w	r1, r1, lr
    f156:	fb98 f8f1 	sdiv	r8, r8, r1
            p2.y  = h - y_tmp + y_ofs;
    f15a:	9907      	ldr	r1, [sp, #28]
    f15c:	eba1 0808 	sub.w	r8, r1, r8
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF) {
    f160:	6829      	ldr	r1, [r5, #0]
    f162:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
    f166:	4845      	ldr	r0, [pc, #276]	; (f27c <lv_chart_design+0x900>)
    f168:	4281      	cmp	r1, r0
            p2.x  = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    f16a:	b23f      	sxth	r7, r7
            p2.y  = h - y_tmp + y_ofs;
    f16c:	fa0f f888 	sxth.w	r8, r8
            if(ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF) {
    f170:	d01f      	beq.n	f1b2 <lv_chart_design+0x836>
    f172:	4584      	cmp	ip, r0
    f174:	d01d      	beq.n	f1b2 <lv_chart_design+0x836>
                triangle_points[0]   = p1;
    f176:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                triangle_points[2].y = chart->coords.y2;
    f17a:	8ae3      	ldrh	r3, [r4, #22]
                triangle_points[0]   = p1;
    f17c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
                triangle_points[2].x = p1.x;
    f180:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
                triangle_points[2].y = chart->coords.y2;
    f184:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
    f188:	aa1c      	add	r2, sp, #112	; 0x70
    f18a:	465b      	mov	r3, fp
    f18c:	a915      	add	r1, sp, #84	; 0x54
    f18e:	a819      	add	r0, sp, #100	; 0x64
                triangle_points[1]   = p2;
    f190:	f8ad 7068 	strh.w	r7, [sp, #104]	; 0x68
    f194:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
    f198:	f7f8 fa14 	bl	75c4 <lv_draw_triangle>
                triangle_points[0].y = chart->coords.y2;
    f19c:	8ae3      	ldrh	r3, [r4, #22]
    f19e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
    f1a2:	aa1c      	add	r2, sp, #112	; 0x70
    f1a4:	465b      	mov	r3, fp
    f1a6:	a915      	add	r1, sp, #84	; 0x54
    f1a8:	a819      	add	r0, sp, #100	; 0x64
                triangle_points[2].x = p2.x;
    f1aa:	f8ad 706c 	strh.w	r7, [sp, #108]	; 0x6c
                lv_draw_triangle(triangle_points, mask, &style, opa_scale);
    f1ae:	f7f8 fa09 	bl	75c4 <lv_draw_triangle>
        for(i = 1; i < ext->point_cnt; i++) {
    f1b2:	f109 0901 	add.w	r9, r9, #1
            p_prev = p_act;
    f1b6:	9809      	ldr	r0, [sp, #36]	; 0x24
        for(i = 1; i < ext->point_cnt; i++) {
    f1b8:	fa1f f989 	uxth.w	r9, r9
            p2.y  = h - y_tmp + y_ofs;
    f1bc:	4643      	mov	r3, r8
            p2.x  = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    f1be:	463a      	mov	r2, r7
    f1c0:	e600      	b.n	edc4 <lv_chart_design+0x448>
                p2.y = p1.y + minor_tick_len; /* minor tick */
    f1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1c4:	e4ba      	b.n	eb3c <lv_chart_design+0x1c0>
            else if((ext->x_axis.options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
    f1c6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    f1ca:	07db      	lsls	r3, r3, #31
    f1cc:	f53f accb 	bmi.w	eb66 <lv_chart_design+0x1ea>
            if(num_of_labels != 0) {
    f1d0:	9b06      	ldr	r3, [sp, #24]
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	d048      	beq.n	f268 <lv_chart_design+0x8ec>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
    f1d6:	b147      	cbz	r7, f1ea <lv_chart_design+0x86e>
    f1d8:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    f1dc:	fbb7 f3f2 	udiv	r3, r7, r2
    f1e0:	fb02 7713 	mls	r7, r2, r3, r7
                if(lv_chart_is_tick_with_label(i, &(ext->x_axis))) {
    f1e4:	f017 0fff 	tst.w	r7, #255	; 0xff
    f1e8:	d13e      	bne.n	f268 <lv_chart_design+0x8ec>
                    lv_chart_get_next_label(&iter, buf);
    f1ea:	a91c      	add	r1, sp, #112	; 0x70
    f1ec:	a819      	add	r0, sp, #100	; 0x64
    f1ee:	f7ff f9cd 	bl	e58c <lv_chart_get_next_label>
                    lv_txt_get_size(&size, buf, style->text.font, style->text.letter_space, style->text.line_space,
    f1f2:	2704      	movs	r7, #4
    f1f4:	f647 4218 	movw	r2, #31768	; 0x7c18
    f1f8:	f9b6 3028 	ldrsh.w	r3, [r6, #40]	; 0x28
    f1fc:	e9cd 2701 	strd	r2, r7, [sp, #4]
    f200:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    f204:	9200      	str	r2, [sp, #0]
    f206:	a91c      	add	r1, sp, #112	; 0x70
    f208:	6a72      	ldr	r2, [r6, #36]	; 0x24
    f20a:	a812      	add	r0, sp, #72	; 0x48
    f20c:	f7f4 f824 	bl	3258 <lv_txt_get_size>
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
    f210:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
    f214:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    f218:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    f21c:	f3c3 034f 	ubfx	r3, r3, #1, #16
    f220:	1ad0      	subs	r0, r2, r3
    f222:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
    f226:	441a      	add	r2, r3
    f228:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
                                   (p2.y + size.y + LV_CHART_AXIS_TO_LABEL_DISTANCE)};
    f22c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
    f230:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
                                   (p2.y + size.y + LV_CHART_AXIS_TO_LABEL_DISTANCE)};
    f234:	4403      	add	r3, r0
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
    f236:	eb00 0c07 	add.w	ip, r0, r7
                                   (p2.y + size.y + LV_CHART_AXIS_TO_LABEL_DISTANCE)};
    f23a:	443b      	add	r3, r7
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, NULL, NULL, lv_obj_get_base_dir(chart));
    f23c:	4620      	mov	r0, r4
                    lv_area_t a = {(p2.x - size.x / 2), (p2.y + LV_CHART_AXIS_TO_LABEL_DISTANCE), (p2.x + size.x / 2),
    f23e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    f242:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
                    lv_draw_label(&a, mask, style, opa_scale, buf, LV_TXT_FLAG_CENTER, NULL, NULL, NULL, lv_obj_get_base_dir(chart));
    f246:	f7fc fb66 	bl	b916 <lv_obj_get_base_dir>
    f24a:	2300      	movs	r3, #0
    f24c:	a91c      	add	r1, sp, #112	; 0x70
    f24e:	e9cd 3303 	strd	r3, r3, [sp, #12]
    f252:	e9cd 7301 	strd	r7, r3, [sp, #4]
    f256:	9005      	str	r0, [sp, #20]
    f258:	9100      	str	r1, [sp, #0]
    f25a:	9b07      	ldr	r3, [sp, #28]
    f25c:	ee18 1a10 	vmov	r1, s16
    f260:	4632      	mov	r2, r6
    f262:	a817      	add	r0, sp, #92	; 0x5c
    f264:	f7f5 fd64 	bl	4d30 <lv_draw_label>
        for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
    f268:	f109 0901 	add.w	r9, r9, #1
    f26c:	fa5f f389 	uxtb.w	r3, r9
    f270:	4598      	cmp	r8, r3
    f272:	f4bf ac4d 	bcs.w	eb10 <lv_chart_design+0x194>
    return true;
    f276:	2001      	movs	r0, #1
    f278:	f7ff bb8e 	b.w	e998 <lv_chart_design+0x1c>
    f27c:	ffff83e8 	.word	0xffff83e8
    f280:	2000617c 	.word	0x2000617c

0000f284 <lv_chart_create>:
{
    f284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f288:	460e      	mov	r6, r1
    lv_obj_t * new_chart = lv_obj_create(par, copy);
    f28a:	f7fc f925 	bl	b4d8 <lv_obj_create>
    f28e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_chart);
    f290:	f7fb fa46 	bl	a720 <lv_debug_check_null>
    f294:	4603      	mov	r3, r0
    f296:	b920      	cbnz	r0, f2a2 <lv_chart_create+0x1e>
    f298:	4853      	ldr	r0, [pc, #332]	; (f3e8 <lv_chart_create+0x164>)
    f29a:	462a      	mov	r2, r5
    f29c:	f7fb fa50 	bl	a740 <lv_debug_log_error>
    f2a0:	e7fe      	b.n	f2a0 <lv_chart_create+0x1c>
    if(new_chart == NULL) return NULL;
    f2a2:	b91d      	cbnz	r5, f2ac <lv_chart_create+0x28>
    f2a4:	2500      	movs	r5, #0
}
    f2a6:	4628      	mov	r0, r5
    f2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_chart_ext_t * ext = lv_obj_allocate_ext_attr(new_chart, sizeof(lv_chart_ext_t));
    f2ac:	213c      	movs	r1, #60	; 0x3c
    f2ae:	4628      	mov	r0, r5
    f2b0:	f7fb fbcc 	bl	aa4c <lv_obj_allocate_ext_attr>
    f2b4:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
    f2b6:	f7fb fa33 	bl	a720 <lv_debug_check_null>
    f2ba:	4603      	mov	r3, r0
    f2bc:	b920      	cbnz	r0, f2c8 <lv_chart_create+0x44>
    f2be:	484a      	ldr	r0, [pc, #296]	; (f3e8 <lv_chart_create+0x164>)
    f2c0:	4622      	mov	r2, r4
    f2c2:	f7fb fa3d 	bl	a740 <lv_debug_log_error>
    f2c6:	e7fe      	b.n	f2c6 <lv_chart_create+0x42>
    if(ext == NULL) return NULL;
    f2c8:	2c00      	cmp	r4, #0
    f2ca:	d0eb      	beq.n	f2a4 <lv_chart_create+0x20>
    lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
    f2cc:	2108      	movs	r1, #8
    f2ce:	4620      	mov	r0, r4
    f2d0:	f7f4 f8b7 	bl	3442 <lv_ll_init>
    ext->hdiv_cnt              = LV_CHART_HDIV_DEF;
    f2d4:	4b45      	ldr	r3, [pc, #276]	; (f3ec <lv_chart_create+0x168>)
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_chart);
    f2d6:	f8df a128 	ldr.w	sl, [pc, #296]	; f400 <lv_chart_create+0x17c>
    ext->hdiv_cnt              = LV_CHART_HDIV_DEF;
    f2da:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
    f2de:	e9c4 2303 	strd	r2, r3, [r4, #12]
    ext->type                  = LV_CHART_TYPE_LINE;
    f2e2:	2301      	movs	r3, #1
    f2e4:	7523      	strb	r3, [r4, #20]
    ext->update_mode           = LV_CHART_UPDATE_MODE_SHIFT;
    f2e6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    f2ea:	f36f 0300 	bfc	r3, #0, #1
    f2ee:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    ext->series.width          = 2;
    f2f2:	4b3f      	ldr	r3, [pc, #252]	; (f3f0 <lv_chart_create+0x16c>)
    f2f4:	6363      	str	r3, [r4, #52]	; 0x34
    ext->margin                = 0;
    f2f6:	2100      	movs	r1, #0
    ext->series.dark           = LV_OPA_50;
    f2f8:	237f      	movs	r3, #127	; 0x7f
    memset(&ext->x_axis, 0, sizeof(ext->x_axis));
    f2fa:	f104 0920 	add.w	r9, r4, #32
    ext->series.dark           = LV_OPA_50;
    f2fe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    ext->margin                = 0;
    f302:	8621      	strh	r1, [r4, #48]	; 0x30
    memset(&ext->x_axis, 0, sizeof(ext->x_axis));
    f304:	2208      	movs	r2, #8
    f306:	4648      	mov	r0, r9
    memset(&ext->y_axis, 0, sizeof(ext->y_axis));
    f308:	f104 0818 	add.w	r8, r4, #24
    memset(&ext->x_axis, 0, sizeof(ext->x_axis));
    f30c:	f004 ffe0 	bl	142d0 <memset>
    memset(&ext->secondary_y_axis, 0, sizeof(ext->secondary_y_axis));
    f310:	f104 0728 	add.w	r7, r4, #40	; 0x28
    memset(&ext->y_axis, 0, sizeof(ext->y_axis));
    f314:	2208      	movs	r2, #8
    f316:	2100      	movs	r1, #0
    f318:	4640      	mov	r0, r8
    f31a:	f004 ffd9 	bl	142d0 <memset>
    memset(&ext->secondary_y_axis, 0, sizeof(ext->secondary_y_axis));
    f31e:	2208      	movs	r2, #8
    f320:	2100      	movs	r1, #0
    f322:	4638      	mov	r0, r7
    f324:	f004 ffd4 	bl	142d0 <memset>
    ext->x_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
    f328:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f32c:	84e3      	strh	r3, [r4, #38]	; 0x26
    ext->y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
    f32e:	83e3      	strh	r3, [r4, #30]
    ext->secondary_y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
    f330:	85e3      	strh	r3, [r4, #46]	; 0x2e
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_chart);
    f332:	f8da 3000 	ldr.w	r3, [sl]
    f336:	b923      	cbnz	r3, f342 <lv_chart_create+0xbe>
    f338:	4628      	mov	r0, r5
    f33a:	f7fc fb79 	bl	ba30 <lv_obj_get_design_cb>
    f33e:	f8ca 0000 	str.w	r0, [sl]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_chart);
    f342:	f8df a0c0 	ldr.w	sl, [pc, #192]	; f404 <lv_chart_create+0x180>
    f346:	f8da 3000 	ldr.w	r3, [sl]
    f34a:	b923      	cbnz	r3, f356 <lv_chart_create+0xd2>
    f34c:	4628      	mov	r0, r5
    f34e:	f7fc fb5f 	bl	ba10 <lv_obj_get_signal_cb>
    f352:	f8ca 0000 	str.w	r0, [sl]
    lv_obj_set_signal_cb(new_chart, lv_chart_signal);
    f356:	4927      	ldr	r1, [pc, #156]	; (f3f4 <lv_chart_create+0x170>)
    f358:	4628      	mov	r0, r5
    f35a:	f7fb fb57 	bl	aa0c <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_chart, lv_chart_design);
    f35e:	4926      	ldr	r1, [pc, #152]	; (f3f8 <lv_chart_create+0x174>)
    f360:	4628      	mov	r0, r5
    f362:	f7fb fb63 	bl	aa2c <lv_obj_set_design_cb>
    if(copy == NULL) {
    f366:	b98e      	cbnz	r6, f38c <lv_chart_create+0x108>
        lv_obj_set_size(new_chart, LV_DPI * 3, LV_DPI * 2);
    f368:	f44f 72a5 	mov.w	r2, #330	; 0x14a
    f36c:	f240 11ef 	movw	r1, #495	; 0x1ef
    f370:	4628      	mov	r0, r5
    f372:	f7fc f9ff 	bl	b774 <lv_obj_set_size>
        lv_theme_t * th = lv_theme_get_current();
    f376:	f7f9 fdf1 	bl	8f5c <lv_theme_get_current>
        if(th) {
    f37a:	b128      	cbz	r0, f388 <lv_chart_create+0x104>
 * @param style pointer to a style
 */
static inline void lv_chart_set_style(lv_obj_t * chart, lv_chart_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(chart, style);
    f37c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    f380:	4628      	mov	r0, r5
    f382:	f7fc f829 	bl	b3d8 <lv_obj_set_style>
}
    f386:	e78e      	b.n	f2a6 <lv_chart_create+0x22>
    lv_obj_set_style(chart, style);
    f388:	491c      	ldr	r1, [pc, #112]	; (f3fc <lv_chart_create+0x178>)
    f38a:	e7f9      	b.n	f380 <lv_chart_create+0xfc>
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
    f38c:	4630      	mov	r0, r6
    f38e:	f7fc fb5f 	bl	ba50 <lv_obj_get_ext_attr>
        ext->type       = ext_copy->type;
    f392:	7d03      	ldrb	r3, [r0, #20]
    f394:	7523      	strb	r3, [r4, #20]
        ext->ymin       = ext_copy->ymin;
    f396:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    f39a:	81a3      	strh	r3, [r4, #12]
        ext->ymax       = ext_copy->ymax;
    f39c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    f3a0:	81e3      	strh	r3, [r4, #14]
        ext->hdiv_cnt   = ext_copy->hdiv_cnt;
    f3a2:	7c03      	ldrb	r3, [r0, #16]
    f3a4:	7423      	strb	r3, [r4, #16]
        ext->vdiv_cnt   = ext_copy->vdiv_cnt;
    f3a6:	7c43      	ldrb	r3, [r0, #17]
    f3a8:	7463      	strb	r3, [r4, #17]
        ext->point_cnt  = ext_copy->point_cnt;
    f3aa:	8a43      	ldrh	r3, [r0, #18]
    f3ac:	8263      	strh	r3, [r4, #18]
        ext->series.opa = ext_copy->series.opa;
    f3ae:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
    f3b2:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        ext->margin     = ext_copy->margin;
    f3b6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f3b8:	8623      	strh	r3, [r4, #48]	; 0x30
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
    f3ba:	4606      	mov	r6, r0
        memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
    f3bc:	f100 0120 	add.w	r1, r0, #32
    f3c0:	2208      	movs	r2, #8
    f3c2:	4648      	mov	r0, r9
    f3c4:	f004 ff76 	bl	142b4 <memcpy>
        memcpy(&ext->y_axis, &ext_copy->y_axis, sizeof(lv_chart_axis_cfg_t));
    f3c8:	f106 0118 	add.w	r1, r6, #24
    f3cc:	2208      	movs	r2, #8
    f3ce:	4640      	mov	r0, r8
    f3d0:	f004 ff70 	bl	142b4 <memcpy>
        memcpy(&ext->secondary_y_axis, &ext_copy->secondary_y_axis, sizeof(lv_chart_axis_cfg_t));
    f3d4:	2208      	movs	r2, #8
    f3d6:	f106 0128 	add.w	r1, r6, #40	; 0x28
    f3da:	4638      	mov	r0, r7
    f3dc:	f004 ff6a 	bl	142b4 <memcpy>
        lv_obj_refresh_style(new_chart);
    f3e0:	4628      	mov	r0, r5
    f3e2:	f7fb ffc5 	bl	b370 <lv_obj_refresh_style>
    f3e6:	e75e      	b.n	f2a6 <lv_chart_create+0x22>
    f3e8:	0001a9b8 	.word	0x0001a9b8
    f3ec:	000a0503 	.word	0x000a0503
    f3f0:	ff000002 	.word	0xff000002
    f3f4:	0000e919 	.word	0x0000e919
    f3f8:	0000e97d 	.word	0x0000e97d
    f3fc:	2000607c 	.word	0x2000607c
    f400:	20005e78 	.word	0x20005e78
    f404:	20005e7c 	.word	0x20005e7c

0000f408 <lv_chart_add_series>:
{
    f408:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f40a:	460e      	mov	r6, r1
    f40c:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
    f40e:	f7fb f987 	bl	a720 <lv_debug_check_null>
    f412:	9a01      	ldr	r2, [sp, #4]
    f414:	4603      	mov	r3, r0
    f416:	b918      	cbnz	r0, f420 <lv_chart_add_series+0x18>
    f418:	4821      	ldr	r0, [pc, #132]	; (f4a0 <lv_chart_add_series+0x98>)
    f41a:	f7fb f991 	bl	a740 <lv_debug_log_error>
    f41e:	e7fe      	b.n	f41e <lv_chart_add_series+0x16>
    lv_chart_ext_t * ext    = lv_obj_get_ext_attr(chart);
    f420:	4610      	mov	r0, r2
    f422:	f7fc fb15 	bl	ba50 <lv_obj_get_ext_attr>
    f426:	4605      	mov	r5, r0
    lv_chart_series_t * ser = lv_ll_ins_head(&ext->series_ll);
    f428:	f7f4 f815 	bl	3456 <lv_ll_ins_head>
    f42c:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ser);
    f42e:	f7fb f977 	bl	a720 <lv_debug_check_null>
    f432:	4603      	mov	r3, r0
    f434:	b920      	cbnz	r0, f440 <lv_chart_add_series+0x38>
    f436:	481b      	ldr	r0, [pc, #108]	; (f4a4 <lv_chart_add_series+0x9c>)
    f438:	4622      	mov	r2, r4
    f43a:	f7fb f981 	bl	a740 <lv_debug_log_error>
    f43e:	e7fe      	b.n	f43e <lv_chart_add_series+0x36>
    if(ser == NULL) return NULL;
    f440:	b1c4      	cbz	r4, f474 <lv_chart_add_series+0x6c>
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
    f442:	8a68      	ldrh	r0, [r5, #18]
    ser->color  = color;
    f444:	80a6      	strh	r6, [r4, #4]
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
    f446:	0040      	lsls	r0, r0, #1
    f448:	f7f3 ff5c 	bl	3304 <lv_mem_alloc>
    f44c:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(ser->points);
    f44e:	f7fb f967 	bl	a720 <lv_debug_check_null>
    f452:	6826      	ldr	r6, [r4, #0]
    f454:	4603      	mov	r3, r0
    f456:	b920      	cbnz	r0, f462 <lv_chart_add_series+0x5a>
    f458:	4812      	ldr	r0, [pc, #72]	; (f4a4 <lv_chart_add_series+0x9c>)
    f45a:	4632      	mov	r2, r6
    f45c:	f7fb f970 	bl	a740 <lv_debug_log_error>
    f460:	e7fe      	b.n	f460 <lv_chart_add_series+0x58>
    if(ser->points == NULL) {
    f462:	b956      	cbnz	r6, f47a <lv_chart_add_series+0x72>
        lv_ll_rem(&ext->series_ll, ser);
    f464:	4621      	mov	r1, r4
    f466:	4628      	mov	r0, r5
    f468:	f7f4 f88b 	bl	3582 <lv_ll_rem>
        lv_mem_free(ser);
    f46c:	4620      	mov	r0, r4
    f46e:	f7f3 ff5f 	bl	3330 <lv_mem_free>
        return NULL;
    f472:	4634      	mov	r4, r6
}
    f474:	4620      	mov	r0, r4
    f476:	b002      	add	sp, #8
    f478:	bd70      	pop	{r4, r5, r6, pc}
    ser->start_point = 0;
    f47a:	2300      	movs	r3, #0
    f47c:	80e3      	strh	r3, [r4, #6]
        *p_tmp = def;
    f47e:	f248 30e8 	movw	r0, #33768	; 0x83e8
    for(i = 0; i < ext->point_cnt; i++) {
    f482:	8a69      	ldrh	r1, [r5, #18]
    f484:	b29a      	uxth	r2, r3
    f486:	4291      	cmp	r1, r2
    f488:	d805      	bhi.n	f496 <lv_chart_add_series+0x8e>
    ext->series.num++;
    f48a:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    f48e:	3301      	adds	r3, #1
    f490:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    return ser;
    f494:	e7ee      	b.n	f474 <lv_chart_add_series+0x6c>
        *p_tmp = def;
    f496:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
    for(i = 0; i < ext->point_cnt; i++) {
    f49a:	3301      	adds	r3, #1
    f49c:	e7f1      	b.n	f482 <lv_chart_add_series+0x7a>
    f49e:	bf00      	nop
    f4a0:	0001de08 	.word	0x0001de08
    f4a4:	0001a9b8 	.word	0x0001a9b8

0000f4a8 <lv_chart_set_series_width>:
{
    f4a8:	b538      	push	{r3, r4, r5, lr}
    f4aa:	4604      	mov	r4, r0
    f4ac:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
    f4ae:	f7fb f937 	bl	a720 <lv_debug_check_null>
    f4b2:	4603      	mov	r3, r0
    f4b4:	b920      	cbnz	r0, f4c0 <lv_chart_set_series_width+0x18>
    f4b6:	4809      	ldr	r0, [pc, #36]	; (f4dc <lv_chart_set_series_width+0x34>)
    f4b8:	4622      	mov	r2, r4
    f4ba:	f7fb f941 	bl	a740 <lv_debug_log_error>
    f4be:	e7fe      	b.n	f4be <lv_chart_set_series_width+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    f4c0:	4620      	mov	r0, r4
    f4c2:	f7fc fac5 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->series.width == width) return;
    f4c6:	f9b0 3034 	ldrsh.w	r3, [r0, #52]	; 0x34
    f4ca:	42ab      	cmp	r3, r5
    f4cc:	d005      	beq.n	f4da <lv_chart_set_series_width+0x32>
    ext->series.width = width;
    f4ce:	8685      	strh	r5, [r0, #52]	; 0x34
    lv_obj_invalidate(chart);
    f4d0:	4620      	mov	r0, r4
}
    f4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(chart);
    f4d6:	f7fb bbdf 	b.w	ac98 <lv_obj_invalidate>
}
    f4da:	bd38      	pop	{r3, r4, r5, pc}
    f4dc:	0001de08 	.word	0x0001de08

0000f4e0 <lv_chart_refresh>:
{
    f4e0:	b507      	push	{r0, r1, r2, lr}
    f4e2:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
    f4e4:	f7fb f91c 	bl	a720 <lv_debug_check_null>
    f4e8:	9a01      	ldr	r2, [sp, #4]
    f4ea:	4603      	mov	r3, r0
    f4ec:	b918      	cbnz	r0, f4f6 <lv_chart_refresh+0x16>
    f4ee:	4805      	ldr	r0, [pc, #20]	; (f504 <lv_chart_refresh+0x24>)
    f4f0:	f7fb f926 	bl	a740 <lv_debug_log_error>
    f4f4:	e7fe      	b.n	f4f4 <lv_chart_refresh+0x14>
    lv_obj_invalidate(chart);
    f4f6:	4610      	mov	r0, r2
}
    f4f8:	b003      	add	sp, #12
    f4fa:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_obj_invalidate(chart);
    f4fe:	f7fb bbcb 	b.w	ac98 <lv_obj_invalidate>
    f502:	bf00      	nop
    f504:	0001de08 	.word	0x0001de08

0000f508 <lv_chart_set_next>:
{
    f508:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f50c:	4604      	mov	r4, r0
    f50e:	460e      	mov	r6, r1
    f510:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
    f512:	f7fb f905 	bl	a720 <lv_debug_check_null>
    f516:	4603      	mov	r3, r0
    f518:	b920      	cbnz	r0, f524 <lv_chart_set_next+0x1c>
    f51a:	4851      	ldr	r0, [pc, #324]	; (f660 <lv_chart_set_next+0x158>)
    f51c:	4622      	mov	r2, r4
    f51e:	f7fb f90f 	bl	a740 <lv_debug_log_error>
    f522:	e7fe      	b.n	f522 <lv_chart_set_next+0x1a>
    LV_ASSERT_NULL(ser);
    f524:	4630      	mov	r0, r6
    f526:	f7fb f8fb 	bl	a720 <lv_debug_check_null>
    f52a:	4603      	mov	r3, r0
    f52c:	b920      	cbnz	r0, f538 <lv_chart_set_next+0x30>
    f52e:	484c      	ldr	r0, [pc, #304]	; (f660 <lv_chart_set_next+0x158>)
    f530:	4632      	mov	r2, r6
    f532:	f7fb f905 	bl	a740 <lv_debug_log_error>
    f536:	e7fe      	b.n	f536 <lv_chart_set_next+0x2e>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    f538:	4620      	mov	r0, r4
    f53a:	f7fc fa89 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
    f53e:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
    f542:	88f2      	ldrh	r2, [r6, #6]
    f544:	f013 0f01 	tst.w	r3, #1
    f548:	6833      	ldr	r3, [r6, #0]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    f54a:	4607      	mov	r7, r0
        ser->points[ser->start_point] =
    f54c:	f823 5012 	strh.w	r5, [r3, r2, lsl #1]
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
    f550:	d10d      	bne.n	f56e <lv_chart_set_next+0x66>
        ser->start_point = (ser->start_point + 1) % ext->point_cnt;
    f552:	88f3      	ldrh	r3, [r6, #6]
    f554:	8a41      	ldrh	r1, [r0, #18]
    f556:	3301      	adds	r3, #1
    f558:	fbb3 f2f1 	udiv	r2, r3, r1
    f55c:	fb01 3312 	mls	r3, r1, r2, r3
    f560:	80f3      	strh	r3, [r6, #6]
        lv_chart_refresh(chart);
    f562:	4620      	mov	r0, r4
    f564:	f7ff ffbc 	bl	f4e0 <lv_chart_refresh>
}
    f568:	b002      	add	sp, #8
    f56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(ext->type & LV_CHART_TYPE_LINE) lv_chart_inv_lines(chart, ser->start_point);
    f56e:	7d03      	ldrb	r3, [r0, #20]
    f570:	07dd      	lsls	r5, r3, #31
    f572:	d503      	bpl.n	f57c <lv_chart_set_next+0x74>
    f574:	88f1      	ldrh	r1, [r6, #6]
    f576:	4620      	mov	r0, r4
    f578:	f7ff f840 	bl	e5fc <lv_chart_inv_lines>
        if(ext->type & LV_CHART_TYPE_COLUMN) lv_chart_inv_cols(chart, ser->start_point);
    f57c:	7d3b      	ldrb	r3, [r7, #20]
    f57e:	0798      	lsls	r0, r3, #30
    f580:	d52d      	bpl.n	f5de <lv_chart_set_next+0xd6>
 * @param chart pointer to chart object
 * @param mask mask, inherited from the design function
 */
static void lv_chart_inv_cols(lv_obj_t * chart, uint16_t i)
{
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    f582:	4620      	mov	r0, r4
    f584:	f8b6 9006 	ldrh.w	r9, [r6, #6]
    f588:	f7fc fa62 	bl	ba50 <lv_obj_get_ext_attr>
    f58c:	4680      	mov	r8, r0

    lv_area_t col_a;
    lv_coord_t w     = lv_obj_get_width(chart);
    f58e:	4620      	mov	r0, r4
    f590:	f7fb fb14 	bl	abbc <lv_obj_get_width>
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
    f594:	f898 5036 	ldrb.w	r5, [r8, #54]	; 0x36
    lv_coord_t w     = lv_obj_get_width(chart);
    f598:	4603      	mov	r3, r0
    lv_coord_t col_w = w / ((ext->series.num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
    f59a:	f8b8 0012 	ldrh.w	r0, [r8, #18]
    f59e:	fb05 0500 	mla	r5, r5, r0, r0
    f5a2:	fb93 f8f5 	sdiv	r8, r3, r5
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/

    lv_coord_t x_act;

    x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
    f5a6:	fb03 f509 	mul.w	r5, r3, r9
    x_act += chart->coords.x1 + x_ofs;
    f5aa:	8a23      	ldrh	r3, [r4, #16]
    x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
    f5ac:	fb95 f5f0 	sdiv	r5, r5, r0
    x_act += chart->coords.x1 + x_ofs;
    f5b0:	441d      	add	r5, r3
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
    f5b2:	f3c8 33c0 	ubfx	r3, r8, #15, #1
    f5b6:	fa03 f388 	sxtah	r3, r3, r8
    x_act += chart->coords.x1 + x_ofs;
    f5ba:	eb05 0563 	add.w	r5, r5, r3, asr #1

    lv_obj_get_coords(chart, &col_a);
    f5be:	4669      	mov	r1, sp
    x_act += chart->coords.x1 + x_ofs;
    f5c0:	b2ad      	uxth	r5, r5
    lv_obj_get_coords(chart, &col_a);
    f5c2:	4620      	mov	r0, r4
    f5c4:	f7fb fab4 	bl	ab30 <lv_obj_get_coords>
    col_a.x1 = x_act;
    f5c8:	f8ad 5000 	strh.w	r5, [sp]
    col_a.x2 = col_a.x1 + col_w;

    lv_inv_area(lv_obj_get_disp(chart), &col_a);
    f5cc:	4620      	mov	r0, r4
    col_a.x2 = col_a.x1 + col_w;
    f5ce:	4445      	add	r5, r8
    f5d0:	f8ad 5004 	strh.w	r5, [sp, #4]
    lv_inv_area(lv_obj_get_disp(chart), &col_a);
    f5d4:	f7fb fa6c 	bl	aab0 <lv_obj_get_disp>
    f5d8:	4669      	mov	r1, sp
    f5da:	f7fa fea0 	bl	a31e <lv_inv_area>
        if(ext->type & LV_CHART_TYPE_POINT) lv_chart_inv_points(chart, ser->start_point);
    f5de:	7d3b      	ldrb	r3, [r7, #20]
    f5e0:	0759      	lsls	r1, r3, #29
    f5e2:	d525      	bpl.n	f630 <lv_chart_set_next+0x128>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    f5e4:	4620      	mov	r0, r4
    f5e6:	88f5      	ldrh	r5, [r6, #6]
    f5e8:	f7fc fa32 	bl	ba50 <lv_obj_get_ext_attr>
    f5ec:	4680      	mov	r8, r0
    lv_coord_t w     = lv_obj_get_width(chart);
    f5ee:	4620      	mov	r0, r4
    f5f0:	f7fb fae4 	bl	abbc <lv_obj_get_width>
    lv_obj_get_coords(chart, &cir_a);
    f5f4:	4669      	mov	r1, sp
    lv_coord_t w     = lv_obj_get_width(chart);
    f5f6:	4682      	mov	sl, r0
    lv_obj_get_coords(chart, &cir_a);
    f5f8:	4620      	mov	r0, r4
    lv_coord_t x_ofs = chart->coords.x1;
    f5fa:	f9b4 9010 	ldrsh.w	r9, [r4, #16]
    lv_obj_get_coords(chart, &cir_a);
    f5fe:	f7fb fa97 	bl	ab30 <lv_obj_get_coords>
    cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    f602:	fb05 f30a 	mul.w	r3, r5, sl
    f606:	f8b8 5012 	ldrh.w	r5, [r8, #18]
    cir_a.x2 = cir_a.x1 + ext->series.width;
    f60a:	f8b8 2034 	ldrh.w	r2, [r8, #52]	; 0x34
    cir_a.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
    f60e:	3d01      	subs	r5, #1
    f610:	fb93 f3f5 	sdiv	r3, r3, r5
    f614:	444b      	add	r3, r9
    cir_a.x2 = cir_a.x1 + ext->series.width;
    f616:	fa12 f183 	uxtah	r1, r2, r3
    lv_inv_area(lv_obj_get_disp(chart), &cir_a);
    f61a:	4620      	mov	r0, r4
    cir_a.x1 -= ext->series.width;
    f61c:	1a9b      	subs	r3, r3, r2
    cir_a.x2 = cir_a.x1 + ext->series.width;
    f61e:	f8ad 1004 	strh.w	r1, [sp, #4]
    cir_a.x1 -= ext->series.width;
    f622:	f8ad 3000 	strh.w	r3, [sp]
    lv_inv_area(lv_obj_get_disp(chart), &cir_a);
    f626:	f7fb fa43 	bl	aab0 <lv_obj_get_disp>
    f62a:	4669      	mov	r1, sp
    f62c:	f7fa fe77 	bl	a31e <lv_inv_area>
        if(ext->type & LV_CHART_TYPE_VERTICAL_LINE) lv_chart_inv_lines(chart, ser->start_point);
    f630:	7d3b      	ldrb	r3, [r7, #20]
    f632:	071a      	lsls	r2, r3, #28
    f634:	d503      	bpl.n	f63e <lv_chart_set_next+0x136>
    f636:	88f1      	ldrh	r1, [r6, #6]
    f638:	4620      	mov	r0, r4
    f63a:	f7fe ffdf 	bl	e5fc <lv_chart_inv_lines>
        if(ext->type & LV_CHART_TYPE_AREA) lv_chart_inv_lines(chart, ser->start_point);
    f63e:	7d3b      	ldrb	r3, [r7, #20]
    f640:	06db      	lsls	r3, r3, #27
    f642:	d503      	bpl.n	f64c <lv_chart_set_next+0x144>
    f644:	88f1      	ldrh	r1, [r6, #6]
    f646:	4620      	mov	r0, r4
    f648:	f7fe ffd8 	bl	e5fc <lv_chart_inv_lines>
        ser->start_point = (ser->start_point + 1) % ext->point_cnt; /*update the x for next incoming y*/
    f64c:	88f3      	ldrh	r3, [r6, #6]
    f64e:	8a79      	ldrh	r1, [r7, #18]
    f650:	3301      	adds	r3, #1
    f652:	fbb3 f2f1 	udiv	r2, r3, r1
    f656:	fb01 3312 	mls	r3, r1, r2, r3
    f65a:	80f3      	strh	r3, [r6, #6]
}
    f65c:	e784      	b.n	f568 <lv_chart_set_next+0x60>
    f65e:	bf00      	nop
    f660:	0001de08 	.word	0x0001de08

0000f664 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
    f664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f668:	b088      	sub	sp, #32
    f66a:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
    f66c:	f7fc f9f0 	bl	ba50 <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
    f670:	7803      	ldrb	r3, [r0, #0]
    f672:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
    f676:	4680      	mov	r8, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
    f678:	d103      	bne.n	f682 <lv_cont_refr_autofit+0x1e>
    f67a:	7843      	ldrb	r3, [r0, #1]
    f67c:	0719      	lsls	r1, r3, #28
    f67e:	f000 80de 	beq.w	f83e <lv_cont_refr_autofit+0x1da>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
    f682:	4620      	mov	r0, r4
    f684:	f7fb fac8 	bl	ac18 <lv_obj_get_style>
    f688:	4682      	mov	sl, r0
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
    f68a:	4620      	mov	r0, r4
    f68c:	f7fb f9f4 	bl	aa78 <lv_obj_get_parent>
    f690:	4681      	mov	r9, r0
    const lv_style_t * par_style = lv_obj_get_style(par);
    f692:	f7fb fac1 	bl	ac18 <lv_obj_get_style>
    f696:	4605      	mov	r5, r0
    memcpy(dest, src, sizeof(lv_area_t));
    f698:	2208      	movs	r2, #8
    f69a:	f109 0110 	add.w	r1, r9, #16
    f69e:	a804      	add	r0, sp, #16
    f6a0:	f004 fe08 	bl	142b4 <memcpy>
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
    flood_area.x1 += par_style->body.padding.left;
    f6a4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f6a8:	8b6a      	ldrh	r2, [r5, #26]
    f6aa:	4413      	add	r3, r2
    f6ac:	f8ad 3010 	strh.w	r3, [sp, #16]
    flood_area.x2 -= par_style->body.padding.right;
    f6b0:	8baa      	ldrh	r2, [r5, #28]
    f6b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    f6b6:	1a9b      	subs	r3, r3, r2
    f6b8:	f8ad 3014 	strh.w	r3, [sp, #20]
    flood_area.y1 += par_style->body.padding.top;
    f6bc:	8aea      	ldrh	r2, [r5, #22]
    f6be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    f6c2:	4413      	add	r3, r2
    f6c4:	f8ad 3012 	strh.w	r3, [sp, #18]
    flood_area.y2 -= par_style->body.padding.bottom;
    f6c8:	8b2a      	ldrh	r2, [r5, #24]
    f6ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
    f6ce:	a902      	add	r1, sp, #8
    flood_area.y2 -= par_style->body.padding.bottom;
    f6d0:	1a9b      	subs	r3, r3, r2
    lv_obj_get_coords(cont, &ori);
    f6d2:	4620      	mov	r0, r4
    flood_area.y2 -= par_style->body.padding.bottom;
    f6d4:	f8ad 3016 	strh.w	r3, [sp, #22]
    lv_obj_get_coords(cont, &tight_area);

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
    f6d8:	1d27      	adds	r7, r4, #4
    lv_obj_get_coords(cont, &ori);
    f6da:	f7fb fa29 	bl	ab30 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
    f6de:	4669      	mov	r1, sp
    f6e0:	4620      	mov	r0, r4
    f6e2:	f7fb fa25 	bl	ab30 <lv_obj_get_coords>
    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
    f6e6:	4638      	mov	r0, r7
    f6e8:	f7f3 fffb 	bl	36e2 <lv_ll_is_empty>
    f6ec:	f080 0001 	eor.w	r0, r0, #1

    if(has_children) {
    f6f0:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    f6f4:	d026      	beq.n	f744 <lv_cont_refr_autofit+0xe0>
        tight_area.x1 = LV_COORD_MAX;
        tight_area.y1 = LV_COORD_MAX;
        tight_area.x2 = LV_COORD_MIN;
    f6f6:	4a8b      	ldr	r2, [pc, #556]	; (f924 <lv_cont_refr_autofit+0x2c0>)
    f6f8:	4b8b      	ldr	r3, [pc, #556]	; (f928 <lv_cont_refr_autofit+0x2c4>)
        tight_area.y2 = LV_COORD_MIN;

        LV_LL_READ(cont->child_ll, child_i)
    f6fa:	4638      	mov	r0, r7
        tight_area.x2 = LV_COORD_MIN;
    f6fc:	e9cd 2300 	strd	r2, r3, [sp]
        LV_LL_READ(cont->child_ll, child_i)
    f700:	f7f3 fee5 	bl	34ce <lv_ll_get_head>
    f704:	4605      	mov	r5, r0
    f706:	2800      	cmp	r0, #0
    f708:	f040 809c 	bne.w	f844 <lv_cont_refr_autofit+0x1e0>
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
        }

        tight_area.x1 -= style->body.padding.left;
    f70c:	f8bd 3000 	ldrh.w	r3, [sp]
    f710:	f8ba 201a 	ldrh.w	r2, [sl, #26]
    f714:	1a9b      	subs	r3, r3, r2
    f716:	f8ad 3000 	strh.w	r3, [sp]
        tight_area.x2 += style->body.padding.right;
    f71a:	f8ba 201c 	ldrh.w	r2, [sl, #28]
    f71e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    f722:	4413      	add	r3, r2
    f724:	f8ad 3004 	strh.w	r3, [sp, #4]
        tight_area.y1 -= style->body.padding.top;
    f728:	f8ba 2016 	ldrh.w	r2, [sl, #22]
    f72c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f730:	1a9b      	subs	r3, r3, r2
    f732:	f8ad 3002 	strh.w	r3, [sp, #2]
        tight_area.y2 += style->body.padding.bottom;
    f736:	f8ba 2018 	ldrh.w	r2, [sl, #24]
    f73a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f73e:	4413      	add	r3, r2
    f740:	f8ad 3006 	strh.w	r3, [sp, #6]
    f744:	2208      	movs	r2, #8
    f746:	eb0d 0102 	add.w	r1, sp, r2
    f74a:	a806      	add	r0, sp, #24
    f74c:	f004 fdb2 	bl	142b4 <memcpy>
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);

    switch(ext->fit_left) {
    f750:	f898 3000 	ldrb.w	r3, [r8]
    f754:	f3c3 1201 	ubfx	r2, r3, #4, #2
    f758:	2a02      	cmp	r2, #2
    f75a:	f000 80a0 	beq.w	f89e <lv_cont_refr_autofit+0x23a>
    f75e:	2a03      	cmp	r2, #3
    f760:	f000 80a0 	beq.w	f8a4 <lv_cont_refr_autofit+0x240>
    f764:	2a01      	cmp	r2, #1
    f766:	d103      	bne.n	f770 <lv_cont_refr_autofit+0x10c>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
    f768:	f8bd 2000 	ldrh.w	r2, [sp]
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
    f76c:	f8ad 2018 	strh.w	r2, [sp, #24]
        default: break;
    }

    switch(ext->fit_right) {
    f770:	099b      	lsrs	r3, r3, #6
    f772:	2b02      	cmp	r3, #2
    f774:	f000 80a1 	beq.w	f8ba <lv_cont_refr_autofit+0x256>
    f778:	2b03      	cmp	r3, #3
    f77a:	f000 80a1 	beq.w	f8c0 <lv_cont_refr_autofit+0x25c>
    f77e:	2b01      	cmp	r3, #1
    f780:	d103      	bne.n	f78a <lv_cont_refr_autofit+0x126>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
    f782:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
    f786:	f8ad 301c 	strh.w	r3, [sp, #28]
        default: break;
    }

    switch(ext->fit_top) {
    f78a:	f898 3001 	ldrb.w	r3, [r8, #1]
    f78e:	f003 0203 	and.w	r2, r3, #3
    f792:	2a02      	cmp	r2, #2
    f794:	f000 809f 	beq.w	f8d6 <lv_cont_refr_autofit+0x272>
    f798:	2a03      	cmp	r2, #3
    f79a:	f000 809f 	beq.w	f8dc <lv_cont_refr_autofit+0x278>
    f79e:	2a01      	cmp	r2, #1
    f7a0:	d103      	bne.n	f7aa <lv_cont_refr_autofit+0x146>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
    f7a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
    f7a6:	f8ad 201a 	strh.w	r2, [sp, #26]
        default: break;
    }

    switch(ext->fit_bottom) {
    f7aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
    f7ae:	2b02      	cmp	r3, #2
    f7b0:	f000 809f 	beq.w	f8f2 <lv_cont_refr_autofit+0x28e>
    f7b4:	2b03      	cmp	r3, #3
    f7b6:	f000 809f 	beq.w	f8f8 <lv_cont_refr_autofit+0x294>
    f7ba:	2b01      	cmp	r3, #1
    f7bc:	d103      	bne.n	f7c6 <lv_cont_refr_autofit+0x162>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
    f7be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
    f7c2:	f8ad 301e 	strh.w	r3, [sp, #30]
        default: break;
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
    f7c6:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
    f7ca:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    f7ce:	429a      	cmp	r2, r3
    f7d0:	d111      	bne.n	f7f6 <lv_cont_refr_autofit+0x192>
    f7d2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
    f7d6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    f7da:	429a      	cmp	r2, r3
    f7dc:	d10b      	bne.n	f7f6 <lv_cont_refr_autofit+0x192>
    f7de:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    f7e2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
    f7e6:	429a      	cmp	r2, r3
    f7e8:	d105      	bne.n	f7f6 <lv_cont_refr_autofit+0x192>
    f7ea:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    f7ee:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
    f7f2:	429a      	cmp	r2, r3
    f7f4:	d023      	beq.n	f83e <lv_cont_refr_autofit+0x1da>
       cont->coords.y2 != new_area.y2) {

        lv_obj_invalidate(cont);
    f7f6:	4620      	mov	r0, r4
    f7f8:	f7fb fa4e 	bl	ac98 <lv_obj_invalidate>
    f7fc:	2208      	movs	r2, #8
    f7fe:	a906      	add	r1, sp, #24
    f800:	f104 0010 	add.w	r0, r4, #16
    f804:	f004 fd56 	bl	142b4 <memcpy>
        lv_area_copy(&cont->coords, &new_area);
        lv_obj_invalidate(cont);
    f808:	4620      	mov	r0, r4
    f80a:	f7fb fa45 	bl	ac98 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
    f80e:	69e3      	ldr	r3, [r4, #28]
    f810:	aa02      	add	r2, sp, #8
    f812:	2102      	movs	r1, #2
    f814:	4620      	mov	r0, r4
    f816:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
    f818:	f8d9 301c 	ldr.w	r3, [r9, #28]
    f81c:	4622      	mov	r2, r4
    f81e:	2101      	movs	r1, #1
    f820:	4648      	mov	r0, r9
    f822:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
    f824:	4620      	mov	r0, r4
    f826:	f7fb f9e5 	bl	abf4 <lv_obj_get_auto_realign>
    f82a:	b110      	cbz	r0, f832 <lv_cont_refr_autofit+0x1ce>
            lv_obj_realign(cont);
    f82c:	4620      	mov	r0, r4
    f82e:	f7fb fd3d 	bl	b2ac <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
    f832:	4638      	mov	r0, r7
    f834:	f7f3 fe4b 	bl	34ce <lv_ll_get_head>
    f838:	4604      	mov	r4, r0
    f83a:	2800      	cmp	r0, #0
    f83c:	d167      	bne.n	f90e <lv_cont_refr_autofit+0x2aa>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
        }
    }
}
    f83e:	b008      	add	sp, #32
    f840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if(lv_obj_get_hidden(child_i) != false) continue;
    f844:	4628      	mov	r0, r5
    f846:	f7fb fa19 	bl	ac7c <lv_obj_get_hidden>
    f84a:	bb18      	cbnz	r0, f894 <lv_cont_refr_autofit+0x230>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
    f84c:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
    f850:	f9bd 2000 	ldrsh.w	r2, [sp]
    f854:	4293      	cmp	r3, r2
    f856:	bfa8      	it	ge
    f858:	4613      	movge	r3, r2
    f85a:	f8ad 3000 	strh.w	r3, [sp]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
    f85e:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
    f862:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    f866:	4293      	cmp	r3, r2
    f868:	bfa8      	it	ge
    f86a:	4613      	movge	r3, r2
    f86c:	f8ad 3002 	strh.w	r3, [sp, #2]
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
    f870:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
    f874:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
    f878:	4293      	cmp	r3, r2
    f87a:	bfb8      	it	lt
    f87c:	4613      	movlt	r3, r2
    f87e:	f8ad 3004 	strh.w	r3, [sp, #4]
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
    f882:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
    f886:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
    f88a:	4293      	cmp	r3, r2
    f88c:	bfb8      	it	lt
    f88e:	4613      	movlt	r3, r2
    f890:	f8ad 3006 	strh.w	r3, [sp, #6]
        LV_LL_READ(cont->child_ll, child_i)
    f894:	4629      	mov	r1, r5
    f896:	4638      	mov	r0, r7
    f898:	f7f3 fe1f 	bl	34da <lv_ll_get_next>
    f89c:	e732      	b.n	f704 <lv_cont_refr_autofit+0xa0>
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
    f89e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    f8a2:	e763      	b.n	f76c <lv_cont_refr_autofit+0x108>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
    f8a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    f8a8:	2e00      	cmp	r6, #0
    f8aa:	f43f af5f 	beq.w	f76c <lv_cont_refr_autofit+0x108>
    f8ae:	f9bd 1000 	ldrsh.w	r1, [sp]
    f8b2:	428a      	cmp	r2, r1
    f8b4:	bfa8      	it	ge
    f8b6:	460a      	movge	r2, r1
    f8b8:	e758      	b.n	f76c <lv_cont_refr_autofit+0x108>
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
    f8ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    f8be:	e762      	b.n	f786 <lv_cont_refr_autofit+0x122>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
    f8c0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    f8c4:	2e00      	cmp	r6, #0
    f8c6:	f43f af5e 	beq.w	f786 <lv_cont_refr_autofit+0x122>
    f8ca:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
    f8ce:	4293      	cmp	r3, r2
    f8d0:	bfb8      	it	lt
    f8d2:	4613      	movlt	r3, r2
    f8d4:	e757      	b.n	f786 <lv_cont_refr_autofit+0x122>
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
    f8d6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    f8da:	e764      	b.n	f7a6 <lv_cont_refr_autofit+0x142>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
    f8dc:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
    f8e0:	2e00      	cmp	r6, #0
    f8e2:	f43f af60 	beq.w	f7a6 <lv_cont_refr_autofit+0x142>
    f8e6:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
    f8ea:	428a      	cmp	r2, r1
    f8ec:	bfa8      	it	ge
    f8ee:	460a      	movge	r2, r1
    f8f0:	e759      	b.n	f7a6 <lv_cont_refr_autofit+0x142>
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
    f8f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    f8f6:	e764      	b.n	f7c2 <lv_cont_refr_autofit+0x15e>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
    f8f8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
    f8fc:	2e00      	cmp	r6, #0
    f8fe:	f43f af60 	beq.w	f7c2 <lv_cont_refr_autofit+0x15e>
    f902:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
    f906:	4293      	cmp	r3, r2
    f908:	bfb8      	it	lt
    f90a:	4613      	movlt	r3, r2
    f90c:	e759      	b.n	f7c2 <lv_cont_refr_autofit+0x15e>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
    f90e:	69e3      	ldr	r3, [r4, #28]
    f910:	2200      	movs	r2, #0
    f912:	2103      	movs	r1, #3
    f914:	4620      	mov	r0, r4
    f916:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
    f918:	4621      	mov	r1, r4
    f91a:	4638      	mov	r0, r7
    f91c:	f7f3 fddd 	bl	34da <lv_ll_get_next>
    f920:	e78a      	b.n	f838 <lv_cont_refr_autofit+0x1d4>
    f922:	bf00      	nop
    f924:	7c187c18 	.word	0x7c187c18
    f928:	83e883e8 	.word	0x83e883e8

0000f92c <lv_cont_create>:
{
    f92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f92e:	460e      	mov	r6, r1
    f930:	4607      	mov	r7, r0
    lv_obj_t * new_cont = lv_obj_create(par, copy);
    f932:	f7fb fdd1 	bl	b4d8 <lv_obj_create>
    f936:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_cont);
    f938:	f7fa fef2 	bl	a720 <lv_debug_check_null>
    f93c:	4603      	mov	r3, r0
    f93e:	b920      	cbnz	r0, f94a <lv_cont_create+0x1e>
    f940:	482f      	ldr	r0, [pc, #188]	; (fa00 <lv_cont_create+0xd4>)
    f942:	462a      	mov	r2, r5
    f944:	f7fa fefc 	bl	a740 <lv_debug_log_error>
    f948:	e7fe      	b.n	f948 <lv_cont_create+0x1c>
    if(new_cont == NULL) return NULL;
    f94a:	b915      	cbnz	r5, f952 <lv_cont_create+0x26>
    f94c:	2500      	movs	r5, #0
}
    f94e:	4628      	mov	r0, r5
    f950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
    f952:	4c2c      	ldr	r4, [pc, #176]	; (fa04 <lv_cont_create+0xd8>)
    f954:	6823      	ldr	r3, [r4, #0]
    f956:	b91b      	cbnz	r3, f960 <lv_cont_create+0x34>
    f958:	4628      	mov	r0, r5
    f95a:	f7fc f859 	bl	ba10 <lv_obj_get_signal_cb>
    f95e:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
    f960:	2102      	movs	r1, #2
    f962:	4628      	mov	r0, r5
    f964:	f7fb f872 	bl	aa4c <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
    f968:	4628      	mov	r0, r5
    f96a:	f7fc f871 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
    f96e:	4604      	mov	r4, r0
    f970:	2800      	cmp	r0, #0
    f972:	d0eb      	beq.n	f94c <lv_cont_create+0x20>
    LV_ASSERT_MEM(ext);
    f974:	f7fa fed4 	bl	a720 <lv_debug_check_null>
    f978:	4603      	mov	r3, r0
    f97a:	b920      	cbnz	r0, f986 <lv_cont_create+0x5a>
    f97c:	4820      	ldr	r0, [pc, #128]	; (fa00 <lv_cont_create+0xd4>)
    f97e:	4622      	mov	r2, r4
    f980:	f7fa fede 	bl	a740 <lv_debug_log_error>
    f984:	e7fe      	b.n	f984 <lv_cont_create+0x58>
    ext->layout     = LV_LAYOUT_OFF;
    f986:	2300      	movs	r3, #0
    f988:	7023      	strb	r3, [r4, #0]
    ext->fit_top    = LV_FIT_NONE;
    f98a:	7863      	ldrb	r3, [r4, #1]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
    f98c:	491e      	ldr	r1, [pc, #120]	; (fa08 <lv_cont_create+0xdc>)
    ext->fit_top    = LV_FIT_NONE;
    f98e:	f023 030f 	bic.w	r3, r3, #15
    f992:	7063      	strb	r3, [r4, #1]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
    f994:	4628      	mov	r0, r5
    f996:	f7fb f839 	bl	aa0c <lv_obj_set_signal_cb>
    if(copy == NULL) {
    f99a:	b95e      	cbnz	r6, f9b4 <lv_cont_create+0x88>
        if(par != NULL) {
    f99c:	2f00      	cmp	r7, #0
    f99e:	d0d6      	beq.n	f94e <lv_cont_create+0x22>
            lv_theme_t * th = lv_theme_get_current();
    f9a0:	f7f9 fadc 	bl	8f5c <lv_theme_get_current>
            if(th) {
    f9a4:	b120      	cbz	r0, f9b0 <lv_cont_create+0x84>
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
    f9a6:	68c1      	ldr	r1, [r0, #12]
    f9a8:	4628      	mov	r0, r5
    f9aa:	f7fb fd15 	bl	b3d8 <lv_obj_set_style>
}
    f9ae:	e7ce      	b.n	f94e <lv_cont_create+0x22>
    lv_obj_set_style(cont, style);
    f9b0:	4916      	ldr	r1, [pc, #88]	; (fa0c <lv_cont_create+0xe0>)
    f9b2:	e7f9      	b.n	f9a8 <lv_cont_create+0x7c>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
    f9b4:	4630      	mov	r0, r6
    f9b6:	f7fc f84b 	bl	ba50 <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
    f9ba:	7803      	ldrb	r3, [r0, #0]
    f9bc:	7822      	ldrb	r2, [r4, #0]
    f9be:	f3c3 1301 	ubfx	r3, r3, #4, #2
    f9c2:	f363 1205 	bfi	r2, r3, #4, #2
    f9c6:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
    f9c8:	7803      	ldrb	r3, [r0, #0]
    f9ca:	b2d2      	uxtb	r2, r2
    f9cc:	099b      	lsrs	r3, r3, #6
    f9ce:	f363 1287 	bfi	r2, r3, #6, #2
    f9d2:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
    f9d4:	7842      	ldrb	r2, [r0, #1]
    f9d6:	7863      	ldrb	r3, [r4, #1]
    f9d8:	f362 0301 	bfi	r3, r2, #0, #2
    f9dc:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
    f9de:	7843      	ldrb	r3, [r0, #1]
    f9e0:	7862      	ldrb	r2, [r4, #1]
    f9e2:	f3c3 0381 	ubfx	r3, r3, #2, #2
    f9e6:	f363 0283 	bfi	r2, r3, #2, #2
    f9ea:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
    f9ec:	7802      	ldrb	r2, [r0, #0]
    f9ee:	7823      	ldrb	r3, [r4, #0]
    f9f0:	f362 0303 	bfi	r3, r2, #0, #4
    f9f4:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
    f9f6:	4628      	mov	r0, r5
    f9f8:	f7fb fcba 	bl	b370 <lv_obj_refresh_style>
    f9fc:	e7a7      	b.n	f94e <lv_cont_create+0x22>
    f9fe:	bf00      	nop
    fa00:	0001a9b8 	.word	0x0001a9b8
    fa04:	20005e80 	.word	0x20005e80
    fa08:	000100ad 	.word	0x000100ad
    fa0c:	2000607c 	.word	0x2000607c

0000fa10 <lv_cont_set_layout>:
{
    fa10:	b570      	push	{r4, r5, r6, lr}
    fa12:	4604      	mov	r4, r0
    fa14:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
    fa16:	f7fa fe83 	bl	a720 <lv_debug_check_null>
    fa1a:	4603      	mov	r3, r0
    fa1c:	b920      	cbnz	r0, fa28 <lv_cont_set_layout+0x18>
    fa1e:	480c      	ldr	r0, [pc, #48]	; (fa50 <lv_cont_set_layout+0x40>)
    fa20:	4622      	mov	r2, r4
    fa22:	f7fa fe8d 	bl	a740 <lv_debug_log_error>
    fa26:	e7fe      	b.n	fa26 <lv_cont_set_layout+0x16>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
    fa28:	4620      	mov	r0, r4
    fa2a:	f7fc f811 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
    fa2e:	7803      	ldrb	r3, [r0, #0]
    fa30:	f003 020f 	and.w	r2, r3, #15
    fa34:	42aa      	cmp	r2, r5
    fa36:	d009      	beq.n	fa4c <lv_cont_set_layout+0x3c>
    ext->layout = layout;
    fa38:	f365 0303 	bfi	r3, r5, #0, #4
    fa3c:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
    fa3e:	2200      	movs	r2, #0
    fa40:	69e3      	ldr	r3, [r4, #28]
    fa42:	4620      	mov	r0, r4
    fa44:	2101      	movs	r1, #1
}
    fa46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
    fa4a:	4718      	bx	r3
}
    fa4c:	bd70      	pop	{r4, r5, r6, pc}
    fa4e:	bf00      	nop
    fa50:	0001de08 	.word	0x0001de08

0000fa54 <lv_cont_set_fit4>:
{
    fa54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa58:	461e      	mov	r6, r3
    fa5a:	f89d 7018 	ldrb.w	r7, [sp, #24]
    fa5e:	4605      	mov	r5, r0
    fa60:	460c      	mov	r4, r1
    fa62:	4690      	mov	r8, r2
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
    fa64:	f7fa fe5c 	bl	a720 <lv_debug_check_null>
    fa68:	4603      	mov	r3, r0
    fa6a:	b920      	cbnz	r0, fa76 <lv_cont_set_fit4+0x22>
    fa6c:	481c      	ldr	r0, [pc, #112]	; (fae0 <lv_cont_set_fit4+0x8c>)
    fa6e:	462a      	mov	r2, r5
    fa70:	f7fa fe66 	bl	a740 <lv_debug_log_error>
    fa74:	e7fe      	b.n	fa74 <lv_cont_set_fit4+0x20>
    lv_obj_invalidate(cont);
    fa76:	4628      	mov	r0, r5
    fa78:	f7fb f90e 	bl	ac98 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
    fa7c:	4628      	mov	r0, r5
    fa7e:	f7fb ffe7 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
    fa82:	7803      	ldrb	r3, [r0, #0]
    fa84:	f3c3 1201 	ubfx	r2, r3, #4, #2
    fa88:	42a2      	cmp	r2, r4
    fa8a:	d10b      	bne.n	faa4 <lv_cont_set_fit4+0x50>
    fa8c:	ebb8 1f93 	cmp.w	r8, r3, lsr #6
    fa90:	d108      	bne.n	faa4 <lv_cont_set_fit4+0x50>
    fa92:	7843      	ldrb	r3, [r0, #1]
    fa94:	f003 0203 	and.w	r2, r3, #3
    fa98:	42b2      	cmp	r2, r6
    fa9a:	d103      	bne.n	faa4 <lv_cont_set_fit4+0x50>
    fa9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
    faa0:	42bb      	cmp	r3, r7
    faa2:	d01b      	beq.n	fadc <lv_cont_set_fit4+0x88>
    ext->fit_left   = left;
    faa4:	0124      	lsls	r4, r4, #4
    faa6:	f004 0430 	and.w	r4, r4, #48	; 0x30
    faaa:	ea44 1288 	orr.w	r2, r4, r8, lsl #6
    faae:	7804      	ldrb	r4, [r0, #0]
    fab0:	f004 040f 	and.w	r4, r4, #15
    fab4:	4322      	orrs	r2, r4
    fab6:	7002      	strb	r2, [r0, #0]
    ext->fit_top    = top;
    fab8:	00ba      	lsls	r2, r7, #2
    faba:	f002 020c 	and.w	r2, r2, #12
    fabe:	f006 0303 	and.w	r3, r6, #3
    fac2:	4313      	orrs	r3, r2
    fac4:	7842      	ldrb	r2, [r0, #1]
    fac6:	f022 020f 	bic.w	r2, r2, #15
    faca:	4313      	orrs	r3, r2
    facc:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
    face:	2200      	movs	r2, #0
    fad0:	69eb      	ldr	r3, [r5, #28]
    fad2:	4628      	mov	r0, r5
    fad4:	2101      	movs	r1, #1
}
    fad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
    fada:	4718      	bx	r3
}
    fadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fae0:	0001de08 	.word	0x0001de08

0000fae4 <lv_cont_get_layout>:
{
    fae4:	b507      	push	{r0, r1, r2, lr}
    fae6:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
    fae8:	f7fa fe1a 	bl	a720 <lv_debug_check_null>
    faec:	9a01      	ldr	r2, [sp, #4]
    faee:	4603      	mov	r3, r0
    faf0:	b918      	cbnz	r0, fafa <lv_cont_get_layout+0x16>
    faf2:	4806      	ldr	r0, [pc, #24]	; (fb0c <lv_cont_get_layout+0x28>)
    faf4:	f7fa fe24 	bl	a740 <lv_debug_log_error>
    faf8:	e7fe      	b.n	faf8 <lv_cont_get_layout+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
    fafa:	4610      	mov	r0, r2
    fafc:	f7fb ffa8 	bl	ba50 <lv_obj_get_ext_attr>
    return ext->layout;
    fb00:	7800      	ldrb	r0, [r0, #0]
}
    fb02:	f000 000f 	and.w	r0, r0, #15
    fb06:	b003      	add	sp, #12
    fb08:	f85d fb04 	ldr.w	pc, [sp], #4
    fb0c:	0001de08 	.word	0x0001de08

0000fb10 <lv_cont_refr_layout>:
{
    fb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb14:	b087      	sub	sp, #28
    fb16:	4604      	mov	r4, r0
    lv_layout_t type = lv_cont_get_layout(cont);
    fb18:	f7ff ffe4 	bl	fae4 <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
    fb1c:	2100      	movs	r1, #0
    lv_layout_t type = lv_cont_get_layout(cont);
    fb1e:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
    fb20:	4620      	mov	r0, r4
    fb22:	f7fa fff1 	bl	ab08 <lv_obj_get_child>
    fb26:	2800      	cmp	r0, #0
    fb28:	f000 82bc 	beq.w	100a4 <lv_cont_refr_layout+0x594>
    if(type == LV_LAYOUT_OFF) return;
    fb2c:	2d00      	cmp	r5, #0
    fb2e:	f000 82b9 	beq.w	100a4 <lv_cont_refr_layout+0x594>
    if(type == LV_LAYOUT_CENTER) {
    fb32:	2d01      	cmp	r5, #1
    fb34:	d16c      	bne.n	fc10 <lv_cont_refr_layout+0x100>
    const lv_style_t * style = lv_obj_get_style(cont);
    fb36:	4620      	mov	r0, r4
    fb38:	f7fb f86e 	bl	ac18 <lv_obj_get_style>
    LV_LL_READ(cont->child_ll, child)
    fb3c:	1d27      	adds	r7, r4, #4
    const lv_style_t * style = lv_obj_get_style(cont);
    fb3e:	4606      	mov	r6, r0
    LV_LL_READ(cont->child_ll, child)
    fb40:	4638      	mov	r0, r7
    fb42:	f7f3 fcc4 	bl	34ce <lv_ll_get_head>
    lv_coord_t h_tot         = 0;
    fb46:	2500      	movs	r5, #0
    LV_LL_READ(cont->child_ll, child)
    fb48:	4680      	mov	r8, r0
    uint32_t obj_num         = 0;
    fb4a:	46a9      	mov	r9, r5
    LV_LL_READ(cont->child_ll, child)
    fb4c:	f1b8 0f00 	cmp.w	r8, #0
    fb50:	d11c      	bne.n	fb8c <lv_cont_refr_layout+0x7c>
    if(obj_num == 0) return;
    fb52:	f1b9 0f00 	cmp.w	r9, #0
    fb56:	f000 82a5 	beq.w	100a4 <lv_cont_refr_layout+0x594>
    h_tot -= style->body.padding.inner;
    fb5a:	8bf3      	ldrh	r3, [r6, #30]
    fb5c:	1aed      	subs	r5, r5, r3
    fb5e:	b2ad      	uxth	r5, r5
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
    fb60:	4620      	mov	r0, r4
    fb62:	2101      	movs	r1, #1
    fb64:	f7fa fea6 	bl	a8b4 <lv_obj_set_protect>
    lv_coord_t last_cord = -(h_tot / 2);
    fb68:	0beb      	lsrs	r3, r5, #15
    fb6a:	fa03 f585 	sxtah	r5, r3, r5
    fb6e:	106d      	asrs	r5, r5, #1
    fb70:	426d      	negs	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
    fb72:	4638      	mov	r0, r7
    lv_coord_t last_cord = -(h_tot / 2);
    fb74:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
    fb76:	f7f3 fcad 	bl	34d4 <lv_ll_get_tail>
    fb7a:	4680      	mov	r8, r0
    fb7c:	b9f8      	cbnz	r0, fbbe <lv_cont_refr_layout+0xae>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
    fb7e:	2101      	movs	r1, #1
    fb80:	4620      	mov	r0, r4
}
    fb82:	b007      	add	sp, #28
    fb84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
    fb88:	f7fa bea8 	b.w	a8dc <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
    fb8c:	4640      	mov	r0, r8
    fb8e:	f7fb f875 	bl	ac7c <lv_obj_get_hidden>
    fb92:	b970      	cbnz	r0, fbb2 <lv_cont_refr_layout+0xa2>
    fb94:	2104      	movs	r1, #4
    fb96:	4640      	mov	r0, r8
    fb98:	f7fb ff29 	bl	b9ee <lv_obj_is_protected>
    fb9c:	b948      	cbnz	r0, fbb2 <lv_cont_refr_layout+0xa2>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
    fb9e:	4640      	mov	r0, r8
    fba0:	f7fb f81a 	bl	abd8 <lv_obj_get_height>
    fba4:	f9b6 301e 	ldrsh.w	r3, [r6, #30]
    fba8:	4418      	add	r0, r3
    fbaa:	4405      	add	r5, r0
    fbac:	b22d      	sxth	r5, r5
        obj_num++;
    fbae:	f109 0901 	add.w	r9, r9, #1
    LV_LL_READ(cont->child_ll, child)
    fbb2:	4641      	mov	r1, r8
    fbb4:	4638      	mov	r0, r7
    fbb6:	f7f3 fc90 	bl	34da <lv_ll_get_next>
    fbba:	4680      	mov	r8, r0
    fbbc:	e7c6      	b.n	fb4c <lv_cont_refr_layout+0x3c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
    fbbe:	4640      	mov	r0, r8
    fbc0:	f7fb f85c 	bl	ac7c <lv_obj_get_hidden>
    fbc4:	b9f8      	cbnz	r0, fc06 <lv_cont_refr_layout+0xf6>
    fbc6:	2104      	movs	r1, #4
    fbc8:	4640      	mov	r0, r8
    fbca:	f7fb ff10 	bl	b9ee <lv_obj_is_protected>
    fbce:	4682      	mov	sl, r0
    fbd0:	b9c8      	cbnz	r0, fc06 <lv_cont_refr_layout+0xf6>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
    fbd2:	4640      	mov	r0, r8
    fbd4:	f7fb f800 	bl	abd8 <lv_obj_get_height>
    fbd8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    fbdc:	1042      	asrs	r2, r0, #1
    fbde:	fa1f f985 	uxth.w	r9, r5
    fbe2:	fa12 f585 	uxtah	r5, r2, r5
    fbe6:	b22d      	sxth	r5, r5
    fbe8:	4653      	mov	r3, sl
    fbea:	9500      	str	r5, [sp, #0]
    fbec:	4652      	mov	r2, sl
    fbee:	4621      	mov	r1, r4
    fbf0:	4640      	mov	r0, r8
    fbf2:	f7fb f95b 	bl	aeac <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
    fbf6:	4640      	mov	r0, r8
    fbf8:	f7fa ffee 	bl	abd8 <lv_obj_get_height>
    fbfc:	f9b6 301e 	ldrsh.w	r3, [r6, #30]
    fc00:	181d      	adds	r5, r3, r0
    fc02:	444d      	add	r5, r9
    fc04:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
    fc06:	4641      	mov	r1, r8
    fc08:	4638      	mov	r0, r7
    fc0a:	f7f3 fc76 	bl	34fa <lv_ll_get_prev>
    fc0e:	e7b4      	b.n	fb7a <lv_cont_refr_layout+0x6a>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
    fc10:	1eab      	subs	r3, r5, #2
    fc12:	b2db      	uxtb	r3, r3
    fc14:	2b02      	cmp	r3, #2
    fc16:	d84a      	bhi.n	fcae <lv_cont_refr_layout+0x19e>
    lv_layout_t type = lv_cont_get_layout(cont);
    fc18:	4620      	mov	r0, r4
    fc1a:	f7ff ff63 	bl	fae4 <lv_cont_get_layout>
    fc1e:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
    fc20:	4620      	mov	r0, r4
    fc22:	f7fa fff9 	bl	ac18 <lv_obj_get_style>
    switch(type) {
    fc26:	2d03      	cmp	r5, #3
    const lv_style_t * style = lv_obj_get_style(cont);
    fc28:	4607      	mov	r7, r0
    switch(type) {
    fc2a:	d03a      	beq.n	fca2 <lv_cont_refr_layout+0x192>
    fc2c:	2d04      	cmp	r5, #4
    fc2e:	d006      	beq.n	fc3e <lv_cont_refr_layout+0x12e>
    fc30:	2d02      	cmp	r5, #2
    fc32:	d13a      	bne.n	fcaa <lv_cont_refr_layout+0x19a>
            hpad_corr = style->body.padding.left;
    fc34:	f9b0 601a 	ldrsh.w	r6, [r0, #26]
    switch(type) {
    fc38:	f04f 0801 	mov.w	r8, #1
    fc3c:	e004      	b.n	fc48 <lv_cont_refr_layout+0x138>
            hpad_corr = -style->body.padding.right;
    fc3e:	8b86      	ldrh	r6, [r0, #28]
    fc40:	4276      	negs	r6, r6
    fc42:	b236      	sxth	r6, r6
            align     = LV_ALIGN_IN_TOP_RIGHT;
    fc44:	f04f 0803 	mov.w	r8, #3
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
    fc48:	4620      	mov	r0, r4
    fc4a:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
    fc4c:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
    fc50:	f7fa fe30 	bl	a8b4 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
    fc54:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.top;
    fc56:	f9b7 a016 	ldrsh.w	sl, [r7, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
    fc5a:	f7f3 fc3b 	bl	34d4 <lv_ll_get_tail>
    fc5e:	4605      	mov	r5, r0
    fc60:	2800      	cmp	r0, #0
    fc62:	d08c      	beq.n	fb7e <lv_cont_refr_layout+0x6e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
    fc64:	4628      	mov	r0, r5
    fc66:	f7fb f809 	bl	ac7c <lv_obj_get_hidden>
    fc6a:	b9a8      	cbnz	r0, fc98 <lv_cont_refr_layout+0x188>
    fc6c:	2104      	movs	r1, #4
    fc6e:	4628      	mov	r0, r5
    fc70:	f7fb febd 	bl	b9ee <lv_obj_is_protected>
    fc74:	b980      	cbnz	r0, fc98 <lv_cont_refr_layout+0x188>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
    fc76:	4633      	mov	r3, r6
    fc78:	f8cd a000 	str.w	sl, [sp]
    fc7c:	4642      	mov	r2, r8
    fc7e:	4621      	mov	r1, r4
    fc80:	4628      	mov	r0, r5
    fc82:	f7fb f913 	bl	aeac <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
    fc86:	4628      	mov	r0, r5
    fc88:	f7fa ffa6 	bl	abd8 <lv_obj_get_height>
    fc8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    fc90:	4418      	add	r0, r3
    fc92:	4450      	add	r0, sl
    fc94:	fa0f fa80 	sxth.w	sl, r0
    LV_LL_READ_BACK(cont->child_ll, child)
    fc98:	4629      	mov	r1, r5
    fc9a:	4648      	mov	r0, r9
    fc9c:	f7f3 fc2d 	bl	34fa <lv_ll_get_prev>
    fca0:	e7dd      	b.n	fc5e <lv_cont_refr_layout+0x14e>
            hpad_corr = 0;
    fca2:	2600      	movs	r6, #0
            align     = LV_ALIGN_IN_TOP_MID;
    fca4:	f04f 0802 	mov.w	r8, #2
    fca8:	e7ce      	b.n	fc48 <lv_cont_refr_layout+0x138>
    switch(type) {
    fcaa:	2600      	movs	r6, #0
    fcac:	e7c4      	b.n	fc38 <lv_cont_refr_layout+0x128>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
    fcae:	1f6b      	subs	r3, r5, #5
    fcb0:	b2db      	uxtb	r3, r3
    fcb2:	2b02      	cmp	r3, #2
    fcb4:	d86c      	bhi.n	fd90 <lv_cont_refr_layout+0x280>
    lv_layout_t type = lv_cont_get_layout(cont);
    fcb6:	4620      	mov	r0, r4
    fcb8:	f7ff ff14 	bl	fae4 <lv_cont_get_layout>
    fcbc:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
    fcbe:	4620      	mov	r0, r4
    fcc0:	f7fa ffaa 	bl	ac18 <lv_obj_get_style>
    fcc4:	4680      	mov	r8, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
    fcc6:	4620      	mov	r0, r4
    fcc8:	f7fb fe25 	bl	b916 <lv_obj_get_base_dir>
    switch(type) {
    fccc:	2d06      	cmp	r5, #6
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
    fcce:	4607      	mov	r7, r0
    switch(type) {
    fcd0:	d00c      	beq.n	fcec <lv_cont_refr_layout+0x1dc>
    fcd2:	2d07      	cmp	r5, #7
    fcd4:	d04e      	beq.n	fd74 <lv_cont_refr_layout+0x264>
    fcd6:	2d05      	cmp	r5, #5
    fcd8:	d158      	bne.n	fd8c <lv_cont_refr_layout+0x27c>
            vpad_corr = style->body.padding.top;
    fcda:	f9b8 6016 	ldrsh.w	r6, [r8, #22]
            vpad_corr = 0;
    fcde:	2f01      	cmp	r7, #1
    fce0:	bf0c      	ite	eq
    fce2:	f04f 0903 	moveq.w	r9, #3
    fce6:	f04f 0901 	movne.w	r9, #1
    fcea:	e007      	b.n	fcfc <lv_cont_refr_layout+0x1ec>
            vpad_corr = 0;
    fcec:	2801      	cmp	r0, #1
    fcee:	f04f 0600 	mov.w	r6, #0
    fcf2:	bf0c      	ite	eq
    fcf4:	f04f 0908 	moveq.w	r9, #8
    fcf8:	f04f 0907 	movne.w	r9, #7
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
    fcfc:	4620      	mov	r0, r4
    fcfe:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
    fd00:	f104 0b04 	add.w	fp, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
    fd04:	f7fa fdd6 	bl	a8b4 <lv_obj_set_protect>
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = style->body.padding.right;
    fd08:	2f01      	cmp	r7, #1
    LV_LL_READ_BACK(cont->child_ll, child)
    fd0a:	4658      	mov	r0, fp
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = style->body.padding.right;
    fd0c:	bf0c      	ite	eq
    fd0e:	f9b8 a01c 	ldrsheq.w	sl, [r8, #28]
    else last_cord = style->body.padding.left;
    fd12:	f9b8 a01a 	ldrshne.w	sl, [r8, #26]
    LV_LL_READ_BACK(cont->child_ll, child)
    fd16:	f7f3 fbdd 	bl	34d4 <lv_ll_get_tail>
    fd1a:	4605      	mov	r5, r0
    fd1c:	2800      	cmp	r0, #0
    fd1e:	f43f af2e 	beq.w	fb7e <lv_cont_refr_layout+0x6e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
    fd22:	4628      	mov	r0, r5
    fd24:	f7fa ffaa 	bl	ac7c <lv_obj_get_hidden>
    fd28:	b9f8      	cbnz	r0, fd6a <lv_cont_refr_layout+0x25a>
    fd2a:	2104      	movs	r1, #4
    fd2c:	4628      	mov	r0, r5
    fd2e:	f7fb fe5e 	bl	b9ee <lv_obj_is_protected>
    fd32:	b9d0      	cbnz	r0, fd6a <lv_cont_refr_layout+0x25a>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
    fd34:	fa1f f38a 	uxth.w	r3, sl
    fd38:	2f01      	cmp	r7, #1
    fd3a:	9303      	str	r3, [sp, #12]
    fd3c:	bf09      	itett	eq
    fd3e:	425b      	negeq	r3, r3
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
    fd40:	4653      	movne	r3, sl
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
    fd42:	b21b      	sxtheq	r3, r3
    fd44:	9600      	streq	r6, [sp, #0]
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
    fd46:	bf18      	it	ne
    fd48:	9600      	strne	r6, [sp, #0]
    fd4a:	464a      	mov	r2, r9
    fd4c:	4621      	mov	r1, r4
    fd4e:	4628      	mov	r0, r5
    fd50:	f7fb f8ac 	bl	aeac <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
    fd54:	4628      	mov	r0, r5
    fd56:	f7fa ff31 	bl	abbc <lv_obj_get_width>
    fd5a:	f9b8 301e 	ldrsh.w	r3, [r8, #30]
    fd5e:	eb03 0a00 	add.w	sl, r3, r0
    fd62:	9b03      	ldr	r3, [sp, #12]
    fd64:	4453      	add	r3, sl
    fd66:	fa0f fa83 	sxth.w	sl, r3
    LV_LL_READ_BACK(cont->child_ll, child)
    fd6a:	4629      	mov	r1, r5
    fd6c:	4658      	mov	r0, fp
    fd6e:	f7f3 fbc4 	bl	34fa <lv_ll_get_prev>
    fd72:	e7d2      	b.n	fd1a <lv_cont_refr_layout+0x20a>
            vpad_corr = -style->body.padding.bottom;
    fd74:	f8b8 6018 	ldrh.w	r6, [r8, #24]
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT: LV_ALIGN_IN_BOTTOM_LEFT;
    fd78:	2801      	cmp	r0, #1
            vpad_corr = -style->body.padding.bottom;
    fd7a:	f1c6 0600 	rsb	r6, r6, #0
    fd7e:	b236      	sxth	r6, r6
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT: LV_ALIGN_IN_BOTTOM_LEFT;
    fd80:	bf0c      	ite	eq
    fd82:	f04f 0906 	moveq.w	r9, #6
    fd86:	f04f 0904 	movne.w	r9, #4
    fd8a:	e7b7      	b.n	fcfc <lv_cont_refr_layout+0x1ec>
            vpad_corr = 0;
    fd8c:	2600      	movs	r6, #0
    fd8e:	e7a6      	b.n	fcde <lv_cont_refr_layout+0x1ce>
    } else if(type == LV_LAYOUT_PRETTY) {
    fd90:	2d08      	cmp	r5, #8
    fd92:	f040 80ec 	bne.w	ff6e <lv_cont_refr_layout+0x45e>
    const lv_style_t * style = lv_obj_get_style(cont);
    fd96:	4620      	mov	r0, r4
    fd98:	f7fa ff3e 	bl	ac18 <lv_obj_get_style>
    fd9c:	9003      	str	r0, [sp, #12]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
    fd9e:	4620      	mov	r0, r4
    fda0:	f7fa ff0c 	bl	abbc <lv_obj_get_width>
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
    fda4:	f104 0b04 	add.w	fp, r4, #4
    lv_coord_t act_y         = style->body.padding.top;
    fda8:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
    fdaa:	9004      	str	r0, [sp, #16]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
    fdac:	4658      	mov	r0, fp
    lv_coord_t act_y         = style->body.padding.top;
    fdae:	f9b3 a016 	ldrsh.w	sl, [r3, #22]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
    fdb2:	f7f3 fb8f 	bl	34d4 <lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
    fdb6:	4605      	mov	r5, r0
    fdb8:	2800      	cmp	r0, #0
    fdba:	f000 8173 	beq.w	100a4 <lv_cont_refr_layout+0x594>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
    fdbe:	2101      	movs	r1, #1
    fdc0:	4620      	mov	r0, r4
    fdc2:	f7fa fd77 	bl	a8b4 <lv_obj_set_protect>
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
    fdc6:	9b03      	ldr	r3, [sp, #12]
    fdc8:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    fdcc:	8b9b      	ldrh	r3, [r3, #28]
        uint32_t obj_num = 0;
    fdce:	2700      	movs	r7, #0
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
    fdd0:	4499      	add	r9, r3
        lv_coord_t w_row =
    fdd2:	fa0f f989 	sxth.w	r9, r9
    fdd6:	462e      	mov	r6, r5
        lv_coord_t h_row = 0;
    fdd8:	46b8      	mov	r8, r7
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
    fdda:	4628      	mov	r0, r5
    fddc:	f7fa ff4e 	bl	ac7c <lv_obj_get_hidden>
    fde0:	2800      	cmp	r0, #0
    fde2:	d13c      	bne.n	fe5e <lv_cont_refr_layout+0x34e>
    fde4:	2104      	movs	r1, #4
    fde6:	4628      	mov	r0, r5
    fde8:	f7fb fe01 	bl	b9ee <lv_obj_is_protected>
    fdec:	bbb8      	cbnz	r0, fe5e <lv_cont_refr_layout+0x34e>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
    fdee:	4628      	mov	r0, r5
    fdf0:	f7fa fee4 	bl	abbc <lv_obj_get_width>
    fdf4:	9b04      	ldr	r3, [sp, #16]
    fdf6:	4448      	add	r0, r9
    fdf8:	4298      	cmp	r0, r3
    fdfa:	dd15      	ble.n	fe28 <lv_cont_refr_layout+0x318>
                    if(child_rc != NULL && obj_num != 0) {
    fdfc:	2f00      	cmp	r7, #0
    fdfe:	f000 8131 	beq.w	10064 <lv_cont_refr_layout+0x554>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
    fe02:	4629      	mov	r1, r5
    fe04:	4658      	mov	r0, fp
    fe06:	f7f3 fb68 	bl	34da <lv_ll_get_next>
    fe0a:	4605      	mov	r5, r0
        else if(obj_num == 1) {
    fe0c:	2f01      	cmp	r7, #1
    fe0e:	d131      	bne.n	fe74 <lv_cont_refr_layout+0x364>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
    fe10:	f8cd a000 	str.w	sl, [sp]
    fe14:	2300      	movs	r3, #0
    fe16:	2202      	movs	r2, #2
    fe18:	4621      	mov	r1, r4
    fe1a:	4630      	mov	r0, r6
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
    fe1c:	f7fb f846 	bl	aeac <lv_obj_align>
        if(child_rc == NULL) break;
    fe20:	2d00      	cmp	r5, #0
    fe22:	f040 812b 	bne.w	1007c <lv_cont_refr_layout+0x56c>
    fe26:	e6aa      	b.n	fb7e <lv_cont_refr_layout+0x6e>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
    fe28:	4628      	mov	r0, r5
    fe2a:	f7fa fec7 	bl	abbc <lv_obj_get_width>
    fe2e:	9b03      	ldr	r3, [sp, #12]
    fe30:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
    fe34:	4418      	add	r0, r3
    fe36:	4481      	add	r9, r0
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
    fe38:	4628      	mov	r0, r5
    fe3a:	f7fa fecd 	bl	abd8 <lv_obj_get_height>
    fe3e:	4540      	cmp	r0, r8
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
    fe40:	fa0f f989 	sxth.w	r9, r9
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
    fe44:	db03      	blt.n	fe4e <lv_cont_refr_layout+0x33e>
    fe46:	4628      	mov	r0, r5
    fe48:	f7fa fec6 	bl	abd8 <lv_obj_get_height>
    fe4c:	4680      	mov	r8, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
    fe4e:	2108      	movs	r1, #8
    fe50:	4628      	mov	r0, r5
                obj_num++;
    fe52:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
    fe54:	f7fb fdcb 	bl	b9ee <lv_obj_is_protected>
    fe58:	2800      	cmp	r0, #0
    fe5a:	f040 8100 	bne.w	1005e <lv_cont_refr_layout+0x54e>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
    fe5e:	4629      	mov	r1, r5
    fe60:	4658      	mov	r0, fp
    fe62:	f7f3 fb4a 	bl	34fa <lv_ll_get_prev>
    fe66:	4605      	mov	r5, r0
            if(obj_num == 0)
    fe68:	2f00      	cmp	r7, #0
    fe6a:	f000 8116 	beq.w	1009a <lv_cont_refr_layout+0x58a>
        } while(child_rc != NULL);
    fe6e:	2800      	cmp	r0, #0
    fe70:	d1b3      	bne.n	fdda <lv_cont_refr_layout+0x2ca>
    fe72:	e7cb      	b.n	fe0c <lv_cont_refr_layout+0x2fc>
        else if(obj_num == 2) {
    fe74:	2f02      	cmp	r7, #2
    fe76:	d13b      	bne.n	fef0 <lv_cont_refr_layout+0x3e0>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
    fe78:	4631      	mov	r1, r6
    fe7a:	4658      	mov	r0, fp
    fe7c:	f7f3 fb3d 	bl	34fa <lv_ll_get_prev>
    fe80:	4607      	mov	r7, r0
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
    fe82:	4630      	mov	r0, r6
    fe84:	f7fa fe9a 	bl	abbc <lv_obj_get_width>
    fe88:	4681      	mov	r9, r0
    fe8a:	4638      	mov	r0, r7
    fe8c:	f7fa fe96 	bl	abbc <lv_obj_get_width>
            lv_coord_t pad  = (w_obj - w_row) / 3;
    fe90:	9a04      	ldr	r2, [sp, #16]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
    fe92:	4448      	add	r0, r9
            lv_coord_t pad  = (w_obj - w_row) / 3;
    fe94:	b203      	sxth	r3, r0
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
    fe96:	4630      	mov	r0, r6
            lv_coord_t pad  = (w_obj - w_row) / 3;
    fe98:	1ad3      	subs	r3, r2, r3
    fe9a:	f04f 0903 	mov.w	r9, #3
    fe9e:	fb93 f3f9 	sdiv	r3, r3, r9
    fea2:	9305      	str	r3, [sp, #20]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
    fea4:	f7fa fe98 	bl	abd8 <lv_obj_get_height>
    fea8:	eba8 0000 	sub.w	r0, r8, r0
    feac:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    feb0:	1040      	asrs	r0, r0, #1
    feb2:	fa10 f08a 	uxtah	r0, r0, sl
    feb6:	b200      	sxth	r0, r0
    feb8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    febc:	9000      	str	r0, [sp, #0]
    febe:	2201      	movs	r2, #1
    fec0:	4621      	mov	r1, r4
    fec2:	4630      	mov	r0, r6
    fec4:	f7fa fff2 	bl	aeac <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
    fec8:	4638      	mov	r0, r7
    feca:	f7fa fe85 	bl	abd8 <lv_obj_get_height>
    fece:	eba8 0000 	sub.w	r0, r8, r0
    fed2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    fed6:	9b05      	ldr	r3, [sp, #20]
    fed8:	fa1f f28a 	uxth.w	r2, sl
    fedc:	eb02 0260 	add.w	r2, r2, r0, asr #1
    fee0:	b212      	sxth	r2, r2
    fee2:	425b      	negs	r3, r3
    fee4:	9200      	str	r2, [sp, #0]
    fee6:	b21b      	sxth	r3, r3
    fee8:	464a      	mov	r2, r9
    feea:	4621      	mov	r1, r4
    feec:	4638      	mov	r0, r7
    feee:	e795      	b.n	fe1c <lv_cont_refr_layout+0x30c>
            w_row -= style->body.padding.inner * obj_num;
    fef0:	9b03      	ldr	r3, [sp, #12]
    fef2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
    fef6:	fb13 f307 	smulbb	r3, r3, r7
    fefa:	eba9 0903 	sub.w	r9, r9, r3
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
    fefe:	9b04      	ldr	r3, [sp, #16]
    ff00:	fa0f f989 	sxth.w	r9, r9
    ff04:	eba3 0909 	sub.w	r9, r3, r9
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
    ff08:	9b03      	ldr	r3, [sp, #12]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
    ff0a:	3f01      	subs	r7, #1
    ff0c:	fbb9 f9f7 	udiv	r9, r9, r7
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
    ff10:	f9b3 701a 	ldrsh.w	r7, [r3, #26]
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
    ff14:	fa0f f989 	sxth.w	r9, r9
            while(child_tmp != NULL) {
    ff18:	2e00      	cmp	r6, #0
    ff1a:	d081      	beq.n	fe20 <lv_cont_refr_layout+0x310>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
    ff1c:	4630      	mov	r0, r6
    ff1e:	f7fa fead 	bl	ac7c <lv_obj_get_hidden>
    ff22:	b9d8      	cbnz	r0, ff5c <lv_cont_refr_layout+0x44c>
    ff24:	2104      	movs	r1, #4
    ff26:	4630      	mov	r0, r6
    ff28:	f7fb fd61 	bl	b9ee <lv_obj_is_protected>
    ff2c:	b9b0      	cbnz	r0, ff5c <lv_cont_refr_layout+0x44c>
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
    ff2e:	4630      	mov	r0, r6
    ff30:	f7fa fe52 	bl	abd8 <lv_obj_get_height>
    ff34:	eba8 0000 	sub.w	r0, r8, r0
    ff38:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    ff3c:	eb0a 0060 	add.w	r0, sl, r0, asr #1
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
    ff40:	b200      	sxth	r0, r0
    ff42:	463b      	mov	r3, r7
    ff44:	9000      	str	r0, [sp, #0]
    ff46:	2201      	movs	r2, #1
    ff48:	4621      	mov	r1, r4
    ff4a:	4630      	mov	r0, r6
    ff4c:	f7fa ffae 	bl	aeac <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
    ff50:	4630      	mov	r0, r6
    ff52:	f7fa fe33 	bl	abbc <lv_obj_get_width>
    ff56:	4448      	add	r0, r9
    ff58:	4407      	add	r7, r0
    ff5a:	b23f      	sxth	r7, r7
                if(child_tmp == child_rc) break;
    ff5c:	42ae      	cmp	r6, r5
    ff5e:	f000 808d 	beq.w	1007c <lv_cont_refr_layout+0x56c>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
    ff62:	4631      	mov	r1, r6
    ff64:	4658      	mov	r0, fp
    ff66:	f7f3 fac8 	bl	34fa <lv_ll_get_prev>
    ff6a:	4606      	mov	r6, r0
    ff6c:	e7d4      	b.n	ff18 <lv_cont_refr_layout+0x408>
    } else if(type == LV_LAYOUT_GRID) {
    ff6e:	2d09      	cmp	r5, #9
    ff70:	f040 8098 	bne.w	100a4 <lv_cont_refr_layout+0x594>
    const lv_style_t * style = lv_obj_get_style(cont);
    ff74:	4620      	mov	r0, r4
    ff76:	f7fa fe4f 	bl	ac18 <lv_obj_get_style>
    ff7a:	4606      	mov	r6, r0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
    ff7c:	4620      	mov	r0, r4
    ff7e:	f7fa fe1d 	bl	abbc <lv_obj_get_width>
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
    ff82:	2100      	movs	r1, #0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
    ff84:	4681      	mov	r9, r0
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
    ff86:	4620      	mov	r0, r4
    ff88:	f7fa fdbe 	bl	ab08 <lv_obj_get_child>
    ff8c:	f7fa fe16 	bl	abbc <lv_obj_get_width>
    ff90:	4607      	mov	r7, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
    ff92:	4620      	mov	r0, r4
    ff94:	f7fa fe58 	bl	ac48 <lv_obj_get_width_fit>
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
    ff98:	2100      	movs	r1, #0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
    ff9a:	4605      	mov	r5, r0
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
    ff9c:	4620      	mov	r0, r4
    ff9e:	f7fa fdb3 	bl	ab08 <lv_obj_get_child>
    ffa2:	f7fa fe19 	bl	abd8 <lv_obj_get_height>
    uint16_t obj_row         = (w_fit) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
    ffa6:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
    ffaa:	19d3      	adds	r3, r2, r7
    ffac:	fb95 f3f3 	sdiv	r3, r5, r3
    ffb0:	b299      	uxth	r1, r3
    if(obj_row > 1) {
    ffb2:	2901      	cmp	r1, #1
    uint16_t obj_row         = (w_fit) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
    ffb4:	9103      	str	r1, [sp, #12]
    if(obj_row > 1) {
    ffb6:	d945      	bls.n	10044 <lv_cont_refr_layout+0x534>
        x_ofs = w_obj + (w_fit - (obj_row * w_obj)) / (obj_row - 1);
    ffb8:	fb01 5517 	mls	r5, r1, r7, r5
    ffbc:	1e4b      	subs	r3, r1, #1
    ffbe:	fb95 f3f3 	sdiv	r3, r5, r3
    ffc2:	19dd      	adds	r5, r3, r7
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
    ffc4:	4410      	add	r0, r2
    ffc6:	b283      	uxth	r3, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
    ffc8:	2101      	movs	r1, #1
    ffca:	4620      	mov	r0, r4
    LV_LL_READ_BACK(cont->child_ll, child)
    ffcc:	f104 0b04 	add.w	fp, r4, #4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
    ffd0:	9304      	str	r3, [sp, #16]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
    ffd2:	f7fa fc6f 	bl	a8b4 <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
    ffd6:	4658      	mov	r0, fp
    lv_coord_t act_x = style->body.padding.left;
    ffd8:	f9b6 701a 	ldrsh.w	r7, [r6, #26]
    lv_coord_t act_y = style->body.padding.top;
    ffdc:	f9b6 8016 	ldrsh.w	r8, [r6, #22]
    LV_LL_READ_BACK(cont->child_ll, child)
    ffe0:	f7f3 fa78 	bl	34d4 <lv_ll_get_tail>
        x_ofs = w_tot / 2 - w_obj / 2;
    ffe4:	fa0f fa85 	sxth.w	sl, r5
    uint16_t obj_cnt = 0;
    ffe8:	f04f 0900 	mov.w	r9, #0
    LV_LL_READ_BACK(cont->child_ll, child)
    ffec:	4605      	mov	r5, r0
    ffee:	2d00      	cmp	r5, #0
    fff0:	f43f adc5 	beq.w	fb7e <lv_cont_refr_layout+0x6e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
    fff4:	4628      	mov	r0, r5
    fff6:	f7fa fe41 	bl	ac7c <lv_obj_get_hidden>
    fffa:	b9e8      	cbnz	r0, 10038 <lv_cont_refr_layout+0x528>
    fffc:	2104      	movs	r1, #4
    fffe:	4628      	mov	r0, r5
   10000:	f7fb fcf5 	bl	b9ee <lv_obj_is_protected>
   10004:	b9c0      	cbnz	r0, 10038 <lv_cont_refr_layout+0x528>
        if(obj_row > 1) {
   10006:	9b03      	ldr	r3, [sp, #12]
   10008:	2b01      	cmp	r3, #1
            lv_obj_set_pos(child, act_x, act_y);
   1000a:	4642      	mov	r2, r8
        if(obj_row > 1) {
   1000c:	d922      	bls.n	10054 <lv_cont_refr_layout+0x544>
            lv_obj_set_pos(child, act_x, act_y);
   1000e:	4639      	mov	r1, r7
   10010:	4628      	mov	r0, r5
   10012:	f7fa fecf 	bl	adb4 <lv_obj_set_pos>
            act_x += x_ofs;
   10016:	4457      	add	r7, sl
   10018:	b23f      	sxth	r7, r7
        if(obj_cnt >= obj_row) {
   1001a:	9b03      	ldr	r3, [sp, #12]
        obj_cnt++;
   1001c:	f109 0901 	add.w	r9, r9, #1
   10020:	fa1f f989 	uxth.w	r9, r9
        if(obj_cnt >= obj_row) {
   10024:	454b      	cmp	r3, r9
   10026:	d807      	bhi.n	10038 <lv_cont_refr_layout+0x528>
            act_y += y_ofs;
   10028:	9b04      	ldr	r3, [sp, #16]
            act_x   = style->body.padding.left;
   1002a:	f9b6 701a 	ldrsh.w	r7, [r6, #26]
            act_y += y_ofs;
   1002e:	4498      	add	r8, r3
   10030:	fa0f f888 	sxth.w	r8, r8
            obj_cnt = 0;
   10034:	f04f 0900 	mov.w	r9, #0
    LV_LL_READ_BACK(cont->child_ll, child)
   10038:	4629      	mov	r1, r5
   1003a:	4658      	mov	r0, fp
   1003c:	f7f3 fa5d 	bl	34fa <lv_ll_get_prev>
   10040:	4605      	mov	r5, r0
   10042:	e7d4      	b.n	ffee <lv_cont_refr_layout+0x4de>
        x_ofs = w_tot / 2 - w_obj / 2;
   10044:	eb07 75d7 	add.w	r5, r7, r7, lsr #31
   10048:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
   1004c:	106d      	asrs	r5, r5, #1
   1004e:	ebc5 0569 	rsb	r5, r5, r9, asr #1
   10052:	e7b7      	b.n	ffc4 <lv_cont_refr_layout+0x4b4>
            lv_obj_set_pos(child, x_ofs, act_y);
   10054:	4651      	mov	r1, sl
   10056:	4628      	mov	r0, r5
   10058:	f7fa feac 	bl	adb4 <lv_obj_set_pos>
   1005c:	e7dd      	b.n	1001a <lv_cont_refr_layout+0x50a>
        if(obj_num == 0) {
   1005e:	2f00      	cmp	r7, #0
   10060:	f47f aed4 	bne.w	fe0c <lv_cont_refr_layout+0x2fc>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
   10064:	2300      	movs	r3, #0
   10066:	2202      	movs	r2, #2
   10068:	4621      	mov	r1, r4
   1006a:	4628      	mov	r0, r5
   1006c:	f8cd a000 	str.w	sl, [sp]
   10070:	f7fa ff1c 	bl	aeac <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
   10074:	4628      	mov	r0, r5
   10076:	f7fa fdaf 	bl	abd8 <lv_obj_get_height>
   1007a:	4680      	mov	r8, r0
        act_y += style->body.padding.inner + h_row;           /*y increment*/
   1007c:	9b03      	ldr	r3, [sp, #12]
   1007e:	8bd8      	ldrh	r0, [r3, #30]
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
   10080:	4629      	mov	r1, r5
        act_y += style->body.padding.inner + h_row;           /*y increment*/
   10082:	4482      	add	sl, r0
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
   10084:	4658      	mov	r0, fp
   10086:	f7f3 fa38 	bl	34fa <lv_ll_get_prev>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
   1008a:	44d0      	add	r8, sl
   1008c:	fa0f fa88 	sxth.w	sl, r8
    while(child_rs != NULL) {
   10090:	4605      	mov	r5, r0
   10092:	2800      	cmp	r0, #0
   10094:	f47f ae97 	bne.w	fdc6 <lv_cont_refr_layout+0x2b6>
   10098:	e571      	b.n	fb7e <lv_cont_refr_layout+0x6e>
        } while(child_rc != NULL);
   1009a:	2800      	cmp	r0, #0
   1009c:	f43f ad6f 	beq.w	fb7e <lv_cont_refr_layout+0x6e>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
   100a0:	462e      	mov	r6, r5
   100a2:	e69a      	b.n	fdda <lv_cont_refr_layout+0x2ca>
}
   100a4:	b007      	add	sp, #28
   100a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000100ac <lv_cont_signal>:
{
   100ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
   100ae:	4b1b      	ldr	r3, [pc, #108]	; (1011c <lv_cont_signal+0x70>)
   100b0:	681b      	ldr	r3, [r3, #0]
{
   100b2:	4604      	mov	r4, r0
   100b4:	460d      	mov	r5, r1
   100b6:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
   100b8:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
   100ba:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
   100bc:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
   100be:	d128      	bne.n	10112 <lv_cont_signal+0x66>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   100c0:	2d07      	cmp	r5, #7
   100c2:	d105      	bne.n	100d0 <lv_cont_signal+0x24>
   100c4:	4630      	mov	r0, r6
   100c6:	4916      	ldr	r1, [pc, #88]	; (10120 <lv_cont_signal+0x74>)
}
   100c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   100cc:	f7fb bcd0 	b.w	ba70 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
   100d0:	2d04      	cmp	r5, #4
   100d2:	d106      	bne.n	100e2 <lv_cont_signal+0x36>
        lv_cont_refr_layout(cont);
   100d4:	4620      	mov	r0, r4
   100d6:	f7ff fd1b 	bl	fb10 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
   100da:	4620      	mov	r0, r4
   100dc:	f7ff fac2 	bl	f664 <lv_cont_refr_autofit>
   100e0:	e017      	b.n	10112 <lv_cont_signal+0x66>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
   100e2:	2d01      	cmp	r5, #1
   100e4:	d0f6      	beq.n	100d4 <lv_cont_signal+0x28>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
   100e6:	2d02      	cmp	r5, #2
   100e8:	d115      	bne.n	10116 <lv_cont_signal+0x6a>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
   100ea:	4620      	mov	r0, r4
   100ec:	f7fa fd66 	bl	abbc <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   100f0:	88b3      	ldrh	r3, [r6, #4]
   100f2:	8832      	ldrh	r2, [r6, #0]
   100f4:	3301      	adds	r3, #1
   100f6:	1a9b      	subs	r3, r3, r2
   100f8:	b21b      	sxth	r3, r3
   100fa:	4298      	cmp	r0, r3
   100fc:	d1ea      	bne.n	100d4 <lv_cont_signal+0x28>
   100fe:	4620      	mov	r0, r4
   10100:	f7fa fd6a 	bl	abd8 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10104:	88f3      	ldrh	r3, [r6, #6]
   10106:	8872      	ldrh	r2, [r6, #2]
   10108:	3301      	adds	r3, #1
   1010a:	1a9b      	subs	r3, r3, r2
   1010c:	b21b      	sxth	r3, r3
   1010e:	4298      	cmp	r0, r3
   10110:	d1e0      	bne.n	100d4 <lv_cont_signal+0x28>
}
   10112:	4638      	mov	r0, r7
   10114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
   10116:	2d03      	cmp	r5, #3
   10118:	d1fb      	bne.n	10112 <lv_cont_signal+0x66>
   1011a:	e7de      	b.n	100da <lv_cont_signal+0x2e>
   1011c:	20005e80 	.word	0x20005e80
   10120:	0001de75 	.word	0x0001de75

00010124 <lv_cont_get_fit_left>:
{
   10124:	b507      	push	{r0, r1, r2, lr}
   10126:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
   10128:	f7fa fafa 	bl	a720 <lv_debug_check_null>
   1012c:	9a01      	ldr	r2, [sp, #4]
   1012e:	4603      	mov	r3, r0
   10130:	b918      	cbnz	r0, 1013a <lv_cont_get_fit_left+0x16>
   10132:	4806      	ldr	r0, [pc, #24]	; (1014c <lv_cont_get_fit_left+0x28>)
   10134:	f7fa fb04 	bl	a740 <lv_debug_log_error>
   10138:	e7fe      	b.n	10138 <lv_cont_get_fit_left+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
   1013a:	4610      	mov	r0, r2
   1013c:	f7fb fc88 	bl	ba50 <lv_obj_get_ext_attr>
    return ext->fit_left;
   10140:	7800      	ldrb	r0, [r0, #0]
}
   10142:	f3c0 1001 	ubfx	r0, r0, #4, #2
   10146:	b003      	add	sp, #12
   10148:	f85d fb04 	ldr.w	pc, [sp], #4
   1014c:	0001de08 	.word	0x0001de08

00010150 <lv_cont_get_fit_right>:
{
   10150:	b507      	push	{r0, r1, r2, lr}
   10152:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
   10154:	f7fa fae4 	bl	a720 <lv_debug_check_null>
   10158:	9a01      	ldr	r2, [sp, #4]
   1015a:	4603      	mov	r3, r0
   1015c:	b918      	cbnz	r0, 10166 <lv_cont_get_fit_right+0x16>
   1015e:	4806      	ldr	r0, [pc, #24]	; (10178 <lv_cont_get_fit_right+0x28>)
   10160:	f7fa faee 	bl	a740 <lv_debug_log_error>
   10164:	e7fe      	b.n	10164 <lv_cont_get_fit_right+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
   10166:	4610      	mov	r0, r2
   10168:	f7fb fc72 	bl	ba50 <lv_obj_get_ext_attr>
    return ext->fit_right;
   1016c:	7800      	ldrb	r0, [r0, #0]
}
   1016e:	0980      	lsrs	r0, r0, #6
   10170:	b003      	add	sp, #12
   10172:	f85d fb04 	ldr.w	pc, [sp], #4
   10176:	bf00      	nop
   10178:	0001de08 	.word	0x0001de08

0001017c <lv_cont_get_fit_top>:
{
   1017c:	b507      	push	{r0, r1, r2, lr}
   1017e:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
   10180:	f7fa face 	bl	a720 <lv_debug_check_null>
   10184:	9a01      	ldr	r2, [sp, #4]
   10186:	4603      	mov	r3, r0
   10188:	b918      	cbnz	r0, 10192 <lv_cont_get_fit_top+0x16>
   1018a:	4806      	ldr	r0, [pc, #24]	; (101a4 <lv_cont_get_fit_top+0x28>)
   1018c:	f7fa fad8 	bl	a740 <lv_debug_log_error>
   10190:	e7fe      	b.n	10190 <lv_cont_get_fit_top+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
   10192:	4610      	mov	r0, r2
   10194:	f7fb fc5c 	bl	ba50 <lv_obj_get_ext_attr>
    return ext->fit_top;
   10198:	7840      	ldrb	r0, [r0, #1]
}
   1019a:	f000 0003 	and.w	r0, r0, #3
   1019e:	b003      	add	sp, #12
   101a0:	f85d fb04 	ldr.w	pc, [sp], #4
   101a4:	0001de08 	.word	0x0001de08

000101a8 <lv_cont_get_fit_bottom>:
{
   101a8:	b507      	push	{r0, r1, r2, lr}
   101aa:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
   101ac:	f7fa fab8 	bl	a720 <lv_debug_check_null>
   101b0:	9a01      	ldr	r2, [sp, #4]
   101b2:	4603      	mov	r3, r0
   101b4:	b918      	cbnz	r0, 101be <lv_cont_get_fit_bottom+0x16>
   101b6:	4806      	ldr	r0, [pc, #24]	; (101d0 <lv_cont_get_fit_bottom+0x28>)
   101b8:	f7fa fac2 	bl	a740 <lv_debug_log_error>
   101bc:	e7fe      	b.n	101bc <lv_cont_get_fit_bottom+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
   101be:	4610      	mov	r0, r2
   101c0:	f7fb fc46 	bl	ba50 <lv_obj_get_ext_attr>
    return ext->fit_bottom;
   101c4:	7840      	ldrb	r0, [r0, #1]
}
   101c6:	f3c0 0081 	ubfx	r0, r0, #2, #2
   101ca:	b003      	add	sp, #12
   101cc:	f85d fb04 	ldr.w	pc, [sp], #4
   101d0:	0001de08 	.word	0x0001de08

000101d4 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
   101d4:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   101d6:	f7fb fc3b 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   101da:	7c43      	ldrb	r3, [r0, #17]
   101dc:	079b      	lsls	r3, r3, #30
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   101de:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   101e0:	d503      	bpl.n	101ea <lv_label_dot_tmp_free+0x16>
   101e2:	6840      	ldr	r0, [r0, #4]
   101e4:	b108      	cbz	r0, 101ea <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
   101e6:	f7f3 f8a3 	bl	3330 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
   101ea:	7c63      	ldrb	r3, [r4, #17]
   101ec:	f36f 0341 	bfc	r3, #1, #1
   101f0:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
   101f2:	2300      	movs	r3, #0
   101f4:	6063      	str	r3, [r4, #4]
}
   101f6:	bd10      	pop	{r4, pc}

000101f8 <lv_label_revert_dots>:
{
   101f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101fa:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   101fc:	f7fb fc28 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   10200:	7c03      	ldrb	r3, [r0, #16]
   10202:	f003 0307 	and.w	r3, r3, #7
   10206:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10208:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   1020a:	d129      	bne.n	10260 <lv_label_revert_dots+0x68>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
   1020c:	8901      	ldrh	r1, [r0, #8]
   1020e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10212:	4299      	cmp	r1, r3
   10214:	d024      	beq.n	10260 <lv_label_revert_dots+0x68>
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
   10216:	4b14      	ldr	r3, [pc, #80]	; (10268 <lv_label_revert_dots+0x70>)
   10218:	6800      	ldr	r0, [r0, #0]
   1021a:	681b      	ldr	r3, [r3, #0]
   1021c:	3903      	subs	r1, #3
   1021e:	4798      	blx	r3
   10220:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10222:	4628      	mov	r0, r5
   10224:	f7fb fc14 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
   10228:	7c42      	ldrb	r2, [r0, #17]
   1022a:	0792      	lsls	r2, r2, #30
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1022c:	4603      	mov	r3, r0
        return ext->dot.tmp_ptr;
   1022e:	bf4c      	ite	mi
   10230:	6843      	ldrmi	r3, [r0, #4]
        return ext->dot.tmp;
   10232:	3304      	addpl	r3, #4
    while(ext->text[byte_i + i] != '\0') {
   10234:	2200      	movs	r2, #0
   10236:	fa57 f182 	uxtab	r1, r7, r2
   1023a:	6826      	ldr	r6, [r4, #0]
   1023c:	b2d0      	uxtb	r0, r2
   1023e:	f816 e001 	ldrb.w	lr, [r6, r1]
   10242:	5c18      	ldrb	r0, [r3, r0]
   10244:	eb06 0c01 	add.w	ip, r6, r1
   10248:	3201      	adds	r2, #1
   1024a:	f1be 0f00 	cmp.w	lr, #0
   1024e:	d108      	bne.n	10262 <lv_label_revert_dots+0x6a>
    ext->text[byte_i + i] = dot_tmp[i];
   10250:	f88c 0000 	strb.w	r0, [ip]
    lv_label_dot_tmp_free(label);
   10254:	4628      	mov	r0, r5
   10256:	f7ff ffbd 	bl	101d4 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
   1025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1025e:	8123      	strh	r3, [r4, #8]
}
   10260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->text[byte_i + i] = dot_tmp[i];
   10262:	5470      	strb	r0, [r6, r1]
        i++;
   10264:	e7e7      	b.n	10236 <lv_label_revert_dots+0x3e>
   10266:	bf00      	nop
   10268:	20000004 	.word	0x20000004

0001026c <lv_label_set_offset_y>:
{
   1026c:	b538      	push	{r3, r4, r5, lr}
   1026e:	4604      	mov	r4, r0
   10270:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10272:	f7fb fbed 	bl	ba50 <lv_obj_get_ext_attr>
    ext->offset.y        = y;
   10276:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
   10278:	4620      	mov	r0, r4
}
   1027a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
   1027e:	f7fa bd0b 	b.w	ac98 <lv_obj_invalidate>

00010282 <lv_label_set_offset_x>:
{
   10282:	b538      	push	{r3, r4, r5, lr}
   10284:	4604      	mov	r4, r0
   10286:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10288:	f7fb fbe2 	bl	ba50 <lv_obj_get_ext_attr>
    ext->offset.x        = x;
   1028c:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(label);
   1028e:	4620      	mov	r0, r4
}
   10290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
   10294:	f7fa bd00 	b.w	ac98 <lv_obj_invalidate>

00010298 <lv_label_set_dot_tmp>:
{
   10298:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1029a:	4615      	mov	r5, r2
   1029c:	9101      	str	r1, [sp, #4]
   1029e:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   102a0:	f7fb fbd6 	bl	ba50 <lv_obj_get_ext_attr>
   102a4:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
   102a6:	4630      	mov	r0, r6
   102a8:	f7ff ff94 	bl	101d4 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
   102ac:	2d04      	cmp	r5, #4
   102ae:	9901      	ldr	r1, [sp, #4]
   102b0:	d912      	bls.n	102d8 <lv_label_set_dot_tmp+0x40>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
   102b2:	1c68      	adds	r0, r5, #1
   102b4:	f7f3 f826 	bl	3304 <lv_mem_alloc>
   102b8:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
   102ba:	b158      	cbz	r0, 102d4 <lv_label_set_dot_tmp+0x3c>
        memcpy(ext->dot.tmp_ptr, data, len);
   102bc:	462a      	mov	r2, r5
   102be:	9901      	ldr	r1, [sp, #4]
   102c0:	f003 fff8 	bl	142b4 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
   102c4:	6863      	ldr	r3, [r4, #4]
   102c6:	2200      	movs	r2, #0
   102c8:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
   102ca:	7c63      	ldrb	r3, [r4, #17]
   102cc:	f043 0302 	orr.w	r3, r3, #2
   102d0:	7463      	strb	r3, [r4, #17]
    return true;
   102d2:	2001      	movs	r0, #1
}
   102d4:	b002      	add	sp, #8
   102d6:	bd70      	pop	{r4, r5, r6, pc}
        ext->dot_tmp_alloc = false;
   102d8:	7c63      	ldrb	r3, [r4, #17]
   102da:	f36f 0341 	bfc	r3, #1, #1
   102de:	7463      	strb	r3, [r4, #17]
        memcpy(ext->dot.tmp, data, len);
   102e0:	462a      	mov	r2, r5
   102e2:	1d20      	adds	r0, r4, #4
   102e4:	f003 ffe6 	bl	142b4 <memcpy>
   102e8:	e7f3      	b.n	102d2 <lv_label_set_dot_tmp+0x3a>
	...

000102ec <lv_label_set_align>:
{
   102ec:	b538      	push	{r3, r4, r5, lr}
   102ee:	4604      	mov	r4, r0
   102f0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   102f2:	f7fa fa15 	bl	a720 <lv_debug_check_null>
   102f6:	4603      	mov	r3, r0
   102f8:	b920      	cbnz	r0, 10304 <lv_label_set_align+0x18>
   102fa:	480b      	ldr	r0, [pc, #44]	; (10328 <lv_label_set_align+0x3c>)
   102fc:	4622      	mov	r2, r4
   102fe:	f7fa fa1f 	bl	a740 <lv_debug_log_error>
   10302:	e7fe      	b.n	10302 <lv_label_set_align+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10304:	4620      	mov	r0, r4
   10306:	f7fb fba3 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
   1030a:	7c03      	ldrb	r3, [r0, #16]
   1030c:	f3c3 1201 	ubfx	r2, r3, #4, #2
   10310:	42aa      	cmp	r2, r5
   10312:	d007      	beq.n	10324 <lv_label_set_align+0x38>
    ext->align = align;
   10314:	f365 1305 	bfi	r3, r5, #4, #2
   10318:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   1031a:	4620      	mov	r0, r4
}
   1031c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   10320:	f7fa bcba 	b.w	ac98 <lv_obj_invalidate>
}
   10324:	bd38      	pop	{r3, r4, r5, pc}
   10326:	bf00      	nop
   10328:	0001de08 	.word	0x0001de08

0001032c <lv_label_set_body_draw>:
{
   1032c:	b538      	push	{r3, r4, r5, lr}
   1032e:	4604      	mov	r4, r0
   10330:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10332:	f7fa f9f5 	bl	a720 <lv_debug_check_null>
   10336:	4603      	mov	r3, r0
   10338:	b920      	cbnz	r0, 10344 <lv_label_set_body_draw+0x18>
   1033a:	480c      	ldr	r0, [pc, #48]	; (1036c <lv_label_set_body_draw+0x40>)
   1033c:	4622      	mov	r2, r4
   1033e:	f7fa f9ff 	bl	a740 <lv_debug_log_error>
   10342:	e7fe      	b.n	10342 <lv_label_set_body_draw+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10344:	4620      	mov	r0, r4
   10346:	f7fb fb83 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
   1034a:	7c43      	ldrb	r3, [r0, #17]
   1034c:	f003 0201 	and.w	r2, r3, #1
   10350:	42aa      	cmp	r2, r5
   10352:	d00a      	beq.n	1036a <lv_label_set_body_draw+0x3e>
    ext->body_draw = en == false ? 0 : 1;
   10354:	f365 0300 	bfi	r3, r5, #0, #1
   10358:	7443      	strb	r3, [r0, #17]
    lv_obj_refresh_ext_draw_pad(label);
   1035a:	4620      	mov	r0, r4
   1035c:	f7fb f8a8 	bl	b4b0 <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
   10360:	4620      	mov	r0, r4
}
   10362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
   10366:	f7fa bc97 	b.w	ac98 <lv_obj_invalidate>
}
   1036a:	bd38      	pop	{r3, r4, r5, pc}
   1036c:	0001de08 	.word	0x0001de08

00010370 <lv_label_get_text>:
{
   10370:	b507      	push	{r0, r1, r2, lr}
   10372:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10374:	f7fa f9d4 	bl	a720 <lv_debug_check_null>
   10378:	9a01      	ldr	r2, [sp, #4]
   1037a:	4603      	mov	r3, r0
   1037c:	b918      	cbnz	r0, 10386 <lv_label_get_text+0x16>
   1037e:	4805      	ldr	r0, [pc, #20]	; (10394 <lv_label_get_text+0x24>)
   10380:	f7fa f9de 	bl	a740 <lv_debug_log_error>
   10384:	e7fe      	b.n	10384 <lv_label_get_text+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10386:	4610      	mov	r0, r2
   10388:	f7fb fb62 	bl	ba50 <lv_obj_get_ext_attr>
}
   1038c:	6800      	ldr	r0, [r0, #0]
   1038e:	b003      	add	sp, #12
   10390:	f85d fb04 	ldr.w	pc, [sp], #4
   10394:	0001de08 	.word	0x0001de08

00010398 <lv_label_get_long_mode>:
{
   10398:	b507      	push	{r0, r1, r2, lr}
   1039a:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1039c:	f7fa f9c0 	bl	a720 <lv_debug_check_null>
   103a0:	9a01      	ldr	r2, [sp, #4]
   103a2:	4603      	mov	r3, r0
   103a4:	b918      	cbnz	r0, 103ae <lv_label_get_long_mode+0x16>
   103a6:	4806      	ldr	r0, [pc, #24]	; (103c0 <lv_label_get_long_mode+0x28>)
   103a8:	f7fa f9ca 	bl	a740 <lv_debug_log_error>
   103ac:	e7fe      	b.n	103ac <lv_label_get_long_mode+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   103ae:	4610      	mov	r0, r2
   103b0:	f7fb fb4e 	bl	ba50 <lv_obj_get_ext_attr>
    return ext->long_mode;
   103b4:	7c00      	ldrb	r0, [r0, #16]
}
   103b6:	f000 0007 	and.w	r0, r0, #7
   103ba:	b003      	add	sp, #12
   103bc:	f85d fb04 	ldr.w	pc, [sp], #4
   103c0:	0001de08 	.word	0x0001de08

000103c4 <lv_label_get_align>:
{
   103c4:	b507      	push	{r0, r1, r2, lr}
   103c6:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   103c8:	f7fa f9aa 	bl	a720 <lv_debug_check_null>
   103cc:	9a01      	ldr	r2, [sp, #4]
   103ce:	4603      	mov	r3, r0
   103d0:	b918      	cbnz	r0, 103da <lv_label_get_align+0x16>
   103d2:	4808      	ldr	r0, [pc, #32]	; (103f4 <lv_label_get_align+0x30>)
   103d4:	f7fa f9b4 	bl	a740 <lv_debug_log_error>
   103d8:	e7fe      	b.n	103d8 <lv_label_get_align+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   103da:	4610      	mov	r0, r2
   103dc:	f7fb fb38 	bl	ba50 <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
   103e0:	7c00      	ldrb	r0, [r0, #16]
   103e2:	f3c0 1001 	ubfx	r0, r0, #4, #2
        align = LV_LABEL_ALIGN_LEFT;
   103e6:	2803      	cmp	r0, #3
}
   103e8:	bf08      	it	eq
   103ea:	2000      	moveq	r0, #0
   103ec:	b003      	add	sp, #12
   103ee:	f85d fb04 	ldr.w	pc, [sp], #4
   103f2:	bf00      	nop
   103f4:	0001de08 	.word	0x0001de08

000103f8 <lv_label_get_recolor>:
{
   103f8:	b507      	push	{r0, r1, r2, lr}
   103fa:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   103fc:	f7fa f990 	bl	a720 <lv_debug_check_null>
   10400:	9a01      	ldr	r2, [sp, #4]
   10402:	4603      	mov	r3, r0
   10404:	b918      	cbnz	r0, 1040e <lv_label_get_recolor+0x16>
   10406:	4806      	ldr	r0, [pc, #24]	; (10420 <lv_label_get_recolor+0x28>)
   10408:	f7fa f99a 	bl	a740 <lv_debug_log_error>
   1040c:	e7fe      	b.n	1040c <lv_label_get_recolor+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1040e:	4610      	mov	r0, r2
   10410:	f7fb fb1e 	bl	ba50 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
   10414:	7c00      	ldrb	r0, [r0, #16]
}
   10416:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1041a:	b003      	add	sp, #12
   1041c:	f85d fb04 	ldr.w	pc, [sp], #4
   10420:	0001de08 	.word	0x0001de08

00010424 <lv_label_get_body_draw>:
{
   10424:	b507      	push	{r0, r1, r2, lr}
   10426:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10428:	f7fa f97a 	bl	a720 <lv_debug_check_null>
   1042c:	9a01      	ldr	r2, [sp, #4]
   1042e:	4603      	mov	r3, r0
   10430:	b918      	cbnz	r0, 1043a <lv_label_get_body_draw+0x16>
   10432:	4806      	ldr	r0, [pc, #24]	; (1044c <lv_label_get_body_draw+0x28>)
   10434:	f7fa f984 	bl	a740 <lv_debug_log_error>
   10438:	e7fe      	b.n	10438 <lv_label_get_body_draw+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1043a:	4610      	mov	r0, r2
   1043c:	f7fb fb08 	bl	ba50 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
   10440:	7c40      	ldrb	r0, [r0, #17]
}
   10442:	f000 0001 	and.w	r0, r0, #1
   10446:	b003      	add	sp, #12
   10448:	f85d fb04 	ldr.w	pc, [sp], #4
   1044c:	0001de08 	.word	0x0001de08

00010450 <lv_label_get_letter_on>:
{
   10450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10454:	b08b      	sub	sp, #44	; 0x2c
   10456:	4607      	mov	r7, r0
   10458:	9105      	str	r1, [sp, #20]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1045a:	f7fa f961 	bl	a720 <lv_debug_check_null>
   1045e:	4603      	mov	r3, r0
   10460:	b920      	cbnz	r0, 1046c <lv_label_get_letter_on+0x1c>
   10462:	487b      	ldr	r0, [pc, #492]	; (10650 <lv_label_get_letter_on+0x200>)
   10464:	463a      	mov	r2, r7
   10466:	f7fa f96b 	bl	a740 <lv_debug_log_error>
   1046a:	e7fe      	b.n	1046a <lv_label_get_letter_on+0x1a>
    LV_ASSERT_NULL(pos);
   1046c:	9805      	ldr	r0, [sp, #20]
   1046e:	f7fa f957 	bl	a720 <lv_debug_check_null>
   10472:	4603      	mov	r3, r0
   10474:	b920      	cbnz	r0, 10480 <lv_label_get_letter_on+0x30>
   10476:	9a05      	ldr	r2, [sp, #20]
   10478:	4875      	ldr	r0, [pc, #468]	; (10650 <lv_label_get_letter_on+0x200>)
   1047a:	f7fa f961 	bl	a740 <lv_debug_log_error>
   1047e:	e7fe      	b.n	1047e <lv_label_get_letter_on+0x2e>
    const char * txt         = lv_label_get_text(label);
   10480:	4638      	mov	r0, r7
   10482:	f7ff ff75 	bl	10370 <lv_label_get_text>
   10486:	9004      	str	r0, [sp, #16]
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
   10488:	4638      	mov	r0, r7
   1048a:	f7fb fae1 	bl	ba50 <lv_obj_get_ext_attr>
   1048e:	4604      	mov	r4, r0
    lv_coord_t max_w         = lv_obj_get_width(label);
   10490:	4638      	mov	r0, r7
   10492:	f7fa fb93 	bl	abbc <lv_obj_get_width>
   10496:	9006      	str	r0, [sp, #24]
    const lv_style_t * style = lv_obj_get_style(label);
   10498:	4638      	mov	r0, r7
   1049a:	f7fa fbbd 	bl	ac18 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
   1049e:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
    const lv_style_t * style = lv_obj_get_style(label);
   104a2:	9003      	str	r0, [sp, #12]
    uint8_t letter_height    = lv_font_get_line_height(font);
   104a4:	f89a 3008 	ldrb.w	r3, [sl, #8]
   104a8:	9307      	str	r3, [sp, #28]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   104aa:	7c23      	ldrb	r3, [r4, #16]
    lv_label_align_t align = lv_label_get_align(label);
   104ac:	4638      	mov	r0, r7
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   104ae:	f3c3 1680 	ubfx	r6, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   104b2:	061b      	lsls	r3, r3, #24
   104b4:	bf48      	it	mi
   104b6:	f046 0602 	orrmi.w	r6, r6, #2
    lv_label_align_t align = lv_label_get_align(label);
   104ba:	f7ff ff83 	bl	103c4 <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   104be:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(label);
   104c0:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   104c2:	d114      	bne.n	104ee <lv_label_get_letter_on+0x9e>
   104c4:	f046 0604 	orr.w	r6, r6, #4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   104c8:	7c23      	ldrb	r3, [r4, #16]
        max_w = LV_COORD_MAX;
   104ca:	9a06      	ldr	r2, [sp, #24]
   104cc:	f013 0f07 	tst.w	r3, #7
   104d0:	f647 4318 	movw	r3, #31768	; 0x7c18
   104d4:	bf08      	it	eq
   104d6:	461a      	moveq	r2, r3
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   104d8:	f04f 0b00 	mov.w	fp, #0
        max_w = LV_COORD_MAX;
   104dc:	9206      	str	r2, [sp, #24]
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   104de:	465d      	mov	r5, fp
    while(txt[line_start] != '\0') {
   104e0:	9b04      	ldr	r3, [sp, #16]
   104e2:	eb03 0805 	add.w	r8, r3, r5
   104e6:	5d5b      	ldrb	r3, [r3, r5]
   104e8:	b933      	cbnz	r3, 104f8 <lv_label_get_letter_on+0xa8>
   104ea:	462c      	mov	r4, r5
   104ec:	e022      	b.n	10534 <lv_label_get_letter_on+0xe4>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   104ee:	2802      	cmp	r0, #2
   104f0:	bf08      	it	eq
   104f2:	f046 0608 	orreq.w	r6, r6, #8
   104f6:	e7e7      	b.n	104c8 <lv_label_get_letter_on+0x78>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   104f8:	9b03      	ldr	r3, [sp, #12]
   104fa:	4651      	mov	r1, sl
   104fc:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
   10500:	9b06      	ldr	r3, [sp, #24]
   10502:	9600      	str	r6, [sp, #0]
   10504:	4640      	mov	r0, r8
   10506:	f7f2 fdb3 	bl	3070 <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) {
   1050a:	9b05      	ldr	r3, [sp, #20]
   1050c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   10510:	9b07      	ldr	r3, [sp, #28]
   10512:	445b      	add	r3, fp
   10514:	429a      	cmp	r2, r3
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   10516:	eb00 0405 	add.w	r4, r0, r5
        if(pos->y <= y + letter_height) {
   1051a:	dc3a      	bgt.n	10592 <lv_label_get_letter_on+0x142>
            letter = lv_txt_encoded_prev(txt, &tmp);
   1051c:	4b4d      	ldr	r3, [pc, #308]	; (10654 <lv_label_get_letter_on+0x204>)
   1051e:	9804      	ldr	r0, [sp, #16]
   10520:	681b      	ldr	r3, [r3, #0]
            uint32_t tmp = new_line_start;
   10522:	9409      	str	r4, [sp, #36]	; 0x24
            letter = lv_txt_encoded_prev(txt, &tmp);
   10524:	a909      	add	r1, sp, #36	; 0x24
   10526:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0' ) new_line_start++;
   10528:	280a      	cmp	r0, #10
   1052a:	d003      	beq.n	10534 <lv_label_get_letter_on+0xe4>
   1052c:	9b04      	ldr	r3, [sp, #16]
   1052e:	5d1b      	ldrb	r3, [r3, r4]
   10530:	b903      	cbnz	r3, 10534 <lv_label_get_letter_on+0xe4>
   10532:	3401      	adds	r4, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
   10534:	f1b9 0f01 	cmp.w	r9, #1
   10538:	d134      	bne.n	105a4 <lv_label_get_letter_on+0x154>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, style->text.letter_space, flag);
   1053a:	9b03      	ldr	r3, [sp, #12]
   1053c:	1b61      	subs	r1, r4, r5
   1053e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
   10542:	9600      	str	r6, [sp, #0]
   10544:	4652      	mov	r2, sl
   10546:	b289      	uxth	r1, r1
   10548:	4640      	mov	r0, r8
   1054a:	f7f2 fd41 	bl	2fd0 <lv_txt_get_width>
   1054e:	4681      	mov	r9, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
   10550:	4638      	mov	r0, r7
   10552:	f7fa fb33 	bl	abbc <lv_obj_get_width>
   10556:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
   1055a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1055e:	ea4f 0769 	mov.w	r7, r9, asr #1
   10562:	ebc7 0760 	rsb	r7, r7, r0, asr #1
   10566:	b23f      	sxth	r7, r7
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   10568:	2300      	movs	r3, #0
   1056a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i = 0;
   1056e:	9309      	str	r3, [sp, #36]	; 0x24
    if(new_line_start > 0) {
   10570:	2c00      	cmp	r4, #0
   10572:	d165      	bne.n	10640 <lv_label_get_letter_on+0x1f0>
    logical_pos = lv_txt_encoded_get_char_id(bidi_txt, i);
   10574:	4e38      	ldr	r6, [pc, #224]	; (10658 <lv_label_get_letter_on+0x208>)
   10576:	9909      	ldr	r1, [sp, #36]	; 0x24
   10578:	6833      	ldr	r3, [r6, #0]
   1057a:	4640      	mov	r0, r8
   1057c:	4798      	blx	r3
    return  logical_pos + lv_txt_encoded_get_char_id(txt, line_start);
   1057e:	6833      	ldr	r3, [r6, #0]
    logical_pos = lv_txt_encoded_get_char_id(bidi_txt, i);
   10580:	4604      	mov	r4, r0
    return  logical_pos + lv_txt_encoded_get_char_id(txt, line_start);
   10582:	4629      	mov	r1, r5
   10584:	9804      	ldr	r0, [sp, #16]
   10586:	4798      	blx	r3
   10588:	4420      	add	r0, r4
}
   1058a:	b280      	uxth	r0, r0
   1058c:	b00b      	add	sp, #44	; 0x2c
   1058e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + style->text.line_space;
   10592:	9b03      	ldr	r3, [sp, #12]
   10594:	9a07      	ldr	r2, [sp, #28]
   10596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   10598:	4413      	add	r3, r2
   1059a:	449b      	add	fp, r3
   1059c:	fa0f fb8b 	sxth.w	fp, fp
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
   105a0:	4625      	mov	r5, r4
   105a2:	e79d      	b.n	104e0 <lv_label_get_letter_on+0x90>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
   105a4:	f1b9 0f02 	cmp.w	r9, #2
   105a8:	d111      	bne.n	105ce <lv_label_get_letter_on+0x17e>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, style->text.letter_space, flag);
   105aa:	9b03      	ldr	r3, [sp, #12]
   105ac:	1b61      	subs	r1, r4, r5
   105ae:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
   105b2:	9600      	str	r6, [sp, #0]
   105b4:	4652      	mov	r2, sl
   105b6:	b289      	uxth	r1, r1
   105b8:	4640      	mov	r0, r8
   105ba:	f7f2 fd09 	bl	2fd0 <lv_txt_get_width>
   105be:	4681      	mov	r9, r0
        x += lv_obj_get_width(label) - line_w;
   105c0:	4638      	mov	r0, r7
   105c2:	f7fa fafb 	bl	abbc <lv_obj_get_width>
   105c6:	eba0 0009 	sub.w	r0, r0, r9
   105ca:	b207      	sxth	r7, r0
   105cc:	e7cc      	b.n	10568 <lv_label_get_letter_on+0x118>
    lv_coord_t x = 0;
   105ce:	2700      	movs	r7, #0
   105d0:	e7ca      	b.n	10568 <lv_label_get_letter_on+0x118>
                if(lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
   105d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   105d4:	9007      	str	r0, [sp, #28]
   105d6:	f818 1003 	ldrb.w	r1, [r8, r3]
   105da:	f10d 0023 	add.w	r0, sp, #35	; 0x23
   105de:	f7f2 fcd9 	bl	2f94 <lv_txt_is_cmd>
   105e2:	9a07      	ldr	r2, [sp, #28]
   105e4:	b198      	cbz	r0, 1060e <lv_label_get_letter_on+0x1be>
        while(i + line_start < new_line_start) {
   105e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   105e8:	442b      	add	r3, r5
   105ea:	429c      	cmp	r4, r3
   105ec:	d9c2      	bls.n	10574 <lv_label_get_letter_on+0x124>
            letter = lv_txt_encoded_next(bidi_txt, &i);
   105ee:	f8d9 3000 	ldr.w	r3, [r9]
   105f2:	a909      	add	r1, sp, #36	; 0x24
   105f4:	4640      	mov	r0, r8
   105f6:	4798      	blx	r3
   105f8:	4606      	mov	r6, r0
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   105fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   105fc:	f8d9 3000 	ldr.w	r3, [r9]
   10600:	2100      	movs	r1, #0
   10602:	4440      	add	r0, r8
   10604:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   10606:	9b06      	ldr	r3, [sp, #24]
            letter_next = lv_txt_encoded_next(&bidi_txt[i], NULL);
   10608:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1060a:	2b00      	cmp	r3, #0
   1060c:	d1e1      	bne.n	105d2 <lv_label_get_letter_on+0x182>
            x += lv_font_get_glyph_width(font, letter, letter_next);
   1060e:	4631      	mov	r1, r6
   10610:	4650      	mov	r0, sl
   10612:	f7f8 ff5d 	bl	94d0 <lv_font_get_glyph_width>
            if(pos->x < x || i + line_start == new_line_start) {
   10616:	9b05      	ldr	r3, [sp, #20]
            x += lv_font_get_glyph_width(font, letter, letter_next);
   10618:	4438      	add	r0, r7
            if(pos->x < x || i + line_start == new_line_start) {
   1061a:	f9b3 3000 	ldrsh.w	r3, [r3]
            x += lv_font_get_glyph_width(font, letter, letter_next);
   1061e:	b287      	uxth	r7, r0
            if(pos->x < x || i + line_start == new_line_start) {
   10620:	b200      	sxth	r0, r0
   10622:	4283      	cmp	r3, r0
   10624:	da02      	bge.n	1062c <lv_label_get_letter_on+0x1dc>
                i = i_act;
   10626:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
                break;
   1062a:	e7a3      	b.n	10574 <lv_label_get_letter_on+0x124>
            if(pos->x < x || i + line_start == new_line_start) {
   1062c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1062e:	18ea      	adds	r2, r5, r3
   10630:	4294      	cmp	r4, r2
   10632:	d0f8      	beq.n	10626 <lv_label_get_letter_on+0x1d6>
            x += style->text.letter_space;
   10634:	9a03      	ldr	r2, [sp, #12]
   10636:	8d10      	ldrh	r0, [r2, #40]	; 0x28
   10638:	4407      	add	r7, r0
   1063a:	b23f      	sxth	r7, r7
            i_act = i;
   1063c:	469b      	mov	fp, r3
   1063e:	e7d2      	b.n	105e6 <lv_label_get_letter_on+0x196>
    uint32_t i_act = i;
   10640:	469b      	mov	fp, r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   10642:	f006 0301 	and.w	r3, r6, #1
            letter = lv_txt_encoded_next(bidi_txt, &i);
   10646:	f8df 9014 	ldr.w	r9, [pc, #20]	; 1065c <lv_label_get_letter_on+0x20c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1064a:	9306      	str	r3, [sp, #24]
   1064c:	e7cb      	b.n	105e6 <lv_label_get_letter_on+0x196>
   1064e:	bf00      	nop
   10650:	0001de08 	.word	0x0001de08
   10654:	20000010 	.word	0x20000010
   10658:	20000008 	.word	0x20000008
   1065c:	2000000c 	.word	0x2000000c

00010660 <lv_label_refr_text>:
{
   10660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10664:	b091      	sub	sp, #68	; 0x44
   10666:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10668:	f7fb f9f2 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
   1066c:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1066e:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
   10670:	b37b      	cbz	r3, 106d2 <lv_label_refr_text+0x72>
    lv_coord_t max_w         = lv_obj_get_width(label);
   10672:	4628      	mov	r0, r5
   10674:	f7fa faa2 	bl	abbc <lv_obj_get_width>
   10678:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(label);
   1067a:	4628      	mov	r0, r5
   1067c:	f7fa facc 	bl	ac18 <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   10680:	7c23      	ldrb	r3, [r4, #16]
    const lv_font_t * font   = style->text.font;
   10682:	6a46      	ldr	r6, [r0, #36]	; 0x24
        max_w = LV_COORD_MAX;
   10684:	f013 0f07 	tst.w	r3, #7
   10688:	f647 4218 	movw	r2, #31768	; 0x7c18
   1068c:	bf08      	it	eq
   1068e:	4617      	moveq	r7, r2
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   10690:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   10694:	061b      	lsls	r3, r3, #24
   10696:	bf48      	it	mi
   10698:	f042 0202 	orrmi.w	r2, r2, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
   1069c:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
   106a0:	e9cd 7201 	strd	r7, r2, [sp, #4]
   106a4:	f9b0 202a 	ldrsh.w	r2, [r0, #42]	; 0x2a
   106a8:	9200      	str	r2, [sp, #0]
   106aa:	6821      	ldr	r1, [r4, #0]
    const lv_style_t * style = lv_obj_get_style(label);
   106ac:	4680      	mov	r8, r0
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
   106ae:	4632      	mov	r2, r6
   106b0:	a805      	add	r0, sp, #20
   106b2:	f7f2 fdd1 	bl	3258 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   106b6:	7c23      	ldrb	r3, [r4, #16]
   106b8:	f013 0307 	ands.w	r3, r3, #7
   106bc:	d10c      	bne.n	106d8 <lv_label_refr_text+0x78>
        lv_obj_set_size(label, size.x, size.y);
   106be:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   106c2:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
   106c6:	4628      	mov	r0, r5
   106c8:	f7fb f854 	bl	b774 <lv_obj_set_size>
    lv_obj_invalidate(label);
   106cc:	4628      	mov	r0, r5
   106ce:	f7fa fae3 	bl	ac98 <lv_obj_invalidate>
}
   106d2:	b011      	add	sp, #68	; 0x44
   106d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
   106d8:	2b03      	cmp	r3, #3
   106da:	d16a      	bne.n	107b2 <lv_label_refr_text+0x152>
        anim.playback = 1;
   106dc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   106e0:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.var      = label;
   106e4:	9507      	str	r5, [sp, #28]
        anim.playback = 1;
   106e6:	f023 0303 	bic.w	r3, r3, #3
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   106ea:	2220      	movs	r2, #32
        anim.playback = 1;
   106ec:	f043 0303 	orr.w	r3, r3, #3
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   106f0:	4611      	mov	r1, r2
        anim.playback = 1;
   106f2:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        anim.start    = 0;
   106f6:	2700      	movs	r7, #0
        anim.path_cb  = lv_anim_path_linear;
   106f8:	4bb1      	ldr	r3, [pc, #708]	; (109c0 <lv_label_refr_text+0x360>)
   106fa:	9309      	str	r3, [sp, #36]	; 0x24
        anim.ready_cb = NULL;
   106fc:	e9cd 770a 	strd	r7, r7, [sp, #40]	; 0x28
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   10700:	f7f8 fee6 	bl	94d0 <lv_font_get_glyph_width>
   10704:	f9b8 2028 	ldrsh.w	r2, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
   10708:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   1070c:	4410      	add	r0, r2
   1070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10712:	4343      	muls	r3, r0
             ext->anim_speed) *
   10714:	89e0      	ldrh	r0, [r4, #14]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   10716:	fb93 f3f0 	sdiv	r3, r3, r0
        anim.playback_pause =
   1071a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1071e:	b29b      	uxth	r3, r3
   10720:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        anim.repeat_pause = anim.playback_pause;
   10724:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        if(size.x > lv_obj_get_width(label)) {
   10728:	4628      	mov	r0, r5
        anim.act_time     = -anim.playback_pause;
   1072a:	425b      	negs	r3, r3
   1072c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if(size.x > lv_obj_get_width(label)) {
   10730:	f7fa fa44 	bl	abbc <lv_obj_get_width>
   10734:	4580      	cmp	r8, r0
   10736:	dd36      	ble.n	107a6 <lv_label_refr_text+0x146>
            anim.end     = lv_obj_get_width(label) - size.x;
   10738:	4628      	mov	r0, r5
   1073a:	f7fa fa3f 	bl	abbc <lv_obj_get_width>
   1073e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
   10742:	4ba0      	ldr	r3, [pc, #640]	; (109c4 <lv_label_refr_text+0x364>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
   10744:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
   10748:	9308      	str	r3, [sp, #32]
            anim.end     = lv_obj_get_width(label) - size.x;
   1074a:	1a82      	subs	r2, r0, r2
   1074c:	920c      	str	r2, [sp, #48]	; 0x30
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
   1074e:	89e0      	ldrh	r0, [r4, #14]
   10750:	b212      	sxth	r2, r2
   10752:	f7f3 fb43 	bl	3ddc <lv_anim_speed_to_time>
   10756:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            lv_anim_create(&anim);
   1075a:	a807      	add	r0, sp, #28
   1075c:	f7f3 fb0e 	bl	3d7c <lv_anim_create>
            hor_anim = true;
   10760:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
   10762:	4628      	mov	r0, r5
   10764:	f9bd 8016 	ldrsh.w	r8, [sp, #22]
   10768:	f7fa fa36 	bl	abd8 <lv_obj_get_height>
   1076c:	4580      	cmp	r8, r0
   1076e:	f340 80a0 	ble.w	108b2 <lv_label_refr_text+0x252>
   10772:	2f00      	cmp	r7, #0
   10774:	f040 809d 	bne.w	108b2 <lv_label_refr_text+0x252>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
   10778:	4628      	mov	r0, r5
   1077a:	f7fa fa2d 	bl	abd8 <lv_obj_get_height>
   1077e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
   10782:	4b91      	ldr	r3, [pc, #580]	; (109c8 <lv_label_refr_text+0x368>)
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
   10784:	1a80      	subs	r0, r0, r2
   10786:	7a32      	ldrb	r2, [r6, #8]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
   10788:	9308      	str	r3, [sp, #32]
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
   1078a:	1a82      	subs	r2, r0, r2
   1078c:	920c      	str	r2, [sp, #48]	; 0x30
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
   1078e:	b212      	sxth	r2, r2
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
   10790:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   10794:	89e0      	ldrh	r0, [r4, #14]
   10796:	f7f3 fb21 	bl	3ddc <lv_anim_speed_to_time>
   1079a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            lv_anim_create(&anim);
   1079e:	a807      	add	r0, sp, #28
   107a0:	f7f3 faec 	bl	3d7c <lv_anim_create>
   107a4:	e792      	b.n	106cc <lv_label_refr_text+0x6c>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   107a6:	4987      	ldr	r1, [pc, #540]	; (109c4 <lv_label_refr_text+0x364>)
   107a8:	4628      	mov	r0, r5
   107aa:	f7f3 fab5 	bl	3d18 <lv_anim_del>
            ext->offset.x = 0;
   107ae:	8167      	strh	r7, [r4, #10]
   107b0:	e7d7      	b.n	10762 <lv_label_refr_text+0x102>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   107b2:	2b04      	cmp	r3, #4
   107b4:	f040 8084 	bne.w	108c0 <lv_label_refr_text+0x260>
        lv_label_align_t align = lv_label_get_align(label);
   107b8:	4628      	mov	r0, r5
   107ba:	f7ff fe03 	bl	103c4 <lv_label_get_align>
        anim.playback = 0;
   107be:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
        anim.var      = label;
   107c2:	9507      	str	r5, [sp, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   107c4:	2220      	movs	r2, #32
        anim.playback = 0;
   107c6:	f023 0303 	bic.w	r3, r3, #3
   107ca:	f043 0302 	orr.w	r3, r3, #2
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   107ce:	4611      	mov	r1, r2
        lv_label_align_t align = lv_label_get_align(label);
   107d0:	4681      	mov	r9, r0
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   107d2:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
        anim.playback = 0;
   107d6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   107da:	f7f8 fe79 	bl	94d0 <lv_font_get_glyph_width>
   107de:	f9b8 2028 	ldrsh.w	r2, [r8, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
   107e2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   107e6:	4410      	add	r0, r2
   107e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   107ec:	4343      	muls	r3, r0
                          ext->anim_speed) *
   107ee:	89e0      	ldrh	r0, [r4, #14]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
   107f0:	fb93 f3f0 	sdiv	r3, r3, r0
   107f4:	ebc3 3283 	rsb	r2, r3, r3, lsl #14
   107f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   107fc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        anim.ready_cb       = NULL;
   10800:	2700      	movs	r7, #0
        anim.path_cb        = lv_anim_path_linear;
   10802:	4b6f      	ldr	r3, [pc, #444]	; (109c0 <lv_label_refr_text+0x360>)
        anim.ready_cb       = NULL;
   10804:	970a      	str	r7, [sp, #40]	; 0x28
        if(size.x > lv_obj_get_width(label)) {
   10806:	4628      	mov	r0, r5
        anim.path_cb        = lv_anim_path_linear;
   10808:	9309      	str	r3, [sp, #36]	; 0x24
        anim.playback_pause = 0;
   1080a:	970e      	str	r7, [sp, #56]	; 0x38
        if(size.x > lv_obj_get_width(label)) {
   1080c:	f7fa f9d6 	bl	abbc <lv_obj_get_width>
   10810:	4580      	cmp	r8, r0
   10812:	dd48      	ble.n	108a6 <lv_label_refr_text+0x246>
            if(align == LV_LABEL_ALIGN_RIGHT) {
   10814:	f1b9 0f02 	cmp.w	r9, #2
   10818:	d138      	bne.n	1088c <lv_label_refr_text+0x22c>
                anim.start     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   1081a:	2220      	movs	r2, #32
   1081c:	4611      	mov	r1, r2
   1081e:	4630      	mov	r0, r6
                anim.end    = 0;
   10820:	970c      	str	r7, [sp, #48]	; 0x30
                anim.start     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   10822:	f7f8 fe55 	bl	94d0 <lv_font_get_glyph_width>
   10826:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
   1082a:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   1082e:	1ac0      	subs	r0, r0, r3
   10830:	900b      	str	r0, [sp, #44]	; 0x2c
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
   10832:	4b64      	ldr	r3, [pc, #400]	; (109c4 <lv_label_refr_text+0x364>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
   10834:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   10838:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   1083c:	89e0      	ldrh	r0, [r4, #14]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
   1083e:	9308      	str	r3, [sp, #32]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
   10840:	f7f3 facc 	bl	3ddc <lv_anim_speed_to_time>
   10844:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
            lv_anim_create(&anim);
   10848:	a807      	add	r0, sp, #28
   1084a:	f7f3 fa97 	bl	3d7c <lv_anim_create>
            hor_anim = true;
   1084e:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
   10850:	4628      	mov	r0, r5
   10852:	f9bd 8016 	ldrsh.w	r8, [sp, #22]
   10856:	f7fa f9bf 	bl	abd8 <lv_obj_get_height>
   1085a:	4580      	cmp	r8, r0
   1085c:	dd29      	ble.n	108b2 <lv_label_refr_text+0x252>
   1085e:	bb47      	cbnz	r7, 108b2 <lv_label_refr_text+0x252>
            if(align == LV_LABEL_ALIGN_RIGHT) {
   10860:	f1b9 0f02 	cmp.w	r9, #2
                  anim.end    = 0;
   10864:	bf08      	it	eq
   10866:	970c      	streq	r7, [sp, #48]	; 0x30
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
   10868:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
                  anim.start    = 0;
   1086c:	bf16      	itet	ne
   1086e:	970b      	strne	r7, [sp, #44]	; 0x2c
                  anim.start     = -size.y - (lv_font_get_line_height(font));
   10870:	7a32      	ldrbeq	r2, [r6, #8]
                  anim.end     = -size.y - (lv_font_get_line_height(font));
   10872:	7a32      	ldrbne	r2, [r6, #8]
   10874:	f1c3 0300 	rsb	r3, r3, #0
                  anim.start     = -size.y - (lv_font_get_line_height(font));
   10878:	bf0d      	iteet	eq
   1087a:	1a9b      	subeq	r3, r3, r2
                  anim.end     = -size.y - (lv_font_get_line_height(font));
   1087c:	1a9b      	subne	r3, r3, r2
   1087e:	930c      	strne	r3, [sp, #48]	; 0x30
                  anim.start     = -size.y - (lv_font_get_line_height(font));
   10880:	930b      	streq	r3, [sp, #44]	; 0x2c
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
   10882:	4b51      	ldr	r3, [pc, #324]	; (109c8 <lv_label_refr_text+0x368>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
   10884:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
   10888:	9308      	str	r3, [sp, #32]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
   1088a:	e781      	b.n	10790 <lv_label_refr_text+0x130>
                anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   1088c:	2220      	movs	r2, #32
   1088e:	4611      	mov	r1, r2
   10890:	4630      	mov	r0, r6
                anim.start    = 0;
   10892:	970b      	str	r7, [sp, #44]	; 0x2c
                anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   10894:	f7f8 fe1c 	bl	94d0 <lv_font_get_glyph_width>
   10898:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
   1089c:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   108a0:	1ac0      	subs	r0, r0, r3
   108a2:	900c      	str	r0, [sp, #48]	; 0x30
   108a4:	e7c5      	b.n	10832 <lv_label_refr_text+0x1d2>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   108a6:	4947      	ldr	r1, [pc, #284]	; (109c4 <lv_label_refr_text+0x364>)
   108a8:	4628      	mov	r0, r5
   108aa:	f7f3 fa35 	bl	3d18 <lv_anim_del>
            ext->offset.x = 0;
   108ae:	8167      	strh	r7, [r4, #10]
   108b0:	e7ce      	b.n	10850 <lv_label_refr_text+0x1f0>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   108b2:	4945      	ldr	r1, [pc, #276]	; (109c8 <lv_label_refr_text+0x368>)
   108b4:	4628      	mov	r0, r5
   108b6:	f7f3 fa2f 	bl	3d18 <lv_anim_del>
            ext->offset.y = 0;
   108ba:	2300      	movs	r3, #0
   108bc:	81a3      	strh	r3, [r4, #12]
   108be:	e705      	b.n	106cc <lv_label_refr_text+0x6c>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
   108c0:	2b02      	cmp	r3, #2
   108c2:	d173      	bne.n	109ac <lv_label_refr_text+0x34c>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
   108c4:	4628      	mov	r0, r5
   108c6:	f9bd 6016 	ldrsh.w	r6, [sp, #22]
   108ca:	f7fa f985 	bl	abd8 <lv_obj_get_height>
   108ce:	4286      	cmp	r6, r0
   108d0:	dc03      	bgt.n	108da <lv_label_refr_text+0x27a>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   108d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   108d6:	8123      	strh	r3, [r4, #8]
   108d8:	e6f8      	b.n	106cc <lv_label_refr_text+0x6c>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
   108da:	4b3c      	ldr	r3, [pc, #240]	; (109cc <lv_label_refr_text+0x36c>)
   108dc:	6820      	ldr	r0, [r4, #0]
   108de:	681b      	ldr	r3, [r3, #0]
   108e0:	4798      	blx	r3
   108e2:	2803      	cmp	r0, #3
   108e4:	d9f5      	bls.n	108d2 <lv_label_refr_text+0x272>
            p.x = lv_obj_get_width(label) -
   108e6:	4628      	mov	r0, r5
   108e8:	f7fa f968 	bl	abbc <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
   108ec:	222e      	movs	r2, #46	; 0x2e
   108ee:	4611      	mov	r1, r2
            p.x = lv_obj_get_width(label) -
   108f0:	4606      	mov	r6, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
   108f2:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   108f6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 109d4 <lv_label_refr_text+0x374>
                lv_txt_encoded_next(ext->text, &byte_id);
   108fa:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 109d8 <lv_label_refr_text+0x378>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
   108fe:	f7f8 fde7 	bl	94d0 <lv_font_get_glyph_width>
   10902:	f9b8 2028 	ldrsh.w	r2, [r8, #40]	; 0x28
   10906:	1813      	adds	r3, r2, r0
            p.x = lv_obj_get_width(label) -
   10908:	ebc3 3083 	rsb	r0, r3, r3, lsl #14
   1090c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   10910:	1998      	adds	r0, r3, r6
   10912:	f8ad 0018 	strh.w	r0, [sp, #24]
            p.y = lv_obj_get_height(label);
   10916:	4628      	mov	r0, r5
   10918:	f7fa f95e 	bl	abd8 <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
   1091c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   10920:	f9b8 102a 	ldrsh.w	r1, [r8, #42]	; 0x2a
   10924:	7a1b      	ldrb	r3, [r3, #8]
   10926:	440b      	add	r3, r1
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
   10928:	1a42      	subs	r2, r0, r1
            p.y -= p.y %
   1092a:	fb90 f1f3 	sdiv	r1, r0, r3
   1092e:	fb03 0011 	mls	r0, r3, r1, r0
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
   10932:	1a10      	subs	r0, r2, r0
   10934:	f8ad 001a 	strh.w	r0, [sp, #26]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   10938:	a906      	add	r1, sp, #24
   1093a:	4628      	mov	r0, r5
   1093c:	f7ff fd88 	bl	10450 <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
   10940:	4b23      	ldr	r3, [pc, #140]	; (109d0 <lv_label_refr_text+0x370>)
   10942:	4601      	mov	r1, r0
   10944:	681b      	ldr	r3, [r3, #0]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   10946:	4607      	mov	r7, r0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
   10948:	6820      	ldr	r0, [r4, #0]
   1094a:	4798      	blx	r3
   1094c:	f04f 0804 	mov.w	r8, #4
   10950:	4606      	mov	r6, r0
   10952:	9007      	str	r0, [sp, #28]
            uint8_t len          = 0;
   10954:	f04f 0900 	mov.w	r9, #0
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   10958:	9907      	ldr	r1, [sp, #28]
   1095a:	6820      	ldr	r0, [r4, #0]
   1095c:	f8da 3000 	ldr.w	r3, [sl]
   10960:	4408      	add	r0, r1
   10962:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
   10964:	f8db 3000 	ldr.w	r3, [fp]
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   10968:	4481      	add	r9, r0
                lv_txt_encoded_next(ext->text, &byte_id);
   1096a:	a907      	add	r1, sp, #28
   1096c:	6820      	ldr	r0, [r4, #0]
   1096e:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   10970:	f1b8 0801 	subs.w	r8, r8, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
   10974:	fa5f f989 	uxtb.w	r9, r9
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   10978:	d1ee      	bne.n	10958 <lv_label_refr_text+0x2f8>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
   1097a:	6821      	ldr	r1, [r4, #0]
   1097c:	464a      	mov	r2, r9
   1097e:	4431      	add	r1, r6
   10980:	4628      	mov	r0, r5
   10982:	f7ff fc89 	bl	10298 <lv_label_set_dot_tmp>
   10986:	2800      	cmp	r0, #0
   10988:	f43f aea0 	beq.w	106cc <lv_label_refr_text+0x6c>
                    ext->text[byte_id_ori + i] = '.';
   1098c:	6823      	ldr	r3, [r4, #0]
   1098e:	222e      	movs	r2, #46	; 0x2e
   10990:	559a      	strb	r2, [r3, r6]
   10992:	6823      	ldr	r3, [r4, #0]
   10994:	4433      	add	r3, r6
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   10996:	3703      	adds	r7, #3
                    ext->text[byte_id_ori + i] = '.';
   10998:	705a      	strb	r2, [r3, #1]
   1099a:	6823      	ldr	r3, [r4, #0]
   1099c:	4433      	add	r3, r6
   1099e:	709a      	strb	r2, [r3, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
   109a0:	6820      	ldr	r0, [r4, #0]
   109a2:	4430      	add	r0, r6
   109a4:	f880 8003 	strb.w	r8, [r0, #3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   109a8:	8127      	strh	r7, [r4, #8]
   109aa:	e68f      	b.n	106cc <lv_label_refr_text+0x6c>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
   109ac:	2b01      	cmp	r3, #1
   109ae:	f47f ae8d 	bne.w	106cc <lv_label_refr_text+0x6c>
        lv_obj_set_height(label, size.y);
   109b2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
   109b6:	4628      	mov	r0, r5
   109b8:	f7fa ff48 	bl	b84c <lv_obj_set_height>
   109bc:	e686      	b.n	106cc <lv_label_refr_text+0x6c>
   109be:	bf00      	nop
   109c0:	00003ba3 	.word	0x00003ba3
   109c4:	00010283 	.word	0x00010283
   109c8:	0001026d 	.word	0x0001026d
   109cc:	20000018 	.word	0x20000018
   109d0:	20000004 	.word	0x20000004
   109d4:	20000014 	.word	0x20000014
   109d8:	2000000c 	.word	0x2000000c

000109dc <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
   109dc:	4b33      	ldr	r3, [pc, #204]	; (10aac <lv_label_signal+0xd0>)
{
   109de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
   109e2:	681b      	ldr	r3, [r3, #0]
{
   109e4:	4604      	mov	r4, r0
   109e6:	460d      	mov	r5, r1
   109e8:	4616      	mov	r6, r2
    res = ancestor_signal(label, sign, param);
   109ea:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
   109ec:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
   109ee:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
   109f0:	d117      	bne.n	10a22 <lv_label_signal+0x46>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   109f2:	2d07      	cmp	r5, #7
   109f4:	d105      	bne.n	10a02 <lv_label_signal+0x26>
   109f6:	4630      	mov	r0, r6
   109f8:	492d      	ldr	r1, [pc, #180]	; (10ab0 <lv_label_signal+0xd4>)
}
   109fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   109fe:	f7fb b837 	b.w	ba70 <lv_obj_handle_get_type_signal>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10a02:	4620      	mov	r0, r4
   10a04:	f7fb f824 	bl	ba50 <lv_obj_get_ext_attr>
   10a08:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   10a0a:	b96d      	cbnz	r5, 10a28 <lv_label_signal+0x4c>
        if(ext->static_txt == 0) {
   10a0c:	7c03      	ldrb	r3, [r0, #16]
   10a0e:	f013 0508 	ands.w	r5, r3, #8
   10a12:	d103      	bne.n	10a1c <lv_label_signal+0x40>
            lv_mem_free(ext->text);
   10a14:	6800      	ldr	r0, [r0, #0]
   10a16:	f7f2 fc8b 	bl	3330 <lv_mem_free>
            ext->text = NULL;
   10a1a:	603d      	str	r5, [r7, #0]
        lv_label_dot_tmp_free(label);
   10a1c:	4620      	mov	r0, r4
   10a1e:	f7ff fbd9 	bl	101d4 <lv_label_dot_tmp_free>
}
   10a22:	4640      	mov	r0, r8
   10a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
   10a28:	2d04      	cmp	r5, #4
   10a2a:	d106      	bne.n	10a3a <lv_label_signal+0x5e>
        lv_label_revert_dots(label);
   10a2c:	4620      	mov	r0, r4
   10a2e:	f7ff fbe3 	bl	101f8 <lv_label_revert_dots>
        lv_label_refr_text(label);
   10a32:	4620      	mov	r0, r4
   10a34:	f7ff fe14 	bl	10660 <lv_label_refr_text>
   10a38:	e7f3      	b.n	10a22 <lv_label_signal+0x46>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
   10a3a:	2d02      	cmp	r5, #2
   10a3c:	d114      	bne.n	10a68 <lv_label_signal+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10a3e:	8a23      	ldrh	r3, [r4, #16]
   10a40:	8aa2      	ldrh	r2, [r4, #20]
   10a42:	8831      	ldrh	r1, [r6, #0]
   10a44:	1ad2      	subs	r2, r2, r3
   10a46:	88b3      	ldrh	r3, [r6, #4]
   10a48:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   10a4a:	b292      	uxth	r2, r2
   10a4c:	b29b      	uxth	r3, r3
   10a4e:	429a      	cmp	r2, r3
   10a50:	d1ec      	bne.n	10a2c <lv_label_signal+0x50>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10a52:	8a63      	ldrh	r3, [r4, #18]
   10a54:	8ae2      	ldrh	r2, [r4, #22]
   10a56:	8871      	ldrh	r1, [r6, #2]
   10a58:	1ad2      	subs	r2, r2, r3
   10a5a:	88f3      	ldrh	r3, [r6, #6]
   10a5c:	1a5b      	subs	r3, r3, r1
   10a5e:	b292      	uxth	r2, r2
   10a60:	b29b      	uxth	r3, r3
   10a62:	429a      	cmp	r2, r3
   10a64:	d1e2      	bne.n	10a2c <lv_label_signal+0x50>
   10a66:	e7dc      	b.n	10a22 <lv_label_signal+0x46>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   10a68:	2d06      	cmp	r5, #6
   10a6a:	d1da      	bne.n	10a22 <lv_label_signal+0x46>
        if(ext->body_draw) {
   10a6c:	7c43      	ldrb	r3, [r0, #17]
   10a6e:	f013 0501 	ands.w	r5, r3, #1
   10a72:	d0d6      	beq.n	10a22 <lv_label_signal+0x46>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
   10a74:	4620      	mov	r0, r4
   10a76:	f7fa f8cf 	bl	ac18 <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
   10a7a:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
   10a7e:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
   10a82:	4293      	cmp	r3, r2
   10a84:	bfb8      	it	lt
   10a86:	4613      	movlt	r3, r2
   10a88:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
   10a8c:	4293      	cmp	r3, r2
   10a8e:	bfb8      	it	lt
   10a90:	4613      	movlt	r3, r2
   10a92:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
   10a96:	4293      	cmp	r3, r2
   10a98:	bfb8      	it	lt
   10a9a:	4613      	movlt	r3, r2
   10a9c:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
   10aa0:	4293      	cmp	r3, r2
   10aa2:	bfb8      	it	lt
   10aa4:	4613      	movlt	r3, r2
   10aa6:	8623      	strh	r3, [r4, #48]	; 0x30
   10aa8:	46a8      	mov	r8, r5
   10aaa:	e7ba      	b.n	10a22 <lv_label_signal+0x46>
   10aac:	20005e84 	.word	0x20005e84
   10ab0:	0001de7d 	.word	0x0001de7d

00010ab4 <lv_label_set_text>:
{
   10ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ab8:	4606      	mov	r6, r0
   10aba:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10abc:	f7f9 fe30 	bl	a720 <lv_debug_check_null>
   10ac0:	4603      	mov	r3, r0
   10ac2:	b920      	cbnz	r0, 10ace <lv_label_set_text+0x1a>
   10ac4:	482c      	ldr	r0, [pc, #176]	; (10b78 <lv_label_set_text+0xc4>)
   10ac6:	4632      	mov	r2, r6
   10ac8:	f7f9 fe3a 	bl	a740 <lv_debug_log_error>
   10acc:	e7fe      	b.n	10acc <lv_label_set_text+0x18>
    lv_obj_invalidate(label);
   10ace:	4630      	mov	r0, r6
   10ad0:	f7fa f8e2 	bl	ac98 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10ad4:	4630      	mov	r0, r6
   10ad6:	f7fa ffbb 	bl	ba50 <lv_obj_get_ext_attr>
   10ada:	4604      	mov	r4, r0
    if(text == NULL) {
   10adc:	b925      	cbnz	r5, 10ae8 <lv_label_set_text+0x34>
        lv_label_refr_text(label);
   10ade:	4630      	mov	r0, r6
}
   10ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_label_refr_text(label);
   10ae4:	f7ff bdbc 	b.w	10660 <lv_label_refr_text>
    LV_ASSERT_STR(text);
   10ae8:	4628      	mov	r0, r5
   10aea:	f7f9 fe19 	bl	a720 <lv_debug_check_null>
   10aee:	4603      	mov	r3, r0
   10af0:	b920      	cbnz	r0, 10afc <lv_label_set_text+0x48>
   10af2:	4821      	ldr	r0, [pc, #132]	; (10b78 <lv_label_set_text+0xc4>)
   10af4:	462a      	mov	r2, r5
   10af6:	f7f9 fe23 	bl	a740 <lv_debug_log_error>
   10afa:	e7fe      	b.n	10afa <lv_label_set_text+0x46>
    if(ext->text == text) {
   10afc:	6823      	ldr	r3, [r4, #0]
   10afe:	429d      	cmp	r5, r3
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
   10b00:	4628      	mov	r0, r5
    if(ext->text == text) {
   10b02:	d113      	bne.n	10b2c <lv_label_set_text+0x78>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
   10b04:	f7ef fb24 	bl	150 <strlen>
   10b08:	1c41      	adds	r1, r0, #1
   10b0a:	4628      	mov	r0, r5
   10b0c:	f7f2 fc2e 	bl	336c <lv_mem_realloc>
   10b10:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
   10b12:	f7f9 fe05 	bl	a720 <lv_debug_check_null>
   10b16:	6822      	ldr	r2, [r4, #0]
   10b18:	4603      	mov	r3, r0
   10b1a:	b918      	cbnz	r0, 10b24 <lv_label_set_text+0x70>
   10b1c:	4817      	ldr	r0, [pc, #92]	; (10b7c <lv_label_set_text+0xc8>)
   10b1e:	f7f9 fe0f 	bl	a740 <lv_debug_log_error>
   10b22:	e7fe      	b.n	10b22 <lv_label_set_text+0x6e>
        if(ext->text == NULL) return;
   10b24:	2a00      	cmp	r2, #0
   10b26:	d1da      	bne.n	10ade <lv_label_set_text+0x2a>
}
   10b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        size_t len = strlen(text) + 1;
   10b2c:	f7ef fb10 	bl	150 <strlen>
   10b30:	f100 0801 	add.w	r8, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
   10b34:	6820      	ldr	r0, [r4, #0]
   10b36:	b130      	cbz	r0, 10b46 <lv_label_set_text+0x92>
   10b38:	7c23      	ldrb	r3, [r4, #16]
   10b3a:	f013 0708 	ands.w	r7, r3, #8
   10b3e:	d102      	bne.n	10b46 <lv_label_set_text+0x92>
            lv_mem_free(ext->text);
   10b40:	f7f2 fbf6 	bl	3330 <lv_mem_free>
            ext->text = NULL;
   10b44:	6027      	str	r7, [r4, #0]
        ext->text = lv_mem_alloc(len);
   10b46:	4640      	mov	r0, r8
   10b48:	f7f2 fbdc 	bl	3304 <lv_mem_alloc>
   10b4c:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
   10b4e:	f7f9 fde7 	bl	a720 <lv_debug_check_null>
   10b52:	6822      	ldr	r2, [r4, #0]
   10b54:	4603      	mov	r3, r0
   10b56:	b918      	cbnz	r0, 10b60 <lv_label_set_text+0xac>
   10b58:	4808      	ldr	r0, [pc, #32]	; (10b7c <lv_label_set_text+0xc8>)
   10b5a:	f7f9 fdf1 	bl	a740 <lv_debug_log_error>
   10b5e:	e7fe      	b.n	10b5e <lv_label_set_text+0xaa>
        if(ext->text == NULL) return;
   10b60:	2a00      	cmp	r2, #0
   10b62:	d0e1      	beq.n	10b28 <lv_label_set_text+0x74>
        strcpy(ext->text, text);
   10b64:	4629      	mov	r1, r5
   10b66:	4610      	mov	r0, r2
   10b68:	f003 fc74 	bl	14454 <strcpy>
        ext->static_txt = 0;
   10b6c:	7c23      	ldrb	r3, [r4, #16]
   10b6e:	f36f 03c3 	bfc	r3, #3, #1
   10b72:	7423      	strb	r3, [r4, #16]
   10b74:	e7b3      	b.n	10ade <lv_label_set_text+0x2a>
   10b76:	bf00      	nop
   10b78:	0001de08 	.word	0x0001de08
   10b7c:	0001a9b8 	.word	0x0001a9b8

00010b80 <lv_label_set_static_text>:
{
   10b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b82:	4606      	mov	r6, r0
   10b84:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10b86:	f7f9 fdcb 	bl	a720 <lv_debug_check_null>
   10b8a:	4603      	mov	r3, r0
   10b8c:	b920      	cbnz	r0, 10b98 <lv_label_set_static_text+0x18>
   10b8e:	4813      	ldr	r0, [pc, #76]	; (10bdc <lv_label_set_static_text+0x5c>)
   10b90:	4632      	mov	r2, r6
   10b92:	f7f9 fdd5 	bl	a740 <lv_debug_log_error>
   10b96:	e7fe      	b.n	10b96 <lv_label_set_static_text+0x16>
    LV_ASSERT_STR(text);
   10b98:	4628      	mov	r0, r5
   10b9a:	f7f9 fdc1 	bl	a720 <lv_debug_check_null>
   10b9e:	4603      	mov	r3, r0
   10ba0:	b920      	cbnz	r0, 10bac <lv_label_set_static_text+0x2c>
   10ba2:	480e      	ldr	r0, [pc, #56]	; (10bdc <lv_label_set_static_text+0x5c>)
   10ba4:	462a      	mov	r2, r5
   10ba6:	f7f9 fdcb 	bl	a740 <lv_debug_log_error>
   10baa:	e7fe      	b.n	10baa <lv_label_set_static_text+0x2a>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10bac:	4630      	mov	r0, r6
   10bae:	f7fa ff4f 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
   10bb2:	7c03      	ldrb	r3, [r0, #16]
   10bb4:	f013 0708 	ands.w	r7, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10bb8:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
   10bba:	d104      	bne.n	10bc6 <lv_label_set_static_text+0x46>
   10bbc:	6800      	ldr	r0, [r0, #0]
   10bbe:	b110      	cbz	r0, 10bc6 <lv_label_set_static_text+0x46>
        lv_mem_free(ext->text);
   10bc0:	f7f2 fbb6 	bl	3330 <lv_mem_free>
        ext->text = NULL;
   10bc4:	6027      	str	r7, [r4, #0]
    if(text != NULL) {
   10bc6:	b125      	cbz	r5, 10bd2 <lv_label_set_static_text+0x52>
        ext->static_txt = 1;
   10bc8:	7c23      	ldrb	r3, [r4, #16]
        ext->text       = (char *)text;
   10bca:	6025      	str	r5, [r4, #0]
        ext->static_txt = 1;
   10bcc:	f043 0308 	orr.w	r3, r3, #8
   10bd0:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
   10bd2:	4630      	mov	r0, r6
}
   10bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
   10bd8:	f7ff bd42 	b.w	10660 <lv_label_refr_text>
   10bdc:	0001de08 	.word	0x0001de08

00010be0 <lv_label_set_long_mode>:
{
   10be0:	b570      	push	{r4, r5, r6, lr}
   10be2:	4604      	mov	r4, r0
   10be4:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10be6:	f7f9 fd9b 	bl	a720 <lv_debug_check_null>
   10bea:	4603      	mov	r3, r0
   10bec:	b920      	cbnz	r0, 10bf8 <lv_label_set_long_mode+0x18>
   10bee:	481d      	ldr	r0, [pc, #116]	; (10c64 <lv_label_set_long_mode+0x84>)
   10bf0:	4622      	mov	r2, r4
   10bf2:	f7f9 fda5 	bl	a740 <lv_debug_log_error>
   10bf6:	e7fe      	b.n	10bf6 <lv_label_set_long_mode+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10bf8:	4620      	mov	r0, r4
   10bfa:	f7fa ff29 	bl	ba50 <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
   10bfe:	491a      	ldr	r1, [pc, #104]	; (10c68 <lv_label_set_long_mode+0x88>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10c00:	4605      	mov	r5, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
   10c02:	4620      	mov	r0, r4
   10c04:	f7f3 f888 	bl	3d18 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
   10c08:	4918      	ldr	r1, [pc, #96]	; (10c6c <lv_label_set_long_mode+0x8c>)
   10c0a:	4620      	mov	r0, r4
   10c0c:	f7f3 f884 	bl	3d18 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   10c10:	4917      	ldr	r1, [pc, #92]	; (10c70 <lv_label_set_long_mode+0x90>)
   10c12:	4620      	mov	r0, r4
   10c14:	f7f3 f880 	bl	3d18 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   10c18:	4916      	ldr	r1, [pc, #88]	; (10c74 <lv_label_set_long_mode+0x94>)
   10c1a:	4620      	mov	r0, r4
   10c1c:	f7f3 f87c 	bl	3d18 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   10c20:	1ef2      	subs	r2, r6, #3
    ext->offset.x = 0;
   10c22:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   10c24:	2a02      	cmp	r2, #2
    ext->offset.x = 0;
   10c26:	816b      	strh	r3, [r5, #10]
    ext->offset.y = 0;
   10c28:	81ab      	strh	r3, [r5, #12]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   10c2a:	7c2b      	ldrb	r3, [r5, #16]
   10c2c:	bf8c      	ite	hi
   10c2e:	2200      	movhi	r2, #0
   10c30:	2201      	movls	r2, #1
   10c32:	f362 13c7 	bfi	r3, r2, #7, #1
   10c36:	742b      	strb	r3, [r5, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   10c38:	f003 0307 	and.w	r3, r3, #7
   10c3c:	2b02      	cmp	r3, #2
   10c3e:	d107      	bne.n	10c50 <lv_label_set_long_mode+0x70>
   10c40:	892a      	ldrh	r2, [r5, #8]
   10c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10c46:	429a      	cmp	r2, r3
   10c48:	d002      	beq.n	10c50 <lv_label_set_long_mode+0x70>
        lv_label_revert_dots(label);
   10c4a:	4620      	mov	r0, r4
   10c4c:	f7ff fad4 	bl	101f8 <lv_label_revert_dots>
    ext->long_mode = long_mode;
   10c50:	7c2b      	ldrb	r3, [r5, #16]
   10c52:	f366 0302 	bfi	r3, r6, #0, #3
   10c56:	742b      	strb	r3, [r5, #16]
    lv_label_refr_text(label);
   10c58:	4620      	mov	r0, r4
}
   10c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
   10c5e:	f7ff bcff 	b.w	10660 <lv_label_refr_text>
   10c62:	bf00      	nop
   10c64:	0001de08 	.word	0x0001de08
   10c68:	0000ae4d 	.word	0x0000ae4d
   10c6c:	0000ae7d 	.word	0x0000ae7d
   10c70:	00010283 	.word	0x00010283
   10c74:	0001026d 	.word	0x0001026d

00010c78 <lv_label_set_recolor>:
{
   10c78:	b538      	push	{r3, r4, r5, lr}
   10c7a:	4604      	mov	r4, r0
   10c7c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10c7e:	f7f9 fd4f 	bl	a720 <lv_debug_check_null>
   10c82:	4603      	mov	r3, r0
   10c84:	b920      	cbnz	r0, 10c90 <lv_label_set_recolor+0x18>
   10c86:	480b      	ldr	r0, [pc, #44]	; (10cb4 <lv_label_set_recolor+0x3c>)
   10c88:	4622      	mov	r2, r4
   10c8a:	f7f9 fd59 	bl	a740 <lv_debug_log_error>
   10c8e:	e7fe      	b.n	10c8e <lv_label_set_recolor+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10c90:	4620      	mov	r0, r4
   10c92:	f7fa fedd 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
   10c96:	7c03      	ldrb	r3, [r0, #16]
   10c98:	f3c3 1280 	ubfx	r2, r3, #6, #1
   10c9c:	42aa      	cmp	r2, r5
   10c9e:	d007      	beq.n	10cb0 <lv_label_set_recolor+0x38>
    ext->recolor = en == false ? 0 : 1;
   10ca0:	f365 1386 	bfi	r3, r5, #6, #1
   10ca4:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
   10ca6:	4620      	mov	r0, r4
}
   10ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
   10cac:	f7ff bcd8 	b.w	10660 <lv_label_refr_text>
}
   10cb0:	bd38      	pop	{r3, r4, r5, pc}
   10cb2:	bf00      	nop
   10cb4:	0001de08 	.word	0x0001de08

00010cb8 <lv_label_create>:
{
   10cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10cba:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
   10cbc:	f7fa fc0c 	bl	b4d8 <lv_obj_create>
   10cc0:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
   10cc2:	f7f9 fd2d 	bl	a720 <lv_debug_check_null>
   10cc6:	4603      	mov	r3, r0
   10cc8:	b920      	cbnz	r0, 10cd4 <lv_label_create+0x1c>
   10cca:	4862      	ldr	r0, [pc, #392]	; (10e54 <lv_label_create+0x19c>)
   10ccc:	4622      	mov	r2, r4
   10cce:	f7f9 fd37 	bl	a740 <lv_debug_log_error>
   10cd2:	e7fe      	b.n	10cd2 <lv_label_create+0x1a>
    if(new_label == NULL) return NULL;
   10cd4:	b91c      	cbnz	r4, 10cde <lv_label_create+0x26>
   10cd6:	2400      	movs	r4, #0
}
   10cd8:	4620      	mov	r0, r4
   10cda:	b003      	add	sp, #12
   10cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   10cde:	4d5e      	ldr	r5, [pc, #376]	; (10e58 <lv_label_create+0x1a0>)
   10ce0:	682b      	ldr	r3, [r5, #0]
   10ce2:	b91b      	cbnz	r3, 10cec <lv_label_create+0x34>
   10ce4:	4620      	mov	r0, r4
   10ce6:	f7fa fe93 	bl	ba10 <lv_obj_get_signal_cb>
   10cea:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
   10cec:	2114      	movs	r1, #20
   10cee:	4620      	mov	r0, r4
   10cf0:	f7f9 feac 	bl	aa4c <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
   10cf4:	4620      	mov	r0, r4
   10cf6:	f7fa feab 	bl	ba50 <lv_obj_get_ext_attr>
   10cfa:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
   10cfc:	f7f9 fd10 	bl	a720 <lv_debug_check_null>
   10d00:	4603      	mov	r3, r0
   10d02:	b920      	cbnz	r0, 10d0e <lv_label_create+0x56>
   10d04:	4853      	ldr	r0, [pc, #332]	; (10e54 <lv_label_create+0x19c>)
   10d06:	462a      	mov	r2, r5
   10d08:	f7f9 fd1a 	bl	a740 <lv_debug_log_error>
   10d0c:	e7fe      	b.n	10d0c <lv_label_create+0x54>
    if(ext == NULL) return NULL;
   10d0e:	2d00      	cmp	r5, #0
   10d10:	d0e1      	beq.n	10cd6 <lv_label_create+0x1e>
    ext->text       = NULL;
   10d12:	2300      	movs	r3, #0
    ext->dot.tmp_ptr   = NULL;
   10d14:	e9c5 3300 	strd	r3, r3, [r5]
    ext->offset.y = 0;
   10d18:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10d1c:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
   10d20:	e9c5 1302 	strd	r1, r3, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   10d24:	8a2b      	ldrh	r3, [r5, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
   10d26:	494d      	ldr	r1, [pc, #308]	; (10e5c <lv_label_create+0x1a4>)
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   10d28:	f423 735f 	bic.w	r3, r3, #892	; 0x37c
   10d2c:	f023 0303 	bic.w	r3, r3, #3
   10d30:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    lv_obj_set_design_cb(new_label, lv_label_design);
   10d34:	4620      	mov	r0, r4
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   10d36:	822b      	strh	r3, [r5, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
   10d38:	f7f9 fe78 	bl	aa2c <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
   10d3c:	4948      	ldr	r1, [pc, #288]	; (10e60 <lv_label_create+0x1a8>)
   10d3e:	4620      	mov	r0, r4
   10d40:	f7f9 fe64 	bl	aa0c <lv_obj_set_signal_cb>
    if(copy == NULL) {
   10d44:	b986      	cbnz	r6, 10d68 <lv_label_create+0xb0>
        lv_obj_set_click(new_label, false);
   10d46:	4631      	mov	r1, r6
   10d48:	4620      	mov	r0, r4
   10d4a:	f7f9 fd61 	bl	a810 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
   10d4e:	4631      	mov	r1, r6
   10d50:	4620      	mov	r0, r4
   10d52:	f7ff ff45 	bl	10be0 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
   10d56:	4620      	mov	r0, r4
   10d58:	4942      	ldr	r1, [pc, #264]	; (10e64 <lv_label_create+0x1ac>)
   10d5a:	f7ff feab 	bl	10ab4 <lv_label_set_text>
    lv_obj_set_style(label, style);
   10d5e:	4631      	mov	r1, r6
   10d60:	4620      	mov	r0, r4
   10d62:	f7fa fb39 	bl	b3d8 <lv_obj_set_style>
}
   10d66:	e7b7      	b.n	10cd8 <lv_label_create+0x20>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
   10d68:	4630      	mov	r0, r6
   10d6a:	f7fa fe71 	bl	ba50 <lv_obj_get_ext_attr>
   10d6e:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
   10d70:	4630      	mov	r0, r6
   10d72:	f7ff fb11 	bl	10398 <lv_label_get_long_mode>
   10d76:	4601      	mov	r1, r0
   10d78:	4620      	mov	r0, r4
   10d7a:	f7ff ff31 	bl	10be0 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
   10d7e:	4630      	mov	r0, r6
   10d80:	f7ff fb3a 	bl	103f8 <lv_label_get_recolor>
   10d84:	4601      	mov	r1, r0
   10d86:	4620      	mov	r0, r4
   10d88:	f7ff ff76 	bl	10c78 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
   10d8c:	4630      	mov	r0, r6
   10d8e:	f7ff fb49 	bl	10424 <lv_label_get_body_draw>
   10d92:	4601      	mov	r1, r0
   10d94:	4620      	mov	r0, r4
   10d96:	f7ff fac9 	bl	1032c <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
   10d9a:	4630      	mov	r0, r6
   10d9c:	f7ff fb12 	bl	103c4 <lv_label_get_align>
   10da0:	4601      	mov	r1, r0
   10da2:	4620      	mov	r0, r4
   10da4:	f7ff faa2 	bl	102ec <lv_label_set_align>
        if(copy_ext->static_txt == 0)
   10da8:	7c3b      	ldrb	r3, [r7, #16]
   10daa:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
   10dac:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0)
   10dae:	d41d      	bmi.n	10dec <lv_label_create+0x134>
            lv_label_set_text(new_label, lv_label_get_text(copy));
   10db0:	f7ff fade 	bl	10370 <lv_label_get_text>
   10db4:	4601      	mov	r1, r0
   10db6:	4620      	mov	r0, r4
   10db8:	f7ff fe7c 	bl	10ab4 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
   10dbc:	7c3b      	ldrb	r3, [r7, #16]
   10dbe:	f003 0307 	and.w	r3, r3, #7
   10dc2:	2b02      	cmp	r3, #2
   10dc4:	d126      	bne.n	10e14 <lv_label_create+0x15c>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
   10dc6:	6838      	ldr	r0, [r7, #0]
   10dc8:	682e      	ldr	r6, [r5, #0]
   10dca:	f7f2 fac1 	bl	3350 <lv_mem_get_size>
   10dce:	4601      	mov	r1, r0
   10dd0:	4630      	mov	r0, r6
   10dd2:	f7f2 facb 	bl	336c <lv_mem_realloc>
   10dd6:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
   10dd8:	f7f9 fca2 	bl	a720 <lv_debug_check_null>
   10ddc:	682e      	ldr	r6, [r5, #0]
   10dde:	4603      	mov	r3, r0
   10de0:	b958      	cbnz	r0, 10dfa <lv_label_create+0x142>
   10de2:	481c      	ldr	r0, [pc, #112]	; (10e54 <lv_label_create+0x19c>)
   10de4:	4632      	mov	r2, r6
   10de6:	f7f9 fcab 	bl	a740 <lv_debug_log_error>
   10dea:	e7fe      	b.n	10dea <lv_label_create+0x132>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
   10dec:	f7ff fac0 	bl	10370 <lv_label_get_text>
   10df0:	4601      	mov	r1, r0
   10df2:	4620      	mov	r0, r4
   10df4:	f7ff fec4 	bl	10b80 <lv_label_set_static_text>
   10df8:	e7e0      	b.n	10dbc <lv_label_create+0x104>
            if(ext->text == NULL) return NULL;
   10dfa:	2e00      	cmp	r6, #0
   10dfc:	f43f af6b 	beq.w	10cd6 <lv_label_create+0x1e>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
   10e00:	6839      	ldr	r1, [r7, #0]
   10e02:	9101      	str	r1, [sp, #4]
   10e04:	4608      	mov	r0, r1
   10e06:	f7f2 faa3 	bl	3350 <lv_mem_get_size>
   10e0a:	9901      	ldr	r1, [sp, #4]
   10e0c:	4602      	mov	r2, r0
   10e0e:	4630      	mov	r0, r6
   10e10:	f003 fa50 	bl	142b4 <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
   10e14:	7c7b      	ldrb	r3, [r7, #17]
   10e16:	079b      	lsls	r3, r3, #30
   10e18:	d515      	bpl.n	10e46 <lv_label_create+0x18e>
   10e1a:	6878      	ldr	r0, [r7, #4]
   10e1c:	b198      	cbz	r0, 10e46 <lv_label_create+0x18e>
            uint16_t len = (uint16_t    )strlen(copy_ext->dot.tmp_ptr);
   10e1e:	f7ef f997 	bl	150 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   10e22:	6869      	ldr	r1, [r5, #4]
   10e24:	b282      	uxth	r2, r0
   10e26:	4620      	mov	r0, r4
   10e28:	f7ff fa36 	bl	10298 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
   10e2c:	7c7b      	ldrb	r3, [r7, #17]
   10e2e:	7c6a      	ldrb	r2, [r5, #17]
   10e30:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10e34:	f363 0241 	bfi	r2, r3, #1, #1
   10e38:	746a      	strb	r2, [r5, #17]
        ext->dot_end       = copy_ext->dot_end;
   10e3a:	893b      	ldrh	r3, [r7, #8]
   10e3c:	812b      	strh	r3, [r5, #8]
        lv_obj_refresh_style(new_label);
   10e3e:	4620      	mov	r0, r4
   10e40:	f7fa fa96 	bl	b370 <lv_obj_refresh_style>
   10e44:	e748      	b.n	10cd8 <lv_label_create+0x20>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
   10e46:	2204      	movs	r2, #4
   10e48:	18b9      	adds	r1, r7, r2
   10e4a:	18a8      	adds	r0, r5, r2
   10e4c:	f003 fa32 	bl	142b4 <memcpy>
   10e50:	e7ec      	b.n	10e2c <lv_label_create+0x174>
   10e52:	bf00      	nop
   10e54:	0001a9b8 	.word	0x0001a9b8
   10e58:	20005e84 	.word	0x20005e84
   10e5c:	00010eb1 	.word	0x00010eb1
   10e60:	000109dd 	.word	0x000109dd
   10e64:	0001de86 	.word	0x0001de86

00010e68 <lv_label_get_text_sel_start>:
{
   10e68:	b507      	push	{r0, r1, r2, lr}
   10e6a:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10e6c:	f7f9 fc58 	bl	a720 <lv_debug_check_null>
   10e70:	9a01      	ldr	r2, [sp, #4]
   10e72:	4603      	mov	r3, r0
   10e74:	b918      	cbnz	r0, 10e7e <lv_label_get_text_sel_start+0x16>
   10e76:	4804      	ldr	r0, [pc, #16]	; (10e88 <lv_label_get_text_sel_start+0x20>)
   10e78:	f7f9 fc62 	bl	a740 <lv_debug_log_error>
   10e7c:	e7fe      	b.n	10e7c <lv_label_get_text_sel_start+0x14>
}
   10e7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   10e82:	b003      	add	sp, #12
   10e84:	f85d fb04 	ldr.w	pc, [sp], #4
   10e88:	0001de08 	.word	0x0001de08

00010e8c <lv_label_get_text_sel_end>:
{
   10e8c:	b507      	push	{r0, r1, r2, lr}
   10e8e:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10e90:	f7f9 fc46 	bl	a720 <lv_debug_check_null>
   10e94:	9a01      	ldr	r2, [sp, #4]
   10e96:	4603      	mov	r3, r0
   10e98:	b918      	cbnz	r0, 10ea2 <lv_label_get_text_sel_end+0x16>
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   10e9a:	4804      	ldr	r0, [pc, #16]	; (10eac <lv_label_get_text_sel_end+0x20>)
   10e9c:	f7f9 fc50 	bl	a740 <lv_debug_log_error>
   10ea0:	e7fe      	b.n	10ea0 <lv_label_get_text_sel_end+0x14>
}
   10ea2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   10ea6:	b003      	add	sp, #12
   10ea8:	f85d fb04 	ldr.w	pc, [sp], #4
   10eac:	0001de08 	.word	0x0001de08

00010eb0 <lv_label_design>:
{
   10eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK)
   10eb4:	2a02      	cmp	r2, #2
{
   10eb6:	b08f      	sub	sp, #60	; 0x3c
   10eb8:	4605      	mov	r5, r0
   10eba:	4689      	mov	r9, r1
    if(mode == LV_DESIGN_COVER_CHK)
   10ebc:	f000 8101 	beq.w	110c2 <lv_label_design+0x212>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   10ec0:	2a00      	cmp	r2, #0
   10ec2:	f040 80f7 	bne.w	110b4 <lv_label_design+0x204>
        const lv_style_t * style = lv_obj_get_style(label);
   10ec6:	f7f9 fea7 	bl	ac18 <lv_obj_get_style>
   10eca:	4604      	mov	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
   10ecc:	4628      	mov	r0, r5
   10ece:	f7fa fd24 	bl	b91a <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
   10ed2:	a90a      	add	r1, sp, #40	; 0x28
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
   10ed4:	4682      	mov	sl, r0
        lv_obj_get_coords(label, &coords);
   10ed6:	4628      	mov	r0, r5
   10ed8:	f7f9 fe2a 	bl	ab30 <lv_obj_get_coords>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10edc:	4628      	mov	r0, r5
   10ede:	f7fa fdb7 	bl	ba50 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
   10ee2:	7c43      	ldrb	r3, [r0, #17]
   10ee4:	07d9      	lsls	r1, r3, #31
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   10ee6:	4606      	mov	r6, r0
        if(ext->body_draw) {
   10ee8:	d524      	bpl.n	10f34 <lv_label_design+0x84>
            lv_obj_get_coords(label, &bg);
   10eea:	a90c      	add	r1, sp, #48	; 0x30
   10eec:	4628      	mov	r0, r5
   10eee:	f7f9 fe1f 	bl	ab30 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
   10ef2:	8b62      	ldrh	r2, [r4, #26]
   10ef4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   10ef8:	1a9b      	subs	r3, r3, r2
   10efa:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            bg.x2 += style->body.padding.right;
   10efe:	8ba2      	ldrh	r2, [r4, #28]
   10f00:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   10f04:	4413      	add	r3, r2
   10f06:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            bg.y1 -= style->body.padding.top;
   10f0a:	8ae2      	ldrh	r2, [r4, #22]
   10f0c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   10f10:	1a9b      	subs	r3, r3, r2
   10f12:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            bg.y2 += style->body.padding.bottom;
   10f16:	8b22      	ldrh	r2, [r4, #24]
   10f18:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
   10f1c:	4628      	mov	r0, r5
            bg.y2 += style->body.padding.bottom;
   10f1e:	4413      	add	r3, r2
   10f20:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
   10f24:	f7fa fcf9 	bl	b91a <lv_obj_get_opa_scale>
   10f28:	4622      	mov	r2, r4
   10f2a:	4603      	mov	r3, r0
   10f2c:	4649      	mov	r1, r9
   10f2e:	a80c      	add	r0, sp, #48	; 0x30
   10f30:	f7f4 f9c4 	bl	52bc <lv_draw_rect>
        lv_label_align_t align = lv_label_get_align(label);
   10f34:	4628      	mov	r0, r5
   10f36:	f7ff fa45 	bl	103c4 <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   10f3a:	7c33      	ldrb	r3, [r6, #16]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   10f3c:	061a      	lsls	r2, r3, #24
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   10f3e:	f3c3 1880 	ubfx	r8, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   10f42:	bf48      	it	mi
   10f44:	f048 0802 	orrmi.w	r8, r8, #2
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   10f48:	2801      	cmp	r0, #1
   10f4a:	f040 80b5 	bne.w	110b8 <lv_label_design+0x208>
   10f4e:	f048 0804 	orr.w	r8, r8, #4
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   10f52:	f003 0207 	and.w	r2, r3, #7
   10f56:	3a03      	subs	r2, #3
   10f58:	2a01      	cmp	r2, #1
   10f5a:	d81d      	bhi.n	10f98 <lv_label_design+0xe8>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   10f5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   10f60:	2b10      	cmp	r3, #16
   10f62:	d001      	beq.n	10f68 <lv_label_design+0xb8>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   10f64:	2b20      	cmp	r3, #32
   10f66:	d117      	bne.n	10f98 <lv_label_design+0xe8>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
   10f68:	f647 4218 	movw	r2, #31768	; 0x7c18
   10f6c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
   10f70:	f8cd 8008 	str.w	r8, [sp, #8]
   10f74:	9201      	str	r2, [sp, #4]
   10f76:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   10f7a:	9200      	str	r2, [sp, #0]
   10f7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10f7e:	6831      	ldr	r1, [r6, #0]
   10f80:	a80c      	add	r0, sp, #48	; 0x30
   10f82:	f7f2 f969 	bl	3258 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
   10f86:	4628      	mov	r0, r5
   10f88:	f9bd 7030 	ldrsh.w	r7, [sp, #48]	; 0x30
   10f8c:	f7f9 fe16 	bl	abbc <lv_obj_get_width>
   10f90:	4287      	cmp	r7, r0
                flag &= ~LV_TXT_FLAG_CENTER;
   10f92:	bfc8      	it	gt
   10f94:	f008 08f3 	andgt.w	r8, r8, #243	; 0xf3
        sel.start = lv_label_get_text_sel_start(label);
   10f98:	4628      	mov	r0, r5
   10f9a:	f7ff ff65 	bl	10e68 <lv_label_get_text_sel_start>
   10f9e:	f8ad 0020 	strh.w	r0, [sp, #32]
        sel.end = lv_label_get_text_sel_end(label);
   10fa2:	4628      	mov	r0, r5
   10fa4:	f7ff ff72 	bl	10e8c <lv_label_get_text_sel_end>
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset, &sel, hint, lv_obj_get_base_dir(label));
   10fa8:	4633      	mov	r3, r6
        sel.end = lv_label_get_text_sel_end(label);
   10faa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset, &sel, hint, lv_obj_get_base_dir(label));
   10fae:	f853 2b0a 	ldr.w	r2, [r3], #10
   10fb2:	4628      	mov	r0, r5
   10fb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10fb8:	f7fa fcad 	bl	b916 <lv_obj_get_base_dir>
   10fbc:	9b07      	ldr	r3, [sp, #28]
   10fbe:	9a06      	ldr	r2, [sp, #24]
   10fc0:	9005      	str	r0, [sp, #20]
   10fc2:	f04f 0b00 	mov.w	fp, #0
   10fc6:	af08      	add	r7, sp, #32
   10fc8:	e9cd 8301 	strd	r8, r3, [sp, #4]
   10fcc:	9200      	str	r2, [sp, #0]
   10fce:	4653      	mov	r3, sl
   10fd0:	f8cd b010 	str.w	fp, [sp, #16]
   10fd4:	9703      	str	r7, [sp, #12]
   10fd6:	4622      	mov	r2, r4
   10fd8:	4649      	mov	r1, r9
   10fda:	a80a      	add	r0, sp, #40	; 0x28
   10fdc:	f7f3 fea8 	bl	4d30 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   10fe0:	7c33      	ldrb	r3, [r6, #16]
   10fe2:	f003 0307 	and.w	r3, r3, #7
   10fe6:	2b04      	cmp	r3, #4
   10fe8:	d164      	bne.n	110b4 <lv_label_design+0x204>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
   10fea:	f647 4218 	movw	r2, #31768	; 0x7c18
   10fee:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
   10ff2:	f8cd 8008 	str.w	r8, [sp, #8]
   10ff6:	9201      	str	r2, [sp, #4]
   10ff8:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   10ffc:	9200      	str	r2, [sp, #0]
   10ffe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11000:	6831      	ldr	r1, [r6, #0]
   11002:	a809      	add	r0, sp, #36	; 0x24
   11004:	f7f2 f928 	bl	3258 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
   11008:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
   1100c:	9306      	str	r3, [sp, #24]
   1100e:	4628      	mov	r0, r5
   11010:	f7f9 fdd4 	bl	abbc <lv_obj_get_width>
   11014:	9b06      	ldr	r3, [sp, #24]
   11016:	4283      	cmp	r3, r0
   11018:	dd26      	ble.n	11068 <lv_label_design+0x1b8>
                ofs.x = ext->offset.x + size.x +
   1101a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1101e:	8973      	ldrh	r3, [r6, #10]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   11020:	6a60      	ldr	r0, [r4, #36]	; 0x24
                ofs.x = ext->offset.x + size.x +
   11022:	4413      	add	r3, r2
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   11024:	2220      	movs	r2, #32
   11026:	4611      	mov	r1, r2
                ofs.x = ext->offset.x + size.x +
   11028:	b29b      	uxth	r3, r3
   1102a:	9306      	str	r3, [sp, #24]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   1102c:	f7f8 fa50 	bl	94d0 <lv_font_get_glyph_width>
                ofs.x = ext->offset.x + size.x +
   11030:	9b06      	ldr	r3, [sp, #24]
   11032:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11036:	4418      	add	r0, r3
                ofs.y = ext->offset.y;
   11038:	89b3      	ldrh	r3, [r6, #12]
                ofs.x = ext->offset.x + size.x +
   1103a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
                ofs.y = ext->offset.y;
   1103e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   11042:	4628      	mov	r0, r5
   11044:	6833      	ldr	r3, [r6, #0]
   11046:	9306      	str	r3, [sp, #24]
   11048:	f7fa fc65 	bl	b916 <lv_obj_get_base_dir>
   1104c:	9b06      	ldr	r3, [sp, #24]
   1104e:	9300      	str	r3, [sp, #0]
   11050:	aa0c      	add	r2, sp, #48	; 0x30
   11052:	e9cd b004 	strd	fp, r0, [sp, #16]
   11056:	e9cd 8201 	strd	r8, r2, [sp, #4]
   1105a:	9703      	str	r7, [sp, #12]
   1105c:	4653      	mov	r3, sl
   1105e:	4622      	mov	r2, r4
   11060:	4649      	mov	r1, r9
   11062:	a80a      	add	r0, sp, #40	; 0x28
   11064:	f7f3 fe64 	bl	4d30 <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
   11068:	4628      	mov	r0, r5
   1106a:	f9bd 7026 	ldrsh.w	r7, [sp, #38]	; 0x26
   1106e:	f7f9 fdb3 	bl	abd8 <lv_obj_get_height>
   11072:	4287      	cmp	r7, r0
   11074:	dd1e      	ble.n	110b4 <lv_label_design+0x204>
                ofs.x = ext->offset.x;
   11076:	8973      	ldrh	r3, [r6, #10]
   11078:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
   1107c:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   11080:	89b3      	ldrh	r3, [r6, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   11082:	6836      	ldr	r6, [r6, #0]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
   11084:	441a      	add	r2, r3
   11086:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11088:	7a1b      	ldrb	r3, [r3, #8]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   1108a:	4628      	mov	r0, r5
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
   1108c:	4413      	add	r3, r2
   1108e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs, &sel, NULL, lv_obj_get_base_dir(label));
   11092:	f7fa fc40 	bl	b916 <lv_obj_get_base_dir>
   11096:	2300      	movs	r3, #0
   11098:	9304      	str	r3, [sp, #16]
   1109a:	ab08      	add	r3, sp, #32
   1109c:	9303      	str	r3, [sp, #12]
   1109e:	ab0c      	add	r3, sp, #48	; 0x30
   110a0:	e9cd 8301 	strd	r8, r3, [sp, #4]
   110a4:	9005      	str	r0, [sp, #20]
   110a6:	9600      	str	r6, [sp, #0]
   110a8:	4653      	mov	r3, sl
   110aa:	4622      	mov	r2, r4
   110ac:	4649      	mov	r1, r9
   110ae:	a80a      	add	r0, sp, #40	; 0x28
   110b0:	f7f3 fe3e 	bl	4d30 <lv_draw_label>
    return true;
   110b4:	2001      	movs	r0, #1
   110b6:	e005      	b.n	110c4 <lv_label_design+0x214>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   110b8:	2802      	cmp	r0, #2
   110ba:	bf08      	it	eq
   110bc:	f048 0808 	orreq.w	r8, r8, #8
   110c0:	e747      	b.n	10f52 <lv_label_design+0xa2>
        return false;
   110c2:	2000      	movs	r0, #0
}
   110c4:	b00f      	add	sp, #60	; 0x3c
   110c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000110ca <lv_bar_anim>:
    return res;
}

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
   110ca:	b538      	push	{r3, r4, r5, lr}
   110cc:	4604      	mov	r4, r0
   110ce:	460d      	mov	r5, r1
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
   110d0:	f7fa fcbe 	bl	ba50 <lv_obj_get_ext_attr>
    ext->anim_state    = value;
   110d4:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(bar);
   110d6:	4620      	mov	r0, r4
}
   110d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(bar);
   110dc:	f7f9 bddc 	b.w	ac98 <lv_obj_invalidate>

000110e0 <lv_bar_set_value>:
{
   110e0:	b570      	push	{r4, r5, r6, lr}
   110e2:	b08a      	sub	sp, #40	; 0x28
   110e4:	4604      	mov	r4, r0
   110e6:	460d      	mov	r5, r1
   110e8:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
   110ea:	f7f9 fb19 	bl	a720 <lv_debug_check_null>
   110ee:	4603      	mov	r3, r0
   110f0:	b920      	cbnz	r0, 110fc <lv_bar_set_value+0x1c>
   110f2:	4821      	ldr	r0, [pc, #132]	; (11178 <lv_bar_set_value+0x98>)
   110f4:	4622      	mov	r2, r4
   110f6:	f7f9 fb23 	bl	a740 <lv_debug_log_error>
   110fa:	e7fe      	b.n	110fa <lv_bar_set_value+0x1a>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
   110fc:	4620      	mov	r0, r4
   110fe:	f7fa fca7 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
   11102:	f9b0 3000 	ldrsh.w	r3, [r0]
   11106:	429d      	cmp	r5, r3
   11108:	d010      	beq.n	1112c <lv_bar_set_value+0x4c>
    new_value = value > ext->max_value ? ext->max_value : value;
   1110a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   1110e:	428d      	cmp	r5, r1
   11110:	bfa8      	it	ge
   11112:	460d      	movge	r5, r1
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
   11114:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   11118:	42a9      	cmp	r1, r5
   1111a:	bfb8      	it	lt
   1111c:	4629      	movlt	r1, r5
    if(ext->cur_value == new_value) return;
   1111e:	428b      	cmp	r3, r1
   11120:	d004      	beq.n	1112c <lv_bar_set_value+0x4c>
    if(anim == LV_ANIM_OFF) {
   11122:	b92e      	cbnz	r6, 11130 <lv_bar_set_value+0x50>
        ext->cur_value = new_value;
   11124:	8001      	strh	r1, [r0, #0]
        lv_obj_invalidate(bar);
   11126:	4620      	mov	r0, r4
   11128:	f7f9 fdb6 	bl	ac98 <lv_obj_invalidate>
}
   1112c:	b00a      	add	sp, #40	; 0x28
   1112e:	bd70      	pop	{r4, r5, r6, pc}
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
   11130:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
        a.var            = bar;
   11134:	9401      	str	r4, [sp, #4]
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
   11136:	3201      	adds	r2, #1
            ext->anim_start = ext->anim_end;
   11138:	bf18      	it	ne
   1113a:	8903      	ldrhne	r3, [r0, #8]
   1113c:	80c3      	strh	r3, [r0, #6]
        a.end            = LV_BAR_ANIM_STATE_END;
   1113e:	f44f 7280 	mov.w	r2, #256	; 0x100
   11142:	2300      	movs	r3, #0
            ext->anim_end   = new_value;
   11144:	8101      	strh	r1, [r0, #8]
        a.end            = LV_BAR_ANIM_STATE_END;
   11146:	e9cd 3205 	strd	r3, r2, [sp, #20]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
   1114a:	4a0c      	ldr	r2, [pc, #48]	; (1117c <lv_bar_set_value+0x9c>)
   1114c:	9202      	str	r2, [sp, #8]
        a.path_cb        = lv_anim_path_linear;
   1114e:	4a0c      	ldr	r2, [pc, #48]	; (11180 <lv_bar_set_value+0xa0>)
   11150:	9203      	str	r2, [sp, #12]
        a.ready_cb       = lv_bar_anim_ready;
   11152:	4a0c      	ldr	r2, [pc, #48]	; (11184 <lv_bar_set_value+0xa4>)
   11154:	9204      	str	r2, [sp, #16]
        a.time           = ext->anim_time;
   11156:	8982      	ldrh	r2, [r0, #12]
        a.act_time       = 0;
   11158:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.playback_pause = 0;
   1115c:	9308      	str	r3, [sp, #32]
        a.playback       = 0;
   1115e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        a.time           = ext->anim_time;
   11162:	f8ad 201c 	strh.w	r2, [sp, #28]
        a.playback       = 0;
   11166:	f023 0303 	bic.w	r3, r3, #3
        lv_anim_create(&a);
   1116a:	a801      	add	r0, sp, #4
        a.playback       = 0;
   1116c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        lv_anim_create(&a);
   11170:	f7f2 fe04 	bl	3d7c <lv_anim_create>
   11174:	e7da      	b.n	1112c <lv_bar_set_value+0x4c>
   11176:	bf00      	nop
   11178:	0001de08 	.word	0x0001de08
   1117c:	000110cb 	.word	0x000110cb
   11180:	00003ba3 	.word	0x00003ba3
   11184:	00011189 	.word	0x00011189

00011188 <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
   11188:	b510      	push	{r4, lr}
   1118a:	4604      	mov	r4, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
   1118c:	6800      	ldr	r0, [r0, #0]
   1118e:	f7fa fc5f 	bl	ba50 <lv_obj_get_ext_attr>
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
   11192:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_bar_set_value(a->var, ext->anim_end, false);
   11196:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
   1119a:	8143      	strh	r3, [r0, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
   1119c:	2200      	movs	r2, #0
   1119e:	6820      	ldr	r0, [r4, #0]
}
   111a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_bar_set_value(a->var, ext->anim_end, false);
   111a4:	f7ff bf9c 	b.w	110e0 <lv_bar_set_value>

000111a8 <lv_bar_set_style>:
{
   111a8:	b570      	push	{r4, r5, r6, lr}
   111aa:	4604      	mov	r4, r0
   111ac:	460e      	mov	r6, r1
   111ae:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
   111b0:	f7f9 fab6 	bl	a720 <lv_debug_check_null>
   111b4:	4603      	mov	r3, r0
   111b6:	b920      	cbnz	r0, 111c2 <lv_bar_set_style+0x1a>
   111b8:	480b      	ldr	r0, [pc, #44]	; (111e8 <lv_bar_set_style+0x40>)
   111ba:	4622      	mov	r2, r4
   111bc:	f7f9 fac0 	bl	a740 <lv_debug_log_error>
   111c0:	e7fe      	b.n	111c0 <lv_bar_set_style+0x18>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
   111c2:	4620      	mov	r0, r4
   111c4:	f7fa fc44 	bl	ba50 <lv_obj_get_ext_attr>
    switch(type) {
   111c8:	b116      	cbz	r6, 111d0 <lv_bar_set_style+0x28>
   111ca:	2e01      	cmp	r6, #1
   111cc:	d006      	beq.n	111dc <lv_bar_set_style+0x34>
}
   111ce:	bd70      	pop	{r4, r5, r6, pc}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
   111d0:	4629      	mov	r1, r5
   111d2:	4620      	mov	r0, r4
}
   111d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
   111d8:	f7fa b8fe 	b.w	b3d8 <lv_obj_set_style>
            ext->style_indic = style;
   111dc:	6105      	str	r5, [r0, #16]
            lv_obj_refresh_ext_draw_pad(bar);
   111de:	4620      	mov	r0, r4
}
   111e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(bar);
   111e4:	f7fa b964 	b.w	b4b0 <lv_obj_refresh_ext_draw_pad>
   111e8:	0001de08 	.word	0x0001de08

000111ec <lv_bar_create>:
{
   111ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111ee:	460e      	mov	r6, r1
    lv_obj_t * new_bar = lv_obj_create(par, copy);
   111f0:	f7fa f972 	bl	b4d8 <lv_obj_create>
   111f4:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_bar);
   111f6:	f7f9 fa93 	bl	a720 <lv_debug_check_null>
   111fa:	4603      	mov	r3, r0
   111fc:	b920      	cbnz	r0, 11208 <lv_bar_create+0x1c>
   111fe:	483f      	ldr	r0, [pc, #252]	; (112fc <lv_bar_create+0x110>)
   11200:	4622      	mov	r2, r4
   11202:	f7f9 fa9d 	bl	a740 <lv_debug_log_error>
   11206:	e7fe      	b.n	11206 <lv_bar_create+0x1a>
    if(new_bar == NULL) return NULL;
   11208:	b914      	cbnz	r4, 11210 <lv_bar_create+0x24>
   1120a:	2400      	movs	r4, #0
}
   1120c:	4620      	mov	r0, r4
   1120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
   11210:	4d3b      	ldr	r5, [pc, #236]	; (11300 <lv_bar_create+0x114>)
   11212:	682b      	ldr	r3, [r5, #0]
   11214:	b91b      	cbnz	r3, 1121e <lv_bar_create+0x32>
   11216:	4620      	mov	r0, r4
   11218:	f7fa fbfa 	bl	ba10 <lv_obj_get_signal_cb>
   1121c:	6028      	str	r0, [r5, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
   1121e:	4d39      	ldr	r5, [pc, #228]	; (11304 <lv_bar_create+0x118>)
   11220:	682b      	ldr	r3, [r5, #0]
   11222:	b91b      	cbnz	r3, 1122c <lv_bar_create+0x40>
   11224:	4620      	mov	r0, r4
   11226:	f7fa fc03 	bl	ba30 <lv_obj_get_design_cb>
   1122a:	6028      	str	r0, [r5, #0]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
   1122c:	2114      	movs	r1, #20
   1122e:	4620      	mov	r0, r4
   11230:	f7f9 fc0c 	bl	aa4c <lv_obj_allocate_ext_attr>
   11234:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
   11236:	f7f9 fa73 	bl	a720 <lv_debug_check_null>
   1123a:	4603      	mov	r3, r0
   1123c:	b920      	cbnz	r0, 11248 <lv_bar_create+0x5c>
   1123e:	482f      	ldr	r0, [pc, #188]	; (112fc <lv_bar_create+0x110>)
   11240:	462a      	mov	r2, r5
   11242:	f7f9 fa7d 	bl	a740 <lv_debug_log_error>
   11246:	e7fe      	b.n	11246 <lv_bar_create+0x5a>
    if(ext == NULL) return NULL;
   11248:	2d00      	cmp	r5, #0
   1124a:	d0de      	beq.n	1120a <lv_bar_create+0x1e>
    ext->max_value = 100;
   1124c:	2700      	movs	r7, #0
   1124e:	2364      	movs	r3, #100	; 0x64
   11250:	e9c5 7300 	strd	r7, r3, [r5]
    ext->anim_end   = 0;
   11254:	4b2c      	ldr	r3, [pc, #176]	; (11308 <lv_bar_create+0x11c>)
   11256:	60ab      	str	r3, [r5, #8]
    ext->anim_time  = 200;
   11258:	23c8      	movs	r3, #200	; 0xc8
   1125a:	81ab      	strh	r3, [r5, #12]
    ext->sym         = 0;
   1125c:	7bab      	ldrb	r3, [r5, #14]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
   1125e:	492b      	ldr	r1, [pc, #172]	; (1130c <lv_bar_create+0x120>)
    ext->sym         = 0;
   11260:	f367 0300 	bfi	r3, r7, #0, #1
   11264:	73ab      	strb	r3, [r5, #14]
    ext->style_indic = &lv_style_pretty_color;
   11266:	4b2a      	ldr	r3, [pc, #168]	; (11310 <lv_bar_create+0x124>)
   11268:	612b      	str	r3, [r5, #16]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
   1126a:	4620      	mov	r0, r4
   1126c:	f7f9 fbce 	bl	aa0c <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
   11270:	4928      	ldr	r1, [pc, #160]	; (11314 <lv_bar_create+0x128>)
   11272:	4620      	mov	r0, r4
   11274:	f7f9 fbda 	bl	aa2c <lv_obj_set_design_cb>
    if(copy == NULL) {
   11278:	bb1e      	cbnz	r6, 112c2 <lv_bar_create+0xd6>
        lv_obj_set_click(new_bar, false);
   1127a:	4631      	mov	r1, r6
   1127c:	4620      	mov	r0, r4
   1127e:	f7f9 fac7 	bl	a810 <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
   11282:	2237      	movs	r2, #55	; 0x37
   11284:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   11288:	4620      	mov	r0, r4
   1128a:	f7fa fa73 	bl	b774 <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
   1128e:	f9b5 1000 	ldrsh.w	r1, [r5]
   11292:	4632      	mov	r2, r6
   11294:	4620      	mov	r0, r4
   11296:	f7ff ff23 	bl	110e0 <lv_bar_set_value>
        lv_theme_t * th = lv_theme_get_current();
   1129a:	f7f7 fe5f 	bl	8f5c <lv_theme_get_current>
        if(th) {
   1129e:	4605      	mov	r5, r0
   112a0:	b150      	cbz	r0, 112b8 <lv_bar_create+0xcc>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
   112a2:	6d02      	ldr	r2, [r0, #80]	; 0x50
   112a4:	4631      	mov	r1, r6
   112a6:	4620      	mov	r0, r4
   112a8:	f7ff ff7e 	bl	111a8 <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
   112ac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   112ae:	2101      	movs	r1, #1
   112b0:	4620      	mov	r0, r4
   112b2:	f7ff ff79 	bl	111a8 <lv_bar_set_style>
   112b6:	e7a9      	b.n	1120c <lv_bar_create+0x20>
            lv_obj_set_style(new_bar, &lv_style_pretty);
   112b8:	4917      	ldr	r1, [pc, #92]	; (11318 <lv_bar_create+0x12c>)
   112ba:	4620      	mov	r0, r4
   112bc:	f7fa f88c 	bl	b3d8 <lv_obj_set_style>
   112c0:	e7a4      	b.n	1120c <lv_bar_create+0x20>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
   112c2:	4630      	mov	r0, r6
   112c4:	f7fa fbc4 	bl	ba50 <lv_obj_get_ext_attr>
        ext->min_value          = ext_copy->min_value;
   112c8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   112cc:	806b      	strh	r3, [r5, #2]
        ext->max_value          = ext_copy->max_value;
   112ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   112d2:	80ab      	strh	r3, [r5, #4]
        ext->cur_value          = ext_copy->cur_value;
   112d4:	f9b0 3000 	ldrsh.w	r3, [r0]
   112d8:	802b      	strh	r3, [r5, #0]
        ext->style_indic        = ext_copy->style_indic;
   112da:	6903      	ldr	r3, [r0, #16]
   112dc:	612b      	str	r3, [r5, #16]
        ext->sym                = ext_copy->sym;
   112de:	7b82      	ldrb	r2, [r0, #14]
   112e0:	7bab      	ldrb	r3, [r5, #14]
   112e2:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(new_bar);
   112e6:	4620      	mov	r0, r4
        ext->sym                = ext_copy->sym;
   112e8:	73ab      	strb	r3, [r5, #14]
        lv_obj_refresh_style(new_bar);
   112ea:	f7fa f841 	bl	b370 <lv_obj_refresh_style>
        lv_bar_set_value(new_bar, ext->cur_value, false);
   112ee:	f9b5 1000 	ldrsh.w	r1, [r5]
   112f2:	463a      	mov	r2, r7
   112f4:	4620      	mov	r0, r4
   112f6:	f7ff fef3 	bl	110e0 <lv_bar_set_value>
   112fa:	e787      	b.n	1120c <lv_bar_create+0x20>
   112fc:	0001a9b8 	.word	0x0001a9b8
   11300:	20005e8c 	.word	0x20005e8c
   11304:	20005e88 	.word	0x20005e88
   11308:	ffff0000 	.word	0xffff0000
   1130c:	000115c5 	.word	0x000115c5
   11310:	20005f7c 	.word	0x20005f7c
   11314:	000113e9 	.word	0x000113e9
   11318:	2000607c 	.word	0x2000607c

0001131c <lv_bar_get_value>:
{
   1131c:	b507      	push	{r0, r1, r2, lr}
   1131e:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
   11320:	f7f9 f9fe 	bl	a720 <lv_debug_check_null>
   11324:	9a01      	ldr	r2, [sp, #4]
   11326:	4603      	mov	r3, r0
   11328:	b918      	cbnz	r0, 11332 <lv_bar_get_value+0x16>
   1132a:	4809      	ldr	r0, [pc, #36]	; (11350 <lv_bar_get_value+0x34>)
   1132c:	f7f9 fa08 	bl	a740 <lv_debug_log_error>
   11330:	e7fe      	b.n	11330 <lv_bar_get_value+0x14>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
   11332:	4610      	mov	r0, r2
   11334:	f7fa fb8c 	bl	ba50 <lv_obj_get_ext_attr>
    if(ext->anim_state != LV_BAR_ANIM_STATE_INV) return ext->anim_end;
   11338:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   1133c:	3301      	adds	r3, #1
   1133e:	bf14      	ite	ne
   11340:	f9b0 0008 	ldrshne.w	r0, [r0, #8]
    return ext->cur_value;
   11344:	f9b0 0000 	ldrsheq.w	r0, [r0]
}
   11348:	b003      	add	sp, #12
   1134a:	f85d fb04 	ldr.w	pc, [sp], #4
   1134e:	bf00      	nop
   11350:	0001de08 	.word	0x0001de08

00011354 <lv_bar_get_min_value>:
{
   11354:	b507      	push	{r0, r1, r2, lr}
   11356:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
   11358:	f7f9 f9e2 	bl	a720 <lv_debug_check_null>
   1135c:	9a01      	ldr	r2, [sp, #4]
   1135e:	4603      	mov	r3, r0
   11360:	b918      	cbnz	r0, 1136a <lv_bar_get_min_value+0x16>
   11362:	4806      	ldr	r0, [pc, #24]	; (1137c <lv_bar_get_min_value+0x28>)
   11364:	f7f9 f9ec 	bl	a740 <lv_debug_log_error>
   11368:	e7fe      	b.n	11368 <lv_bar_get_min_value+0x14>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
   1136a:	4610      	mov	r0, r2
   1136c:	f7fa fb70 	bl	ba50 <lv_obj_get_ext_attr>
}
   11370:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   11374:	b003      	add	sp, #12
   11376:	f85d fb04 	ldr.w	pc, [sp], #4
   1137a:	bf00      	nop
   1137c:	0001de08 	.word	0x0001de08

00011380 <lv_bar_get_max_value>:
{
   11380:	b507      	push	{r0, r1, r2, lr}
   11382:	9001      	str	r0, [sp, #4]
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
   11384:	f7f9 f9cc 	bl	a720 <lv_debug_check_null>
   11388:	9a01      	ldr	r2, [sp, #4]
   1138a:	4603      	mov	r3, r0
   1138c:	b918      	cbnz	r0, 11396 <lv_bar_get_max_value+0x16>
   1138e:	4806      	ldr	r0, [pc, #24]	; (113a8 <lv_bar_get_max_value+0x28>)
   11390:	f7f9 f9d6 	bl	a740 <lv_debug_log_error>
   11394:	e7fe      	b.n	11394 <lv_bar_get_max_value+0x14>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
   11396:	4610      	mov	r0, r2
   11398:	f7fa fb5a 	bl	ba50 <lv_obj_get_ext_attr>
}
   1139c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
   113a0:	b003      	add	sp, #12
   113a2:	f85d fb04 	ldr.w	pc, [sp], #4
   113a6:	bf00      	nop
   113a8:	0001de08 	.word	0x0001de08

000113ac <lv_bar_get_style>:
{
   113ac:	b538      	push	{r3, r4, r5, lr}
   113ae:	4604      	mov	r4, r0
   113b0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
   113b2:	f7f9 f9b5 	bl	a720 <lv_debug_check_null>
   113b6:	4603      	mov	r3, r0
   113b8:	b920      	cbnz	r0, 113c4 <lv_bar_get_style+0x18>
   113ba:	480a      	ldr	r0, [pc, #40]	; (113e4 <lv_bar_get_style+0x38>)
   113bc:	4622      	mov	r2, r4
   113be:	f7f9 f9bf 	bl	a740 <lv_debug_log_error>
   113c2:	e7fe      	b.n	113c2 <lv_bar_get_style+0x16>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
   113c4:	4620      	mov	r0, r4
   113c6:	f7fa fb43 	bl	ba50 <lv_obj_get_ext_attr>
    switch(type) {
   113ca:	b11d      	cbz	r5, 113d4 <lv_bar_get_style+0x28>
   113cc:	2d01      	cmp	r5, #1
   113ce:	d006      	beq.n	113de <lv_bar_get_style+0x32>
   113d0:	2000      	movs	r0, #0
}
   113d2:	bd38      	pop	{r3, r4, r5, pc}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
   113d4:	4620      	mov	r0, r4
}
   113d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
   113da:	f7f9 bc1d 	b.w	ac18 <lv_obj_get_style>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
   113de:	6900      	ldr	r0, [r0, #16]
    return style;
   113e0:	e7f7      	b.n	113d2 <lv_bar_get_style+0x26>
   113e2:	bf00      	nop
   113e4:	0001de08 	.word	0x0001de08

000113e8 <lv_bar_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
   113e8:	2a02      	cmp	r2, #2
{
   113ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113ee:	4604      	mov	r4, r0
   113f0:	4688      	mov	r8, r1
   113f2:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
   113f4:	d105      	bne.n	11402 <lv_bar_design+0x1a>
        return ancestor_design_f(bar, mask, mode);
   113f6:	4b72      	ldr	r3, [pc, #456]	; (115c0 <lv_bar_design+0x1d8>)
   113f8:	681b      	ldr	r3, [r3, #0]
   113fa:	4798      	blx	r3
}
   113fc:	b003      	add	sp, #12
   113fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
   11402:	b10a      	cbz	r2, 11408 <lv_bar_design+0x20>
   11404:	2001      	movs	r0, #1
   11406:	e7f9      	b.n	113fc <lv_bar_design+0x14>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
   11408:	f7fa fa87 	bl	b91a <lv_obj_get_opa_scale>
        ancestor_design_f(bar, mask, mode);
   1140c:	4b6c      	ldr	r3, [pc, #432]	; (115c0 <lv_bar_design+0x1d8>)
   1140e:	462a      	mov	r2, r5
   11410:	681b      	ldr	r3, [r3, #0]
   11412:	4641      	mov	r1, r8
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
   11414:	4681      	mov	r9, r0
        ancestor_design_f(bar, mask, mode);
   11416:	4620      	mov	r0, r4
   11418:	4798      	blx	r3
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
   1141a:	4620      	mov	r0, r4
   1141c:	f7fa fb18 	bl	ba50 <lv_obj_get_ext_attr>
        if(ext->cur_value != ext->min_value || ext->sym
   11420:	f9b0 2000 	ldrsh.w	r2, [r0]
   11424:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   11428:	429a      	cmp	r2, r3
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
   1142a:	4606      	mov	r6, r0
        if(ext->cur_value != ext->min_value || ext->sym
   1142c:	d106      	bne.n	1143c <lv_bar_design+0x54>
   1142e:	7b83      	ldrb	r3, [r0, #14]
   11430:	07dd      	lsls	r5, r3, #31
   11432:	d403      	bmi.n	1143c <lv_bar_design+0x54>
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
   11434:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   11438:	3301      	adds	r3, #1
   1143a:	d0e3      	beq.n	11404 <lv_bar_design+0x1c>
            const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
   1143c:	2101      	movs	r1, #1
   1143e:	4620      	mov	r0, r4
   11440:	f7ff ffb4 	bl	113ac <lv_bar_get_style>
   11444:	4607      	mov	r7, r0
    memcpy(dest, src, sizeof(lv_area_t));
   11446:	f104 0110 	add.w	r1, r4, #16
   1144a:	2208      	movs	r2, #8
   1144c:	4668      	mov	r0, sp
   1144e:	f002 ff31 	bl	142b4 <memcpy>
            indic_area.x1 += style_indic->body.padding.left;
   11452:	f8bd b000 	ldrh.w	fp, [sp]
   11456:	8b7b      	ldrh	r3, [r7, #26]
            indic_area.x2 -= style_indic->body.padding.right;
   11458:	f8bd c004 	ldrh.w	ip, [sp, #4]
            indic_area.y1 += style_indic->body.padding.top;
   1145c:	f8bd 5002 	ldrh.w	r5, [sp, #2]
            indic_area.y2 -= style_indic->body.padding.bottom;
   11460:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11464:	f9b6 a00a 	ldrsh.w	sl, [r6, #10]
   11468:	f9b6 e004 	ldrsh.w	lr, [r6, #4]
            indic_area.x1 += style_indic->body.padding.left;
   1146c:	449b      	add	fp, r3
            indic_area.x2 -= style_indic->body.padding.right;
   1146e:	8bbb      	ldrh	r3, [r7, #28]
   11470:	ebac 0c03 	sub.w	ip, ip, r3
            indic_area.y1 += style_indic->body.padding.top;
   11474:	8afb      	ldrh	r3, [r7, #22]
   11476:	441d      	add	r5, r3
            indic_area.y2 -= style_indic->body.padding.bottom;
   11478:	8b3b      	ldrh	r3, [r7, #24]
   1147a:	1ac9      	subs	r1, r1, r3
   1147c:	b289      	uxth	r1, r1
            indic_area.x2 -= style_indic->body.padding.right;
   1147e:	fa1f fc8c 	uxth.w	ip, ip
   11482:	1c48      	adds	r0, r1, #1
            indic_area.x1 += style_indic->body.padding.left;
   11484:	fa1f fb8b 	uxth.w	fp, fp
            indic_area.y1 += style_indic->body.padding.top;
   11488:	b2ad      	uxth	r5, r5
            indic_area.x2 -= style_indic->body.padding.right;
   1148a:	f8ad c004 	strh.w	ip, [sp, #4]
   1148e:	b280      	uxth	r0, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11490:	f10c 0c01 	add.w	ip, ip, #1
            indic_area.y1 += style_indic->body.padding.top;
   11494:	f8ad 5002 	strh.w	r5, [sp, #2]
   11498:	ebac 0c0b 	sub.w	ip, ip, fp
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1149c:	1b45      	subs	r5, r0, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1149e:	fa0f fc8c 	sxth.w	ip, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   114a2:	b22d      	sxth	r5, r5
            if(w >= h) {
   114a4:	45ac      	cmp	ip, r5
   114a6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
            indic_area.x1 += style_indic->body.padding.left;
   114aa:	f8ad b000 	strh.w	fp, [sp]
            indic_area.y2 -= style_indic->body.padding.bottom;
   114ae:	f8ad 1006 	strh.w	r1, [sp, #6]
            if(w >= h) {
   114b2:	db47      	blt.n	11544 <lv_bar_design+0x15c>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
   114b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   114b8:	ebae 0003 	sub.w	r0, lr, r3
   114bc:	d03a      	beq.n	11534 <lv_bar_design+0x14c>
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
   114be:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
   114c2:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
   114c6:	1ac9      	subs	r1, r1, r3
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
   114c8:	1ad2      	subs	r2, r2, r3
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
   114ca:	fb0c f101 	mul.w	r1, ip, r1
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
   114ce:	fb0c f202 	mul.w	r2, ip, r2
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
   114d2:	fb91 f1f0 	sdiv	r1, r1, r0
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
   114d6:	fb92 f2f0 	sdiv	r2, r2, r0
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
   114da:	b20c      	sxth	r4, r1
   114dc:	b212      	sxth	r2, r2
   114de:	1b12      	subs	r2, r2, r4
   114e0:	fb0a f202 	mul.w	r2, sl, r2
   114e4:	eb01 2222 	add.w	r2, r1, r2, asr #8
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
   114e8:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
                    indic_area.x2 =
   114ec:	b212      	sxth	r2, r2
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
   114ee:	440a      	add	r2, r1
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
   114f0:	7bb1      	ldrb	r1, [r6, #14]
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
   114f2:	b212      	sxth	r2, r2
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
   114f4:	07cc      	lsls	r4, r1, #31
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
   114f6:	f8ad 2004 	strh.w	r2, [sp, #4]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
   114fa:	d514      	bpl.n	11526 <lv_bar_design+0x13e>
   114fc:	2b00      	cmp	r3, #0
   114fe:	da12      	bge.n	11526 <lv_bar_design+0x13e>
   11500:	f1be 0f00 	cmp.w	lr, #0
   11504:	dd0f      	ble.n	11526 <lv_bar_design+0x13e>
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
   11506:	425b      	negs	r3, r3
   11508:	fb0c fc03 	mul.w	ip, ip, r3
   1150c:	fb9c f0f0 	sdiv	r0, ip, r0
   11510:	4483      	add	fp, r0
   11512:	fa0f fb8b 	sxth.w	fp, fp
                    if(indic_area.x2 > zero)
   11516:	455a      	cmp	r2, fp
                        indic_area.x1 = zero;
   11518:	bfce      	itee	gt
   1151a:	f8ad b000 	strhgt.w	fp, [sp]
                        indic_area.x1 = indic_area.x2;
   1151e:	f8ad 2000 	strhle.w	r2, [sp]
                        indic_area.x2 = zero;
   11522:	f8ad b004 	strhle.w	fp, [sp, #4]
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
   11526:	464b      	mov	r3, r9
   11528:	463a      	mov	r2, r7
   1152a:	4641      	mov	r1, r8
   1152c:	4668      	mov	r0, sp
   1152e:	f7f3 fec5 	bl	52bc <lv_draw_rect>
   11532:	e767      	b.n	11404 <lv_bar_design+0x1c>
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
   11534:	f9b6 2000 	ldrsh.w	r2, [r6]
   11538:	1ad2      	subs	r2, r2, r3
   1153a:	fb0c f202 	mul.w	r2, ip, r2
   1153e:	fb92 f2f0 	sdiv	r2, r2, r0
   11542:	e7d1      	b.n	114e8 <lv_bar_design+0x100>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
   11544:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   11548:	ebae 0c03 	sub.w	ip, lr, r3
   1154c:	d031      	beq.n	115b2 <lv_bar_design+0x1ca>
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
   1154e:	f9b6 4006 	ldrsh.w	r4, [r6, #6]
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
   11552:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
   11556:	1ae4      	subs	r4, r4, r3
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
   11558:	1ad2      	subs	r2, r2, r3
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
   1155a:	436c      	muls	r4, r5
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
   1155c:	436a      	muls	r2, r5
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
   1155e:	fb94 f4fc 	sdiv	r4, r4, ip
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
   11562:	fb92 f2fc 	sdiv	r2, r2, ip
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
   11566:	fa0f fb84 	sxth.w	fp, r4
   1156a:	b212      	sxth	r2, r2
   1156c:	eba2 020b 	sub.w	r2, r2, fp
   11570:	fb0a f202 	mul.w	r2, sl, r2
   11574:	eb04 2222 	add.w	r2, r4, r2, asr #8
                    indic_area.y1 =
   11578:	b212      	sxth	r2, r2
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
   1157a:	1a82      	subs	r2, r0, r2
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
   1157c:	7bb0      	ldrb	r0, [r6, #14]
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
   1157e:	b212      	sxth	r2, r2
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
   11580:	07c0      	lsls	r0, r0, #31
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
   11582:	f8ad 2002 	strh.w	r2, [sp, #2]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
   11586:	d5ce      	bpl.n	11526 <lv_bar_design+0x13e>
   11588:	2b00      	cmp	r3, #0
   1158a:	dacc      	bge.n	11526 <lv_bar_design+0x13e>
   1158c:	f1be 0f00 	cmp.w	lr, #0
   11590:	ddc9      	ble.n	11526 <lv_bar_design+0x13e>
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
   11592:	425b      	negs	r3, r3
   11594:	436b      	muls	r3, r5
   11596:	fb93 fcfc 	sdiv	ip, r3, ip
   1159a:	eba1 010c 	sub.w	r1, r1, ip
   1159e:	b209      	sxth	r1, r1
                    if(indic_area.y1 < zero)
   115a0:	428a      	cmp	r2, r1
                        indic_area.y2 = zero;
   115a2:	bfb2      	itee	lt
   115a4:	f8ad 1006 	strhlt.w	r1, [sp, #6]
                        indic_area.y2 = indic_area.y1;
   115a8:	f8ad 2006 	strhge.w	r2, [sp, #6]
                        indic_area.y1 = zero;
   115ac:	f8ad 1002 	strhge.w	r1, [sp, #2]
   115b0:	e7b9      	b.n	11526 <lv_bar_design+0x13e>
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
   115b2:	f9b6 2000 	ldrsh.w	r2, [r6]
   115b6:	1ad2      	subs	r2, r2, r3
   115b8:	436a      	muls	r2, r5
   115ba:	fb92 f2fc 	sdiv	r2, r2, ip
   115be:	e7db      	b.n	11578 <lv_bar_design+0x190>
   115c0:	20005e88 	.word	0x20005e88

000115c4 <lv_bar_signal>:
{
   115c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(bar, sign, param);
   115c6:	4b10      	ldr	r3, [pc, #64]	; (11608 <lv_bar_signal+0x44>)
   115c8:	681b      	ldr	r3, [r3, #0]
{
   115ca:	4605      	mov	r5, r0
   115cc:	460e      	mov	r6, r1
   115ce:	4617      	mov	r7, r2
    res = ancestor_signal(bar, sign, param);
   115d0:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
   115d2:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
   115d4:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
   115d6:	d114      	bne.n	11602 <lv_bar_signal+0x3e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   115d8:	2e07      	cmp	r6, #7
   115da:	d105      	bne.n	115e8 <lv_bar_signal+0x24>
   115dc:	4638      	mov	r0, r7
   115de:	490b      	ldr	r1, [pc, #44]	; (1160c <lv_bar_signal+0x48>)
}
   115e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   115e4:	f7fa ba44 	b.w	ba70 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   115e8:	2e06      	cmp	r6, #6
   115ea:	d10a      	bne.n	11602 <lv_bar_signal+0x3e>
        const lv_style_t * style_indic = lv_bar_get_style(bar, LV_BAR_STYLE_INDIC);
   115ec:	4601      	mov	r1, r0
   115ee:	4628      	mov	r0, r5
   115f0:	f7ff fedc 	bl	113ac <lv_bar_get_style>
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
   115f4:	f9b5 2030 	ldrsh.w	r2, [r5, #48]	; 0x30
   115f8:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   115fc:	429a      	cmp	r2, r3
   115fe:	bfb8      	it	lt
   11600:	862b      	strhlt	r3, [r5, #48]	; 0x30
}
   11602:	4620      	mov	r0, r4
   11604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11606:	bf00      	nop
   11608:	20005e8c 	.word	0x20005e8c
   1160c:	0001de8b 	.word	0x0001de8b

00011610 <emu_vmon_thresh_get>:
}
static float emu_vmon_thresh_get(uint8_t ubThresh1V86, uint8_t ubThresh2V98, uint8_t ubCurrentThresh)
{
    // Convert from BCD
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
   11610:	230a      	movs	r3, #10
{
   11612:	b510      	push	{r4, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
   11614:	0904      	lsrs	r4, r0, #4
   11616:	f000 000f 	and.w	r0, r0, #15
   1161a:	fb13 0404 	smlabb	r4, r3, r4, r0
   1161e:	ee07 4a90 	vmov	s15, r4
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
   11622:	0908      	lsrs	r0, r1, #4
   11624:	f001 010f 	and.w	r1, r1, #15
   11628:	fb13 1100 	smlabb	r1, r3, r0, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
   1162c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
   11630:	ee07 1a90 	vmov	s15, r1
   11634:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Interpolate between the two calibration thresholds
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
   11638:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 11664 <emu_vmon_thresh_get+0x54>
    float fOffset = 1.86f - (fSlope * fThresh1V86);
   1163c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 11668 <emu_vmon_thresh_get+0x58>
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
   11640:	ee77 7ac7 	vsub.f32	s15, s15, s14
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
   11644:	0911      	lsrs	r1, r2, #4
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
   11646:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
   1164a:	f002 020f 	and.w	r2, r2, #15
   1164e:	fb13 2301 	smlabb	r3, r3, r1, r2
   11652:	ee07 3a90 	vmov	s15, r3
    float fOffset = 1.86f - (fSlope * fThresh1V86);
   11656:	eea7 0a66 	vfms.f32	s0, s14, s13
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
   1165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Find the Code for the target voltage
    float fCurrentVoltage = (fCurrentThresh * fSlope) + fOffset;

    return fCurrentVoltage;
}
   1165e:	eea7 0aa6 	vfma.f32	s0, s15, s13
   11662:	bd10      	pop	{r4, pc}
   11664:	3f8f5c29 	.word	0x3f8f5c29
   11668:	3fee147b 	.word	0x3fee147b

0001166c <emu_vmon_thresh_calc>:
{
   1166c:	b507      	push	{r0, r1, r2, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
   1166e:	230a      	movs	r3, #10
   11670:	0902      	lsrs	r2, r0, #4
   11672:	f000 000f 	and.w	r0, r0, #15
   11676:	fb13 0202 	smlabb	r2, r3, r2, r0
   1167a:	ee07 2a90 	vmov	s15, r2
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
   1167e:	090a      	lsrs	r2, r1, #4
   11680:	f001 010f 	and.w	r1, r1, #15
   11684:	fb13 1302 	smlabb	r3, r3, r2, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
   11688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
   1168c:	ee07 3a90 	vmov	s15, r3
   11690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
   11694:	ed9f 6a17 	vldr	s12, [pc, #92]	; 116f4 <emu_vmon_thresh_calc+0x88>
   11698:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1169c:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fOffset = 1.86f - (fSlope * fThresh1V86);
   116a0:	eddf 7a15 	vldr	s15, [pc, #84]	; 116f8 <emu_vmon_thresh_calc+0x8c>
   116a4:	eee7 7a66 	vfms.f32	s15, s14, s13
    float fTargetThresh = roundf((fTargetVoltage - fOffset) / fSlope);
   116a8:	ee30 0a67 	vsub.f32	s0, s0, s15
   116ac:	ee80 0a26 	vdiv.f32	s0, s0, s13
   116b0:	f002 fdca 	bl	14248 <roundf>
    uint8_t ubDecThresh = fTargetThresh / 10.f;
   116b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   116b8:	eec0 7a07 	vdiv.f32	s15, s0, s14
   116bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   116c0:	edcd 7a01 	vstr	s15, [sp, #4]
   116c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    uint8_t ubUniThresh = fTargetThresh - (ubDecThresh * 10);
   116c8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   116cc:	005b      	lsls	r3, r3, #1
   116ce:	ee07 3a90 	vmov	s15, r3
   116d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   116d6:	ee30 0a67 	vsub.f32	s0, s0, s15
   116da:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   116de:	ee17 0a90 	vmov	r0, s15
    uint8_t ubTargetThresh = ((ubDecThresh & 0xF) << 4) | (ubUniThresh & 0xF);
   116e2:	f000 000f 	and.w	r0, r0, #15
   116e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   116ea:	b2c0      	uxtb	r0, r0
   116ec:	b003      	add	sp, #12
   116ee:	f85d fb04 	ldr.w	pc, [sp], #4
   116f2:	bf00      	nop
   116f4:	3f8f5c29 	.word	0x3f8f5c29
   116f8:	3fee147b 	.word	0x3fee147b

000116fc <_emu_isr>:

void _emu_isr()
{
    uint32_t ulFlags = EMU->IFC;
   116fc:	4b15      	ldr	r3, [pc, #84]	; (11754 <_emu_isr+0x58>)
   116fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    if(ulFlags & EMU_IFC_VMONAVDDFALL)
   11700:	f013 0101 	ands.w	r1, r3, #1
   11704:	d015      	beq.n	11732 <_emu_isr+0x36>
        g_ubAVDDLow = 1;
   11706:	4a14      	ldr	r2, [pc, #80]	; (11758 <_emu_isr+0x5c>)
   11708:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
        g_ubAVDDLow = 0;
   1170a:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONALTAVDDFALL)
   1170c:	f013 0104 	ands.w	r1, r3, #4
   11710:	d013      	beq.n	1173a <_emu_isr+0x3e>
        g_ubAltAVDDLow = 1;
   11712:	4a12      	ldr	r2, [pc, #72]	; (1175c <_emu_isr+0x60>)
   11714:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
        g_ubAltAVDDLow = 0;
   11716:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONDVDDFALL)
   11718:	f013 0110 	ands.w	r1, r3, #16
   1171c:	d011      	beq.n	11742 <_emu_isr+0x46>
        g_ubDVDDLow = 1;
   1171e:	4a10      	ldr	r2, [pc, #64]	; (11760 <_emu_isr+0x64>)
   11720:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
        g_ubDVDDLow = 0;
   11722:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONIO0FALL)
   11724:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   11728:	d00f      	beq.n	1174a <_emu_isr+0x4e>
        g_ubIOVDDLow = 1;
   1172a:	4b0e      	ldr	r3, [pc, #56]	; (11764 <_emu_isr+0x68>)
   1172c:	2201      	movs	r2, #1
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
        g_ubIOVDDLow = 0;
   1172e:	701a      	strb	r2, [r3, #0]
}
   11730:	4770      	bx	lr
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
   11732:	079a      	lsls	r2, r3, #30
   11734:	d5ea      	bpl.n	1170c <_emu_isr+0x10>
        g_ubAVDDLow = 0;
   11736:	4a08      	ldr	r2, [pc, #32]	; (11758 <_emu_isr+0x5c>)
   11738:	e7e7      	b.n	1170a <_emu_isr+0xe>
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
   1173a:	0718      	lsls	r0, r3, #28
   1173c:	d5ec      	bpl.n	11718 <_emu_isr+0x1c>
        g_ubAltAVDDLow = 0;
   1173e:	4a07      	ldr	r2, [pc, #28]	; (1175c <_emu_isr+0x60>)
   11740:	e7e9      	b.n	11716 <_emu_isr+0x1a>
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
   11742:	069a      	lsls	r2, r3, #26
   11744:	d5ee      	bpl.n	11724 <_emu_isr+0x28>
        g_ubDVDDLow = 0;
   11746:	4a06      	ldr	r2, [pc, #24]	; (11760 <_emu_isr+0x64>)
   11748:	e7eb      	b.n	11722 <_emu_isr+0x26>
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
   1174a:	061b      	lsls	r3, r3, #24
   1174c:	d5f0      	bpl.n	11730 <_emu_isr+0x34>
        g_ubIOVDDLow = 0;
   1174e:	4b05      	ldr	r3, [pc, #20]	; (11764 <_emu_isr+0x68>)
   11750:	e7ed      	b.n	1172e <_emu_isr+0x32>
   11752:	bf00      	nop
   11754:	400e3000 	.word	0x400e3000
   11758:	20005e90 	.word	0x20005e90
   1175c:	20005e91 	.word	0x20005e91
   11760:	20005e92 	.word	0x20005e92
   11764:	20005e93 	.word	0x20005e93

00011768 <emu_init>:

void emu_init(uint8_t ubImmediateSwitch)
{
    EMU->PWRCTRL = (ubImmediateSwitch ? EMU_PWRCTRL_IMMEDIATEPWRSWITCH : 0) | EMU_PWRCTRL_REGPWRSEL_DVDD | EMU_PWRCTRL_ANASW_AVDD;
   11768:	4b09      	ldr	r3, [pc, #36]	; (11790 <emu_init+0x28>)
   1176a:	2800      	cmp	r0, #0
   1176c:	bf14      	ite	ne
   1176e:	f44f 5210 	movne.w	r2, #9216	; 0x2400
   11772:	f44f 6280 	moveq.w	r2, #1024	; 0x400
   11776:	63da      	str	r2, [r3, #60]	; 0x3c

    EMU->IFC = _EMU_IFC_MASK; // Clear pending IRQs
   11778:	4a06      	ldr	r2, [pc, #24]	; (11794 <emu_init+0x2c>)
   1177a:	62da      	str	r2, [r3, #44]	; 0x2c
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
   1177c:	4b06      	ldr	r3, [pc, #24]	; (11798 <emu_init+0x30>)
   1177e:	2201      	movs	r2, #1
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
   11780:	21e0      	movs	r1, #224	; 0xe0
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
   11782:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
   11786:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    IRQ_ENABLE(EMU_IRQn); // Enable vector
   1178a:	601a      	str	r2, [r3, #0]
}
   1178c:	4770      	bx	lr
   1178e:	bf00      	nop
   11790:	400e3000 	.word	0x400e3000
   11794:	e3df37ff 	.word	0xe3df37ff
   11798:	e000e100 	.word	0xe000e100

0001179c <emu_vmon_avdd_config>:

    return fEMUTemp;
}

void emu_vmon_avdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh, float fHighThresh, float *pfHighThresh)
{
   1179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    EMU->VMONAVDDCTRL &= ~EMU_VMONAVDDCTRL_EN;
   117a0:	4b25      	ldr	r3, [pc, #148]	; (11838 <emu_vmon_avdd_config+0x9c>)
{
   117a2:	4617      	mov	r7, r2
    EMU->VMONAVDDCTRL &= ~EMU_VMONAVDDCTRL_EN;
   117a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   117a8:	f022 0201 	bic.w	r2, r2, #1
{
   117ac:	ed2d 8b02 	vpush	{d8}
    EMU->VMONAVDDCTRL &= ~EMU_VMONAVDDCTRL_EN;
   117b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    EMU->IEN &= ~(EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL);
   117b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   117b6:	f022 0203 	bic.w	r2, r2, #3
{
   117ba:	b082      	sub	sp, #8
   117bc:	4688      	mov	r8, r1
   117be:	eeb0 8a60 	vmov.f32	s16, s1
    EMU->IEN &= ~(EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL);
   117c2:	631a      	str	r2, [r3, #48]	; 0x30

    if(!ubEnable)
   117c4:	b398      	cbz	r0, 1182e <emu_vmon_avdd_config+0x92>
        return;

    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
   117c6:	4b1d      	ldr	r3, [pc, #116]	; (1183c <emu_vmon_avdd_config+0xa0>)
   117c8:	f8d3 5140 	ldr.w	r5, [r3, #320]	; 0x140
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
   117cc:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
   117d0:	b2ed      	uxtb	r5, r5
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
   117d2:	f3c1 2107 	ubfx	r1, r1, #8, #8

    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
   117d6:	4628      	mov	r0, r5
   117d8:	9101      	str	r1, [sp, #4]
   117da:	f7ff ff47 	bl	1166c <emu_vmon_thresh_calc>
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
   117de:	9901      	ldr	r1, [sp, #4]
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
   117e0:	4606      	mov	r6, r0
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
   117e2:	eeb0 0a48 	vmov.f32	s0, s16
   117e6:	4628      	mov	r0, r5
   117e8:	f7ff ff40 	bl	1166c <emu_vmon_thresh_calc>

    if(pfLowThresh)
   117ec:	9901      	ldr	r1, [sp, #4]
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
   117ee:	4604      	mov	r4, r0
    if(pfLowThresh)
   117f0:	f1b8 0f00 	cmp.w	r8, #0
   117f4:	d006      	beq.n	11804 <emu_vmon_avdd_config+0x68>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
   117f6:	4632      	mov	r2, r6
   117f8:	4628      	mov	r0, r5
   117fa:	f7ff ff09 	bl	11610 <emu_vmon_thresh_get>
   117fe:	9901      	ldr	r1, [sp, #4]
   11800:	ed88 0a00 	vstr	s0, [r8]

    if(pfHighThresh)
   11804:	b12f      	cbz	r7, 11812 <emu_vmon_avdd_config+0x76>
        *pfHighThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubHighThresh);
   11806:	4622      	mov	r2, r4
   11808:	4628      	mov	r0, r5
   1180a:	f7ff ff01 	bl	11610 <emu_vmon_thresh_get>
   1180e:	ed87 0a00 	vstr	s0, [r7]

    EMU->IFC = EMU_IFC_VMONAVDDRISE | EMU_IFC_VMONAVDDFALL;
   11812:	4a09      	ldr	r2, [pc, #36]	; (11838 <emu_vmon_avdd_config+0x9c>)
   11814:	2303      	movs	r3, #3
   11816:	62d3      	str	r3, [r2, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
   11818:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1181a:	f043 0303 	orr.w	r3, r3, #3
   1181e:	6313      	str	r3, [r2, #48]	; 0x30
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
   11820:	0423      	lsls	r3, r4, #16
   11822:	ea43 2006 	orr.w	r0, r3, r6, lsl #8
   11826:	f040 0001 	orr.w	r0, r0, #1
   1182a:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
}
   1182e:	b002      	add	sp, #8
   11830:	ecbd 8b02 	vpop	{d8}
   11834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11838:	400e3000 	.word	0x400e3000
   1183c:	0fe081b0 	.word	0x0fe081b0

00011840 <emu_vmon_dvdd_config>:
    EMU->IEN |= EMU_IEN_VMONALTAVDDRISE | EMU_IEN_VMONALTAVDDFALL;
    EMU->VMONALTAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONALTAVDDCTRL_THRESFINE_SHIFT) | EMU_VMONALTAVDDCTRL_EN;
}
void emu_vmon_dvdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
    EMU->VMONDVDDCTRL &= ~EMU_VMONDVDDCTRL_EN;
   11840:	4b18      	ldr	r3, [pc, #96]	; (118a4 <emu_vmon_dvdd_config+0x64>)
   11842:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
   11846:	f022 0201 	bic.w	r2, r2, #1
{
   1184a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EMU->VMONDVDDCTRL &= ~EMU_VMONDVDDCTRL_EN;
   1184c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    EMU->IEN &= ~(EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL);
   11850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   11852:	f022 0230 	bic.w	r2, r2, #48	; 0x30
{
   11856:	460d      	mov	r5, r1
    EMU->IEN &= ~(EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL);
   11858:	631a      	str	r2, [r3, #48]	; 0x30

    if(!ubEnable)
   1185a:	b300      	cbz	r0, 1189e <emu_vmon_dvdd_config+0x5e>
        return;

    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
   1185c:	4b12      	ldr	r3, [pc, #72]	; (118a8 <emu_vmon_dvdd_config+0x68>)
   1185e:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
   11862:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
   11866:	b2f6      	uxtb	r6, r6
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
   11868:	f3c1 2107 	ubfx	r1, r1, #8, #8

    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
   1186c:	4630      	mov	r0, r6
   1186e:	9101      	str	r1, [sp, #4]
   11870:	f7ff fefc 	bl	1166c <emu_vmon_thresh_calc>
   11874:	4604      	mov	r4, r0

    if(pfLowThresh)
   11876:	b135      	cbz	r5, 11886 <emu_vmon_dvdd_config+0x46>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
   11878:	4602      	mov	r2, r0
   1187a:	9901      	ldr	r1, [sp, #4]
   1187c:	4630      	mov	r0, r6
   1187e:	f7ff fec7 	bl	11610 <emu_vmon_thresh_get>
   11882:	ed85 0a00 	vstr	s0, [r5]

    EMU->IFC = EMU_IFC_VMONDVDDRISE | EMU_IFC_VMONDVDDFALL;
   11886:	4b07      	ldr	r3, [pc, #28]	; (118a4 <emu_vmon_dvdd_config+0x64>)
   11888:	2230      	movs	r2, #48	; 0x30
   1188a:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
   1188c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
   1188e:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
   11890:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
   11894:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
   11898:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
   1189a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
}
   1189e:	b002      	add	sp, #8
   118a0:	bd70      	pop	{r4, r5, r6, pc}
   118a2:	bf00      	nop
   118a4:	400e3000 	.word	0x400e3000
   118a8:	0fe081b0 	.word	0x0fe081b0

000118ac <emu_vmon_iovdd_config>:
void emu_vmon_iovdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
    EMU->VMONIO0CTRL &= ~EMU_VMONIO0CTRL_EN;
   118ac:	4b18      	ldr	r3, [pc, #96]	; (11910 <emu_vmon_iovdd_config+0x64>)
   118ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   118b2:	f022 0201 	bic.w	r2, r2, #1
{
   118b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EMU->VMONIO0CTRL &= ~EMU_VMONIO0CTRL_EN;
   118b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    EMU->IEN &= ~(EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL);
   118bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   118be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
{
   118c2:	460d      	mov	r5, r1
    EMU->IEN &= ~(EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL);
   118c4:	631a      	str	r2, [r3, #48]	; 0x30

    if(!ubEnable)
   118c6:	b300      	cbz	r0, 1190a <emu_vmon_iovdd_config+0x5e>
        return;

    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
   118c8:	4b12      	ldr	r3, [pc, #72]	; (11914 <emu_vmon_iovdd_config+0x68>)
   118ca:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
   118ce:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
   118d2:	f3c6 4607 	ubfx	r6, r6, #16, #8
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
   118d6:	0e09      	lsrs	r1, r1, #24

    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
   118d8:	4630      	mov	r0, r6
   118da:	9101      	str	r1, [sp, #4]
   118dc:	f7ff fec6 	bl	1166c <emu_vmon_thresh_calc>
   118e0:	4604      	mov	r4, r0

    if(pfLowThresh)
   118e2:	b135      	cbz	r5, 118f2 <emu_vmon_iovdd_config+0x46>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
   118e4:	4602      	mov	r2, r0
   118e6:	9901      	ldr	r1, [sp, #4]
   118e8:	4630      	mov	r0, r6
   118ea:	f7ff fe91 	bl	11610 <emu_vmon_thresh_get>
   118ee:	ed85 0a00 	vstr	s0, [r5]

    EMU->IFC = EMU_IFC_VMONIO0RISE | EMU_IFC_VMONIO0FALL;
   118f2:	4b07      	ldr	r3, [pc, #28]	; (11910 <emu_vmon_iovdd_config+0x64>)
   118f4:	22c0      	movs	r2, #192	; 0xc0
   118f6:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
   118f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
   118fa:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
   118fc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
   11900:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
   11904:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
   11906:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
}
   1190a:	b002      	add	sp, #8
   1190c:	bd70      	pop	{r4, r5, r6, pc}
   1190e:	bf00      	nop
   11910:	400e3000 	.word	0x400e3000
   11914:	0fe081b0 	.word	0x0fe081b0

00011918 <emu_r5v_vout_config>:

void emu_r5v_vout_config(float fTargetVoltage)
{
    if(fTargetVoltage < 2.4f || fTargetVoltage > 3.8f)
   11918:	eddf 7a18 	vldr	s15, [pc, #96]	; 1197c <emu_r5v_vout_config+0x64>
   1191c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   11920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11924:	d428      	bmi.n	11978 <emu_r5v_vout_config+0x60>
   11926:	eddf 7a16 	vldr	s15, [pc, #88]	; 11980 <emu_r5v_vout_config+0x68>
   1192a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11932:	dc21      	bgt.n	11978 <emu_r5v_vout_config+0x60>
        return;

    uint32_t ulCode = (fTargetVoltage - 2.3f) / 0.1f;
   11934:	eddf 7a13 	vldr	s15, [pc, #76]	; 11984 <emu_r5v_vout_config+0x6c>
   11938:	ed9f 7a13 	vldr	s14, [pc, #76]	; 11988 <emu_r5v_vout_config+0x70>

    while(EMU->R5VSTATUS & EMU_R5VSTATUS_COLDSTART);
   1193c:	4a13      	ldr	r2, [pc, #76]	; (1198c <emu_r5v_vout_config+0x74>)
    uint32_t ulCode = (fTargetVoltage - 2.3f) / 0.1f;
   1193e:	ee30 0a67 	vsub.f32	s0, s0, s15
   11942:	4613      	mov	r3, r2
   11944:	eec0 7a07 	vdiv.f32	s15, s0, s14
   11948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    while(EMU->R5VSTATUS & EMU_R5VSTATUS_COLDSTART);
   1194c:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
   11950:	0689      	lsls	r1, r1, #26
   11952:	d4fb      	bmi.n	1194c <emu_r5v_vout_config+0x34>
    while(EMU->R5VSYNC & EMU_R5VSYNC_OUTLEVELBUSY);
   11954:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
   11958:	07d0      	lsls	r0, r2, #31
   1195a:	d4fb      	bmi.n	11954 <emu_r5v_vout_config+0x3c>

    EMU->IFC = EMU_IFC_R5VVSINT;
   1195c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   11960:	62da      	str	r2, [r3, #44]	; 0x2c

    EMU->R5VOUTLEVEL = (ulCode << _EMU_R5VOUTLEVEL_OUTLEVEL_SHIFT);
   11962:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
    while(EMU->R5VSYNC & EMU_R5VSYNC_OUTLEVELBUSY);
   11966:	4b09      	ldr	r3, [pc, #36]	; (1198c <emu_r5v_vout_config+0x74>)
   11968:	461a      	mov	r2, r3
   1196a:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
   1196e:	07c9      	lsls	r1, r1, #31
   11970:	d4fb      	bmi.n	1196a <emu_r5v_vout_config+0x52>

    while(!(EMU->IF & EMU_IF_R5VVSINT));
   11972:	6a53      	ldr	r3, [r2, #36]	; 0x24
   11974:	021b      	lsls	r3, r3, #8
   11976:	d5fc      	bpl.n	11972 <emu_r5v_vout_config+0x5a>
}
   11978:	4770      	bx	lr
   1197a:	bf00      	nop
   1197c:	4019999a 	.word	0x4019999a
   11980:	40733333 	.word	0x40733333
   11984:	40133333 	.word	0x40133333
   11988:	3dcccccd 	.word	0x3dcccccd
   1198c:	400e3000 	.word	0x400e3000

00011990 <emu_r5v_vin_config>:
void emu_r5v_vin_config(uint32_t ulInput)
{
    if(ulInput != EMU_R5VCTRL_INPUTMODE_AUTO &&
   11990:	f430 7380 	bics.w	r3, r0, #256	; 0x100
   11994:	d002      	beq.n	1199c <emu_r5v_vin_config+0xc>
       ulInput != EMU_R5VCTRL_INPUTMODE_VBUS &&
   11996:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1199a:	d10b      	bne.n	119b4 <emu_r5v_vin_config+0x24>
       ulInput != EMU_R5VCTRL_INPUTMODE_VREGI)
        return;

    while(EMU->R5VSTATUS & EMU_R5VSTATUS_COLDSTART);
   1199c:	4a06      	ldr	r2, [pc, #24]	; (119b8 <emu_r5v_vin_config+0x28>)
   1199e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
   119a2:	069b      	lsls	r3, r3, #26
   119a4:	d4fb      	bmi.n	1199e <emu_r5v_vin_config+0xe>

    EMU->R5VCTRL = (EMU->R5VCTRL & ~_EMU_R5VCTRL_INPUTMODE_MASK) | ulInput;
   119a6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
   119aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   119ae:	4318      	orrs	r0, r3
   119b0:	f8c2 00c8 	str.w	r0, [r2, #200]	; 0xc8
}
   119b4:	4770      	bx	lr
   119b6:	bf00      	nop
   119b8:	400e3000 	.word	0x400e3000

000119bc <emu_r5v_amux_config>:
void emu_r5v_amux_config(uint8_t ubEnable, uint32_t ulInput)
{
    if(!ubEnable)
   119bc:	b968      	cbnz	r0, 119da <emu_r5v_amux_config+0x1e>
    {
        EMU->R5VADCCTRL &= ~EMU_R5VADCCTRL_ENAMUX;
   119be:	4b12      	ldr	r3, [pc, #72]	; (11a08 <emu_r5v_amux_config+0x4c>)
   119c0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   119c4:	f022 0201 	bic.w	r2, r2, #1
   119c8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        EMU->R5VCTRL &= ~EMU_R5VCTRL_IMONEN;
   119cc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   119d0:	f022 0204 	bic.w	r2, r2, #4
        return;

    EMU->R5VADCCTRL = ulInput | EMU_R5VADCCTRL_ENAMUX;

    if(ulInput == EMU_R5VADCCTRL_AMUXSEL_VREGIIMON || ulInput == EMU_R5VADCCTRL_AMUXSEL_VBUSIMON)
        EMU->R5VCTRL |= EMU_R5VCTRL_IMONEN;
   119d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
   119d8:	4770      	bx	lr
    if(ulInput != EMU_R5VADCCTRL_AMUXSEL_VBUSDIV10 &&
   119da:	f431 5340 	bics.w	r3, r1, #12288	; 0x3000
   119de:	d002      	beq.n	119e6 <emu_r5v_amux_config+0x2a>
       ulInput != EMU_R5VADCCTRL_AMUXSEL_VREGIIMON &&
   119e0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   119e4:	d1f8      	bne.n	119d8 <emu_r5v_amux_config+0x1c>
    EMU->R5VADCCTRL = ulInput | EMU_R5VADCCTRL_ENAMUX;
   119e6:	4b08      	ldr	r3, [pc, #32]	; (11a08 <emu_r5v_amux_config+0x4c>)
   119e8:	f041 0201 	orr.w	r2, r1, #1
    if(ulInput == EMU_R5VADCCTRL_AMUXSEL_VREGIIMON || ulInput == EMU_R5VADCCTRL_AMUXSEL_VBUSIMON)
   119ec:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
    EMU->R5VADCCTRL = ulInput | EMU_R5VADCCTRL_ENAMUX;
   119f0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    if(ulInput == EMU_R5VADCCTRL_AMUXSEL_VREGIIMON || ulInput == EMU_R5VADCCTRL_AMUXSEL_VBUSIMON)
   119f4:	d002      	beq.n	119fc <emu_r5v_amux_config+0x40>
   119f6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   119fa:	d1ed      	bne.n	119d8 <emu_r5v_amux_config+0x1c>
        EMU->R5VCTRL |= EMU_R5VCTRL_IMONEN;
   119fc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   11a00:	f042 0204 	orr.w	r2, r2, #4
   11a04:	e7e6      	b.n	119d4 <emu_r5v_amux_config+0x18>
   11a06:	bf00      	nop
   11a08:	400e3000 	.word	0x400e3000

00011a0c <crc_init>:

#else

void crc_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPCRC;
   11a0c:	4a07      	ldr	r2, [pc, #28]	; (11a2c <crc_init+0x20>)
   11a0e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   11a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11a16:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    GPCRC->CTRL = GPCRC_CTRL_BYTEREVERSE | GPCRC_CTRL_BITREVERSE | GPCRC_CTRL_POLYSEL_CRC32 | GPCRC_CTRL_EN_ENABLE;
   11a1a:	4b05      	ldr	r3, [pc, #20]	; (11a30 <crc_init+0x24>)
   11a1c:	f240 6201 	movw	r2, #1537	; 0x601
   11a20:	601a      	str	r2, [r3, #0]
    GPCRC->INIT = 0xFFFFFFFF;
   11a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11a26:	609a      	str	r2, [r3, #8]
}
   11a28:	4770      	bx	lr
   11a2a:	bf00      	nop
   11a2c:	400e4000 	.word	0x400e4000
   11a30:	4001c000 	.word	0x4001c000

00011a34 <_ldma_isr>:
#include "ldma.h"

static ldma_ch_isr_t ppfChannelISR[DMA_CHAN_COUNT];

void _ldma_isr()
{
   11a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ulFlags = LDMA->IFC;
   11a36:	4b0d      	ldr	r3, [pc, #52]	; (11a6c <_ldma_isr+0x38>)
   11a38:	6e9d      	ldr	r5, [r3, #104]	; 0x68

    if(ulFlags & LDMA_IFC_ERROR)
   11a3a:	2d00      	cmp	r5, #0
   11a3c:	da05      	bge.n	11a4a <_ldma_isr+0x16>
    {
        uint8_t ubErrorChannel = (LDMA->STATUS & _LDMA_STATUS_CHERROR_MASK) << _LDMA_STATUS_CHERROR_SHIFT;
   11a3e:	685b      	ldr	r3, [r3, #4]

        if(ppfChannelISR[ubErrorChannel])
   11a40:	4b0b      	ldr	r3, [pc, #44]	; (11a70 <_ldma_isr+0x3c>)
   11a42:	681b      	ldr	r3, [r3, #0]
   11a44:	b10b      	cbz	r3, 11a4a <_ldma_isr+0x16>
            ppfChannelISR[ubErrorChannel](1);
   11a46:	2001      	movs	r0, #1
   11a48:	4798      	blx	r3
    for(uint8_t ubChannel = 0; ubChannel < DMA_CHAN_COUNT; ubChannel++)
    {
        if(!(ulFlags & BIT(ubChannel)))
            continue;

        if(ppfChannelISR[ubChannel])
   11a4a:	4f09      	ldr	r7, [pc, #36]	; (11a70 <_ldma_isr+0x3c>)
{
   11a4c:	2400      	movs	r4, #0
        if(!(ulFlags & BIT(ubChannel)))
   11a4e:	2601      	movs	r6, #1
   11a50:	fa06 f304 	lsl.w	r3, r6, r4
   11a54:	422b      	tst	r3, r5
   11a56:	d004      	beq.n	11a62 <_ldma_isr+0x2e>
        if(ppfChannelISR[ubChannel])
   11a58:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   11a5c:	b10b      	cbz	r3, 11a62 <_ldma_isr+0x2e>
            ppfChannelISR[ubChannel](0);
   11a5e:	2000      	movs	r0, #0
   11a60:	4798      	blx	r3
    for(uint8_t ubChannel = 0; ubChannel < DMA_CHAN_COUNT; ubChannel++)
   11a62:	3401      	adds	r4, #1
   11a64:	2c18      	cmp	r4, #24
   11a66:	d1f3      	bne.n	11a50 <_ldma_isr+0x1c>
    }
}
   11a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a6a:	bf00      	nop
   11a6c:	40002000 	.word	0x40002000
   11a70:	20005e94 	.word	0x20005e94

00011a74 <ldma_init>:

void ldma_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_LDMA;
   11a74:	4a0b      	ldr	r2, [pc, #44]	; (11aa4 <ldma_init+0x30>)
   11a76:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
{
   11a7a:	b510      	push	{r4, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_LDMA;
   11a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11a80:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    LDMA->IFC = _LDMA_IFC_MASK; // Clear all flags
    IRQ_CLEAR(LDMA_IRQn); // Clear pending vector
   11a84:	4b08      	ldr	r3, [pc, #32]	; (11aa8 <ldma_init+0x34>)
    LDMA->IFC = _LDMA_IFC_MASK; // Clear all flags
   11a86:	f5a2 2262 	sub.w	r2, r2, #925696	; 0xe2000
   11a8a:	f06f 41fe 	mvn.w	r1, #2130706432	; 0x7f000000
    IRQ_CLEAR(LDMA_IRQn); // Clear pending vector
   11a8e:	2004      	movs	r0, #4
    IRQ_SET_PRIO(LDMA_IRQn, 2, 0); // Set priority 2,0
   11a90:	2480      	movs	r4, #128	; 0x80
    LDMA->IFC = _LDMA_IFC_MASK; // Clear all flags
   11a92:	6691      	str	r1, [r2, #104]	; 0x68
    IRQ_CLEAR(LDMA_IRQn); // Clear pending vector
   11a94:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
    IRQ_SET_PRIO(LDMA_IRQn, 2, 0); // Set priority 2,0
   11a98:	f883 4302 	strb.w	r4, [r3, #770]	; 0x302
    IRQ_ENABLE(LDMA_IRQn); // Enable vector
   11a9c:	6018      	str	r0, [r3, #0]
    LDMA->IEN = _LDMA_IEN_MASK; // Enable all channel flags
   11a9e:	66d1      	str	r1, [r2, #108]	; 0x6c
}
   11aa0:	bd10      	pop	{r4, pc}
   11aa2:	bf00      	nop
   11aa4:	400e4000 	.word	0x400e4000
   11aa8:	e000e100 	.word	0xe000e100

00011aac <ldma_ch_config>:
    PERI_REG_BIT_CLEAR(&(LDMA->SYNC)) = ubMask;
}

void ldma_ch_config(uint8_t ubChannel, uint32_t ulSource, uint32_t ulSrcIncSign, uint32_t ulDstIncSign, uint32_t ulArbitrationSlots, uint8_t ubLoopCount)
{
    if(ubChannel >= DMA_CHAN_COUNT)
   11aac:	2817      	cmp	r0, #23
{
   11aae:	b510      	push	{r4, lr}
    if(ubChannel >= DMA_CHAN_COUNT)
   11ab0:	d810      	bhi.n	11ad4 <ldma_ch_config+0x28>
        return;

    LDMA->CH[ubChannel].REQSEL = ulSource;
   11ab2:	2430      	movs	r4, #48	; 0x30
   11ab4:	4360      	muls	r0, r4
   11ab6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   11aba:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
   11abe:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    LDMA->CH[ubChannel].CFG = ulDstIncSign | ulSrcIncSign | ulArbitrationSlots;
   11ac2:	9902      	ldr	r1, [sp, #8]
   11ac4:	430a      	orrs	r2, r1
   11ac6:	4313      	orrs	r3, r2
   11ac8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    LDMA->CH[ubChannel].LOOP = ubLoopCount;
   11acc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11ad0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
   11ad4:	bd10      	pop	{r4, pc}
	...

00011ad8 <ldma_ch_load>:

    ppfChannelISR[ubChannel] = pfISR;
}
void ldma_ch_load(uint8_t ubChannel, ldma_descriptor_t *pDescriptor)
{
    if(ubChannel >= DMA_CHAN_COUNT)
   11ad8:	2817      	cmp	r0, #23
   11ada:	d810      	bhi.n	11afe <ldma_ch_load+0x26>
        return;

    if(!pDescriptor)
   11adc:	b179      	cbz	r1, 11afe <ldma_ch_load+0x26>
        return;

    if((uint32_t)pDescriptor & 3) // Descriptors must be word aligned
   11ade:	078b      	lsls	r3, r1, #30
   11ae0:	d10d      	bne.n	11afe <ldma_ch_load+0x26>
        return;

    LDMA->CH[ubChannel].LINK = (uint32_t)pDescriptor | LDMA_CH_LINK_LINK;
   11ae2:	4a07      	ldr	r2, [pc, #28]	; (11b00 <ldma_ch_load+0x28>)
   11ae4:	2330      	movs	r3, #48	; 0x30
   11ae6:	fb03 2300 	mla	r3, r3, r0, r2
   11aea:	f041 0102 	orr.w	r1, r1, #2
   11aee:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98

    PERI_REG_BIT_CLEAR(&(LDMA->CHDONE)) = BIT(ubChannel);
   11af2:	2301      	movs	r3, #1
   11af4:	fa03 f000 	lsl.w	r0, r3, r0
   11af8:	4b02      	ldr	r3, [pc, #8]	; (11b04 <ldma_ch_load+0x2c>)
   11afa:	6018      	str	r0, [r3, #0]
    LDMA->LINKLOAD = BIT(ubChannel);
   11afc:	63d0      	str	r0, [r2, #60]	; 0x3c
}
   11afe:	4770      	bx	lr
   11b00:	40002000 	.word	0x40002000
   11b04:	44002028 	.word	0x44002028

00011b08 <ldma_ch_enable>:

    LDMA->SWREQ = BIT(ubChannel);
}
void ldma_ch_enable(uint8_t ubChannel)
{
    if(ubChannel >= DMA_CHAN_COUNT)
   11b08:	2817      	cmp	r0, #23
        return;

    PERI_REG_BIT_SET(&(LDMA->CHEN)) = BIT(ubChannel);
   11b0a:	bf9f      	itttt	ls
   11b0c:	2301      	movls	r3, #1
   11b0e:	fa03 f000 	lslls.w	r0, r3, r0
   11b12:	4b01      	ldrls	r3, [pc, #4]	; (11b18 <ldma_ch_enable+0x10>)
   11b14:	6018      	strls	r0, [r3, #0]
}
   11b16:	4770      	bx	lr
   11b18:	46002020 	.word	0x46002020

00011b1c <ldma_ch_disable>:
void ldma_ch_disable(uint8_t ubChannel)
{
    if(ubChannel >= DMA_CHAN_COUNT)
   11b1c:	2817      	cmp	r0, #23
        return;

    PERI_REG_BIT_CLEAR(&(LDMA->CHEN)) = BIT(ubChannel);
   11b1e:	bf9f      	itttt	ls
   11b20:	2301      	movls	r3, #1
   11b22:	fa03 f000 	lslls.w	r0, r3, r0
   11b26:	4b01      	ldrls	r3, [pc, #4]	; (11b2c <ldma_ch_disable+0x10>)
   11b28:	6018      	strls	r0, [r3, #0]
}
   11b2a:	4770      	bx	lr
   11b2c:	44002020 	.word	0x44002020

00011b30 <ldma_ch_peri_req_enable>:
void ldma_ch_peri_req_enable(uint8_t ubChannel)
{
    if(ubChannel >= DMA_CHAN_COUNT)
   11b30:	2817      	cmp	r0, #23
        return;

    PERI_REG_BIT_CLEAR(&(LDMA->REQDIS)) = BIT(ubChannel);
   11b32:	bf9f      	itttt	ls
   11b34:	2301      	movls	r3, #1
   11b36:	fa03 f000 	lslls.w	r0, r3, r0
   11b3a:	4b01      	ldrls	r3, [pc, #4]	; (11b40 <ldma_ch_peri_req_enable+0x10>)
   11b3c:	6018      	strls	r0, [r3, #0]
}
   11b3e:	4770      	bx	lr
   11b40:	44002034 	.word	0x44002034

00011b44 <ldma_ch_peri_req_disable>:
void ldma_ch_peri_req_disable(uint8_t ubChannel)
{
    if(ubChannel >= DMA_CHAN_COUNT)
   11b44:	2817      	cmp	r0, #23
        return;

    PERI_REG_BIT_SET(&(LDMA->REQDIS)) = BIT(ubChannel);
   11b46:	bf9f      	itttt	ls
   11b48:	2301      	movls	r3, #1
   11b4a:	fa03 f000 	lslls.w	r0, r3, r0
   11b4e:	4b01      	ldrls	r3, [pc, #4]	; (11b54 <ldma_ch_peri_req_disable+0x10>)
   11b50:	6018      	strls	r0, [r3, #0]
}
   11b52:	4770      	bx	lr
   11b54:	46002034 	.word	0x46002034

00011b58 <ldma_ch_req_clear>:
void ldma_ch_req_clear(uint8_t ubChannel)
{
    if(ubChannel >= DMA_CHAN_COUNT)
   11b58:	2817      	cmp	r0, #23
        return;

    LDMA->REQCLEAR = BIT(ubChannel);
   11b5a:	bf9f      	itttt	ls
   11b5c:	2301      	movls	r3, #1
   11b5e:	fa03 f000 	lslls.w	r0, r3, r0
   11b62:	4b01      	ldrls	r3, [pc, #4]	; (11b68 <ldma_ch_req_clear+0x10>)
   11b64:	6418      	strls	r0, [r3, #64]	; 0x40
}
   11b66:	4770      	bx	lr
   11b68:	40002000 	.word	0x40002000

00011b6c <rmu_init>:
#include "rmu.h"

void rmu_init(uint32_t ulPinMode, uint32_t ulSysMode, uint32_t ulLockupMode, uint32_t ulWatchdogMode)
{
   11b6c:	b530      	push	{r4, r5, lr}
    RMU->CTRL = (RMU->CTRL & ~(_RMU_CTRL_PINRMODE_MASK | _RMU_CTRL_SYSRMODE_MASK | _RMU_CTRL_LOCKUPRMODE_MASK | _RMU_CTRL_WDOGRMODE_MASK)) | (ulPinMode & _RMU_CTRL_PINRMODE_MASK) | (ulSysMode & _RMU_CTRL_SYSRMODE_MASK) | (ulLockupMode & _RMU_CTRL_LOCKUPRMODE_MASK) | (ulWatchdogMode & _RMU_CTRL_WDOGRMODE_MASK);
   11b6e:	4d0a      	ldr	r5, [pc, #40]	; (11b98 <rmu_init+0x2c>)
   11b70:	682c      	ldr	r4, [r5, #0]
   11b72:	f424 44ee 	bic.w	r4, r4, #30464	; 0x7700
   11b76:	f024 0477 	bic.w	r4, r4, #119	; 0x77
   11b7a:	f003 0307 	and.w	r3, r3, #7
   11b7e:	431c      	orrs	r4, r3
   11b80:	f002 0270 	and.w	r2, r2, #112	; 0x70
   11b84:	4314      	orrs	r4, r2
   11b86:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   11b8a:	430c      	orrs	r4, r1
   11b8c:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
   11b90:	4304      	orrs	r4, r0
   11b92:	602c      	str	r4, [r5, #0]
}
   11b94:	bd30      	pop	{r4, r5, pc}
   11b96:	bf00      	nop
   11b98:	400e5000 	.word	0x400e5000

00011b9c <rmu_get_reset_reason>:

uint8_t rmu_get_reset_reason()
{
    uint32_t ulReason = RMU->RSTCAUSE & _RMU_RSTCAUSE_MASK;
   11b9c:	4b24      	ldr	r3, [pc, #144]	; (11c30 <rmu_get_reset_reason+0x94>)
   11b9e:	4825      	ldr	r0, [pc, #148]	; (11c34 <rmu_get_reset_reason+0x98>)
   11ba0:	685b      	ldr	r3, [r3, #4]

    if(!ulReason)
   11ba2:	4018      	ands	r0, r3
   11ba4:	d043      	beq.n	11c2e <rmu_get_reset_reason+0x92>
        return RMU_RESET_CAUSE_NONE;

    if((ulReason & RMU_RSTCAUSE_POR_MASK) == RMU_RSTCAUSE_POR_COMP)
   11ba6:	07da      	lsls	r2, r3, #31
   11ba8:	d430      	bmi.n	11c0c <rmu_get_reset_reason+0x70>
        return RMU_RESET_CAUSE_POR;

    if((ulReason & RMU_RSTCAUSE_BOR_AVDD_MASK) == RMU_RSTCAUSE_BOR_AVDD_COMP)
   11baa:	f003 0205 	and.w	r2, r3, #5
   11bae:	2a04      	cmp	r2, #4
   11bb0:	d02e      	beq.n	11c10 <rmu_get_reset_reason+0x74>
        return RMU_RESET_CAUSE_AVDD_BOD;

    if((ulReason & RMU_RSTCAUSE_BOR_DVDD_MASK) == RMU_RSTCAUSE_BOR_DVDD_COMP)
   11bb2:	f003 0209 	and.w	r2, r3, #9
   11bb6:	2a08      	cmp	r2, #8
   11bb8:	d02c      	beq.n	11c14 <rmu_get_reset_reason+0x78>
        return RMU_RESET_CAUSE_DVDD_BOD;

    if((ulReason & RMU_RSTCAUSE_BOR_DECOUPLE_MASK) == RMU_RSTCAUSE_BOR_DECOUPLE_COMP)
   11bba:	f003 0211 	and.w	r2, r3, #17
   11bbe:	2a10      	cmp	r2, #16
   11bc0:	d02a      	beq.n	11c18 <rmu_get_reset_reason+0x7c>
        return RMU_RESET_CAUSE_DECOUPLE_BOD;

    if((ulReason & RMU_RSTCAUSE_PIN_MASK) == RMU_RSTCAUSE_PIN_COMP)
   11bc2:	f240 1201 	movw	r2, #257	; 0x101
   11bc6:	401a      	ands	r2, r3
   11bc8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   11bcc:	d026      	beq.n	11c1c <rmu_get_reset_reason+0x80>
        return RMU_RESET_CAUSE_EXT_PIN;

    if((ulReason & RMU_RSTCAUSE_LOCKUP_MASK) == RMU_RSTCAUSE_LOCKUP_COMP)
   11bce:	f240 221d 	movw	r2, #541	; 0x21d
   11bd2:	401a      	ands	r2, r3
   11bd4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   11bd8:	d022      	beq.n	11c20 <rmu_get_reset_reason+0x84>
        return RMU_RESET_CAUSE_CORE_LOCKUP;

    if((ulReason & RMU_RSTCAUSE_SYSREQ_MASK) == RMU_RSTCAUSE_SYSREQ_COMP)
   11bda:	f240 421d 	movw	r2, #1053	; 0x41d
   11bde:	401a      	ands	r2, r3
   11be0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   11be4:	d01e      	beq.n	11c24 <rmu_get_reset_reason+0x88>
        return RMU_RESET_CAUSE_SYSRESETREQ;

    if((ulReason & RMU_RSTCAUSE_WDOG_MASK) == RMU_RSTCAUSE_WDOG_COMP)
   11be6:	f640 021d 	movw	r2, #2077	; 0x81d
   11bea:	401a      	ands	r2, r3
   11bec:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   11bf0:	d01a      	beq.n	11c28 <rmu_get_reset_reason+0x8c>
        return RMU_RESET_CAUSE_WATCHDOG;

    if((ulReason & RMU_RSTCAUSE_BUM_MASK) == RMU_RSTCAUSE_BUM_COMP)
   11bf2:	4a11      	ldr	r2, [pc, #68]	; (11c38 <rmu_get_reset_reason+0x9c>)
   11bf4:	401a      	ands	r2, r3
   11bf6:	f5b2 3f88 	cmp.w	r2, #69632	; 0x11000
   11bfa:	d017      	beq.n	11c2c <rmu_get_reset_reason+0x90>
        return RMU_RESET_CAUSE_BACKUP_MODE;

    if((ulReason & RMU_RSTCAUSE_EM4_MASK) == RMU_RSTCAUSE_EM4_COMP)
   11bfc:	4a0f      	ldr	r2, [pc, #60]	; (11c3c <rmu_get_reset_reason+0xa0>)
   11bfe:	401a      	ands	r2, r3
   11c00:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
        return RMU_RESET_CAUSE_EM4_MODE;
   11c04:	bf14      	ite	ne
   11c06:	20ff      	movne	r0, #255	; 0xff
   11c08:	200a      	moveq	r0, #10
   11c0a:	4770      	bx	lr
        return RMU_RESET_CAUSE_POR;
   11c0c:	2001      	movs	r0, #1
   11c0e:	4770      	bx	lr
        return RMU_RESET_CAUSE_AVDD_BOD;
   11c10:	2002      	movs	r0, #2
   11c12:	4770      	bx	lr
        return RMU_RESET_CAUSE_DVDD_BOD;
   11c14:	2003      	movs	r0, #3
   11c16:	4770      	bx	lr
        return RMU_RESET_CAUSE_DECOUPLE_BOD;
   11c18:	2004      	movs	r0, #4
   11c1a:	4770      	bx	lr
        return RMU_RESET_CAUSE_EXT_PIN;
   11c1c:	2005      	movs	r0, #5
   11c1e:	4770      	bx	lr
        return RMU_RESET_CAUSE_CORE_LOCKUP;
   11c20:	2006      	movs	r0, #6
   11c22:	4770      	bx	lr
        return RMU_RESET_CAUSE_SYSRESETREQ;
   11c24:	2007      	movs	r0, #7
   11c26:	4770      	bx	lr
        return RMU_RESET_CAUSE_WATCHDOG;
   11c28:	2008      	movs	r0, #8
   11c2a:	4770      	bx	lr
        return RMU_RESET_CAUSE_BACKUP_MODE;
   11c2c:	2009      	movs	r0, #9

    return RMU_RESET_CAUSE_UNKNOWN;
}
   11c2e:	4770      	bx	lr
   11c30:	400e5000 	.word	0x400e5000
   11c34:	00011f1d 	.word	0x00011f1d
   11c38:	00011019 	.word	0x00011019
   11c3c:	0001001d 	.word	0x0001001d

00011c40 <rmu_clear_reset_reason>:
void rmu_clear_reset_reason()
{
    RMU->CMD = RMU_CMD_RCCLR;
   11c40:	4b01      	ldr	r3, [pc, #4]	; (11c48 <rmu_clear_reset_reason+0x8>)
   11c42:	2201      	movs	r2, #1
   11c44:	609a      	str	r2, [r3, #8]
}
   11c46:	4770      	bx	lr
   11c48:	400e5000 	.word	0x400e5000

00011c4c <rmu_get_reset_state>:

uint8_t rmu_get_reset_state()
{
    return (RMU->CTRL & _RMU_CTRL_RESETSTATE_MASK) >> _RMU_CTRL_RESETSTATE_SHIFT;
   11c4c:	4b02      	ldr	r3, [pc, #8]	; (11c58 <rmu_get_reset_state+0xc>)
   11c4e:	6818      	ldr	r0, [r3, #0]
}
   11c50:	f3c0 6001 	ubfx	r0, r0, #24, #2
   11c54:	4770      	bx	lr
   11c56:	bf00      	nop
   11c58:	400e5000 	.word	0x400e5000

00011c5c <dbg_init>:
    dbg_swo_putc(ch, 0);
}

void dbg_init()
{
    CMU->DBGCLKSEL = CMU_DBGCLKSEL_DBG_HFRCODIV2;
   11c5c:	4b02      	ldr	r3, [pc, #8]	; (11c68 <dbg_init+0xc>)
   11c5e:	2202      	movs	r2, #2
   11c60:	671a      	str	r2, [r3, #112]	; 0x70

    cmu_update_clocks();
   11c62:	f000 bdf9 	b.w	12858 <cmu_update_clocks>
   11c66:	bf00      	nop
   11c68:	400e4000 	.word	0x400e4000

00011c6c <dbg_swo_config>:
}
void dbg_swo_config(uint32_t ulChannelMask, uint32_t ulFrequency)
{
   11c6c:	b510      	push	{r4, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   11c6e:	4c12      	ldr	r4, [pc, #72]	; (11cb8 <dbg_swo_config+0x4c>)
   11c70:	68e2      	ldr	r2, [r4, #12]
   11c72:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   11c76:	60e2      	str	r2, [r4, #12]
    TPI->SPPR = 2 << TPI_SPPR_TXMODE_Pos;
   11c78:	4a10      	ldr	r2, [pc, #64]	; (11cbc <dbg_swo_config+0x50>)
   11c7a:	2302      	movs	r3, #2
   11c7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
   11c80:	4b0f      	ldr	r3, [pc, #60]	; (11cc0 <dbg_swo_config+0x54>)
   11c82:	681b      	ldr	r3, [r3, #0]
   11c84:	fbb3 f1f1 	udiv	r1, r3, r1
    TPI->FFCR = 0x00000100;
   11c88:	f44f 7380 	mov.w	r3, #256	; 0x100
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
   11c8c:	3901      	subs	r1, #1
   11c8e:	6111      	str	r1, [r2, #16]
    TPI->FFCR = 0x00000100;
   11c90:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    DWT->CTRL = 0x400003FE;
   11c94:	4b0b      	ldr	r3, [pc, #44]	; (11cc4 <dbg_swo_config+0x58>)
   11c96:	4a0c      	ldr	r2, [pc, #48]	; (11cc8 <dbg_swo_config+0x5c>)
   11c98:	601a      	str	r2, [r3, #0]
    ITM->LAR = 0xC5ACCE55;
   11c9a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   11c9e:	4a0b      	ldr	r2, [pc, #44]	; (11ccc <dbg_swo_config+0x60>)
   11ca0:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) | ITM_TCR_ITMENA_Msk;
   11ca4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   11ca8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ITM->TPR = ulChannelMask;
   11cac:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ITM->TER = ulChannelMask;
   11cb0:	f8c3 0e00 	str.w	r0, [r3, #3584]	; 0xe00
}
   11cb4:	bd10      	pop	{r4, pc}
   11cb6:	bf00      	nop
   11cb8:	e000edf0 	.word	0xe000edf0
   11cbc:	e0040000 	.word	0xe0040000
   11cc0:	20006330 	.word	0x20006330
   11cc4:	e0001000 	.word	0xe0001000
   11cc8:	400003fe 	.word	0x400003fe
   11ccc:	c5acce55 	.word	0xc5acce55

00011cd0 <dbg_swo_send_uint8>:
{
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
}
void dbg_swo_send_uint8(uint8_t ubData, uint8_t ubChannel)
{
    if(!(ITM->TCR & ITM_TCR_ITMENA_Msk))
   11cd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   11cd4:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
   11cd8:	07d2      	lsls	r2, r2, #31
   11cda:	d50c      	bpl.n	11cf6 <dbg_swo_send_uint8+0x26>
        return;

    if(!(ITM->TER & BIT(ubChannel)))
   11cdc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
   11ce0:	2301      	movs	r3, #1
   11ce2:	408b      	lsls	r3, r1
   11ce4:	4213      	tst	r3, r2
   11ce6:	d006      	beq.n	11cf6 <dbg_swo_send_uint8+0x26>
   11ce8:	0089      	lsls	r1, r1, #2
   11cea:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
        return;

    while(!ITM->PORT[ubChannel].u8);
   11cee:	780b      	ldrb	r3, [r1, #0]
   11cf0:	2b00      	cmp	r3, #0
   11cf2:	d0fc      	beq.n	11cee <dbg_swo_send_uint8+0x1e>

    ITM->PORT[ubChannel].u8 = ubData;
   11cf4:	7008      	strb	r0, [r1, #0]
}
   11cf6:	4770      	bx	lr

00011cf8 <_putchar>:
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
   11cf8:	2100      	movs	r1, #0
   11cfa:	f7ff bfe9 	b.w	11cd0 <dbg_swo_send_uint8>
	...

00011d00 <crypto_init>:
#include "crypto.h"

void crypto_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_CRYPTO0;
   11d00:	4a03      	ldr	r2, [pc, #12]	; (11d10 <crypto_init+0x10>)
   11d02:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   11d06:	f043 0302 	orr.w	r3, r3, #2
   11d0a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
   11d0e:	4770      	bx	lr
   11d10:	400e4000 	.word	0x400e4000

00011d14 <msc_flash_lock>:

    msc_flash_lock();
}
void msc_flash_lock()
{
    MSC->LOCK = MSC_LOCK_LOCKKEY_LOCK;
   11d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d18:	2200      	movs	r2, #0
   11d1a:	641a      	str	r2, [r3, #64]	; 0x40
    MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_LOCK;
   11d1c:	655a      	str	r2, [r3, #84]	; 0x54
    MSC->BANKSWITCHLOCK = MSC_BANKSWITCHLOCK_BANKSWITCHLOCKKEY_LOCK;
   11d1e:	671a      	str	r2, [r3, #112]	; 0x70

    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
   11d20:	689a      	ldr	r2, [r3, #8]
   11d22:	f022 0201 	bic.w	r2, r2, #1
   11d26:	609a      	str	r2, [r3, #8]
}
   11d28:	4770      	bx	lr

00011d2a <msc_flash_unlock>:
void msc_flash_unlock()
{
    MSC->LOCK = MSC_LOCK_LOCKKEY_UNLOCK;
   11d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d2e:	f641 3271 	movw	r2, #7025	; 0x1b71
   11d32:	641a      	str	r2, [r3, #64]	; 0x40
    MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_UNLOCK;
   11d34:	f246 321a 	movw	r2, #25370	; 0x631a
   11d38:	655a      	str	r2, [r3, #84]	; 0x54
    MSC->BANKSWITCHLOCK = MSC_BANKSWITCHLOCK_BANKSWITCHLOCKKEY_UNLOCK;
   11d3a:	f647 422b 	movw	r2, #31787	; 0x7c2b
   11d3e:	671a      	str	r2, [r3, #112]	; 0x70

    MSC->WRITECTRL |= MSC_WRITECTRL_WREN;
   11d40:	689a      	ldr	r2, [r3, #8]
   11d42:	f042 0201 	orr.w	r2, r2, #1
   11d46:	609a      	str	r2, [r3, #8]
}
   11d48:	4770      	bx	lr

00011d4a <msc_init>:
{
   11d4a:	b508      	push	{r3, lr}
    msc_flash_unlock();
   11d4c:	f7ff ffed 	bl	11d2a <msc_flash_unlock>
    MSC->CTRL |= MSC_CTRL_IFCREADCLEAR | MSC_CTRL_CLKDISFAULTEN | MSC_CTRL_ADDRFAULTEN;
   11d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d54:	681a      	ldr	r2, [r3, #0]
   11d56:	f042 020b 	orr.w	r2, r2, #11
   11d5a:	601a      	str	r2, [r3, #0]
    MSC->READCTRL |= MSC_READCTRL_SCBTP | MSC_READCTRL_PREFETCH;
   11d5c:	685a      	ldr	r2, [r3, #4]
   11d5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   11d66:	605a      	str	r2, [r3, #4]
    MSC->WRITECTRL = MSC_WRITECTRL_RWWEN;
   11d68:	2220      	movs	r2, #32
   11d6a:	609a      	str	r2, [r3, #8]
    MSC->BOOTLOADERCTRL = MSC_BOOTLOADERCTRL_BLWDIS;
   11d6c:	2202      	movs	r2, #2
   11d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    MSC->CACHECONFIG0 = MSC_CACHECONFIG0_CACHELPLEVEL_MINACTIVITY;
   11d72:	2203      	movs	r2, #3
   11d74:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
   11d78:	2201      	movs	r2, #1
   11d7a:	645a      	str	r2, [r3, #68]	; 0x44
    MSC->RAMCTRL &= ~(MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMPREFETCHEN);
   11d7c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   11d80:	f022 1204 	bic.w	r2, r2, #262148	; 0x40004
   11d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   11d88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   11d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    msc_flash_lock();
   11d90:	f7ff bfc0 	b.w	11d14 <msc_flash_lock>

00011d94 <msc_config_waitstates>:
{
   11d94:	b508      	push	{r3, lr}
    msc_flash_unlock();
   11d96:	f7ff ffc8 	bl	11d2a <msc_flash_unlock>
    if(ulFrequency <= 18000000)
   11d9a:	4b23      	ldr	r3, [pc, #140]	; (11e28 <msc_config_waitstates+0x94>)
   11d9c:	4298      	cmp	r0, r3
   11d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11da2:	d815      	bhi.n	11dd0 <msc_config_waitstates+0x3c>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS0;
   11da4:	685a      	ldr	r2, [r3, #4]
   11da6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
   11daa:	605a      	str	r2, [r3, #4]
        MSC->CTRL &= ~MSC_CTRL_WAITMODE_WS1;
   11dac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11db0:	6813      	ldr	r3, [r2, #0]
   11db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   11db6:	6013      	str	r3, [r2, #0]
    if(ulFrequency <= 38000000)
   11db8:	4b1c      	ldr	r3, [pc, #112]	; (11e2c <msc_config_waitstates+0x98>)
   11dba:	4298      	cmp	r0, r3
   11dbc:	d928      	bls.n	11e10 <msc_config_waitstates+0x7c>
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAMWSEN;
   11dbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11dc2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   11dc6:	f043 1302 	orr.w	r3, r3, #131074	; 0x20002
   11dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   11dce:	e025      	b.n	11e1c <msc_config_waitstates+0x88>
    else if(ulFrequency <= 36000000)
   11dd0:	4a17      	ldr	r2, [pc, #92]	; (11e30 <msc_config_waitstates+0x9c>)
   11dd2:	4290      	cmp	r0, r2
   11dd4:	d805      	bhi.n	11de2 <msc_config_waitstates+0x4e>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
   11dd6:	685a      	ldr	r2, [r3, #4]
   11dd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
   11ddc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   11de0:	e7e3      	b.n	11daa <msc_config_waitstates+0x16>
    else if(ulFrequency <= 54000000)
   11de2:	4a14      	ldr	r2, [pc, #80]	; (11e34 <msc_config_waitstates+0xa0>)
   11de4:	4290      	cmp	r0, r2
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
   11de6:	685a      	ldr	r2, [r3, #4]
    else if(ulFrequency <= 54000000)
   11de8:	d80e      	bhi.n	11e08 <msc_config_waitstates+0x74>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
   11dea:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
   11dee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   11df2:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
   11df4:	4b10      	ldr	r3, [pc, #64]	; (11e38 <msc_config_waitstates+0xa4>)
   11df6:	4298      	cmp	r0, r3
   11df8:	d9d8      	bls.n	11dac <msc_config_waitstates+0x18>
        MSC->CTRL |= MSC_CTRL_WAITMODE_WS1;
   11dfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11dfe:	6813      	ldr	r3, [r2, #0]
   11e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   11e04:	6013      	str	r3, [r2, #0]
    if(ulFrequency <= 38000000)
   11e06:	e7da      	b.n	11dbe <msc_config_waitstates+0x2a>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS3;
   11e08:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
   11e0c:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
   11e0e:	e7f4      	b.n	11dfa <msc_config_waitstates+0x66>
        MSC->RAMCTRL &= ~(MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN);
   11e10:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   11e14:	f023 1306 	bic.w	r3, r3, #393222	; 0x60006
   11e18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAMWSEN;
   11e1c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
   11e20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    msc_flash_lock();
   11e24:	f7ff bf76 	b.w	11d14 <msc_flash_lock>
   11e28:	0112a880 	.word	0x0112a880
   11e2c:	0243d580 	.word	0x0243d580
   11e30:	02255100 	.word	0x02255100
   11e34:	0337f980 	.word	0x0337f980
   11e38:	02faf080 	.word	0x02faf080

00011e3c <qspi_flash_cmd.part.0>:
    
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
}


void qspi_flash_cmd(uint8_t ubOpCode, uint32_t ulAddress, uint8_t ubAddressSize, uint8_t ubModeBits, uint8_t ubDummyCycles, uint8_t *pubSrc, uint8_t ubSrcSize, uint8_t *pubDst, uint8_t ubDstSize)
   11e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return;
        
    if(ubDstSize && !pubDst)
        return;

    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
   11e3e:	4d5a      	ldr	r5, [pc, #360]	; (11fa8 <qspi_flash_cmd.part.0+0x16c>)
void qspi_flash_cmd(uint8_t ubOpCode, uint32_t ulAddress, uint8_t ubAddressSize, uint8_t ubModeBits, uint8_t ubDummyCycles, uint8_t *pubSrc, uint8_t ubSrcSize, uint8_t *pubDst, uint8_t ubDstSize)
   11e40:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   11e44:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
   11e48:	682f      	ldr	r7, [r5, #0]
   11e4a:	2f00      	cmp	r7, #0
   11e4c:	dafc      	bge.n	11e48 <qspi_flash_cmd.part.0+0xc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   11e4e:	f3ef 8710 	mrs	r7, PRIMASK
    __asm__ volatile ("cpsid i" ::: "memory");
   11e52:	b672      	cpsid	i
    
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    {
        QSPI0->CONFIG &= ~(QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_ENBSPI);
   11e54:	f8d5 e000 	ldr.w	lr, [r5]
   11e58:	f02e 0e81 	bic.w	lr, lr, #129	; 0x81
   11e5c:	f8c5 e000 	str.w	lr, [r5]
        QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
   11e60:	f8d5 e000 	ldr.w	lr, [r5]
   11e64:	f04e 0e01 	orr.w	lr, lr, #1
   11e68:	f8c5 e000 	str.w	lr, [r5]
        
        QSPI0->FLASHCMDCTRL = ((uint32_t)ubOpCode << _QSPI_FLASHCMDCTRL_CMDOPCODE_SHIFT) | ((uint32_t)ubDummyCycles << _QSPI_FLASHCMDCTRL_NUMDUMMYCYCLES_SHIFT) | (!!ubModeBits << _QSPI_FLASHCMDCTRL_ENBMODEBIT_SHIFT);
   11e6c:	f89d 5020 	ldrb.w	r5, [sp, #32]
   11e70:	2b00      	cmp	r3, #0
   11e72:	ea4f 15c5 	mov.w	r5, r5, lsl #7
   11e76:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
   11e7a:	bf18      	it	ne
   11e7c:	f44f 2380 	movne.w	r3, #262144	; 0x40000
   11e80:	4d49      	ldr	r5, [pc, #292]	; (11fa8 <qspi_flash_cmd.part.0+0x16c>)
   11e82:	bf08      	it	eq
   11e84:	2300      	moveq	r3, #0
   11e86:	4318      	orrs	r0, r3
   11e88:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90

        if(ubAddressSize)
   11e8c:	b152      	cbz	r2, 11ea4 <qspi_flash_cmd.part.0+0x68>
        {
            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBCOMDADDR | ((uint32_t)(ubAddressSize - 1) << _QSPI_FLASHCMDCTRL_NUMADDRBYTES_SHIFT);
   11e8e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   11e92:	3a01      	subs	r2, #1
   11e94:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   11e98:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   11e9c:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
            QSPI0->FLASHCMDADDR = ulAddress;
   11ea0:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
        }

        if (ubSrcSize)
   11ea4:	b1b6      	cbz	r6, 11ed4 <qspi_flash_cmd.part.0+0x98>
        {
            uint32_t pulBuf[2] = { 0, 0 };
   11ea6:	2300      	movs	r3, #0
   11ea8:	e9cd 3300 	strd	r3, r3, [sp]
            uint8_t *pubBuf = (uint8_t *)pulBuf;

            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBWRITEDATA | ((uint32_t)(ubSrcSize - 1) << _QSPI_FLASHCMDCTRL_NUMWRDATABYTES_SHIFT);
   11eac:	493e      	ldr	r1, [pc, #248]	; (11fa8 <qspi_flash_cmd.part.0+0x16c>)
   11eae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
   11eb2:	1e70      	subs	r0, r6, #1
   11eb4:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
   11eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   11ebc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

            for (uint8_t i = 0; i < ubSrcSize; i++)
   11ec0:	b2da      	uxtb	r2, r3
   11ec2:	4296      	cmp	r6, r2
   11ec4:	d83e      	bhi.n	11f44 <qspi_flash_cmd.part.0+0x108>
                pubBuf[i] = pubSrc[i];

            QSPI0->FLASHWRDATALOWER = pulBuf[0];
   11ec6:	4b38      	ldr	r3, [pc, #224]	; (11fa8 <qspi_flash_cmd.part.0+0x16c>)
   11ec8:	9a00      	ldr	r2, [sp, #0]
   11eca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            QSPI0->FLASHWRDATAUPPER = pulBuf[1];
   11ece:	9a01      	ldr	r2, [sp, #4]
   11ed0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }
        
        if (ubDstSize)
   11ed4:	b1bc      	cbz	r4, 11f06 <qspi_flash_cmd.part.0+0xca>
        {
            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBREADDATA;
   11ed6:	4b34      	ldr	r3, [pc, #208]	; (11fa8 <qspi_flash_cmd.part.0+0x16c>)
   11ed8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   11edc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   11ee0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

            if(ubDstSize > 8)
   11ee4:	2c08      	cmp	r4, #8
                QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_STIGMEMBANKEN | ((uint32_t)(ubDstSize - 9) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
   11ee6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   11eea:	bf85      	ittet	hi
   11eec:	f1a4 0109 	subhi.w	r1, r4, #9
   11ef0:	ea42 5201 	orrhi.w	r2, r2, r1, lsl #20
            else
                QSPI0->FLASHCMDCTRL |= ((uint32_t)(ubDstSize - 1) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
   11ef4:	f104 31ff 	addls.w	r1, r4, #4294967295	; 0xffffffff
                QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_STIGMEMBANKEN | ((uint32_t)(ubDstSize - 9) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
   11ef8:	f042 0204 	orrhi.w	r2, r2, #4
                QSPI0->FLASHCMDCTRL |= ((uint32_t)(ubDstSize - 1) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
   11efc:	bf98      	it	ls
   11efe:	ea42 5201 	orrls.w	r2, r2, r1, lsl #20
   11f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_CMDEXEC;
   11f06:	4b28      	ldr	r3, [pc, #160]	; (11fa8 <qspi_flash_cmd.part.0+0x16c>)
   11f08:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   11f0c:	f042 0201 	orr.w	r2, r2, #1
   11f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        while(QSPI0->FLASHCMDCTRL & QSPI_FLASHCMDCTRL_CMDEXECSTATUS);
   11f14:	461a      	mov	r2, r3
   11f16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   11f1a:	f013 0302 	ands.w	r3, r3, #2
   11f1e:	d1fa      	bne.n	11f16 <qspi_flash_cmd.part.0+0xda>

        if (ubDstSize)
   11f20:	2c00      	cmp	r4, #0
   11f22:	d13c      	bne.n	11f9e <qspi_flash_cmd.part.0+0x162>

            for (uint8_t i = 0; i < ubDataLeft; i++)
                pubDstTemp[i] = pubBuf[i];
        }

        while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
   11f24:	4b20      	ldr	r3, [pc, #128]	; (11fa8 <qspi_flash_cmd.part.0+0x16c>)
   11f26:	681a      	ldr	r2, [r3, #0]
   11f28:	2a00      	cmp	r2, #0
   11f2a:	dafc      	bge.n	11f26 <qspi_flash_cmd.part.0+0xea>

        QSPI0->CONFIG &= ~QSPI_CONFIG_ENBSPI;
   11f2c:	681a      	ldr	r2, [r3, #0]
   11f2e:	f022 0201 	bic.w	r2, r2, #1
   11f32:	601a      	str	r2, [r3, #0]
        QSPI0->CONFIG |= QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_ENBSPI;
   11f34:	681a      	ldr	r2, [r3, #0]
   11f36:	f042 0281 	orr.w	r2, r2, #129	; 0x81
   11f3a:	601a      	str	r2, [r3, #0]
    if(!*__s)
   11f3c:	b907      	cbnz	r7, 11f40 <qspi_flash_cmd.part.0+0x104>
        __asm__ volatile ("cpsie i" ::: "memory");
   11f3e:	b662      	cpsie	i
    }
}
   11f40:	b003      	add	sp, #12
   11f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
                pubBuf[i] = pubSrc[i];
   11f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11f46:	5cd2      	ldrb	r2, [r2, r3]
   11f48:	f80d 2003 	strb.w	r2, [sp, r3]
            for (uint8_t i = 0; i < ubSrcSize; i++)
   11f4c:	3301      	adds	r3, #1
   11f4e:	e7b7      	b.n	11ec0 <qspi_flash_cmd.part.0+0x84>
                QSPI0->FLASHCOMMANDCTRLMEM = (uint32_t)(ubDstSize - ubDataLeft) << _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKADDR_SHIFT;
   11f50:	052d      	lsls	r5, r5, #20
   11f52:	f8c2 508c 	str.w	r5, [r2, #140]	; 0x8c
                QSPI0->FLASHCOMMANDCTRLMEM |= QSPI_FLASHCOMMANDCTRLMEM_TRIGGERMEMBANKREQ;
   11f56:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
   11f5a:	f040 0001 	orr.w	r0, r0, #1
   11f5e:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
                while(QSPI0->FLASHCOMMANDCTRLMEM & QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREQINPROGRESS);
   11f62:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
   11f66:	0780      	lsls	r0, r0, #30
   11f68:	d4fb      	bmi.n	11f62 <qspi_flash_cmd.part.0+0x126>
                *pubDstTemp = (QSPI0->FLASHCOMMANDCTRLMEM & _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREADDATA_MASK) >> _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREADDATA_SHIFT;
   11f6a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
   11f6e:	0a00      	lsrs	r0, r0, #8
   11f70:	f801 0b01 	strb.w	r0, [r1], #1
                pubDstTemp++;
   11f74:	1a70      	subs	r0, r6, r1
            while(ubDstSize > 8 && ubDstSize - ubDataLeft < 8)
   11f76:	2c08      	cmp	r4, #8
   11f78:	b2c0      	uxtb	r0, r0
   11f7a:	d902      	bls.n	11f82 <qspi_flash_cmd.part.0+0x146>
   11f7c:	1a25      	subs	r5, r4, r0
   11f7e:	2d07      	cmp	r5, #7
   11f80:	dde6      	ble.n	11f50 <qspi_flash_cmd.part.0+0x114>
            pulBuf[0] = QSPI0->FLASHRDDATALOWER;
   11f82:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
   11f86:	9400      	str	r4, [sp, #0]
            pulBuf[1] = QSPI0->FLASHRDDATAUPPER;
   11f88:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
   11f8c:	9201      	str	r2, [sp, #4]
            for (uint8_t i = 0; i < ubDataLeft; i++)
   11f8e:	b2da      	uxtb	r2, r3
   11f90:	4290      	cmp	r0, r2
   11f92:	d9c7      	bls.n	11f24 <qspi_flash_cmd.part.0+0xe8>
                pubDstTemp[i] = pubBuf[i];
   11f94:	f81d 2003 	ldrb.w	r2, [sp, r3]
   11f98:	54ca      	strb	r2, [r1, r3]
            for (uint8_t i = 0; i < ubDataLeft; i++)
   11f9a:	3301      	adds	r3, #1
   11f9c:	e7f7      	b.n	11f8e <qspi_flash_cmd.part.0+0x152>
            uint8_t *pubDstTemp = pubDst;
   11f9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11fa0:	4a01      	ldr	r2, [pc, #4]	; (11fa8 <qspi_flash_cmd.part.0+0x16c>)
   11fa2:	190e      	adds	r6, r1, r4
   11fa4:	e7e6      	b.n	11f74 <qspi_flash_cmd.part.0+0x138>
   11fa6:	bf00      	nop
   11fa8:	4001c400 	.word	0x4001c400

00011fac <qspi_flash_cmd>:
{
   11fac:	b4f0      	push	{r4, r5, r6, r7}
    if(ubAddressSize > 4)
   11fae:	2a04      	cmp	r2, #4
{
   11fb0:	f89d 6010 	ldrb.w	r6, [sp, #16]
   11fb4:	9f05      	ldr	r7, [sp, #20]
   11fb6:	f89d 4018 	ldrb.w	r4, [sp, #24]
   11fba:	f8dd c01c 	ldr.w	ip, [sp, #28]
   11fbe:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if(ubAddressSize > 4)
   11fc2:	d813      	bhi.n	11fec <qspi_flash_cmd+0x40>
    if(ubDummyCycles > 31)
   11fc4:	2e1f      	cmp	r6, #31
   11fc6:	d811      	bhi.n	11fec <qspi_flash_cmd+0x40>
    if(ubSrcSize > 8)
   11fc8:	2c08      	cmp	r4, #8
   11fca:	d80f      	bhi.n	11fec <qspi_flash_cmd+0x40>
    if(ubSrcSize && !pubSrc)
   11fcc:	b104      	cbz	r4, 11fd0 <qspi_flash_cmd+0x24>
   11fce:	b16f      	cbz	r7, 11fec <qspi_flash_cmd+0x40>
    if(ubDstSize > 16)
   11fd0:	2d10      	cmp	r5, #16
   11fd2:	d80b      	bhi.n	11fec <qspi_flash_cmd+0x40>
    if(ubDstSize && !pubDst)
   11fd4:	b115      	cbz	r5, 11fdc <qspi_flash_cmd+0x30>
   11fd6:	f1bc 0f00 	cmp.w	ip, #0
   11fda:	d007      	beq.n	11fec <qspi_flash_cmd+0x40>
   11fdc:	e9cd c507 	strd	ip, r5, [sp, #28]
   11fe0:	e9cd 7405 	strd	r7, r4, [sp, #20]
   11fe4:	9604      	str	r6, [sp, #16]
}
   11fe6:	bcf0      	pop	{r4, r5, r6, r7}
   11fe8:	f7ff bf28 	b.w	11e3c <qspi_flash_cmd.part.0>
   11fec:	bcf0      	pop	{r4, r5, r6, r7}
   11fee:	4770      	bx	lr

00011ff0 <qspi_flash_reset>:
    
    qspi_flash_unprotect_all_blocks(); // Unprotect all blocks to be able to read/write
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | BIT(1)); // Enable SIO2 and SIO3
}
void qspi_flash_reset()
{
   11ff0:	b510      	push	{r4, lr}
   11ff2:	b086      	sub	sp, #24
   11ff4:	2400      	movs	r4, #0
   11ff6:	4623      	mov	r3, r4
   11ff8:	4622      	mov	r2, r4
   11ffa:	4621      	mov	r1, r4
   11ffc:	e9cd 4403 	strd	r4, r4, [sp, #12]
   12000:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12004:	9400      	str	r4, [sp, #0]
   12006:	2066      	movs	r0, #102	; 0x66
   12008:	f7ff ff18 	bl	11e3c <qspi_flash_cmd.part.0>
    if(ubDstSize && !pubDst)
   1200c:	e9cd 4403 	strd	r4, r4, [sp, #12]
   12010:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12014:	9400      	str	r4, [sp, #0]
   12016:	4623      	mov	r3, r4
   12018:	4622      	mov	r2, r4
   1201a:	4621      	mov	r1, r4
   1201c:	2099      	movs	r0, #153	; 0x99
   1201e:	f7ff ff0d 	bl	11e3c <qspi_flash_cmd.part.0>
    qspi_flash_cmd(QSPI_FLASH_CMD_RESET_ENABLE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
    qspi_flash_cmd(QSPI_FLASH_CMD_RESET, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
}
   12022:	b006      	add	sp, #24
   12024:	bd10      	pop	{r4, pc}

00012026 <qspi_flash_read_status>:
uint8_t qspi_flash_read_status()
{
   12026:	b500      	push	{lr}
   12028:	b089      	sub	sp, #36	; 0x24
    if(ubDstSize && !pubDst)
   1202a:	2301      	movs	r3, #1
   1202c:	9304      	str	r3, [sp, #16]
   1202e:	f10d 031f 	add.w	r3, sp, #31
   12032:	9303      	str	r3, [sp, #12]
   12034:	2300      	movs	r3, #0
   12036:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1203a:	9300      	str	r3, [sp, #0]
   1203c:	461a      	mov	r2, r3
   1203e:	4619      	mov	r1, r3
   12040:	2005      	movs	r0, #5
   12042:	f7ff fefb 	bl	11e3c <qspi_flash_cmd.part.0>
    uint8_t ubStatus;

    qspi_flash_cmd(QSPI_FLASH_CMD_READ_STATUS, 0x00000000, 0, 0, 0, NULL, 0, &ubStatus, 1);

    return ubStatus;
}
   12046:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1204a:	b009      	add	sp, #36	; 0x24
   1204c:	f85d fb04 	ldr.w	pc, [sp], #4

00012050 <qspi_flash_read_config>:
uint8_t qspi_flash_read_config()
{
   12050:	b500      	push	{lr}
   12052:	b089      	sub	sp, #36	; 0x24
    if(ubDstSize && !pubDst)
   12054:	2301      	movs	r3, #1
   12056:	9304      	str	r3, [sp, #16]
   12058:	f10d 031f 	add.w	r3, sp, #31
   1205c:	9303      	str	r3, [sp, #12]
   1205e:	2300      	movs	r3, #0
   12060:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12064:	9300      	str	r3, [sp, #0]
   12066:	461a      	mov	r2, r3
   12068:	4619      	mov	r1, r3
   1206a:	2035      	movs	r0, #53	; 0x35
   1206c:	f7ff fee6 	bl	11e3c <qspi_flash_cmd.part.0>
    uint8_t ubConfig;

    qspi_flash_cmd(QSPI_FLASH_CMD_READ_CFG, 0x00000000, 0, 0, 0, NULL, 0, &ubConfig, 1);

    return ubConfig;
}
   12070:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12074:	b009      	add	sp, #36	; 0x24
   12076:	f85d fb04 	ldr.w	pc, [sp], #4

0001207a <qspi_flash_write_enable>:
{
	while(qspi_flash_read_status() & BIT(0))
		delay_ms(1);
}
void qspi_flash_write_enable()
{
   1207a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1207c:	2300      	movs	r3, #0
   1207e:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12082:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12086:	9300      	str	r3, [sp, #0]
   12088:	461a      	mov	r2, r3
   1208a:	4619      	mov	r1, r3
   1208c:	2006      	movs	r0, #6
   1208e:	f7ff fed5 	bl	11e3c <qspi_flash_cmd.part.0>
    qspi_flash_cmd(QSPI_FLASH_CMD_WRITE_ENABLE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);

	while(!(qspi_flash_read_status() & BIT(1)))
   12092:	f7ff ffc8 	bl	12026 <qspi_flash_read_status>
   12096:	0783      	lsls	r3, r0, #30
   12098:	d502      	bpl.n	120a0 <qspi_flash_write_enable+0x26>
		delay_ms(1);
}
   1209a:	b007      	add	sp, #28
   1209c:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_ms(1);
   120a0:	2001      	movs	r0, #1
   120a2:	2100      	movs	r1, #0
   120a4:	f000 fa50 	bl	12548 <delay_ms>
   120a8:	e7f3      	b.n	12092 <qspi_flash_write_enable+0x18>

000120aa <qspi_flash_write_status_config>:
{
   120aa:	b500      	push	{lr}
   120ac:	b089      	sub	sp, #36	; 0x24
    uint8_t ubBuf[] = { ubStatus, ubConfig };
   120ae:	f88d 001c 	strb.w	r0, [sp, #28]
   120b2:	f88d 101d 	strb.w	r1, [sp, #29]
    qspi_flash_write_enable();
   120b6:	f7ff ffe0 	bl	1207a <qspi_flash_write_enable>
    if(ubDstSize && !pubDst)
   120ba:	2202      	movs	r2, #2
   120bc:	2300      	movs	r3, #0
   120be:	9202      	str	r2, [sp, #8]
   120c0:	aa07      	add	r2, sp, #28
   120c2:	e9cd 3200 	strd	r3, r2, [sp]
   120c6:	e9cd 3303 	strd	r3, r3, [sp, #12]
   120ca:	461a      	mov	r2, r3
   120cc:	4619      	mov	r1, r3
   120ce:	2001      	movs	r0, #1
   120d0:	f7ff feb4 	bl	11e3c <qspi_flash_cmd.part.0>
}
   120d4:	b009      	add	sp, #36	; 0x24
   120d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000120dc <qspi_flash_read_jedec_id>:
    qspi_flash_cmd(QSPI_FLASH_CMD_CHIP_ERASE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);

    qspi_flash_busy_wait();
}
uint32_t qspi_flash_read_jedec_id()
{
   120dc:	b500      	push	{lr}
	uint8_t ubBuf[] = { 0x00, 0x00, 0x00 };
   120de:	4a11      	ldr	r2, [pc, #68]	; (12124 <qspi_flash_read_jedec_id+0x48>)
{
   120e0:	b089      	sub	sp, #36	; 0x24
	uint8_t ubBuf[] = { 0x00, 0x00, 0x00 };
   120e2:	8811      	ldrh	r1, [r2, #0]
   120e4:	7892      	ldrb	r2, [r2, #2]
   120e6:	f88d 201e 	strb.w	r2, [sp, #30]
   120ea:	ab07      	add	r3, sp, #28
   120ec:	2203      	movs	r2, #3
   120ee:	e9cd 3203 	strd	r3, r2, [sp, #12]
   120f2:	2300      	movs	r3, #0
   120f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   120f8:	f8ad 101c 	strh.w	r1, [sp, #28]
   120fc:	9300      	str	r3, [sp, #0]
   120fe:	461a      	mov	r2, r3
   12100:	4619      	mov	r1, r3
   12102:	209f      	movs	r0, #159	; 0x9f
   12104:	f7ff fe9a 	bl	11e3c <qspi_flash_cmd.part.0>

    qspi_flash_cmd(QSPI_FLASH_CMD_JEDEC_READ_ID, 0x00000000, 0, 0, 0, NULL, 0, ubBuf, 3);

	return ((uint32_t)ubBuf[0] << 16) | ((uint32_t)ubBuf[1] << 8) | (uint32_t)ubBuf[2];
   12108:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1210c:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12110:	021b      	lsls	r3, r3, #8
   12112:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   12116:	f89d 001e 	ldrb.w	r0, [sp, #30]
}
   1211a:	4318      	orrs	r0, r3
   1211c:	b009      	add	sp, #36	; 0x24
   1211e:	f85d fb04 	ldr.w	pc, [sp], #4
   12122:	bf00      	nop
   12124:	00014788 	.word	0x00014788

00012128 <qspi_flash_read_security>:
void qspi_flash_read_security(uint16_t usAddress, uint8_t *pubDst, uint8_t ubCount)
{
   12128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    qspi_flash_cmd(QSPI_FLASH_CMD_READ_SECURITY, usAddress, 2, 0, 8, NULL, 0, pubDst, ubCount);
   1212a:	2300      	movs	r3, #0
   1212c:	e9cd 1203 	strd	r1, r2, [sp, #12]
   12130:	2208      	movs	r2, #8
   12132:	9200      	str	r2, [sp, #0]
   12134:	4601      	mov	r1, r0
   12136:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1213a:	2202      	movs	r2, #2
   1213c:	2088      	movs	r0, #136	; 0x88
   1213e:	f7ff ff35 	bl	11fac <qspi_flash_cmd>
}
   12142:	b007      	add	sp, #28
   12144:	f85d fb04 	ldr.w	pc, [sp], #4

00012148 <qspi_flash_unprotect_all_blocks>:
{
    qspi_flash_write_enable();
    qspi_flash_cmd(QSPI_FLASH_CMD_WRITE_SECURITY, usAddress, 2, 0, 0, pubSrc, ubCount, NULL, 0);
}
void qspi_flash_unprotect_all_blocks()
{
   12148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	qspi_flash_write_enable();
   1214a:	f7ff ff96 	bl	1207a <qspi_flash_write_enable>
    if(ubDstSize && !pubDst)
   1214e:	2300      	movs	r3, #0
   12150:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12154:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12158:	9300      	str	r3, [sp, #0]
   1215a:	461a      	mov	r2, r3
   1215c:	4619      	mov	r1, r3
   1215e:	2098      	movs	r0, #152	; 0x98
   12160:	f7ff fe6c 	bl	11e3c <qspi_flash_cmd.part.0>
    qspi_flash_cmd(QSPI_FLASH_CMD_UNLOCK_PROTECTION, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
   12164:	b007      	add	sp, #28
   12166:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001216c <qspi_flash_init>:
{
   1216c:	b510      	push	{r4, lr}
    qspi_flash_reset();
   1216e:	f7ff ff3f 	bl	11ff0 <qspi_flash_reset>
    if(qspi_flash_read_jedec_id() != 0xBF2643)
   12172:	f7ff ffb3 	bl	120dc <qspi_flash_read_jedec_id>
   12176:	4b09      	ldr	r3, [pc, #36]	; (1219c <qspi_flash_init+0x30>)
   12178:	4298      	cmp	r0, r3
   1217a:	d10e      	bne.n	1219a <qspi_flash_init+0x2e>
    qspi_flash_unprotect_all_blocks(); // Unprotect all blocks to be able to read/write
   1217c:	f7ff ffe4 	bl	12148 <qspi_flash_unprotect_all_blocks>
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | BIT(1)); // Enable SIO2 and SIO3
   12180:	f7ff ff51 	bl	12026 <qspi_flash_read_status>
   12184:	4604      	mov	r4, r0
   12186:	f7ff ff63 	bl	12050 <qspi_flash_read_config>
   1218a:	f040 0002 	orr.w	r0, r0, #2
   1218e:	b2c1      	uxtb	r1, r0
   12190:	4620      	mov	r0, r4
}
   12192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | BIT(1)); // Enable SIO2 and SIO3
   12196:	f7ff bf88 	b.w	120aa <qspi_flash_write_status_config>
}
   1219a:	bd10      	pop	{r4, pc}
   1219c:	00bf2643 	.word	0x00bf2643

000121a0 <qspi_init>:
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
   121a0:	4a1d      	ldr	r2, [pc, #116]	; (12218 <qspi_init+0x78>)
   121a2:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
{
   121a6:	b510      	push	{r4, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
   121a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
   121ac:	4c1b      	ldr	r4, [pc, #108]	; (1221c <qspi_init+0x7c>)
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
   121ae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
   121b2:	6823      	ldr	r3, [r4, #0]
   121b4:	2b00      	cmp	r3, #0
   121b6:	dafc      	bge.n	121b2 <qspi_init+0x12>
    QSPI0->CONFIG = QSPI_CONFIG_ENBAHBADDRREMAP | (0 << _QSPI_CONFIG_PERIPHCSLINES_SHIFT) | QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_PHYMODEENABLE;
   121b8:	4b19      	ldr	r3, [pc, #100]	; (12220 <qspi_init+0x80>)
   121ba:	6023      	str	r3, [r4, #0]
    QSPI0->DEVINSTRRDCONFIG = (0 << _QSPI_DEVINSTRRDCONFIG_DUMMYRDCLKCYCLES_SHIFT) | QSPI_DEVINSTRRDCONFIG_MODEBITENABLE | (1 << _QSPI_DEVINSTRRDCONFIG_DATAXFERTYPEEXTMODE_SHIFT) | (1 << _QSPI_DEVINSTRRDCONFIG_ADDRXFERTYPESTDMODE_SHIFT) | (0 << _QSPI_DEVINSTRRDCONFIG_INSTRTYPE_SHIFT) | ((uint32_t)QSPI_FLASH_CMD_READ_FAST_DIO << _QSPI_DEVINSTRRDCONFIG_RDOPCODENONXIP_SHIFT);
   121bc:	4b19      	ldr	r3, [pc, #100]	; (12224 <qspi_init+0x84>)
   121be:	6063      	str	r3, [r4, #4]
    QSPI0->DEVINSTRWRCONFIG = (0 << _QSPI_DEVINSTRWRCONFIG_DUMMYWRCLKCYCLES_SHIFT) | (0 << _QSPI_DEVINSTRWRCONFIG_DATAXFERTYPEEXTMODE_SHIFT) | (0 << _QSPI_DEVINSTRWRCONFIG_ADDRXFERTYPESTDMODE_SHIFT) | ((uint32_t)QSPI_FLASH_CMD_WRITE << _QSPI_DEVINSTRWRCONFIG_WROPCODE_SHIFT);
   121c0:	2302      	movs	r3, #2
   121c2:	60a3      	str	r3, [r4, #8]
    QSPI0->DEVDELAY = (2 << _QSPI_DEVDELAY_DNSS_SHIFT) | (2 << _QSPI_DEVDELAY_DBTWN_SHIFT) | (0 << _QSPI_DEVDELAY_DAFTER_SHIFT) | (0 << _QSPI_DEVDELAY_DINIT_SHIFT);
   121c4:	4b18      	ldr	r3, [pc, #96]	; (12228 <qspi_init+0x88>)
   121c6:	60e3      	str	r3, [r4, #12]
    QSPI0->DEVSIZECONFIG = (0 << _QSPI_DEVSIZECONFIG_MEMSIZEONCS0_SHIFT) | (12 << _QSPI_DEVSIZECONFIG_BYTESPERSUBSECTOR_SHIFT) | (256 << _QSPI_DEVSIZECONFIG_BYTESPERDEVICEPAGE_SHIFT) | (2 << _QSPI_DEVSIZECONFIG_NUMADDRBYTES_SHIFT);
   121c8:	4b18      	ldr	r3, [pc, #96]	; (1222c <qspi_init+0x8c>)
   121ca:	6163      	str	r3, [r4, #20]
    QSPI0->WRITECOMPLETIONCTRL = (5 << _QSPI_WRITECOMPLETIONCTRL_POLLREPDELAY_SHIFT) | (1 << _QSPI_WRITECOMPLETIONCTRL_POLLCOUNT_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGPOLARITY_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGBITINDEX_SHIFT) | (QSPI_FLASH_CMD_READ_STATUS << _QSPI_WRITECOMPLETIONCTRL_OPCODE_SHIFT);
   121cc:	4a18      	ldr	r2, [pc, #96]	; (12230 <qspi_init+0x90>)
    QSPI0->REMAPADDR = 0x00000000;
   121ce:	2300      	movs	r3, #0
   121d0:	6263      	str	r3, [r4, #36]	; 0x24
    QSPI0->MODEBITCONFIG = (0x00 << _QSPI_MODEBITCONFIG_MODE_SHIFT);
   121d2:	62a3      	str	r3, [r4, #40]	; 0x28
    QSPI0->WRITECOMPLETIONCTRL = (5 << _QSPI_WRITECOMPLETIONCTRL_POLLREPDELAY_SHIFT) | (1 << _QSPI_WRITECOMPLETIONCTRL_POLLCOUNT_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGPOLARITY_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGBITINDEX_SHIFT) | (QSPI_FLASH_CMD_READ_STATUS << _QSPI_WRITECOMPLETIONCTRL_OPCODE_SHIFT);
   121d4:	63a2      	str	r2, [r4, #56]	; 0x38
    QSPI0->PHYCONFIGURATION = QSPI_PHYCONFIGURATION_PHYCONFIGRESYNC | (25 << _QSPI_PHYCONFIGURATION_PHYCONFIGTXDLLDELAY_SHIFT) | (43 << _QSPI_PHYCONFIGURATION_PHYCONFIGRXDLLDELAY_SHIFT);
   121d6:	4a17      	ldr	r2, [pc, #92]	; (12234 <qspi_init+0x94>)
    QSPI0->POLLINGFLASHSTATUS = (0 << _QSPI_POLLINGFLASHSTATUS_DEVICESTATUSNBDUMMY_SHIFT);
   121d8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    QSPI0->PHYCONFIGURATION = QSPI_PHYCONFIGURATION_PHYCONFIGRESYNC | (25 << _QSPI_PHYCONFIGURATION_PHYCONFIGTXDLLDELAY_SHIFT) | (43 << _QSPI_PHYCONFIGURATION_PHYCONFIGRXDLLDELAY_SHIFT);
   121dc:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
    QSPI0->OPCODEEXTUPPER = (QSPI_FLASH_CMD_WRITE_ENABLE << _QSPI_OPCODEEXTUPPER_WELOPCODE_SHIFT);
   121e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   121e4:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    QSPI0->ROUTELOC0 = QSPI_ROUTELOC0_QSPILOC_LOC0;
   121e8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    QSPI0->ROUTEPEN = QSPI_ROUTEPEN_DQ0PEN | QSPI_ROUTEPEN_DQ1PEN | QSPI_ROUTEPEN_DQ2PEN | QSPI_ROUTEPEN_DQ3PEN | QSPI_ROUTEPEN_CS0PEN | QSPI_ROUTEPEN_SCLKPEN;
   121ec:	f240 13e3 	movw	r3, #483	; 0x1e3
   121f0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    CMU->QSPICTRL = CMU_QSPICTRL_QSPI0CLKSEL_USHFRCO;
   121f4:	4b08      	ldr	r3, [pc, #32]	; (12218 <qspi_init+0x78>)
   121f6:	2203      	movs	r2, #3
   121f8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    cmu_update_clocks();
   121fc:	f000 fb2c 	bl	12858 <cmu_update_clocks>
    QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
   12200:	6823      	ldr	r3, [r4, #0]
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
   12202:	4a06      	ldr	r2, [pc, #24]	; (1221c <qspi_init+0x7c>)
    QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
   12204:	f043 0301 	orr.w	r3, r3, #1
   12208:	6023      	str	r3, [r4, #0]
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
   1220a:	6813      	ldr	r3, [r2, #0]
   1220c:	2b00      	cmp	r3, #0
   1220e:	dafc      	bge.n	1220a <qspi_init+0x6a>
}
   12210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    qspi_flash_init();
   12214:	f7ff bfaa 	b.w	1216c <qspi_flash_init>
   12218:	400e4000 	.word	0x400e4000
   1221c:	4001c400 	.word	0x4001c400
   12220:	00010088 	.word	0x00010088
   12224:	001110bb 	.word	0x001110bb
   12228:	02020000 	.word	0x02020000
   1222c:	000c1002 	.word	0x000c1002
   12230:	05010005 	.word	0x05010005
   12234:	8019002b 	.word	0x8019002b

00012238 <_gpio_even_isr>:
    if(ulFlags & BIT(3))
    lv_indev_ft6x36_isr();
}
void _gpio_even_isr()
{
    uint32_t ulFlags = GPIO->IF;
   12238:	4b03      	ldr	r3, [pc, #12]	; (12248 <_gpio_even_isr+0x10>)
   1223a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c

    gpio_isr(ulFlags & 0x55555555);

    GPIO->IFC = 0x55555555; // Clear all even flags
   1223e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
   12242:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
}
   12246:	4770      	bx	lr
   12248:	40088000 	.word	0x40088000

0001224c <_gpio_odd_isr>:
void _gpio_odd_isr()
{
   1224c:	b510      	push	{r4, lr}
    uint32_t ulFlags = GPIO->IF;
   1224e:	4c06      	ldr	r4, [pc, #24]	; (12268 <_gpio_odd_isr+0x1c>)
   12250:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
    if(ulFlags & BIT(3))
   12254:	0713      	lsls	r3, r2, #28
   12256:	d501      	bpl.n	1225c <_gpio_odd_isr+0x10>
    lv_indev_ft6x36_isr();
   12258:	f7f0 fb0a 	bl	2870 <lv_indev_ft6x36_isr>

    gpio_isr(ulFlags & 0xAAAAAAAA);

    GPIO->IFC = 0xAAAAAAAA; // Clear all odd flags
   1225c:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
   12260:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
}
   12264:	bd10      	pop	{r4, pc}
   12266:	bf00      	nop
   12268:	40088000 	.word	0x40088000

0001226c <gpio_init>:

void gpio_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPIO;
   1226c:	4a46      	ldr	r2, [pc, #280]	; (12388 <gpio_init+0x11c>)
   1226e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   12272:	f043 0320 	orr.w	r3, r3, #32
{
   12276:	b510      	push	{r4, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPIO;
   12278:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    // NC - Not Connected (not available in mcu package)
    // NR - Not routed (no routing to pin on pcb, floating)
    // NU - Not used (not currently in use)

    // Port A
    GPIO->P[0].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
   1227c:	4b43      	ldr	r3, [pc, #268]	; (1238c <gpio_init+0x120>)
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[0].MODEL  = GPIO_P_MODEL_MODE0_DISABLED     // NR
   1227e:	4a44      	ldr	r2, [pc, #272]	; (12390 <gpio_init+0x124>)
    GPIO->P[0].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
   12280:	f04f 1150 	mov.w	r1, #5242960	; 0x500050
   12284:	6019      	str	r1, [r3, #0]
    GPIO->P[0].MODEL  = GPIO_P_MODEL_MODE0_DISABLED     // NR
   12286:	605a      	str	r2, [r3, #4]
                      | GPIO_P_MODEL_MODE3_INPUTPULLFILTER // U0TX-USB-RX - Location 2
                      | GPIO_P_MODEL_MODE4_PUSHPULL     // U0RX-USB-TX - Location 2
                      | GPIO_P_MODEL_MODE5_DISABLED     // NR
                      | GPIO_P_MODEL_MODE6_DISABLED     // NR
                      | GPIO_P_MODEL_MODE7_DISABLED;    // NR
    GPIO->P[0].MODEH  = GPIO_P_MODEH_MODE8_PUSHPULL     // TIM0-CC0-BUZZ - Location 6
   12288:	2204      	movs	r2, #4
   1228a:	609a      	str	r2, [r3, #8]
                      | GPIO_P_MODEH_MODE11_DISABLED    // NR
                      | GPIO_P_MODEH_MODE12_DISABLED    // NR
                      | GPIO_P_MODEH_MODE13_DISABLED    // NR
                      | GPIO_P_MODEH_MODE14_DISABLED    // NR
                      | GPIO_P_MODEH_MODE15_DISABLED;   // NR
    GPIO->P[0].DOUT   = BIT(3) | BIT(4);
   1228c:	2218      	movs	r2, #24
   1228e:	60da      	str	r2, [r3, #12]
    GPIO->P[0].OVTDIS = 0;

    // Port B
    GPIO->P[1].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (7 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
   12290:	f04f 1070 	mov.w	r0, #7340144	; 0x700070
    GPIO->P[0].OVTDIS = 0;
   12294:	2200      	movs	r2, #0
   12296:	629a      	str	r2, [r3, #40]	; 0x28
    GPIO->P[1].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (7 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
   12298:	6318      	str	r0, [r3, #48]	; 0x30
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (7 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[1].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // TIM1-CC0-TFT-BL - Location 0
   1229a:	483e      	ldr	r0, [pc, #248]	; (12394 <gpio_init+0x128>)
   1229c:	6358      	str	r0, [r3, #52]	; 0x34
                      | GPIO_P_MODEL_MODE3_INPUTPULLFILTER // TFT_IRQ
                      | GPIO_P_MODEL_MODE4_DISABLED     // NR
                      | GPIO_P_MODEL_MODE5_PUSHPULL     // TFT_RESET
                      | GPIO_P_MODEL_MODE6_PUSHPULL     // TFT_RST
                      | GPIO_P_MODEL_MODE7_DISABLED;    // MAIN_LFXTAL_P
    GPIO->P[1].MODEH  = GPIO_P_MODEH_MODE8_DISABLED     // MAIN_LFXTAL_N
   1229e:	f44f 203b 	mov.w	r0, #765952	; 0xbb000
   122a2:	6398      	str	r0, [r3, #56]	; 0x38
                      | GPIO_P_MODEH_MODE11_WIREDANDPULLUPFILTER // I2C1-SDA-TTFT - Location 1
                      | GPIO_P_MODEH_MODE12_WIREDANDPULLUPFILTER // I2C1-SCL-TTFT - Location 1
                      | GPIO_P_MODEH_MODE13_DISABLED    // MAIN_HFXTAL_N
                      | GPIO_P_MODEH_MODE14_DISABLED    // MAIN_HFXTAL_P
                      | GPIO_P_MODEH_MODE15_DISABLED;   // NC
    GPIO->P[1].DOUT   = BIT(6) | BIT(11) | BIT(12);
   122a4:	f44f 50c2 	mov.w	r0, #6208	; 0x1840
   122a8:	63d8      	str	r0, [r3, #60]	; 0x3c
    GPIO->P[1].OVTDIS = 0;

    // Port C
    GPIO->P[2].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[2].MODEL  = GPIO_P_MODEL_MODE0_DISABLED     // NR
   122aa:	483b      	ldr	r0, [pc, #236]	; (12398 <gpio_init+0x12c>)
    GPIO->P[1].OVTDIS = 0;
   122ac:	659a      	str	r2, [r3, #88]	; 0x58
    GPIO->P[2].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
   122ae:	6619      	str	r1, [r3, #96]	; 0x60
    GPIO->P[2].MODEL  = GPIO_P_MODEL_MODE0_DISABLED     // NR
   122b0:	6658      	str	r0, [r3, #100]	; 0x64
                      | GPIO_P_MODEL_MODE3_INPUTPULLFILTER // US2-MISO-TFT - Location 0
                      | GPIO_P_MODEL_MODE4_PUSHPULL     // US2-CLK-TFT - Location 0
                      | GPIO_P_MODEL_MODE5_PUSHPULL     // US2-CS-TFT - Location 0
                      | GPIO_P_MODEL_MODE6_DISABLED     // NR
                      | GPIO_P_MODEL_MODE7_INPUTPULLFILTER; // DOOR-SW
    GPIO->P[2].MODEH  = GPIO_P_MODEH_MODE8_PUSHPULL     // TIM5-CC0-FAN0-GND - Location 4
   122b2:	f44f 7051 	mov.w	r0, #836	; 0x344
   122b6:	6698      	str	r0, [r3, #104]	; 0x68
                      | GPIO_P_MODEH_MODE11_DISABLED    // NR
                      | GPIO_P_MODEH_MODE12_DISABLED    // NC
                      | GPIO_P_MODEH_MODE13_DISABLED    // NC
                      | GPIO_P_MODEH_MODE14_DISABLED    // NC
                      | GPIO_P_MODEH_MODE15_DISABLED;   // NC
    GPIO->P[2].DOUT   = BIT(5);
   122b8:	2020      	movs	r0, #32
   122ba:	66d8      	str	r0, [r3, #108]	; 0x6c
    GPIO->P[2].OVTDIS = 0;

    // Port D
    GPIO->P[3].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[3].MODEL  = _GPIO_P_MODEL_MODE0_INPUT     // VIN_SENSE
   122bc:	4837      	ldr	r0, [pc, #220]	; (1239c <gpio_init+0x130>)
    GPIO->P[2].OVTDIS = 0;
   122be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    GPIO->P[3].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
   122c2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    GPIO->P[3].MODEL  = _GPIO_P_MODEL_MODE0_INPUT     // VIN_SENSE
   122c6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
                      | GPIO_P_MODEL_MODE3_PUSHPULL     // WTIM2-CC0-SERVO0-SIG - Location 5
                      | GPIO_P_MODEL_MODE4_INPUT        // 5V-SENSE
                      | GPIO_P_MODEL_MODE5_PUSHPULL     // PRS-CH11-SSR-OUT - Location 2
                      | GPIO_P_MODEL_MODE6_WIREDANDFILTER     // I2C0-SDA-SENS - Location 1
                      | GPIO_P_MODEL_MODE7_WIREDANDFILTER;    // I2C0-SCL-SENS - Location 1
    GPIO->P[3].MODEH  = GPIO_P_MODEH_MODE8_DISABLED     // NR
   122ca:	4835      	ldr	r0, [pc, #212]	; (123a0 <gpio_init+0x134>)
   122cc:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    GPIO->P[3].OVTDIS = 0;

    // Port E
    GPIO->P[4].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[4].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // BLE-!RST
   122d0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
   122d4:	f5a0 0041 	sub.w	r0, r0, #12648448	; 0xc10000
   122d8:	38fc      	subs	r0, #252	; 0xfc
    GPIO->P[3].DOUT   = 0;
   122da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    GPIO->P[3].OVTDIS = 0;
   122de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    GPIO->P[4].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
   122e2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    GPIO->P[4].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // BLE-!RST
   122e6:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
                      | GPIO_P_MODEL_MODE3_PUSHPULL     // U1RX-BLE-TX - Location 3
                      | GPIO_P_MODEL_MODE4_INPUTPULLFILTER // WTIM1-CC1-ZERO-CROSS - Location 4
                      | GPIO_P_MODEL_MODE5_PUSHPULL     // US0-LED-SCK - Location 1
                      | GPIO_P_MODEL_MODE6_DISABLED     // NR
                      | GPIO_P_MODEL_MODE7_PUSHPULL;    // US0-LED-MOSI - Location 1
    GPIO->P[4].MODEH  = GPIO_P_MODEH_MODE8_PUSHPULL     // SDIO-DAT3 - Location 0
   122ea:	482e      	ldr	r0, [pc, #184]	; (123a4 <gpio_init+0x138>)
   122ec:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
                      | GPIO_P_MODEH_MODE11_INPUTPULL   // SDIO-DAT0 - Location 0
                      | GPIO_P_MODEH_MODE12_PUSHPULL    // SDIO-CMD - Location 0
                      | GPIO_P_MODEH_MODE13_PUSHPULL    // SDIO-CLK - Location 0
                      | GPIO_P_MODEH_MODE14_DISABLED    // NR
                      | GPIO_P_MODEH_MODE15_DISABLED;   // NR
    GPIO->P[4].DOUT   = BIT(2) | BIT(4);
   122f0:	2014      	movs	r0, #20
   122f2:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
    GPIO->P[4].OVTDIS = 0;
   122f6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    // Port F
    GPIO->P[5].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
   122fa:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[5].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // DBG_SWCLK - Location 0
   122fe:	492a      	ldr	r1, [pc, #168]	; (123a8 <gpio_init+0x13c>)
   12300:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
                      | GPIO_P_MODEL_MODE3_DISABLED     // NC
                      | GPIO_P_MODEL_MODE4_DISABLED     // NC
                      | GPIO_P_MODEL_MODE5_DISABLED     // NR
                      | GPIO_P_MODEL_MODE6_PUSHPULL     // QSPI0_SCLK - Location 0
                      | GPIO_P_MODEL_MODE7_PUSHPULL;    // QSPI0_CS0 - Location 0
    GPIO->P[5].MODEH  = GPIO_P_MODEH_MODE8_INPUTPULLFILTER // SDIO-CD - Location 0
   12304:	2103      	movs	r1, #3
   12306:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
                      | GPIO_P_MODEH_MODE11_DISABLED    // NR
                      | GPIO_P_MODEH_MODE12_DISABLED    // NR
                      | GPIO_P_MODEH_MODE13_DISABLED    // NC
                      | GPIO_P_MODEH_MODE14_DISABLED    // NC
                      | GPIO_P_MODEH_MODE15_DISABLED;   // NC
    GPIO->P[5].DOUT   = BIT(7) | BIT(8);
   1230a:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1230e:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
    GPIO->P[5].OVTDIS = 0;
   12312:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    // Debugger Route
    GPIO->ROUTEPEN &= ~(GPIO_ROUTEPEN_TDIPEN | GPIO_ROUTEPEN_TDOPEN); // Disable JTAG
   12316:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   1231a:	f021 010c 	bic.w	r1, r1, #12
   1231e:	f8c3 1440 	str.w	r1, [r3, #1088]	; 0x440
    GPIO->ROUTEPEN |= GPIO_ROUTEPEN_SWVPEN; // Enable SWO
   12322:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   12326:	f041 0110 	orr.w	r1, r1, #16
   1232a:	f8c3 1440 	str.w	r1, [r3, #1088]	; 0x440
    GPIO->ROUTELOC0 = GPIO_ROUTELOC0_SWVLOC_LOC0; // SWO on PF2

    // External interrupts
    GPIO->EXTIPSELL = GPIO_EXTIPSELL_EXTIPSEL0_PORTB            // TFT_IRQ
   1232e:	491f      	ldr	r1, [pc, #124]	; (123ac <gpio_init+0x140>)
    GPIO->ROUTELOC0 = GPIO_ROUTELOC0_SWVLOC_LOC0; // SWO on PF2
   12330:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
    GPIO->EXTIPSELL = GPIO_EXTIPSELL_EXTIPSEL0_PORTB            // TFT_IRQ
   12334:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
                    | GPIO_EXTIPSELL_EXTIPSEL3_PORTB            //
                    | GPIO_EXTIPSELL_EXTIPSEL4_PORTA            //
                    | GPIO_EXTIPSELL_EXTIPSEL5_PORTA            //
                    | GPIO_EXTIPSELL_EXTIPSEL6_PORTC            //
                    | GPIO_EXTIPSELL_EXTIPSEL7_PORTC;           //
    GPIO->EXTIPSELH = GPIO_EXTIPSELH_EXTIPSEL8_PORTA            //
   12338:	491d      	ldr	r1, [pc, #116]	; (123b0 <gpio_init+0x144>)
   1233a:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
                    | GPIO_EXTIPSELH_EXTIPSEL12_PORTA           //
                    | GPIO_EXTIPSELH_EXTIPSEL13_PORTE           //
                    | GPIO_EXTIPSELH_EXTIPSEL14_PORTF           //
                    | GPIO_EXTIPSELH_EXTIPSEL15_PORTA;          //

    GPIO->EXTIPINSELL = GPIO_EXTIPINSELL_EXTIPINSEL0_PIN3       // TFT_IRQ
   1233e:	f101 512c 	add.w	r1, r1, #721420288	; 0x2b000000
   12342:	f46f 704b 	mvn.w	r0, #812	; 0x32c
   12346:	f5a1 215d 	sub.w	r1, r1, #905216	; 0xdd000
   1234a:	4401      	add	r1, r0
   1234c:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
                      | GPIO_EXTIPINSELL_EXTIPINSEL3_PIN3       //
                      | GPIO_EXTIPINSELL_EXTIPINSEL4_PIN6       //
                      | GPIO_EXTIPINSELL_EXTIPINSEL5_PIN7       //
                      | GPIO_EXTIPINSELL_EXTIPINSEL6_PIN4       //
                      | GPIO_EXTIPINSELL_EXTIPINSEL7_PIN7;      //
    GPIO->EXTIPINSELH = GPIO_EXTIPINSELH_EXTIPINSEL8_PIN8       //
   12350:	4918      	ldr	r1, [pc, #96]	; (123b4 <gpio_init+0x148>)
   12352:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
                      | GPIO_EXTIPINSELH_EXTIPINSEL13_PIN15     //
                      | GPIO_EXTIPINSELH_EXTIPINSEL14_PIN12     //
                      | GPIO_EXTIPINSELH_EXTIPINSEL15_PIN12;    //

    GPIO->EXTIRISE = 0; //
    GPIO->EXTIFALL = BIT(3); // TFT_IRQ
   12356:	2008      	movs	r0, #8

    GPIO->IFC = _GPIO_IFC_MASK; // Clear pending IRQs
   12358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    GPIO->EXTIRISE = 0; //
   1235c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    GPIO->EXTIFALL = BIT(3); // TFT_IRQ
   12360:	f8c3 0414 	str.w	r0, [r3, #1044]	; 0x414
    GPIO->IFC = _GPIO_IFC_MASK; // Clear pending IRQs
   12364:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
    IRQ_CLEAR(GPIO_EVEN_IRQn); // Clear pending vector
   12368:	4913      	ldr	r1, [pc, #76]	; (123b8 <gpio_init+0x14c>)
    IRQ_CLEAR(GPIO_ODD_IRQn); // Clear pending vector
   1236a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    IRQ_CLEAR(GPIO_EVEN_IRQn); // Clear pending vector
   1236e:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    IRQ_CLEAR(GPIO_ODD_IRQn); // Clear pending vector
   12372:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
    IRQ_SET_PRIO(GPIO_EVEN_IRQn, 0, 0); // Set priority 0,0 (max)
   12376:	f881 2303 	strb.w	r2, [r1, #771]	; 0x303
    IRQ_SET_PRIO(GPIO_ODD_IRQn, 0, 0); // Set priority 0,0 (max)
   1237a:	f881 230d 	strb.w	r2, [r1, #781]	; 0x30d
    IRQ_ENABLE(GPIO_EVEN_IRQn); // Enable vector
   1237e:	6008      	str	r0, [r1, #0]
    IRQ_ENABLE(GPIO_ODD_IRQn); // Enable vector
   12380:	600c      	str	r4, [r1, #0]
    GPIO->IEN = BIT(3); // Enable interrupts
   12382:	f8c3 0428 	str.w	r0, [r3, #1064]	; 0x428
}
   12386:	bd10      	pop	{r4, pc}
   12388:	400e4000 	.word	0x400e4000
   1238c:	40088000 	.word	0x40088000
   12390:	00043440 	.word	0x00043440
   12394:	04403004 	.word	0x04403004
   12398:	30443440 	.word	0x30443440
   1239c:	99414301 	.word	0x99414301
   123a0:	00044440 	.word	0x00044440
   123a4:	00442444 	.word	0x00442444
   123a8:	44000444 	.word	0x44000444
   123ac:	22001111 	.word	0x22001111
   123b0:	05400540 	.word	0x05400540
   123b4:	00310310 	.word	0x00310310
   123b8:	e000e100 	.word	0xe000e100

000123bc <play_sound>:

void play_sound(uint16_t usFrequency, uint32_t ulTime)
{
   123bc:	b538      	push	{r3, r4, r5, lr}
    static uint8_t ubInit = 0;

    if(!ubInit)
   123be:	4c17      	ldr	r4, [pc, #92]	; (1241c <play_sound+0x60>)
{
   123c0:	4603      	mov	r3, r0
    if(!ubInit)
   123c2:	7820      	ldrb	r0, [r4, #0]
   123c4:	b9a8      	cbnz	r0, 123f2 <play_sound+0x36>
    {
        CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_TIMER0;
   123c6:	4d16      	ldr	r5, [pc, #88]	; (12420 <play_sound+0x64>)
   123c8:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
   123cc:	f042 0201 	orr.w	r2, r2, #1
   123d0:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0

        TIMER0->CTRL = TIMER_CTRL_RSSCOIST | TIMER_CTRL_PRESC_DIV1 | TIMER_CTRL_CLKSEL_PRESCHFPERCLK | TIMER_CTRL_FALLA_NONE | TIMER_CTRL_RISEA_NONE | TIMER_CTRL_MODE_UP;
   123d4:	4a13      	ldr	r2, [pc, #76]	; (12424 <play_sound+0x68>)
   123d6:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   123da:	6015      	str	r5, [r2, #0]
        TIMER0->CNT = 0x0000;
   123dc:	6250      	str	r0, [r2, #36]	; 0x24

        TIMER0->CC[0].CTRL = TIMER_CC_CTRL_PRSCONF_LEVEL | TIMER_CC_CTRL_CUFOA_NONE | TIMER_CC_CTRL_COFOA_TOGGLE | TIMER_CC_CTRL_CMOA_NONE | TIMER_CC_CTRL_MODE_OUTPUTCOMPARE;
   123de:	4812      	ldr	r0, [pc, #72]	; (12428 <play_sound+0x6c>)
   123e0:	6610      	str	r0, [r2, #96]	; 0x60

        TIMER0->ROUTELOC0 = TIMER_ROUTELOC0_CC0LOC_LOC6;
   123e2:	2006      	movs	r0, #6
   123e4:	6350      	str	r0, [r2, #52]	; 0x34
        TIMER0->ROUTEPEN |= TIMER_ROUTEPEN_CC0PEN;
   123e6:	6b10      	ldr	r0, [r2, #48]	; 0x30
   123e8:	f040 0001 	orr.w	r0, r0, #1
   123ec:	6310      	str	r0, [r2, #48]	; 0x30

        ubInit = 1;
   123ee:	2201      	movs	r2, #1
   123f0:	7022      	strb	r2, [r4, #0]
    }

    if(!usFrequency)
   123f2:	4c0c      	ldr	r4, [pc, #48]	; (12424 <play_sound+0x68>)
   123f4:	b913      	cbnz	r3, 123fc <play_sound+0x40>
    if(!ulTime)
        return;

    delay_ms(ulTime);

    TIMER0->CMD = TIMER_CMD_STOP;
   123f6:	2302      	movs	r3, #2
   123f8:	6063      	str	r3, [r4, #4]
   123fa:	bd38      	pop	{r3, r4, r5, pc}
    TIMER0->TOP = (HFPER_CLOCK_FREQ / (usFrequency << 1)) - 1; // Double the frequency
   123fc:	005a      	lsls	r2, r3, #1
   123fe:	4b0b      	ldr	r3, [pc, #44]	; (1242c <play_sound+0x70>)
   12400:	681b      	ldr	r3, [r3, #0]
   12402:	fbb3 f3f2 	udiv	r3, r3, r2
   12406:	3b01      	subs	r3, #1
   12408:	61e3      	str	r3, [r4, #28]
    TIMER0->CMD = TIMER_CMD_START;
   1240a:	2301      	movs	r3, #1
   1240c:	6063      	str	r3, [r4, #4]
    if(!ulTime)
   1240e:	2900      	cmp	r1, #0
   12410:	d0f3      	beq.n	123fa <play_sound+0x3e>
    delay_ms(ulTime);
   12412:	4608      	mov	r0, r1
   12414:	2100      	movs	r1, #0
   12416:	f000 f897 	bl	12548 <delay_ms>
   1241a:	e7ec      	b.n	123f6 <play_sound+0x3a>
   1241c:	20005ef4 	.word	0x20005ef4
   12420:	400e4000 	.word	0x400e4000
   12424:	40018000 	.word	0x40018000
   12428:	10000402 	.word	0x10000402
   1242c:	20006314 	.word	0x20006314

00012430 <rtcc_init>:
#include "rtcc.h"

void rtcc_init()
{
   12430:	b508      	push	{r3, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_LE;
   12432:	4b17      	ldr	r3, [pc, #92]	; (12490 <rtcc_init+0x60>)
   12434:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   12438:	f042 0201 	orr.w	r2, r2, #1
   1243c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    CMU->LFEPRESC0 = (CMU->LFEPRESC0 & ~_CMU_LFEPRESC0_RTCC_MASK) | CMU_LFEPRESC0_RTCC_DIV1;
   12440:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   12444:	f022 0203 	bic.w	r2, r2, #3
   12448:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    CMU->LFECLKEN0 |= CMU_LFECLKEN0_RTCC;
   1244c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   12450:	f042 0201 	orr.w	r2, r2, #1
   12454:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    cmu_update_clocks();
   12458:	f000 f9fe 	bl	12858 <cmu_update_clocks>

    RTCC->CTRL = RTCC_CTRL_CNTMODE_NORMAL | RTCC_CTRL_OSCFDETEN | RTCC_CTRL_CNTTICK_CCV0MATCH | RTCC_CTRL_PRECCV0TOP | RTCC_CTRL_DEBUGRUN;
   1245c:	4b0d      	ldr	r3, [pc, #52]	; (12494 <rtcc_init+0x64>)
   1245e:	f249 0214 	movw	r2, #36884	; 0x9014
   12462:	601a      	str	r2, [r3, #0]
    RTCC->PRECNT = 0;
   12464:	2200      	movs	r2, #0
   12466:	605a      	str	r2, [r3, #4]
    RTCC->CNT = 0;
   12468:	609a      	str	r2, [r3, #8]

    RTCC->CC[0].CCV = (RTCC_CLOCK_FREQ / 1) - 1; // Prescaler for 1 Hz
   1246a:	4a0b      	ldr	r2, [pc, #44]	; (12498 <rtcc_init+0x68>)
   1246c:	6812      	ldr	r2, [r2, #0]
   1246e:	3a01      	subs	r2, #1
   12470:	645a      	str	r2, [r3, #68]	; 0x44

    RTCC->CC[1].CTRL = RTCC_CC_CTRL_COMPBASE_CNT | RTCC_CC_CTRL_MODE_OUTPUTCOMPARE;
   12472:	2202      	movs	r2, #2
   12474:	651a      	str	r2, [r3, #80]	; 0x50

    RTCC->IFC = _RTCC_IFC_MASK;
   12476:	f240 72ff 	movw	r2, #2047	; 0x7ff
   1247a:	621a      	str	r2, [r3, #32]
    RTCC->IEN |= RTCC_IEN_CC1;
   1247c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1247e:	f042 0204 	orr.w	r2, r2, #4
   12482:	625a      	str	r2, [r3, #36]	; 0x24

    RTCC->CTRL |= RTCC_CTRL_ENABLE;
   12484:	681a      	ldr	r2, [r3, #0]
   12486:	f042 0201 	orr.w	r2, r2, #1
   1248a:	601a      	str	r2, [r3, #0]
}
   1248c:	bd08      	pop	{r3, pc}
   1248e:	bf00      	nop
   12490:	400e4000 	.word	0x400e4000
   12494:	40062000 	.word	0x40062000
   12498:	200062e8 	.word	0x200062e8

0001249c <trng_init>:
#include "trng.h"

void trng_init()
{
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_TRNG0;
   1249c:	4a11      	ldr	r2, [pc, #68]	; (124e4 <trng_init+0x48>)
   1249e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   124a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   124a6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    TRNG0->CONTROL = TRNG_CONTROL_FORCERUN_RUN | TRNG_CONTROL_SOFTRESET_RESET | TRNG_CONTROL_CONDBYPASS_BYPASS | TRNG_CONTROL_TESTEN_NOISE;
   124aa:	4b0f      	ldr	r3, [pc, #60]	; (124e8 <trng_init+0x4c>)
   124ac:	f640 1208 	movw	r2, #2312	; 0x908
   124b0:	601a      	str	r2, [r3, #0]
    TRNG0->CONTROL &= ~TRNG_CONTROL_SOFTRESET_RESET;
   124b2:	681a      	ldr	r2, [r3, #0]
   124b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   124b8:	601a      	str	r2, [r3, #0]
    TRNG0->CONTROL |= TRNG_CONTROL_ENABLE_ENABLED;
   124ba:	681a      	ldr	r2, [r3, #0]
   124bc:	f042 0201 	orr.w	r2, r2, #1
   124c0:	601a      	str	r2, [r3, #0]

    while(TRNG0->FIFOLEVEL < 4);
   124c2:	685a      	ldr	r2, [r3, #4]
   124c4:	2a03      	cmp	r2, #3
   124c6:	d9fc      	bls.n	124c2 <trng_init+0x26>

    TRNG0->KEY0 = TRNG0->FIFO;
   124c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   124cc:	611a      	str	r2, [r3, #16]
    TRNG0->KEY1 = TRNG0->FIFO;
   124ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   124d2:	615a      	str	r2, [r3, #20]
    TRNG0->KEY2 = TRNG0->FIFO;
   124d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   124d8:	619a      	str	r2, [r3, #24]
    TRNG0->KEY3 = TRNG0->FIFO;
   124da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   124de:	61da      	str	r2, [r3, #28]
}
   124e0:	4770      	bx	lr
   124e2:	bf00      	nop
   124e4:	400e4000 	.word	0x400e4000
   124e8:	4001d000 	.word	0x4001d000

000124ec <trng_pop_random>:
uint32_t trng_pop_random()
{
    while(!TRNG0->FIFOLEVEL);
   124ec:	4b03      	ldr	r3, [pc, #12]	; (124fc <trng_pop_random+0x10>)
   124ee:	685a      	ldr	r2, [r3, #4]
   124f0:	2a00      	cmp	r2, #0
   124f2:	d0fc      	beq.n	124ee <trng_pop_random+0x2>

    return TRNG0->FIFO;
   124f4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   124f8:	4770      	bx	lr
   124fa:	bf00      	nop
   124fc:	4001d000 	.word	0x4001d000

00012500 <_systick_isr>:

volatile uint64_t g_ullSystemTick = 0;

void _systick_isr()
{
    g_ullSystemTick++;
   12500:	4904      	ldr	r1, [pc, #16]	; (12514 <_systick_isr+0x14>)
{
   12502:	b530      	push	{r4, r5, lr}
    g_ullSystemTick++;
   12504:	e9d1 2300 	ldrd	r2, r3, [r1]
   12508:	1c54      	adds	r4, r2, #1
   1250a:	f143 0500 	adc.w	r5, r3, #0
   1250e:	e9c1 4500 	strd	r4, r5, [r1]
}
   12512:	bd30      	pop	{r4, r5, pc}
   12514:	20005ef8 	.word	0x20005ef8

00012518 <systick_init>:
void systick_init()
{
    SysTick->LOAD = (HFCORE_CLOCK_FREQ / 1000) - 1;
   12518:	4b08      	ldr	r3, [pc, #32]	; (1253c <systick_init+0x24>)
   1251a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1251e:	681b      	ldr	r3, [r3, #0]
   12520:	fbb3 f3f2 	udiv	r3, r3, r2
   12524:	4a06      	ldr	r2, [pc, #24]	; (12540 <systick_init+0x28>)
   12526:	3b01      	subs	r3, #1
   12528:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;
   1252a:	2300      	movs	r3, #0
   1252c:	6093      	str	r3, [r2, #8]
    SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
   1252e:	2307      	movs	r3, #7
   12530:	6013      	str	r3, [r2, #0]

    SCB->SHP[11] = 7 << (8 - __NVIC_PRIO_BITS); // Set priority 3,1 (min)
   12532:	4b04      	ldr	r3, [pc, #16]	; (12544 <systick_init+0x2c>)
   12534:	22e0      	movs	r2, #224	; 0xe0
   12536:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
   1253a:	4770      	bx	lr
   1253c:	200062e0 	.word	0x200062e0
   12540:	e000e010 	.word	0xe000e010
   12544:	e000ed00 	.word	0xe000ed00

00012548 <delay_ms>:
void delay_ms(uint64_t ullTicks)
{
   12548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1254c:	4604      	mov	r4, r0
   1254e:	460d      	mov	r5, r1
   12550:	f3ef 8210 	mrs	r2, PRIMASK
    __asm__ volatile ("cpsie i" ::: "memory");
   12554:	b662      	cpsie	i
    NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE)
    {
        uint64_t ullStartTick = g_ullSystemTick;
   12556:	4b08      	ldr	r3, [pc, #32]	; (12578 <delay_ms+0x30>)
   12558:	e9d3 0100 	ldrd	r0, r1, [r3]

        while(g_ullSystemTick - ullStartTick < ullTicks);
   1255c:	e9d3 8900 	ldrd	r8, r9, [r3]
   12560:	ebb8 0600 	subs.w	r6, r8, r0
   12564:	eb69 0701 	sbc.w	r7, r9, r1
   12568:	42af      	cmp	r7, r5
   1256a:	bf08      	it	eq
   1256c:	42a6      	cmpeq	r6, r4
   1256e:	d3f5      	bcc.n	1255c <delay_ms+0x14>
    if(!*__s)
   12570:	b902      	cbnz	r2, 12574 <delay_ms+0x2c>
        __asm__ volatile ("cpsie i" ::: "memory");
   12572:	b662      	cpsie	i
    }
}
   12574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12578:	20005ef8 	.word	0x20005ef8

0001257c <i2c0_init>:
#include "i2c.h"

void i2c0_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation)
{
    if(ubSCLLocation > AFCHANLOC_MAX)
   1257c:	2908      	cmp	r1, #8
{
   1257e:	b510      	push	{r4, lr}
    if(ubSCLLocation > AFCHANLOC_MAX)
   12580:	d825      	bhi.n	125ce <i2c0_init+0x52>
        return;

    if(ubSDALocation > AFCHANLOC_MAX)
   12582:	2a08      	cmp	r2, #8
   12584:	d823      	bhi.n	125ce <i2c0_init+0x52>
        return;

	CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_I2C0;
   12586:	4c15      	ldr	r4, [pc, #84]	; (125dc <i2c0_init+0x60>)
   12588:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12590:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    I2C0->CTRL = I2C_CTRL_CLHR_STANDARD | I2C_CTRL_TXBIL_EMPTY;
   12594:	f5a4 24b6 	sub.w	r4, r4, #372736	; 0x5b000
   12598:	2300      	movs	r3, #0
   1259a:	6023      	str	r3, [r4, #0]
    I2C0->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    I2C0->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
   1259c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    I2C0->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
   125a0:	2303      	movs	r3, #3
   125a2:	6463      	str	r3, [r4, #68]	; 0x44
    I2C0->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
   125a4:	64a1      	str	r1, [r4, #72]	; 0x48

    if(ubMode == I2C_NORMAL)
   125a6:	b998      	cbnz	r0, 125d0 <i2c0_init+0x54>
        I2C0->CLKDIV = (((HFPERC_CLOCK_FREQ / 100000) - 8) / 8) - 1;
   125a8:	4b0d      	ldr	r3, [pc, #52]	; (125e0 <i2c0_init+0x64>)
   125aa:	4a0e      	ldr	r2, [pc, #56]	; (125e4 <i2c0_init+0x68>)
   125ac:	681b      	ldr	r3, [r3, #0]
    else if(ubMode == I2C_FAST)
        I2C0->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
   125ae:	fbb3 f3f2 	udiv	r3, r3, r2
   125b2:	3b08      	subs	r3, #8
   125b4:	08db      	lsrs	r3, r3, #3
   125b6:	3b01      	subs	r3, #1
   125b8:	6123      	str	r3, [r4, #16]

    I2C0->CTRL |= I2C_CTRL_EN;
   125ba:	4b0b      	ldr	r3, [pc, #44]	; (125e8 <i2c0_init+0x6c>)
   125bc:	681a      	ldr	r2, [r3, #0]
   125be:	f042 0201 	orr.w	r2, r2, #1
   125c2:	601a      	str	r2, [r3, #0]
    I2C0->CMD = I2C_CMD_ABORT;
   125c4:	2220      	movs	r2, #32
   125c6:	605a      	str	r2, [r3, #4]

    while(I2C0->STATE & I2C_STATE_BUSY);
   125c8:	689a      	ldr	r2, [r3, #8]
   125ca:	07d2      	lsls	r2, r2, #31
   125cc:	d4fc      	bmi.n	125c8 <i2c0_init+0x4c>
}
   125ce:	bd10      	pop	{r4, pc}
    else if(ubMode == I2C_FAST)
   125d0:	2801      	cmp	r0, #1
   125d2:	d1f2      	bne.n	125ba <i2c0_init+0x3e>
        I2C0->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
   125d4:	4b02      	ldr	r3, [pc, #8]	; (125e0 <i2c0_init+0x64>)
   125d6:	4a05      	ldr	r2, [pc, #20]	; (125ec <i2c0_init+0x70>)
   125d8:	681b      	ldr	r3, [r3, #0]
   125da:	e7e8      	b.n	125ae <i2c0_init+0x32>
   125dc:	400e4000 	.word	0x400e4000
   125e0:	20006300 	.word	0x20006300
   125e4:	000186a0 	.word	0x000186a0
   125e8:	40089000 	.word	0x40089000
   125ec:	00061a80 	.word	0x00061a80

000125f0 <i2c0_transmit>:
uint8_t i2c0_transmit(uint8_t ubAddress, uint8_t *pubSrc, uint32_t ulCount, uint8_t ubStop)
{
   125f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    I2C0->IFC = _I2C_IFC_MASK;
   125f2:	4c3d      	ldr	r4, [pc, #244]	; (126e8 <i2c0_transmit+0xf8>)
   125f4:	4d3d      	ldr	r5, [pc, #244]	; (126ec <i2c0_transmit+0xfc>)
   125f6:	63e5      	str	r5, [r4, #60]	; 0x3c

    I2C0->CMD = I2C_CMD_START;
   125f8:	2501      	movs	r5, #1
   125fa:	6065      	str	r5, [r4, #4]

    while(!(I2C0->IF & (I2C_IF_START | I2C_IF_RSTART | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
   125fc:	f240 6503 	movw	r5, #1539	; 0x603
   12600:	6b66      	ldr	r6, [r4, #52]	; 0x34
   12602:	422e      	tst	r6, r5
   12604:	d0fc      	beq.n	12600 <i2c0_transmit+0x10>

    if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   12606:	6b65      	ldr	r5, [r4, #52]	; 0x34
   12608:	f415 6fc0 	tst.w	r5, #1536	; 0x600
   1260c:	d003      	beq.n	12616 <i2c0_transmit+0x26>
			{
                while(!(I2C0->IF & (I2C_IF_RXDATAV | I2C_IF_ARBLOST | I2C_IF_BUSERR)));

                if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
                {
                    I2C0->CMD = I2C_CMD_ABORT;
   1260e:	2320      	movs	r3, #32
   12610:	6063      	str	r3, [r4, #4]

                    return 0;
   12612:	2000      	movs	r0, #0
            return 0;
        }
    }

	return 1;
}
   12614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    I2C0->TXDATA = ubAddress;
   12616:	62e0      	str	r0, [r4, #44]	; 0x2c
    while(!(I2C0->IF & (I2C_IF_ACK | I2C_IF_NACK | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
   12618:	4c33      	ldr	r4, [pc, #204]	; (126e8 <i2c0_transmit+0xf8>)
   1261a:	6b65      	ldr	r5, [r4, #52]	; 0x34
   1261c:	f415 6fd8 	tst.w	r5, #1728	; 0x6c0
   12620:	d0fb      	beq.n	1261a <i2c0_transmit+0x2a>
    if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   12622:	6b65      	ldr	r5, [r4, #52]	; 0x34
   12624:	f415 6fc0 	tst.w	r5, #1536	; 0x600
   12628:	d1f1      	bne.n	1260e <i2c0_transmit+0x1e>
    else if(I2C0->IF & I2C_IF_NACK)
   1262a:	6b65      	ldr	r5, [r4, #52]	; 0x34
   1262c:	062d      	lsls	r5, r5, #24
   1262e:	d50d      	bpl.n	1264c <i2c0_transmit+0x5c>
        I2C0->CMD = I2C_CMD_STOP;
   12630:	2302      	movs	r3, #2
   12632:	6063      	str	r3, [r4, #4]
        while(I2C0->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
   12634:	4b2c      	ldr	r3, [pc, #176]	; (126e8 <i2c0_transmit+0xf8>)
   12636:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   12638:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
   1263c:	d1fb      	bne.n	12636 <i2c0_transmit+0x46>
                    if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   1263e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   12640:	f412 6fc0 	tst.w	r2, #1536	; 0x600
   12644:	d0e5      	beq.n	12612 <i2c0_transmit+0x22>
            I2C0->CMD = I2C_CMD_ABORT;
   12646:	2220      	movs	r2, #32
   12648:	605a      	str	r2, [r3, #4]
            return 0;
   1264a:	e7e3      	b.n	12614 <i2c0_transmit+0x24>
	if(ulCount)
   1264c:	b1ea      	cbz	r2, 1268a <i2c0_transmit+0x9a>
   1264e:	4c26      	ldr	r4, [pc, #152]	; (126e8 <i2c0_transmit+0xf8>)
   12650:	3101      	adds	r1, #1
   12652:	f000 0001 	and.w	r0, r0, #1
                    I2C0->CMD = I2C_CMD_NACK;
   12656:	2508      	movs	r5, #8
                    I2C0->CMD = I2C_CMD_ACK;
   12658:	2604      	movs	r6, #4
                I2C0->IFC = I2C_IFC_ACK;
   1265a:	2740      	movs	r7, #64	; 0x40
			if(ubAddress & 1) // Read
   1265c:	b1c0      	cbz	r0, 12690 <i2c0_transmit+0xa0>
                while(!(I2C0->IF & (I2C_IF_RXDATAV | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
   1265e:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   12662:	f41c 6fc4 	tst.w	ip, #1568	; 0x620
   12666:	d0fa      	beq.n	1265e <i2c0_transmit+0x6e>
                if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   12668:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   1266c:	f41c 6fc0 	tst.w	ip, #1536	; 0x600
   12670:	d1cd      	bne.n	1260e <i2c0_transmit+0x1e>
				*pubSrc++ = I2C0->RXDATA;
   12672:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   12676:	f801 cc01 	strb.w	ip, [r1, #-1]
				if(ulCount > 1)
   1267a:	2a01      	cmp	r2, #1
                    I2C0->CMD = I2C_CMD_ACK;
   1267c:	bf8c      	ite	hi
   1267e:	6066      	strhi	r6, [r4, #4]
                    I2C0->CMD = I2C_CMD_NACK;
   12680:	6065      	strls	r5, [r4, #4]
		} while(--ulCount);
   12682:	3a01      	subs	r2, #1
   12684:	f101 0101 	add.w	r1, r1, #1
   12688:	d1e8      	bne.n	1265c <i2c0_transmit+0x6c>
    if(ubStop)
   1268a:	bb03      	cbnz	r3, 126ce <i2c0_transmit+0xde>
	return 1;
   1268c:	2001      	movs	r0, #1
   1268e:	e7c1      	b.n	12614 <i2c0_transmit+0x24>
                I2C0->IFC = I2C_IFC_ACK;
   12690:	63e7      	str	r7, [r4, #60]	; 0x3c
				I2C0->TXDATA = *pubSrc++;
   12692:	f811 cc01 	ldrb.w	ip, [r1, #-1]
   12696:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
                while(!(I2C0->IF & (I2C_IF_ACK | I2C_IF_NACK | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
   1269a:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   1269e:	f41c 6fd8 	tst.w	ip, #1728	; 0x6c0
   126a2:	d0fa      	beq.n	1269a <i2c0_transmit+0xaa>
                if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   126a4:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   126a8:	f41c 6fc0 	tst.w	ip, #1536	; 0x600
   126ac:	d002      	beq.n	126b4 <i2c0_transmit+0xc4>
                    I2C0->CMD = I2C_CMD_ABORT;
   126ae:	2320      	movs	r3, #32
   126b0:	6063      	str	r3, [r4, #4]
                    return 0;
   126b2:	e7af      	b.n	12614 <i2c0_transmit+0x24>
                else if(I2C0->IF & I2C_IF_NACK)
   126b4:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   126b8:	f01c 0f80 	tst.w	ip, #128	; 0x80
   126bc:	d0e1      	beq.n	12682 <i2c0_transmit+0x92>
                    I2C0->CMD = I2C_CMD_STOP;
   126be:	2302      	movs	r3, #2
   126c0:	6063      	str	r3, [r4, #4]
                    while(I2C0->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
   126c2:	4b09      	ldr	r3, [pc, #36]	; (126e8 <i2c0_transmit+0xf8>)
   126c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   126c6:	f412 6fe0 	tst.w	r2, #1792	; 0x700
   126ca:	d1fb      	bne.n	126c4 <i2c0_transmit+0xd4>
   126cc:	e7b7      	b.n	1263e <i2c0_transmit+0x4e>
        I2C0->CMD = I2C_CMD_STOP;
   126ce:	4b06      	ldr	r3, [pc, #24]	; (126e8 <i2c0_transmit+0xf8>)
   126d0:	2202      	movs	r2, #2
   126d2:	605a      	str	r2, [r3, #4]
        while(I2C0->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
   126d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   126d6:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
   126da:	d1fb      	bne.n	126d4 <i2c0_transmit+0xe4>
        if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   126dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   126de:	f412 6fc0 	tst.w	r2, #1536	; 0x600
   126e2:	d0d3      	beq.n	1268c <i2c0_transmit+0x9c>
   126e4:	e7af      	b.n	12646 <i2c0_transmit+0x56>
   126e6:	bf00      	nop
   126e8:	40089000 	.word	0x40089000
   126ec:	0007ffcf 	.word	0x0007ffcf

000126f0 <i2c1_init>:


void i2c1_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation)
{
    if(ubSCLLocation > AFCHANLOC_MAX)
   126f0:	2908      	cmp	r1, #8
{
   126f2:	b510      	push	{r4, lr}
    if(ubSCLLocation > AFCHANLOC_MAX)
   126f4:	d823      	bhi.n	1273e <i2c1_init+0x4e>
        return;

    if(ubSDALocation > AFCHANLOC_MAX)
   126f6:	2a08      	cmp	r2, #8
   126f8:	d821      	bhi.n	1273e <i2c1_init+0x4e>
        return;

	CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_I2C1;
   126fa:	4c16      	ldr	r4, [pc, #88]	; (12754 <i2c1_init+0x64>)
   126fc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   12700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   12704:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    I2C1->CTRL = I2C_CTRL_CLHR_STANDARD | I2C_CTRL_TXBIL_EMPTY;
   12708:	4b13      	ldr	r3, [pc, #76]	; (12758 <i2c1_init+0x68>)
   1270a:	2400      	movs	r4, #0
   1270c:	601c      	str	r4, [r3, #0]
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
   1270e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
   12712:	2403      	movs	r4, #3
   12714:	645c      	str	r4, [r3, #68]	; 0x44
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
   12716:	6499      	str	r1, [r3, #72]	; 0x48

    if(ubMode == I2C_NORMAL)
   12718:	b990      	cbnz	r0, 12740 <i2c1_init+0x50>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 100000) - 8) / 8) - 1;
   1271a:	4a10      	ldr	r2, [pc, #64]	; (1275c <i2c1_init+0x6c>)
   1271c:	4910      	ldr	r1, [pc, #64]	; (12760 <i2c1_init+0x70>)
   1271e:	6812      	ldr	r2, [r2, #0]
   12720:	fbb2 f2f1 	udiv	r2, r2, r1
   12724:	3a08      	subs	r2, #8
   12726:	40e2      	lsrs	r2, r4
    else if(ubMode == I2C_FAST)
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
   12728:	3a01      	subs	r2, #1
   1272a:	611a      	str	r2, [r3, #16]

    I2C1->CTRL |= I2C_CTRL_EN;
   1272c:	681a      	ldr	r2, [r3, #0]
   1272e:	f042 0201 	orr.w	r2, r2, #1
   12732:	601a      	str	r2, [r3, #0]
    I2C1->CMD = I2C_CMD_ABORT;
   12734:	2220      	movs	r2, #32
   12736:	605a      	str	r2, [r3, #4]

    while(I2C1->STATE & I2C_STATE_BUSY);
   12738:	689a      	ldr	r2, [r3, #8]
   1273a:	07d2      	lsls	r2, r2, #31
   1273c:	d4fc      	bmi.n	12738 <i2c1_init+0x48>
}
   1273e:	bd10      	pop	{r4, pc}
    else if(ubMode == I2C_FAST)
   12740:	2801      	cmp	r0, #1
   12742:	d1f3      	bne.n	1272c <i2c1_init+0x3c>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
   12744:	4a05      	ldr	r2, [pc, #20]	; (1275c <i2c1_init+0x6c>)
   12746:	4907      	ldr	r1, [pc, #28]	; (12764 <i2c1_init+0x74>)
   12748:	6812      	ldr	r2, [r2, #0]
   1274a:	fbb2 f2f1 	udiv	r2, r2, r1
   1274e:	3a08      	subs	r2, #8
   12750:	08d2      	lsrs	r2, r2, #3
   12752:	e7e9      	b.n	12728 <i2c1_init+0x38>
   12754:	400e4000 	.word	0x400e4000
   12758:	40089400 	.word	0x40089400
   1275c:	20006300 	.word	0x20006300
   12760:	000186a0 	.word	0x000186a0
   12764:	00061a80 	.word	0x00061a80

00012768 <i2c1_transmit>:
uint8_t i2c1_transmit(uint8_t ubAddress, uint8_t *pubSrc, uint32_t ulCount, uint8_t ubStop)
{
   12768:	b5f0      	push	{r4, r5, r6, r7, lr}
    I2C1->IFC = _I2C_IFC_MASK;
   1276a:	4c39      	ldr	r4, [pc, #228]	; (12850 <i2c1_transmit+0xe8>)
   1276c:	4d39      	ldr	r5, [pc, #228]	; (12854 <i2c1_transmit+0xec>)
   1276e:	63e5      	str	r5, [r4, #60]	; 0x3c

    I2C1->CMD = I2C_CMD_START;
   12770:	2501      	movs	r5, #1
   12772:	6065      	str	r5, [r4, #4]

    while(!(I2C1->IF & (I2C_IF_START | I2C_IF_RSTART | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
   12774:	f240 6503 	movw	r5, #1539	; 0x603
   12778:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1277a:	422e      	tst	r6, r5
   1277c:	d0fc      	beq.n	12778 <i2c1_transmit+0x10>

    if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   1277e:	6b65      	ldr	r5, [r4, #52]	; 0x34
   12780:	f415 6fc0 	tst.w	r5, #1536	; 0x600
   12784:	d003      	beq.n	1278e <i2c1_transmit+0x26>
			{
                while(!(I2C1->IF & (I2C_IF_RXDATAV | I2C_IF_ARBLOST | I2C_IF_BUSERR)));

                if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
                {
                    I2C1->CMD = I2C_CMD_ABORT;
   12786:	2320      	movs	r3, #32
   12788:	6063      	str	r3, [r4, #4]

                    return 0;
   1278a:	2000      	movs	r0, #0
            return 0;
        }
    }

	return 1;
}
   1278c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    I2C1->TXDATA = ubAddress;
   1278e:	62e0      	str	r0, [r4, #44]	; 0x2c
    while(!(I2C1->IF & (I2C_IF_ACK | I2C_IF_NACK | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
   12790:	6b65      	ldr	r5, [r4, #52]	; 0x34
   12792:	f415 6fd8 	tst.w	r5, #1728	; 0x6c0
   12796:	d0fb      	beq.n	12790 <i2c1_transmit+0x28>
    if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   12798:	6b65      	ldr	r5, [r4, #52]	; 0x34
   1279a:	f415 6fc0 	tst.w	r5, #1536	; 0x600
   1279e:	d1f2      	bne.n	12786 <i2c1_transmit+0x1e>
    else if(I2C1->IF & I2C_IF_NACK)
   127a0:	6b65      	ldr	r5, [r4, #52]	; 0x34
   127a2:	062d      	lsls	r5, r5, #24
   127a4:	d50a      	bpl.n	127bc <i2c1_transmit+0x54>
        I2C1->CMD = I2C_CMD_STOP;
   127a6:	2302      	movs	r3, #2
   127a8:	6063      	str	r3, [r4, #4]
        while(I2C1->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
   127aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   127ac:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
   127b0:	d1fb      	bne.n	127aa <i2c1_transmit+0x42>
                    if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   127b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   127b4:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   127b8:	d0e7      	beq.n	1278a <i2c1_transmit+0x22>
   127ba:	e02f      	b.n	1281c <i2c1_transmit+0xb4>
	if(ulCount)
   127bc:	b1e2      	cbz	r2, 127f8 <i2c1_transmit+0x90>
   127be:	3101      	adds	r1, #1
   127c0:	f000 0001 	and.w	r0, r0, #1
                    I2C1->CMD = I2C_CMD_NACK;
   127c4:	2508      	movs	r5, #8
                    I2C1->CMD = I2C_CMD_ACK;
   127c6:	2604      	movs	r6, #4
                I2C1->IFC = I2C_IFC_ACK;
   127c8:	2740      	movs	r7, #64	; 0x40
			if(ubAddress & 1) // Read
   127ca:	b1c0      	cbz	r0, 127fe <i2c1_transmit+0x96>
                while(!(I2C1->IF & (I2C_IF_RXDATAV | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
   127cc:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   127d0:	f41c 6fc4 	tst.w	ip, #1568	; 0x620
   127d4:	d0fa      	beq.n	127cc <i2c1_transmit+0x64>
                if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   127d6:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   127da:	f41c 6fc0 	tst.w	ip, #1536	; 0x600
   127de:	d1d2      	bne.n	12786 <i2c1_transmit+0x1e>
				*pubSrc++ = I2C1->RXDATA;
   127e0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   127e4:	f801 cc01 	strb.w	ip, [r1, #-1]
				if(ulCount > 1)
   127e8:	2a01      	cmp	r2, #1
                    I2C1->CMD = I2C_CMD_ACK;
   127ea:	bf8c      	ite	hi
   127ec:	6066      	strhi	r6, [r4, #4]
                    I2C1->CMD = I2C_CMD_NACK;
   127ee:	6065      	strls	r5, [r4, #4]
		} while(--ulCount);
   127f0:	3a01      	subs	r2, #1
   127f2:	f101 0101 	add.w	r1, r1, #1
   127f6:	d1e8      	bne.n	127ca <i2c1_transmit+0x62>
    if(ubStop)
   127f8:	b9fb      	cbnz	r3, 1283a <i2c1_transmit+0xd2>
	return 1;
   127fa:	2001      	movs	r0, #1
   127fc:	e7c6      	b.n	1278c <i2c1_transmit+0x24>
                I2C1->IFC = I2C_IFC_ACK;
   127fe:	63e7      	str	r7, [r4, #60]	; 0x3c
				I2C1->TXDATA = *pubSrc++;
   12800:	f811 cc01 	ldrb.w	ip, [r1, #-1]
   12804:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
                while(!(I2C1->IF & (I2C_IF_ACK | I2C_IF_NACK | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
   12808:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   1280c:	f41c 6fd8 	tst.w	ip, #1728	; 0x6c0
   12810:	d0fa      	beq.n	12808 <i2c1_transmit+0xa0>
                if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   12812:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   12816:	f41c 6fc0 	tst.w	ip, #1536	; 0x600
   1281a:	d002      	beq.n	12822 <i2c1_transmit+0xba>
            I2C1->CMD = I2C_CMD_ABORT;
   1281c:	2320      	movs	r3, #32
   1281e:	6063      	str	r3, [r4, #4]
            return 0;
   12820:	e7b4      	b.n	1278c <i2c1_transmit+0x24>
                else if(I2C1->IF & I2C_IF_NACK)
   12822:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
   12826:	f01c 0f80 	tst.w	ip, #128	; 0x80
   1282a:	d0e1      	beq.n	127f0 <i2c1_transmit+0x88>
                    I2C1->CMD = I2C_CMD_STOP;
   1282c:	2302      	movs	r3, #2
   1282e:	6063      	str	r3, [r4, #4]
                    while(I2C1->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
   12830:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12832:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   12836:	d1fb      	bne.n	12830 <i2c1_transmit+0xc8>
   12838:	e7bb      	b.n	127b2 <i2c1_transmit+0x4a>
        I2C1->CMD = I2C_CMD_STOP;
   1283a:	2302      	movs	r3, #2
   1283c:	6063      	str	r3, [r4, #4]
        while(I2C1->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
   1283e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   12840:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
   12844:	d1fb      	bne.n	1283e <i2c1_transmit+0xd6>
        if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
   12846:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12848:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1284c:	d0d5      	beq.n	127fa <i2c1_transmit+0x92>
   1284e:	e7e5      	b.n	1281c <i2c1_transmit+0xb4>
   12850:	40089400 	.word	0x40089400
   12854:	0007ffcf 	.word	0x0007ffcf

00012858 <cmu_update_clocks>:
    // LFE Clock
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
}
void cmu_update_clocks()
{
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
   12858:	49a2      	ldr	r1, [pc, #648]	; (12ae4 <cmu_update_clocks+0x28c>)
   1285a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   1285e:	049b      	lsls	r3, r3, #18
{
   12860:	b530      	push	{r4, r5, lr}
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
   12862:	d51a      	bpl.n	1289a <cmu_update_clocks+0x42>
    {
        float fPLLMul = (float)(((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
   12864:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   12866:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   12868:	f3c2 420b 	ubfx	r2, r2, #16, #12
   1286c:	3201      	adds	r2, #1
   1286e:	ee07 2a90 	vmov	s15, r2
   12872:	f3c3 030b 	ubfx	r3, r3, #0, #12
   12876:	3301      	adds	r3, #1
   12878:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   1287c:	ee07 3a90 	vmov	s15, r3

        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
   12880:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        float fPLLMul = (float)(((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
   12882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
   12886:	f003 0318 	and.w	r3, r3, #24
   1288a:	2b10      	cmp	r3, #16
        float fPLLMul = (float)(((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
   1288c:	eec6 7a87 	vdiv.f32	s15, s13, s14
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
   12890:	d028      	beq.n	128e4 <cmu_update_clocks+0x8c>
   12892:	d815      	bhi.n	128c0 <cmu_update_clocks+0x68>
   12894:	b1cb      	cbz	r3, 128ca <cmu_update_clocks+0x72>
   12896:	2b08      	cmp	r3, #8
   12898:	d021      	beq.n	128de <cmu_update_clocks+0x86>
                HFRCO_VALUE = 0 * fPLLMul; // TODO: Support external clock
            break;
        }
    }

    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
   1289a:	4b93      	ldr	r3, [pc, #588]	; (12ae8 <cmu_update_clocks+0x290>)

    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
   1289c:	4991      	ldr	r1, [pc, #580]	; (12ae4 <cmu_update_clocks+0x28c>)
    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
   1289e:	6818      	ldr	r0, [r3, #0]
   128a0:	4b92      	ldr	r3, [pc, #584]	; (12aec <cmu_update_clocks+0x294>)
   128a2:	6018      	str	r0, [r3, #0]
    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
   128a4:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
   128a8:	4b91      	ldr	r3, [pc, #580]	; (12af0 <cmu_update_clocks+0x298>)
   128aa:	f002 0207 	and.w	r2, r2, #7
   128ae:	3a01      	subs	r2, #1
   128b0:	2a06      	cmp	r2, #6
   128b2:	d822      	bhi.n	128fa <cmu_update_clocks+0xa2>
   128b4:	e8df f002 	tbb	[pc, r2]
   128b8:	807e1f1c 	.word	0x807e1f1c
   128bc:	8783      	.short	0x8783
   128be:	89          	.byte	0x89
   128bf:	00          	.byte	0x00
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
   128c0:	2b18      	cmp	r3, #24
   128c2:	d1ea      	bne.n	1289a <cmu_update_clocks+0x42>
                HFRCO_VALUE = 0 * fPLLMul; // TODO: Support external clock
   128c4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 12af4 <cmu_update_clocks+0x29c>
   128c8:	e001      	b.n	128ce <cmu_update_clocks+0x76>
                HFRCO_VALUE = HFXO_VALUE * fPLLMul;
   128ca:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 12af8 <cmu_update_clocks+0x2a0>
                HFRCO_VALUE = 0 * fPLLMul; // TODO: Support external clock
   128ce:	4b8b      	ldr	r3, [pc, #556]	; (12afc <cmu_update_clocks+0x2a4>)
   128d0:	ee67 7a87 	vmul.f32	s15, s15, s14
   128d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   128d8:	edc3 7a00 	vstr	s15, [r3]
            break;
   128dc:	e7dd      	b.n	1289a <cmu_update_clocks+0x42>
                HFRCO_VALUE = LFXO_VALUE * fPLLMul;
   128de:	ed9f 7a88 	vldr	s14, [pc, #544]	; 12b00 <cmu_update_clocks+0x2a8>
   128e2:	e7f4      	b.n	128ce <cmu_update_clocks+0x76>
                HFRCO_VALUE = USHFRCO_VALUE * fPLLMul;
   128e4:	4b87      	ldr	r3, [pc, #540]	; (12b04 <cmu_update_clocks+0x2ac>)
   128e6:	ed93 7a00 	vldr	s14, [r3]
   128ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   128ee:	e7ee      	b.n	128ce <cmu_update_clocks+0x76>
    {
        case CMU_HFCLKSTATUS_SELECTED_HFRCO:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE;
   128f0:	4a82      	ldr	r2, [pc, #520]	; (12afc <cmu_update_clocks+0x2a4>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_HFRCODIV2:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
        case CMU_HFCLKSTATUS_SELECTED_USHFRCO:
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
   128f2:	6812      	ldr	r2, [r2, #0]
   128f4:	e000      	b.n	128f8 <cmu_update_clocks+0xa0>
            HFSRC_CLOCK_FREQ = HFXO_VALUE;
   128f6:	4a84      	ldr	r2, [pc, #528]	; (12b08 <cmu_update_clocks+0x2b0>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_CLKIN0:
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
   128f8:	601a      	str	r2, [r3, #0]
        break;
    }

    HF_CLOCK_FREQ = HFSRC_CLOCK_FREQ / (((CMU->HFPRESC & _CMU_HFPRESC_PRESC_MASK) >> _CMU_HFPRESC_PRESC_SHIFT) + 1);
   128fa:	681c      	ldr	r4, [r3, #0]
   128fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
   12900:	4a82      	ldr	r2, [pc, #520]	; (12b0c <cmu_update_clocks+0x2b4>)
   12902:	f3c3 2304 	ubfx	r3, r3, #8, #5
   12906:	3301      	adds	r3, #1
   12908:	fbb4 f3f3 	udiv	r3, r4, r3
   1290c:	6013      	str	r3, [r2, #0]

    switch(CMU->HFPRESC & _CMU_HFPRESC_HFCLKLEPRESC_MASK)
   1290e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   12912:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
   12916:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1291a:	d058      	beq.n	129ce <cmu_update_clocks+0x176>
   1291c:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
   12920:	d057      	beq.n	129d2 <cmu_update_clocks+0x17a>
   12922:	b912      	cbnz	r2, 1292a <cmu_update_clocks+0xd2>
    {
        case CMU_HFPRESC_HFCLKLEPRESC_DIV2:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 1;
   12924:	085a      	lsrs	r2, r3, #1
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV4:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV8:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
   12926:	497a      	ldr	r1, [pc, #488]	; (12b10 <cmu_update_clocks+0x2b8>)
   12928:	600a      	str	r2, [r1, #0]
        break;
    }

    HFBUS_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFBUSPRESC & _CMU_HFBUSPRESC_PRESC_MASK) >> _CMU_HFBUSPRESC_PRESC_SHIFT) + 1);
   1292a:	4a6e      	ldr	r2, [pc, #440]	; (12ae4 <cmu_update_clocks+0x28c>)
   1292c:	4d79      	ldr	r5, [pc, #484]	; (12b14 <cmu_update_clocks+0x2bc>)
   1292e:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   12932:	f3c1 2108 	ubfx	r1, r1, #8, #9
   12936:	3101      	adds	r1, #1
   12938:	fbb3 f1f1 	udiv	r1, r3, r1
   1293c:	6029      	str	r1, [r5, #0]
    HFCORE_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFCOREPRESC & _CMU_HFCOREPRESC_PRESC_MASK) >> _CMU_HFCOREPRESC_PRESC_SHIFT) + 1);
   1293e:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
   12942:	4d75      	ldr	r5, [pc, #468]	; (12b18 <cmu_update_clocks+0x2c0>)
   12944:	f3c1 2108 	ubfx	r1, r1, #8, #9
   12948:	3101      	adds	r1, #1
   1294a:	fbb3 f1f1 	udiv	r1, r3, r1
   1294e:	6029      	str	r1, [r5, #0]
    HFEXP_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFEXPPRESC & _CMU_HFEXPPRESC_PRESC_MASK) >> _CMU_HFEXPPRESC_PRESC_SHIFT) + 1);
   12950:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
   12954:	4d71      	ldr	r5, [pc, #452]	; (12b1c <cmu_update_clocks+0x2c4>)
   12956:	f3c1 2104 	ubfx	r1, r1, #8, #5
   1295a:	3101      	adds	r1, #1
   1295c:	fbb3 f1f1 	udiv	r1, r3, r1
   12960:	6029      	str	r1, [r5, #0]
    HFPER_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESC & _CMU_HFPERPRESC_PRESC_MASK) >> _CMU_HFPERPRESC_PRESC_SHIFT) + 1);
   12962:	f8d2 110c 	ldr.w	r1, [r2, #268]	; 0x10c
   12966:	4d6e      	ldr	r5, [pc, #440]	; (12b20 <cmu_update_clocks+0x2c8>)
   12968:	f3c1 2108 	ubfx	r1, r1, #8, #9
   1296c:	3101      	adds	r1, #1
   1296e:	fbb3 f1f1 	udiv	r1, r3, r1
   12972:	6029      	str	r1, [r5, #0]
    HFPERB_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCB & _CMU_HFPERPRESCB_PRESC_MASK) >> _CMU_HFPERPRESCB_PRESC_SHIFT) + 1);
   12974:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
   12978:	4d6a      	ldr	r5, [pc, #424]	; (12b24 <cmu_update_clocks+0x2cc>)
   1297a:	f3c1 2108 	ubfx	r1, r1, #8, #9
   1297e:	3101      	adds	r1, #1
   12980:	fbb3 f1f1 	udiv	r1, r3, r1
   12984:	6029      	str	r1, [r5, #0]
    HFPERC_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCC & _CMU_HFPERPRESCC_PRESC_MASK) >> _CMU_HFPERPRESCC_PRESC_SHIFT) + 1);
   12986:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
   1298a:	4d67      	ldr	r5, [pc, #412]	; (12b28 <cmu_update_clocks+0x2d0>)
   1298c:	f3c1 2108 	ubfx	r1, r1, #8, #9
   12990:	3101      	adds	r1, #1
   12992:	fbb3 f1f1 	udiv	r1, r3, r1
   12996:	6029      	str	r1, [r5, #0]

    switch(CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK)
   12998:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
   1299c:	4d63      	ldr	r5, [pc, #396]	; (12b2c <cmu_update_clocks+0x2d4>)
   1299e:	f001 0103 	and.w	r1, r1, #3
   129a2:	2902      	cmp	r1, #2
   129a4:	d01a      	beq.n	129dc <cmu_update_clocks+0x184>
   129a6:	2903      	cmp	r1, #3
   129a8:	d027      	beq.n	129fa <cmu_update_clocks+0x1a2>
   129aa:	2901      	cmp	r1, #1
   129ac:	d013      	beq.n	129d6 <cmu_update_clocks+0x17e>
    {
        case CMU_SDIOCTRL_SDIOCLKSEL_HFRCO:
            SDIO_CLOCK_FREQ = HFRCO_VALUE;
   129ae:	4953      	ldr	r1, [pc, #332]	; (12afc <cmu_update_clocks+0x2a4>)
        break;
        case CMU_SDIOCTRL_SDIOCLKSEL_AUXHFRCO:
            SDIO_CLOCK_FREQ = AUX_CLOCK_FREQ;
        break;
        case CMU_SDIOCTRL_SDIOCLKSEL_USHFRCO:
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
   129b0:	6809      	ldr	r1, [r1, #0]
   129b2:	e011      	b.n	129d8 <cmu_update_clocks+0x180>
            HFSRC_CLOCK_FREQ = LFRCO_VALUE;
   129b4:	4a5e      	ldr	r2, [pc, #376]	; (12b30 <cmu_update_clocks+0x2d8>)
   129b6:	e79c      	b.n	128f2 <cmu_update_clocks+0x9a>
            HFSRC_CLOCK_FREQ = LFXO_VALUE;
   129b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   129bc:	e79c      	b.n	128f8 <cmu_update_clocks+0xa0>
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
   129be:	4a4f      	ldr	r2, [pc, #316]	; (12afc <cmu_update_clocks+0x2a4>)
   129c0:	6812      	ldr	r2, [r2, #0]
   129c2:	0852      	lsrs	r2, r2, #1
   129c4:	e798      	b.n	128f8 <cmu_update_clocks+0xa0>
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
   129c6:	4a4f      	ldr	r2, [pc, #316]	; (12b04 <cmu_update_clocks+0x2ac>)
   129c8:	e793      	b.n	128f2 <cmu_update_clocks+0x9a>
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
   129ca:	2200      	movs	r2, #0
   129cc:	e794      	b.n	128f8 <cmu_update_clocks+0xa0>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
   129ce:	089a      	lsrs	r2, r3, #2
   129d0:	e7a9      	b.n	12926 <cmu_update_clocks+0xce>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
   129d2:	08da      	lsrs	r2, r3, #3
   129d4:	e7a7      	b.n	12926 <cmu_update_clocks+0xce>
            SDIO_CLOCK_FREQ = HFXO_VALUE;
   129d6:	494c      	ldr	r1, [pc, #304]	; (12b08 <cmu_update_clocks+0x2b0>)
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
   129d8:	6029      	str	r1, [r5, #0]
        break;
   129da:	e000      	b.n	129de <cmu_update_clocks+0x186>
            SDIO_CLOCK_FREQ = AUX_CLOCK_FREQ;
   129dc:	6028      	str	r0, [r5, #0]
    }

    switch(CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK)
   129de:	f8d2 2164 	ldr.w	r2, [r2, #356]	; 0x164
   129e2:	4954      	ldr	r1, [pc, #336]	; (12b34 <cmu_update_clocks+0x2dc>)
   129e4:	f002 0203 	and.w	r2, r2, #3
   129e8:	2a02      	cmp	r2, #2
   129ea:	d00b      	beq.n	12a04 <cmu_update_clocks+0x1ac>
   129ec:	2a03      	cmp	r2, #3
   129ee:	d016      	beq.n	12a1e <cmu_update_clocks+0x1c6>
   129f0:	2a01      	cmp	r2, #1
   129f2:	d004      	beq.n	129fe <cmu_update_clocks+0x1a6>
    {
        case CMU_QSPICTRL_QSPI0CLKSEL_HFRCO:
            QSPI_CLOCK_FREQ = HFRCO_VALUE;
   129f4:	4a41      	ldr	r2, [pc, #260]	; (12afc <cmu_update_clocks+0x2a4>)
        break;
        case CMU_QSPICTRL_QSPI0CLKSEL_AUXHFRCO:
            QSPI_CLOCK_FREQ = AUX_CLOCK_FREQ;
        break;
        case CMU_QSPICTRL_QSPI0CLKSEL_USHFRCO:
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
   129f6:	6812      	ldr	r2, [r2, #0]
   129f8:	e002      	b.n	12a00 <cmu_update_clocks+0x1a8>
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
   129fa:	4942      	ldr	r1, [pc, #264]	; (12b04 <cmu_update_clocks+0x2ac>)
   129fc:	e7d8      	b.n	129b0 <cmu_update_clocks+0x158>
            QSPI_CLOCK_FREQ = HFXO_VALUE;
   129fe:	4a42      	ldr	r2, [pc, #264]	; (12b08 <cmu_update_clocks+0x2b0>)
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
   12a00:	600a      	str	r2, [r1, #0]
        break;
   12a02:	e000      	b.n	12a06 <cmu_update_clocks+0x1ae>
            QSPI_CLOCK_FREQ = AUX_CLOCK_FREQ;
   12a04:	6008      	str	r0, [r1, #0]
    }

    switch(CMU->USBCTRL & _CMU_USBCTRL_USBCLKSEL_MASK)
   12a06:	4a37      	ldr	r2, [pc, #220]	; (12ae4 <cmu_update_clocks+0x28c>)
   12a08:	f8d2 11f0 	ldr.w	r1, [r2, #496]	; 0x1f0
   12a0c:	f001 0107 	and.w	r1, r1, #7
   12a10:	2905      	cmp	r1, #5
   12a12:	d814      	bhi.n	12a3e <cmu_update_clocks+0x1e6>
   12a14:	e8df f001 	tbb	[pc, r1]
   12a18:	570c0905 	.word	0x570c0905
   12a1c:	5d59      	.short	0x5d59
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
   12a1e:	4a39      	ldr	r2, [pc, #228]	; (12b04 <cmu_update_clocks+0x2ac>)
   12a20:	e7e9      	b.n	129f6 <cmu_update_clocks+0x19e>
    {
        case CMU_USBCTRL_USBCLKSEL_USHFRCO:
            USB_CLOCK_FREQ = USHFRCO_VALUE;
   12a22:	4a38      	ldr	r2, [pc, #224]	; (12b04 <cmu_update_clocks+0x2ac>)
        break;
        case CMU_USBCTRL_USBCLKSEL_LFXO:
            USB_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_USBCTRL_USBCLKSEL_LFRCO:
            USB_CLOCK_FREQ = LFRCO_VALUE;
   12a24:	6811      	ldr	r1, [r2, #0]
   12a26:	4a44      	ldr	r2, [pc, #272]	; (12b38 <cmu_update_clocks+0x2e0>)
   12a28:	e008      	b.n	12a3c <cmu_update_clocks+0x1e4>
            USB_CLOCK_FREQ = HFXO_VALUE;
   12a2a:	4a43      	ldr	r2, [pc, #268]	; (12b38 <cmu_update_clocks+0x2e0>)
                USB_CLOCK_FREQ = HFXO_VALUE;
   12a2c:	4936      	ldr	r1, [pc, #216]	; (12b08 <cmu_update_clocks+0x2b0>)
   12a2e:	e005      	b.n	12a3c <cmu_update_clocks+0x1e4>
            if(CMU->HFXOCTRL & CMU_HFXOCTRL_HFXOX2EN)
   12a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
   12a32:	f012 0f08 	tst.w	r2, #8
   12a36:	4a40      	ldr	r2, [pc, #256]	; (12b38 <cmu_update_clocks+0x2e0>)
   12a38:	d0f8      	beq.n	12a2c <cmu_update_clocks+0x1d4>
                USB_CLOCK_FREQ = HFXO_VALUE << 1;
   12a3a:	4940      	ldr	r1, [pc, #256]	; (12b3c <cmu_update_clocks+0x2e4>)
            USB_CLOCK_FREQ = LFRCO_VALUE;
   12a3c:	6011      	str	r1, [r2, #0]
        break;
    }

    switch(CMU->DBGCLKSEL & _CMU_DBGCLKSEL_DBG_MASK)
   12a3e:	4929      	ldr	r1, [pc, #164]	; (12ae4 <cmu_update_clocks+0x28c>)
   12a40:	6f0a      	ldr	r2, [r1, #112]	; 0x70
   12a42:	f002 0203 	and.w	r2, r2, #3
   12a46:	2a01      	cmp	r2, #1
   12a48:	d048      	beq.n	12adc <cmu_update_clocks+0x284>
   12a4a:	2a02      	cmp	r2, #2
   12a4c:	d043      	beq.n	12ad6 <cmu_update_clocks+0x27e>
   12a4e:	b90a      	cbnz	r2, 12a54 <cmu_update_clocks+0x1fc>
    {
        case CMU_DBGCLKSEL_DBG_AUXHFRCO:
            DBG_CLOCK_FREQ = AUX_CLOCK_FREQ;
   12a50:	4b3b      	ldr	r3, [pc, #236]	; (12b40 <cmu_update_clocks+0x2e8>)
   12a52:	6018      	str	r0, [r3, #0]
        case CMU_DBGCLKSEL_DBG_HFRCODIV2:
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
    }

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
   12a54:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
   12a58:	493a      	ldr	r1, [pc, #232]	; (12b44 <cmu_update_clocks+0x2ec>)
   12a5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
   12a5e:	2b20      	cmp	r3, #32
   12a60:	d07c      	beq.n	12b5c <cmu_update_clocks+0x304>
   12a62:	d875      	bhi.n	12b50 <cmu_update_clocks+0x2f8>
   12a64:	2b00      	cmp	r3, #0
   12a66:	d07a      	beq.n	12b5e <cmu_update_clocks+0x306>
   12a68:	2b10      	cmp	r3, #16
   12a6a:	d075      	beq.n	12b58 <cmu_update_clocks+0x300>
        case CMU_ADCCTRL_ADC0CLKSEL_HFSRCCLK:
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC0_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKDIV_MASK) >> _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) + 1);
   12a6c:	4a1d      	ldr	r2, [pc, #116]	; (12ae4 <cmu_update_clocks+0x28c>)
   12a6e:	680d      	ldr	r5, [r1, #0]
   12a70:	f8d2 315c 	ldr.w	r3, [r2, #348]	; 0x15c
   12a74:	f003 0303 	and.w	r3, r3, #3
   12a78:	3301      	adds	r3, #1
   12a7a:	fbb5 f3f3 	udiv	r3, r5, r3
   12a7e:	600b      	str	r3, [r1, #0]

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
   12a80:	f8d2 315c 	ldr.w	r3, [r2, #348]	; 0x15c
   12a84:	4930      	ldr	r1, [pc, #192]	; (12b48 <cmu_update_clocks+0x2f0>)
   12a86:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
   12a8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   12a8e:	d06f      	beq.n	12b70 <cmu_update_clocks+0x318>
   12a90:	d867      	bhi.n	12b62 <cmu_update_clocks+0x30a>
   12a92:	2b00      	cmp	r3, #0
   12a94:	d06d      	beq.n	12b72 <cmu_update_clocks+0x31a>
   12a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12a9a:	d067      	beq.n	12b6c <cmu_update_clocks+0x314>
        case CMU_ADCCTRL_ADC1CLKSEL_HFSRCCLK:
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC1_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKDIV_MASK) >> _CMU_ADCCTRL_ADC1CLKDIV_SHIFT) + 1);
   12a9c:	f8d2 315c 	ldr.w	r3, [r2, #348]	; 0x15c
   12aa0:	6808      	ldr	r0, [r1, #0]
   12aa2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   12aa6:	3301      	adds	r3, #1
   12aa8:	fbb0 f3f3 	udiv	r3, r0, r3
   12aac:	600b      	str	r3, [r1, #0]

    switch(CMU->LFACLKSEL & _CMU_LFACLKSEL_LFA_MASK)
   12aae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   12ab2:	4b26      	ldr	r3, [pc, #152]	; (12b4c <cmu_update_clocks+0x2f4>)
   12ab4:	f002 0207 	and.w	r2, r2, #7
   12ab8:	2a04      	cmp	r2, #4
   12aba:	d85e      	bhi.n	12b7a <cmu_update_clocks+0x322>
   12abc:	e8df f002 	tbb	[pc, r2]
   12ac0:	5d95925b 	.word	0x5d95925b
   12ac4:	98          	.byte	0x98
   12ac5:	00          	.byte	0x00
            USB_CLOCK_FREQ = HFRCO_VALUE;
   12ac6:	4a0d      	ldr	r2, [pc, #52]	; (12afc <cmu_update_clocks+0x2a4>)
   12ac8:	e7ac      	b.n	12a24 <cmu_update_clocks+0x1cc>
            USB_CLOCK_FREQ = LFXO_VALUE;
   12aca:	4a1b      	ldr	r2, [pc, #108]	; (12b38 <cmu_update_clocks+0x2e0>)
   12acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12ad0:	e7b4      	b.n	12a3c <cmu_update_clocks+0x1e4>
            USB_CLOCK_FREQ = LFRCO_VALUE;
   12ad2:	4a17      	ldr	r2, [pc, #92]	; (12b30 <cmu_update_clocks+0x2d8>)
   12ad4:	e7a6      	b.n	12a24 <cmu_update_clocks+0x1cc>
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
   12ad6:	4b09      	ldr	r3, [pc, #36]	; (12afc <cmu_update_clocks+0x2a4>)
   12ad8:	681b      	ldr	r3, [r3, #0]
   12ada:	085b      	lsrs	r3, r3, #1
   12adc:	4a18      	ldr	r2, [pc, #96]	; (12b40 <cmu_update_clocks+0x2e8>)
   12ade:	6013      	str	r3, [r2, #0]
        break;
   12ae0:	e7b8      	b.n	12a54 <cmu_update_clocks+0x1fc>
   12ae2:	bf00      	nop
   12ae4:	400e4000 	.word	0x400e4000
   12ae8:	20000048 	.word	0x20000048
   12aec:	20006310 	.word	0x20006310
   12af0:	200062f4 	.word	0x200062f4
   12af4:	00000000 	.word	0x00000000
   12af8:	4af42400 	.word	0x4af42400
   12afc:	2000004c 	.word	0x2000004c
   12b00:	47000000 	.word	0x47000000
   12b04:	20000058 	.word	0x20000058
   12b08:	007a1200 	.word	0x007a1200
   12b0c:	2000631c 	.word	0x2000631c
   12b10:	200062cc 	.word	0x200062cc
   12b14:	200062f8 	.word	0x200062f8
   12b18:	200062e0 	.word	0x200062e0
   12b1c:	20006304 	.word	0x20006304
   12b20:	20006314 	.word	0x20006314
   12b24:	20006308 	.word	0x20006308
   12b28:	20006300 	.word	0x20006300
   12b2c:	20006318 	.word	0x20006318
   12b30:	20000050 	.word	0x20000050
   12b34:	200062fc 	.word	0x200062fc
   12b38:	200062c0 	.word	0x200062c0
   12b3c:	00f42400 	.word	0x00f42400
   12b40:	20006330 	.word	0x20006330
   12b44:	200062d8 	.word	0x200062d8
   12b48:	200062e4 	.word	0x200062e4
   12b4c:	200062c8 	.word	0x200062c8
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
   12b50:	2b30      	cmp	r3, #48	; 0x30
   12b52:	d18b      	bne.n	12a6c <cmu_update_clocks+0x214>
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
   12b54:	600c      	str	r4, [r1, #0]
        break;
   12b56:	e789      	b.n	12a6c <cmu_update_clocks+0x214>
            ADC0_CLOCK_FREQ = AUX_CLOCK_FREQ;
   12b58:	6008      	str	r0, [r1, #0]
        break;
   12b5a:	e787      	b.n	12a6c <cmu_update_clocks+0x214>
            ADC0_CLOCK_FREQ = HFXO_VALUE;
   12b5c:	4b58      	ldr	r3, [pc, #352]	; (12cc0 <cmu_update_clocks+0x468>)
   12b5e:	600b      	str	r3, [r1, #0]
        break;
   12b60:	e784      	b.n	12a6c <cmu_update_clocks+0x214>
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
   12b62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
   12b66:	d199      	bne.n	12a9c <cmu_update_clocks+0x244>
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
   12b68:	600c      	str	r4, [r1, #0]
        break;
   12b6a:	e797      	b.n	12a9c <cmu_update_clocks+0x244>
            ADC1_CLOCK_FREQ = AUX_CLOCK_FREQ;
   12b6c:	6008      	str	r0, [r1, #0]
        break;
   12b6e:	e795      	b.n	12a9c <cmu_update_clocks+0x244>
            ADC1_CLOCK_FREQ = HFXO_VALUE;
   12b70:	4b53      	ldr	r3, [pc, #332]	; (12cc0 <cmu_update_clocks+0x468>)
   12b72:	600b      	str	r3, [r1, #0]
        break;
   12b74:	e792      	b.n	12a9c <cmu_update_clocks+0x244>
    {
        case CMU_LFACLKSEL_LFA_DISABLED:
            LFA_CLOCK_FREQ = 0;
   12b76:	2200      	movs	r2, #0
        break;
        case CMU_LFACLKSEL_LFA_LFXO:
            LFA_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFACLKSEL_LFA_ULFRCO:
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
   12b78:	601a      	str	r2, [r3, #0]
        break;
    }

    LESENSE_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LESENSE_MASK) >> _CMU_LFAPRESC0_LESENSE_SHIFT);
   12b7a:	681a      	ldr	r2, [r3, #0]
   12b7c:	4b51      	ldr	r3, [pc, #324]	; (12cc4 <cmu_update_clocks+0x46c>)
   12b7e:	4852      	ldr	r0, [pc, #328]	; (12cc8 <cmu_update_clocks+0x470>)
   12b80:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   12b84:	f3c1 2101 	ubfx	r1, r1, #8, #2
   12b88:	fa02 f101 	lsl.w	r1, r2, r1
   12b8c:	6001      	str	r1, [r0, #0]
    RTC_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK) >> _CMU_LFAPRESC0_RTC_SHIFT);
   12b8e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   12b92:	484e      	ldr	r0, [pc, #312]	; (12ccc <cmu_update_clocks+0x474>)
   12b94:	f3c1 4103 	ubfx	r1, r1, #16, #4
   12b98:	fa02 f101 	lsl.w	r1, r2, r1
   12b9c:	6001      	str	r1, [r0, #0]
    LCD_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK) >> _CMU_LFAPRESC0_LCD_SHIFT);
   12b9e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   12ba2:	484b      	ldr	r0, [pc, #300]	; (12cd0 <cmu_update_clocks+0x478>)
   12ba4:	f3c1 3102 	ubfx	r1, r1, #12, #3
   12ba8:	fa02 f101 	lsl.w	r1, r2, r1
   12bac:	6001      	str	r1, [r0, #0]
    LETIMER0_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK) >> _CMU_LFAPRESC0_LETIMER0_SHIFT);
   12bae:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   12bb2:	4848      	ldr	r0, [pc, #288]	; (12cd4 <cmu_update_clocks+0x47c>)
   12bb4:	f001 010f 	and.w	r1, r1, #15
   12bb8:	fa02 f101 	lsl.w	r1, r2, r1
   12bbc:	6001      	str	r1, [r0, #0]
    LETIMER1_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER1_MASK) >> _CMU_LFAPRESC0_LETIMER1_SHIFT);
   12bbe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   12bc2:	f3c1 1103 	ubfx	r1, r1, #4, #4
   12bc6:	408a      	lsls	r2, r1
   12bc8:	4943      	ldr	r1, [pc, #268]	; (12cd8 <cmu_update_clocks+0x480>)
   12bca:	600a      	str	r2, [r1, #0]

    switch(CMU->LFBCLKSEL & _CMU_LFBCLKSEL_LFB_MASK)
   12bcc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
   12bd0:	4a42      	ldr	r2, [pc, #264]	; (12cdc <cmu_update_clocks+0x484>)
   12bd2:	f001 0107 	and.w	r1, r1, #7
   12bd6:	2904      	cmp	r1, #4
   12bd8:	d80e      	bhi.n	12bf8 <cmu_update_clocks+0x3a0>
   12bda:	e8df f001 	tbb	[pc, r1]
   12bde:	390b      	.short	0x390b
   12be0:	3f3c      	.short	0x3f3c
   12be2:	41          	.byte	0x41
   12be3:	00          	.byte	0x00
            LFA_CLOCK_FREQ = LFRCO_VALUE;
   12be4:	4a3e      	ldr	r2, [pc, #248]	; (12ce0 <cmu_update_clocks+0x488>)
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
   12be6:	6812      	ldr	r2, [r2, #0]
   12be8:	e7c6      	b.n	12b78 <cmu_update_clocks+0x320>
            LFA_CLOCK_FREQ = LFXO_VALUE;
   12bea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12bee:	e7c3      	b.n	12b78 <cmu_update_clocks+0x320>
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
   12bf0:	4a3c      	ldr	r2, [pc, #240]	; (12ce4 <cmu_update_clocks+0x48c>)
   12bf2:	e7f8      	b.n	12be6 <cmu_update_clocks+0x38e>
    {
        case CMU_LFBCLKSEL_LFB_DISABLED:
            LFB_CLOCK_FREQ = 0;
   12bf4:	2100      	movs	r1, #0
        break;
        case CMU_LFBCLKSEL_LFB_HFCLKLE:
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
        break;
        case CMU_LFBCLKSEL_LFB_ULFRCO:
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
   12bf6:	6011      	str	r1, [r2, #0]
        break;
    }

    LEUART0_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK) >> _CMU_LFBPRESC0_LEUART0_SHIFT);
   12bf8:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
   12bfc:	6812      	ldr	r2, [r2, #0]
   12bfe:	483a      	ldr	r0, [pc, #232]	; (12ce8 <cmu_update_clocks+0x490>)
   12c00:	f001 0103 	and.w	r1, r1, #3
   12c04:	fa02 f101 	lsl.w	r1, r2, r1
   12c08:	6001      	str	r1, [r0, #0]
    LEUART1_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK) >> _CMU_LFBPRESC0_LEUART1_SHIFT);
   12c0a:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
   12c0e:	4837      	ldr	r0, [pc, #220]	; (12cec <cmu_update_clocks+0x494>)
   12c10:	f3c1 1101 	ubfx	r1, r1, #4, #2
   12c14:	fa02 f101 	lsl.w	r1, r2, r1
   12c18:	6001      	str	r1, [r0, #0]
    SYSTICK_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_SYSTICK_MASK) >> _CMU_LFBPRESC0_SYSTICK_SHIFT);
   12c1a:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
   12c1e:	4834      	ldr	r0, [pc, #208]	; (12cf0 <cmu_update_clocks+0x498>)
   12c20:	f3c1 2103 	ubfx	r1, r1, #8, #4
   12c24:	fa02 f101 	lsl.w	r1, r2, r1
   12c28:	6001      	str	r1, [r0, #0]
    CSEN_CLOCK_FREQ = LFB_CLOCK_FREQ << (((CMU->LFBPRESC0 & _CMU_LFBPRESC0_CSEN_MASK) >> _CMU_LFBPRESC0_CSEN_SHIFT) + 4);
   12c2a:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
   12c2e:	f3c1 3101 	ubfx	r1, r1, #12, #2
   12c32:	3104      	adds	r1, #4
   12c34:	408a      	lsls	r2, r1
   12c36:	492f      	ldr	r1, [pc, #188]	; (12cf4 <cmu_update_clocks+0x49c>)
   12c38:	600a      	str	r2, [r1, #0]

    switch(CMU->LFCCLKSEL & _CMU_LFCCLKSEL_LFC_MASK)
   12c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   12c3e:	f003 0307 	and.w	r3, r3, #7
   12c42:	2b04      	cmp	r3, #4
   12c44:	d811      	bhi.n	12c6a <cmu_update_clocks+0x412>
   12c46:	e8df f003 	tbb	[pc, r3]
   12c4a:	1d0d      	.short	0x1d0d
   12c4c:	1021      	.short	0x1021
   12c4e:	25          	.byte	0x25
   12c4f:	00          	.byte	0x00
            LFB_CLOCK_FREQ = LFRCO_VALUE;
   12c50:	4923      	ldr	r1, [pc, #140]	; (12ce0 <cmu_update_clocks+0x488>)
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
   12c52:	6809      	ldr	r1, [r1, #0]
   12c54:	e7cf      	b.n	12bf6 <cmu_update_clocks+0x39e>
            LFB_CLOCK_FREQ = LFXO_VALUE;
   12c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12c5a:	e7cc      	b.n	12bf6 <cmu_update_clocks+0x39e>
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
   12c5c:	4926      	ldr	r1, [pc, #152]	; (12cf8 <cmu_update_clocks+0x4a0>)
   12c5e:	e7f8      	b.n	12c52 <cmu_update_clocks+0x3fa>
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
   12c60:	4920      	ldr	r1, [pc, #128]	; (12ce4 <cmu_update_clocks+0x48c>)
   12c62:	e7f6      	b.n	12c52 <cmu_update_clocks+0x3fa>
    {
        case CMU_LFCCLKSEL_LFC_DISABLED:
            LFC_CLOCK_FREQ = 0;
   12c64:	4b25      	ldr	r3, [pc, #148]	; (12cfc <cmu_update_clocks+0x4a4>)
   12c66:	2200      	movs	r2, #0
        break;
        case CMU_LFCCLKSEL_LFC_LFXO:
            LFC_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFCCLKSEL_LFC_ULFRCO:
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
   12c68:	601a      	str	r2, [r3, #0]
        break;
    }

    switch(CMU->LFECLKSEL & _CMU_LFECLKSEL_LFE_MASK)
   12c6a:	4a16      	ldr	r2, [pc, #88]	; (12cc4 <cmu_update_clocks+0x46c>)
   12c6c:	4b24      	ldr	r3, [pc, #144]	; (12d00 <cmu_update_clocks+0x4a8>)
   12c6e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
   12c72:	f001 0107 	and.w	r1, r1, #7
   12c76:	2904      	cmp	r1, #4
   12c78:	d810      	bhi.n	12c9c <cmu_update_clocks+0x444>
   12c7a:	e8df f001 	tbb	[pc, r1]
   12c7e:	180d      	.short	0x180d
   12c80:	0f1b      	.short	0x0f1b
   12c82:	1e          	.byte	0x1e
   12c83:	00          	.byte	0x00
            LFC_CLOCK_FREQ = LFRCO_VALUE;
   12c84:	4b16      	ldr	r3, [pc, #88]	; (12ce0 <cmu_update_clocks+0x488>)
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
   12c86:	681a      	ldr	r2, [r3, #0]
   12c88:	4b1c      	ldr	r3, [pc, #112]	; (12cfc <cmu_update_clocks+0x4a4>)
   12c8a:	e7ed      	b.n	12c68 <cmu_update_clocks+0x410>
            LFC_CLOCK_FREQ = LFXO_VALUE;
   12c8c:	4b1b      	ldr	r3, [pc, #108]	; (12cfc <cmu_update_clocks+0x4a4>)
   12c8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12c92:	e7e9      	b.n	12c68 <cmu_update_clocks+0x410>
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
   12c94:	4b13      	ldr	r3, [pc, #76]	; (12ce4 <cmu_update_clocks+0x48c>)
   12c96:	e7f6      	b.n	12c86 <cmu_update_clocks+0x42e>
    {
        case CMU_LFECLKSEL_LFE_DISABLED:
            LFE_CLOCK_FREQ = 0;
   12c98:	2100      	movs	r1, #0
        break;
        case CMU_LFECLKSEL_LFE_LFXO:
            LFE_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFECLKSEL_LFE_ULFRCO:
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
   12c9a:	6019      	str	r1, [r3, #0]
        break;
    }

    RTCC_CLOCK_FREQ = LFE_CLOCK_FREQ << ((CMU->LFEPRESC0 & _CMU_LFEPRESC0_RTCC_MASK) >> _CMU_LFEPRESC0_RTCC_SHIFT);
   12c9c:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
   12ca0:	681b      	ldr	r3, [r3, #0]
   12ca2:	f002 0203 	and.w	r2, r2, #3
   12ca6:	4093      	lsls	r3, r2
   12ca8:	4a16      	ldr	r2, [pc, #88]	; (12d04 <cmu_update_clocks+0x4ac>)
   12caa:	6013      	str	r3, [r2, #0]
}
   12cac:	bd30      	pop	{r4, r5, pc}
            LFE_CLOCK_FREQ = LFRCO_VALUE;
   12cae:	490c      	ldr	r1, [pc, #48]	; (12ce0 <cmu_update_clocks+0x488>)
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
   12cb0:	6809      	ldr	r1, [r1, #0]
   12cb2:	e7f2      	b.n	12c9a <cmu_update_clocks+0x442>
            LFE_CLOCK_FREQ = LFXO_VALUE;
   12cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12cb8:	e7ef      	b.n	12c9a <cmu_update_clocks+0x442>
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
   12cba:	490a      	ldr	r1, [pc, #40]	; (12ce4 <cmu_update_clocks+0x48c>)
   12cbc:	e7f8      	b.n	12cb0 <cmu_update_clocks+0x458>
   12cbe:	bf00      	nop
   12cc0:	007a1200 	.word	0x007a1200
   12cc4:	400e4000 	.word	0x400e4000
   12cc8:	20006320 	.word	0x20006320
   12ccc:	20006324 	.word	0x20006324
   12cd0:	20006328 	.word	0x20006328
   12cd4:	200062bc 	.word	0x200062bc
   12cd8:	200062d4 	.word	0x200062d4
   12cdc:	200062dc 	.word	0x200062dc
   12ce0:	20000050 	.word	0x20000050
   12ce4:	20000054 	.word	0x20000054
   12ce8:	2000632c 	.word	0x2000632c
   12cec:	200062ec 	.word	0x200062ec
   12cf0:	200062d0 	.word	0x200062d0
   12cf4:	200062c4 	.word	0x200062c4
   12cf8:	200062cc 	.word	0x200062cc
   12cfc:	2000630c 	.word	0x2000630c
   12d00:	200062f0 	.word	0x200062f0
   12d04:	200062e8 	.word	0x200062e8

00012d08 <cmu_config_waitstates>:
void cmu_config_waitstates(uint32_t ulFrequency)
{
    if(ulFrequency <= 32000000)
   12d08:	4b05      	ldr	r3, [pc, #20]	; (12d20 <cmu_config_waitstates+0x18>)
   12d0a:	4298      	cmp	r0, r3
   12d0c:	4b05      	ldr	r3, [pc, #20]	; (12d24 <cmu_config_waitstates+0x1c>)
        CMU->CTRL &= ~CMU_CTRL_WSHFLE;
   12d0e:	681a      	ldr	r2, [r3, #0]
   12d10:	bf94      	ite	ls
   12d12:	f422 3280 	bicls.w	r2, r2, #65536	; 0x10000
    else
        CMU->CTRL |= CMU_CTRL_WSHFLE;
   12d16:	f442 3280 	orrhi.w	r2, r2, #65536	; 0x10000
   12d1a:	601a      	str	r2, [r3, #0]
}
   12d1c:	4770      	bx	lr
   12d1e:	bf00      	nop
   12d20:	01e84800 	.word	0x01e84800
   12d24:	400e4000 	.word	0x400e4000

00012d28 <cmu_hfrco_calib>:

void cmu_hfrco_calib(uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
   12d28:	4b08      	ldr	r3, [pc, #32]	; (12d4c <cmu_hfrco_calib+0x24>)
   12d2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12d2e:	04d2      	lsls	r2, r2, #19
   12d30:	d40a      	bmi.n	12d48 <cmu_hfrco_calib+0x20>
        return;

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
   12d32:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   12d36:	01d2      	lsls	r2, r2, #7
   12d38:	d4fb      	bmi.n	12d32 <cmu_hfrco_calib+0xa>

    CMU->HFRCOCTRL = ulCalibration;
   12d3a:	6118      	str	r0, [r3, #16]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
   12d3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   12d40:	01d2      	lsls	r2, r2, #7
   12d42:	d4fb      	bmi.n	12d3c <cmu_hfrco_calib+0x14>

    HFRCO_VALUE = ulTargetFrequency;
   12d44:	4b02      	ldr	r3, [pc, #8]	; (12d50 <cmu_hfrco_calib+0x28>)
   12d46:	6019      	str	r1, [r3, #0]
}
   12d48:	4770      	bx	lr
   12d4a:	bf00      	nop
   12d4c:	400e4000 	.word	0x400e4000
   12d50:	2000004c 	.word	0x2000004c

00012d54 <cmu_init>:
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
   12d54:	4b61      	ldr	r3, [pc, #388]	; (12edc <cmu_init+0x188>)
{
   12d56:	b570      	push	{r4, r5, r6, lr}
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
   12d58:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
    if((CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFXO || (CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFRCO)
   12d5c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   12d60:	f002 0203 	and.w	r2, r2, #3
   12d64:	2a01      	cmp	r2, #1
   12d66:	d003      	beq.n	12d70 <cmu_init+0x1c>
   12d68:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   12d6c:	0794      	lsls	r4, r2, #30
   12d6e:	d106      	bne.n	12d7e <cmu_init+0x2a>
        CMU->SDIOCTRL = CMU_SDIOCTRL_SDIOCLKDIS | CMU_SDIOCTRL_SDIOCLKSEL_HFXO;
   12d70:	2281      	movs	r2, #129	; 0x81
   12d72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        while(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
   12d76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12d7a:	0390      	lsls	r0, r2, #14
   12d7c:	d4fb      	bmi.n	12d76 <cmu_init+0x22>
    uint8_t ubQSPIClockEnabled = !!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
   12d7e:	4b57      	ldr	r3, [pc, #348]	; (12edc <cmu_init+0x188>)
   12d80:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
    if((CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFXO || (CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFRCO)
   12d84:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
   12d88:	f002 0203 	and.w	r2, r2, #3
   12d8c:	2a01      	cmp	r2, #1
   12d8e:	d003      	beq.n	12d98 <cmu_init+0x44>
   12d90:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
   12d94:	0791      	lsls	r1, r2, #30
   12d96:	d106      	bne.n	12da6 <cmu_init+0x52>
        CMU->QSPICTRL = CMU_QSPICTRL_QSPI0CLKDIS | CMU_QSPICTRL_QSPI0CLKSEL_HFXO;
   12d98:	2281      	movs	r2, #129	; 0x81
   12d9a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        while(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
   12d9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12da2:	0352      	lsls	r2, r2, #13
   12da4:	d4fb      	bmi.n	12d9e <cmu_init+0x4a>
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
   12da6:	4a4d      	ldr	r2, [pc, #308]	; (12edc <cmu_init+0x188>)
   12da8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   12dac:	04dc      	lsls	r4, r3, #19
   12dae:	d506      	bpl.n	12dbe <cmu_init+0x6a>
        CMU->OSCENCMD = CMU_OSCENCMD_DPLLDIS;
   12db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   12db4:	6613      	str	r3, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_DPLLENS);
   12db6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   12dba:	04d8      	lsls	r0, r3, #19
   12dbc:	d4fb      	bmi.n	12db6 <cmu_init+0x62>
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
   12dbe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   12dc2:	f013 0f04 	tst.w	r3, #4
   12dc6:	4b45      	ldr	r3, [pc, #276]	; (12edc <cmu_init+0x188>)
   12dc8:	d005      	beq.n	12dd6 <cmu_init+0x82>
        CMU->OSCENCMD = CMU_OSCENCMD_HFXODIS;
   12dca:	2108      	movs	r1, #8
   12dcc:	6611      	str	r1, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_HFXOENS);
   12dce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12dd2:	0751      	lsls	r1, r2, #29
   12dd4:	d4fb      	bmi.n	12dce <cmu_init+0x7a>
    CMU->HFXOCTRL = CMU_HFXOCTRL_PEAKDETMODE_AUTOCMD | CMU_HFXOCTRL_MODE_XTAL;
   12dd6:	2210      	movs	r2, #16
   12dd8:	625a      	str	r2, [r3, #36]	; 0x24
    CMU->HFXOCTRL1 = CMU_HFXOCTRL1_PEAKDETTHR_DEFAULT;
   12dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   12dde:	629a      	str	r2, [r3, #40]	; 0x28
    CMU->HFXOSTEADYSTATECTRL |= CMU_HFXOSTEADYSTATECTRL_PEAKMONEN;
   12de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   12de2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   12de6:	631a      	str	r2, [r3, #48]	; 0x30
    CMU->HFXOTIMEOUTCTRL = (7 << _CMU_HFXOTIMEOUTCTRL_PEAKDETTIMEOUT_SHIFT) | (8 << _CMU_HFXOTIMEOUTCTRL_STEADYTIMEOUT_SHIFT) | (12 << _CMU_HFXOTIMEOUTCTRL_STARTUPTIMEOUT_SHIFT);
   12de8:	f247 028c 	movw	r2, #28812	; 0x708c
   12dec:	635a      	str	r2, [r3, #52]	; 0x34
    CMU->OSCENCMD = CMU_OSCENCMD_HFXOEN;
   12dee:	2204      	movs	r2, #4
   12df0:	661a      	str	r2, [r3, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_HFXORDY));
   12df2:	4b3a      	ldr	r3, [pc, #232]	; (12edc <cmu_init+0x188>)
   12df4:	461c      	mov	r4, r3
   12df6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12dfa:	0712      	lsls	r2, r2, #28
   12dfc:	d5fb      	bpl.n	12df6 <cmu_init+0xa2>
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFXO;
   12dfe:	2202      	movs	r2, #2
   12e00:	675a      	str	r2, [r3, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFXO);
   12e02:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   12e06:	f003 0307 	and.w	r3, r3, #7
   12e0a:	2b02      	cmp	r3, #2
   12e0c:	d1f9      	bne.n	12e02 <cmu_init+0xae>
    cmu_hfrco_calib(HFRCO_CALIB_72M | CMU_HFRCOCTRL_FINETUNINGEN, 72000000);
   12e0e:	4b34      	ldr	r3, [pc, #208]	; (12ee0 <cmu_init+0x18c>)
   12e10:	4934      	ldr	r1, [pc, #208]	; (12ee4 <cmu_init+0x190>)
   12e12:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
   12e16:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
   12e1a:	f7ff ff85 	bl	12d28 <cmu_hfrco_calib>
    CMU->DPLLCTRL = CMU_DPLLCTRL_REFSEL_HFXO | CMU_DPLLCTRL_AUTORECOVER | CMU_DPLLCTRL_EDGESEL_RISE | CMU_DPLLCTRL_MODE_FREQLL;
   12e1e:	2306      	movs	r3, #6
   12e20:	6423      	str	r3, [r4, #64]	; 0x40
    CMU->DPLLCTRL1 = (899 << _CMU_DPLLCTRL1_N_SHIFT) | (99 << _CMU_DPLLCTRL1_M_SHIFT); // fHFRCO = fHFXO * (N + 1) / (M + 1)
   12e22:	4b31      	ldr	r3, [pc, #196]	; (12ee8 <cmu_init+0x194>)
   12e24:	6463      	str	r3, [r4, #68]	; 0x44
    CMU->OSCENCMD = CMU_OSCENCMD_DPLLEN;
   12e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12e2a:	6623      	str	r3, [r4, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_DPLLRDY));
   12e2c:	4c2b      	ldr	r4, [pc, #172]	; (12edc <cmu_init+0x188>)
   12e2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   12e32:	0498      	lsls	r0, r3, #18
   12e34:	d5fb      	bpl.n	12e2e <cmu_init+0xda>
    cmu_config_waitstates(36000000);
   12e36:	482d      	ldr	r0, [pc, #180]	; (12eec <cmu_init+0x198>)
   12e38:	f7ff ff66 	bl	12d08 <cmu_config_waitstates>
    msc_config_waitstates(72000000);
   12e3c:	4829      	ldr	r0, [pc, #164]	; (12ee4 <cmu_init+0x190>)
   12e3e:	f7fe ffa9 	bl	11d94 <msc_config_waitstates>
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
   12e42:	2300      	movs	r3, #0
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
   12e44:	f44f 7280 	mov.w	r2, #256	; 0x100
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
   12e48:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
   12e4c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    CMU->HFCOREPRESC = 0 << _CMU_HFCOREPRESC_PRESC_SHIFT;
   12e50:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    CMU->HFPERPRESC = 1 << _CMU_HFPERPRESC_PRESC_SHIFT;
   12e54:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    CMU->HFEXPPRESC = 0 << _CMU_HFEXPPRESC_PRESC_SHIFT;
   12e58:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    CMU->HFPERPRESCB = 0 << _CMU_HFPERPRESCB_PRESC_SHIFT;
   12e5c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    CMU->HFPERPRESCC = 1 << _CMU_HFPERPRESCC_PRESC_SHIFT;
   12e60:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    CMU->CTRL |= CMU_CTRL_HFPERCLKEN;
   12e64:	6823      	ldr	r3, [r4, #0]
   12e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12e6a:	6023      	str	r3, [r4, #0]
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFRCO;
   12e6c:	2301      	movs	r3, #1
   12e6e:	6763      	str	r3, [r4, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFRCO);
   12e70:	4b1a      	ldr	r3, [pc, #104]	; (12edc <cmu_init+0x188>)
   12e72:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   12e76:	f002 0207 	and.w	r2, r2, #7
   12e7a:	2a01      	cmp	r2, #1
   12e7c:	d1f9      	bne.n	12e72 <cmu_init+0x11e>
    if((CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFXO)
   12e7e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   12e82:	f002 0203 	and.w	r2, r2, #3
   12e86:	2a01      	cmp	r2, #1
   12e88:	d10e      	bne.n	12ea8 <cmu_init+0x154>
        CMU->SDIOCTRL &= ~CMU_SDIOCTRL_SDIOCLKDIS;
   12e8a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   12e8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   12e92:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        while(!(CMU->STATUS & CMU_STATUS_SDIOCLKENS) && ubSDIOClockEnabled);
   12e96:	4b11      	ldr	r3, [pc, #68]	; (12edc <cmu_init+0x188>)
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
   12e98:	f405 3500 	and.w	r5, r5, #131072	; 0x20000
        while(!(CMU->STATUS & CMU_STATUS_SDIOCLKENS) && ubSDIOClockEnabled);
   12e9c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12ea0:	0391      	lsls	r1, r2, #14
   12ea2:	d401      	bmi.n	12ea8 <cmu_init+0x154>
   12ea4:	2d00      	cmp	r5, #0
   12ea6:	d1f9      	bne.n	12e9c <cmu_init+0x148>
    if((CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFXO)
   12ea8:	4b0c      	ldr	r3, [pc, #48]	; (12edc <cmu_init+0x188>)
   12eaa:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
   12eae:	f002 0203 	and.w	r2, r2, #3
   12eb2:	2a01      	cmp	r2, #1
   12eb4:	d10d      	bne.n	12ed2 <cmu_init+0x17e>
        CMU->QSPICTRL &= ~CMU_QSPICTRL_QSPI0CLKDIS;
   12eb6:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
   12eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   12ebe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    uint8_t ubQSPIClockEnabled = !!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
   12ec2:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
        while(!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS) && ubQSPIClockEnabled);
   12ec6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12eca:	0352      	lsls	r2, r2, #13
   12ecc:	d401      	bmi.n	12ed2 <cmu_init+0x17e>
   12ece:	2e00      	cmp	r6, #0
   12ed0:	d1f9      	bne.n	12ec6 <cmu_init+0x172>
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
   12ed2:	4b02      	ldr	r3, [pc, #8]	; (12edc <cmu_init+0x188>)
   12ed4:	2204      	movs	r2, #4
   12ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
   12eda:	bd70      	pop	{r4, r5, r6, pc}
   12edc:	400e4000 	.word	0x400e4000
   12ee0:	0fe081b0 	.word	0x0fe081b0
   12ee4:	044aa200 	.word	0x044aa200
   12ee8:	03830063 	.word	0x03830063
   12eec:	02255100 	.word	0x02255100

00012ef0 <cmu_ushfrco_calib>:

void cmu_ushfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(CMU->USBCRCTRL & CMU_USBCRCTRL_USBCREN)
   12ef0:	4b13      	ldr	r3, [pc, #76]	; (12f40 <cmu_ushfrco_calib+0x50>)
{
   12ef2:	b510      	push	{r4, lr}
    if(CMU->USBCRCTRL & CMU_USBCRCTRL_USBCREN)
   12ef4:	f8d3 41f4 	ldr.w	r4, [r3, #500]	; 0x1f4
   12ef8:	07e4      	lsls	r4, r4, #31
   12efa:	d407      	bmi.n	12f0c <cmu_ushfrco_calib+0x1c>
        return;

    if(!ubEnable)
   12efc:	b938      	cbnz	r0, 12f0e <cmu_ushfrco_calib+0x1e>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCODIS;
   12efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12f02:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_USHFRCOENS);
   12f04:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12f08:	0554      	lsls	r4, r2, #21
   12f0a:	d4fb      	bmi.n	12f04 <cmu_ushfrco_calib+0x14>

        while(!(CMU->STATUS & CMU_STATUS_USHFRCORDY));
    }

    USHFRCO_VALUE = ulTargetFrequency;
}
   12f0c:	bd10      	pop	{r4, pc}
    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
   12f0e:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
   12f12:	0040      	lsls	r0, r0, #1
   12f14:	d4fb      	bmi.n	12f0e <cmu_ushfrco_calib+0x1e>
    CMU->USHFRCOCTRL = ulCalibration;
   12f16:	6099      	str	r1, [r3, #8]
    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
   12f18:	4b09      	ldr	r3, [pc, #36]	; (12f40 <cmu_ushfrco_calib+0x50>)
   12f1a:	4619      	mov	r1, r3
   12f1c:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
   12f20:	0044      	lsls	r4, r0, #1
   12f22:	d4fb      	bmi.n	12f1c <cmu_ushfrco_calib+0x2c>
    if(ubEnable && !(CMU->STATUS & CMU_STATUS_USHFRCOENS))
   12f24:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
   12f28:	0540      	lsls	r0, r0, #21
   12f2a:	d406      	bmi.n	12f3a <cmu_ushfrco_calib+0x4a>
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCOEN;
   12f2c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   12f30:	6618      	str	r0, [r3, #96]	; 0x60
        while(!(CMU->STATUS & CMU_STATUS_USHFRCORDY));
   12f32:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   12f36:	051b      	lsls	r3, r3, #20
   12f38:	d5fb      	bpl.n	12f32 <cmu_ushfrco_calib+0x42>
    USHFRCO_VALUE = ulTargetFrequency;
   12f3a:	4b02      	ldr	r3, [pc, #8]	; (12f44 <cmu_ushfrco_calib+0x54>)
   12f3c:	601a      	str	r2, [r3, #0]
   12f3e:	e7e5      	b.n	12f0c <cmu_ushfrco_calib+0x1c>
   12f40:	400e4000 	.word	0x400e4000
   12f44:	20000058 	.word	0x20000058

00012f48 <cmu_auxhfrco_calib>:

void cmu_auxhfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(!ubEnable)
   12f48:	4b0f      	ldr	r3, [pc, #60]	; (12f88 <cmu_auxhfrco_calib+0x40>)
   12f4a:	b930      	cbnz	r0, 12f5a <cmu_auxhfrco_calib+0x12>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCODIS;
   12f4c:	2220      	movs	r2, #32
   12f4e:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_AUXHFRCOENS);
   12f50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   12f54:	06d2      	lsls	r2, r2, #27
   12f56:	d4fb      	bmi.n	12f50 <cmu_auxhfrco_calib+0x8>
   12f58:	4770      	bx	lr

        return;
    }

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
   12f5a:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
   12f5e:	0180      	lsls	r0, r0, #6
   12f60:	d4fb      	bmi.n	12f5a <cmu_auxhfrco_calib+0x12>

    CMU->AUXHFRCOCTRL = ulCalibration;
   12f62:	6199      	str	r1, [r3, #24]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
   12f64:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   12f68:	0188      	lsls	r0, r1, #6
   12f6a:	d4fb      	bmi.n	12f64 <cmu_auxhfrco_calib+0x1c>

    if(ubEnable && !(CMU->STATUS & CMU_STATUS_AUXHFRCOENS))
   12f6c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   12f70:	06c9      	lsls	r1, r1, #27
   12f72:	d406      	bmi.n	12f82 <cmu_auxhfrco_calib+0x3a>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCOEN;
   12f74:	2110      	movs	r1, #16
   12f76:	6619      	str	r1, [r3, #96]	; 0x60

        while(!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));
   12f78:	4903      	ldr	r1, [pc, #12]	; (12f88 <cmu_auxhfrco_calib+0x40>)
   12f7a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   12f7e:	069b      	lsls	r3, r3, #26
   12f80:	d5fb      	bpl.n	12f7a <cmu_auxhfrco_calib+0x32>
    }

    AUXHFRCO_VALUE = ulTargetFrequency;
   12f82:	4b02      	ldr	r3, [pc, #8]	; (12f8c <cmu_auxhfrco_calib+0x44>)
   12f84:	601a      	str	r2, [r3, #0]
}
   12f86:	4770      	bx	lr
   12f88:	400e4000 	.word	0x400e4000
   12f8c:	20000048 	.word	0x20000048

00012f90 <cmu_hfxo_startup_calib>:

void cmu_hfxo_startup_calib(uint16_t usIBTrim, uint16_t usCTune)
{
   12f90:	b510      	push	{r4, lr}
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
   12f92:	4c08      	ldr	r4, [pc, #32]	; (12fb4 <cmu_hfxo_startup_calib+0x24>)
   12f94:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   12f98:	075b      	lsls	r3, r3, #29
   12f9a:	d40a      	bmi.n	12fb2 <cmu_hfxo_startup_calib+0x22>
        return;

    CMU->HFXOSTARTUPCTRL = (CMU->HFXOSTARTUPCTRL & ~(_CMU_HFXOSTARTUPCTRL_CTUNE_MASK | _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT) & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK);
   12f9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12f9e:	4a06      	ldr	r2, [pc, #24]	; (12fb8 <cmu_hfxo_startup_calib+0x28>)
   12fa0:	0d1b      	lsrs	r3, r3, #20
   12fa2:	051b      	lsls	r3, r3, #20
   12fa4:	f3c0 000a 	ubfx	r0, r0, #0, #11
   12fa8:	4303      	orrs	r3, r0
   12faa:	ea02 21c1 	and.w	r1, r2, r1, lsl #11
   12fae:	430b      	orrs	r3, r1
   12fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   12fb2:	bd10      	pop	{r4, pc}
   12fb4:	400e4000 	.word	0x400e4000
   12fb8:	000ff800 	.word	0x000ff800

00012fbc <cmu_hfxo_steady_calib>:
float cmu_hfxo_get_startup_cap()
{
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
}
void cmu_hfxo_steady_calib(uint16_t usIBTrim, uint16_t usCTune)
{
   12fbc:	b510      	push	{r4, lr}
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
   12fbe:	4c08      	ldr	r4, [pc, #32]	; (12fe0 <cmu_hfxo_steady_calib+0x24>)
   12fc0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   12fc4:	075b      	lsls	r3, r3, #29
   12fc6:	d40a      	bmi.n	12fde <cmu_hfxo_steady_calib+0x22>
        return;

    CMU->HFXOSTEADYSTATECTRL = (CMU->HFXOSTEADYSTATECTRL & ~(_CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK | _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK);
   12fc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12fca:	4a06      	ldr	r2, [pc, #24]	; (12fe4 <cmu_hfxo_steady_calib+0x28>)
   12fcc:	0d1b      	lsrs	r3, r3, #20
   12fce:	051b      	lsls	r3, r3, #20
   12fd0:	f3c0 000a 	ubfx	r0, r0, #0, #11
   12fd4:	4303      	orrs	r3, r0
   12fd6:	ea02 21c1 	and.w	r1, r2, r1, lsl #11
   12fda:	430b      	orrs	r3, r1
   12fdc:	6323      	str	r3, [r4, #48]	; 0x30
}
   12fde:	bd10      	pop	{r4, pc}
   12fe0:	400e4000 	.word	0x400e4000
   12fe4:	000ff800 	.word	0x000ff800

00012fe8 <usart0_init>:
#include "usart.h"

#if defined(USART0_MODE_SPI)
void usart0_init(uint32_t ulBaud, uint8_t ubMode, uint8_t ubBitMode, int8_t bMISOLocation, int8_t bMOSILocation, uint8_t ubCLKLocation)
{
   12fe8:	b570      	push	{r4, r5, r6, lr}
    if(bMISOLocation > -1 && bMISOLocation > AFCHANLOC_MAX)
   12fea:	2b08      	cmp	r3, #8
{
   12fec:	ee07 0a90 	vmov	s15, r0
   12ff0:	f99d 5010 	ldrsb.w	r5, [sp, #16]
   12ff4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    if(bMISOLocation > -1 && bMISOLocation > AFCHANLOC_MAX)
   12ff8:	dc55      	bgt.n	130a6 <usart0_init+0xbe>
        return;

    if(bMOSILocation > -1 && bMOSILocation > AFCHANLOC_MAX)
   12ffa:	2d08      	cmp	r5, #8
   12ffc:	dc53      	bgt.n	130a6 <usart0_init+0xbe>
        return;

    if(ubCLKLocation > AFCHANLOC_MAX)
   12ffe:	2c08      	cmp	r4, #8
   13000:	d851      	bhi.n	130a6 <usart0_init+0xbe>
        return;

    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_USART0;
   13002:	4e29      	ldr	r6, [pc, #164]	; (130a8 <usart0_init+0xc0>)
   13004:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
   13008:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   1300c:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0

    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | USART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;

    USART0->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
   13010:	2a01      	cmp	r2, #1
    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | USART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;
   13012:	4826      	ldr	r0, [pc, #152]	; (130ac <usart0_init+0xc4>)
    USART0->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
   13014:	ea4f 2241 	mov.w	r2, r1, lsl #9
   13018:	ea4f 11c1 	mov.w	r1, r1, lsl #7
    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | USART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;
   1301c:	f640 668a 	movw	r6, #3722	; 0xe8a
    USART0->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
   13020:	f401 7180 	and.w	r1, r1, #256	; 0x100
   13024:	f402 7200 	and.w	r2, r2, #512	; 0x200
    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | USART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;
   13028:	60c6      	str	r6, [r0, #12]
    USART0->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
   1302a:	ea42 0201 	orr.w	r2, r2, r1
   1302e:	bf0c      	ite	eq
   13030:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   13034:	2600      	movne	r6, #0
   13036:	4332      	orrs	r2, r6
   13038:	f042 0201 	orr.w	r2, r2, #1
   1303c:	6002      	str	r2, [r0, #0]
    USART0->FRAME = USART_FRAME_DATABITS_EIGHT;
   1303e:	2205      	movs	r2, #5
   13040:	6042      	str	r2, [r0, #4]
    USART0->CLKDIV = (uint32_t)((((float)HFPER_CLOCK_FREQ / (2.f * ulBaud)) - 1.f) * 256.f);
   13042:	4a1b      	ldr	r2, [pc, #108]	; (130b0 <usart0_init+0xc8>)
   13044:	eef8 7a67 	vcvt.f32.u32	s15, s15
   13048:	edd2 6a00 	vldr	s13, [r2]
   1304c:	ee77 7aa7 	vadd.f32	s15, s15, s15
   13050:	eef8 6a66 	vcvt.f32.u32	s13, s13

    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   13054:	2d00      	cmp	r5, #0
    USART0->CLKDIV = (uint32_t)((((float)HFPER_CLOCK_FREQ / (2.f * ulBaud)) - 1.f) * 256.f);
   13056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   1305a:	ea6f 0103 	mvn.w	r1, r3
   1305e:	ea4f 71d1 	mov.w	r1, r1, lsr #31
   13062:	bfac      	ite	ge
   13064:	2202      	movge	r2, #2
   13066:	2200      	movlt	r2, #0
    USART0->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
   13068:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1306c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   13070:	ea42 0201 	orr.w	r2, r2, r1
    USART0->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
   13074:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   13078:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   1307c:	f042 0208 	orr.w	r2, r2, #8
    USART0->CLKDIV = (uint32_t)((((float)HFPER_CLOCK_FREQ / (2.f * ulBaud)) - 1.f) * 256.f);
   13080:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   13084:	ee77 7a67 	vsub.f32	s15, s14, s15
   13088:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 130b4 <usart0_init+0xcc>
   1308c:	ee67 7a87 	vmul.f32	s15, s15, s14
   13090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13094:	edc0 7a05 	vstr	s15, [r0, #20]
    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   13098:	6742      	str	r2, [r0, #116]	; 0x74
    USART0->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
   1309a:	6783      	str	r3, [r0, #120]	; 0x78

    USART0->CMD = USART_CMD_MASTEREN | (bMOSILocation >= 0 ? USART_CMD_TXEN : 0) | (bMISOLocation >= 0 ? USART_CMD_RXEN : 0);
   1309c:	bfac      	ite	ge
   1309e:	2314      	movge	r3, #20
   130a0:	2310      	movlt	r3, #16
   130a2:	430b      	orrs	r3, r1
   130a4:	60c3      	str	r3, [r0, #12]
}
   130a6:	bd70      	pop	{r4, r5, r6, pc}
   130a8:	400e4000 	.word	0x400e4000
   130ac:	40010000 	.word	0x40010000
   130b0:	20006314 	.word	0x20006314
   130b4:	43800000 	.word	0x43800000

000130b8 <usart2_init>:
}
#endif  // USART1_MODE_SPI

#if defined(USART2_MODE_SPI)
void usart2_init(uint32_t ulBaud, uint8_t ubMode, uint8_t ubBitMode, int8_t bMISOLocation, int8_t bMOSILocation, uint8_t ubCLKLocation)
{
   130b8:	b570      	push	{r4, r5, r6, lr}
    if(bMISOLocation > -1 && bMISOLocation > AFCHANLOC_MAX)
   130ba:	2b08      	cmp	r3, #8
{
   130bc:	ee07 0a90 	vmov	s15, r0
   130c0:	f99d 5010 	ldrsb.w	r5, [sp, #16]
   130c4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    if(bMISOLocation > -1 && bMISOLocation > AFCHANLOC_MAX)
   130c8:	dc55      	bgt.n	13176 <usart2_init+0xbe>
        return;

    if(bMOSILocation > -1 && bMOSILocation > AFCHANLOC_MAX)
   130ca:	2d08      	cmp	r5, #8
   130cc:	dc53      	bgt.n	13176 <usart2_init+0xbe>
        return;

    if(ubCLKLocation > AFCHANLOC_MAX)
   130ce:	2c08      	cmp	r4, #8
   130d0:	d851      	bhi.n	13176 <usart2_init+0xbe>
        return;

    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_USART2;
   130d2:	4e29      	ldr	r6, [pc, #164]	; (13178 <usart2_init+0xc0>)
   130d4:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
   130d8:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   130dc:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0

    USART2->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | USART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;

    USART2->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
   130e0:	2a01      	cmp	r2, #1
    USART2->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | USART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;
   130e2:	4826      	ldr	r0, [pc, #152]	; (1317c <usart2_init+0xc4>)
    USART2->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
   130e4:	ea4f 2241 	mov.w	r2, r1, lsl #9
   130e8:	ea4f 11c1 	mov.w	r1, r1, lsl #7
    USART2->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | USART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;
   130ec:	f640 668a 	movw	r6, #3722	; 0xe8a
    USART2->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
   130f0:	f401 7180 	and.w	r1, r1, #256	; 0x100
   130f4:	f402 7200 	and.w	r2, r2, #512	; 0x200
    USART2->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | USART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;
   130f8:	60c6      	str	r6, [r0, #12]
    USART2->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
   130fa:	ea42 0201 	orr.w	r2, r2, r1
   130fe:	bf0c      	ite	eq
   13100:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   13104:	2600      	movne	r6, #0
   13106:	4332      	orrs	r2, r6
   13108:	f042 0201 	orr.w	r2, r2, #1
   1310c:	6002      	str	r2, [r0, #0]
    USART2->FRAME = USART_FRAME_DATABITS_EIGHT;
   1310e:	2205      	movs	r2, #5
   13110:	6042      	str	r2, [r0, #4]
    USART2->CLKDIV = (uint32_t)((((float)HFPERB_CLOCK_FREQ / (2.f * ulBaud)) - 1.f) * 256.f);
   13112:	4a1b      	ldr	r2, [pc, #108]	; (13180 <usart2_init+0xc8>)
   13114:	eef8 7a67 	vcvt.f32.u32	s15, s15
   13118:	edd2 6a00 	vldr	s13, [r2]
   1311c:	ee77 7aa7 	vadd.f32	s15, s15, s15
   13120:	eef8 6a66 	vcvt.f32.u32	s13, s13

    USART2->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   13124:	2d00      	cmp	r5, #0
    USART2->CLKDIV = (uint32_t)((((float)HFPERB_CLOCK_FREQ / (2.f * ulBaud)) - 1.f) * 256.f);
   13126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    USART2->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   1312a:	ea6f 0103 	mvn.w	r1, r3
   1312e:	ea4f 71d1 	mov.w	r1, r1, lsr #31
   13132:	bfac      	ite	ge
   13134:	2202      	movge	r2, #2
   13136:	2200      	movlt	r2, #0
    USART2->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
   13138:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1313c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    USART2->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   13140:	ea42 0201 	orr.w	r2, r2, r1
    USART2->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
   13144:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   13148:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    USART2->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   1314c:	f042 0208 	orr.w	r2, r2, #8
    USART2->CLKDIV = (uint32_t)((((float)HFPERB_CLOCK_FREQ / (2.f * ulBaud)) - 1.f) * 256.f);
   13150:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   13154:	ee77 7a67 	vsub.f32	s15, s14, s15
   13158:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 13184 <usart2_init+0xcc>
   1315c:	ee67 7a87 	vmul.f32	s15, s15, s14
   13160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   13164:	edc0 7a05 	vstr	s15, [r0, #20]
    USART2->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
   13168:	6742      	str	r2, [r0, #116]	; 0x74
    USART2->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
   1316a:	6783      	str	r3, [r0, #120]	; 0x78

    USART2->CMD = USART_CMD_MASTEREN | (bMOSILocation >= 0 ? USART_CMD_TXEN : 0) | (bMISOLocation >= 0 ? USART_CMD_RXEN : 0);
   1316c:	bfac      	ite	ge
   1316e:	2314      	movge	r3, #20
   13170:	2310      	movlt	r3, #16
   13172:	430b      	orrs	r3, r1
   13174:	60c3      	str	r3, [r0, #12]
}
   13176:	bd70      	pop	{r4, r5, r6, pc}
   13178:	400e4000 	.word	0x400e4000
   1317c:	40010800 	.word	0x40010800
   13180:	20006308 	.word	0x20006308
   13184:	43800000 	.word	0x43800000

00013188 <usart2_spi_transfer_byte>:
uint8_t usart2_spi_transfer_byte(const uint8_t ubData)
{
    while(USART2->STATUS & _USART_STATUS_TXBUFCNT_MASK);
   13188:	4b07      	ldr	r3, [pc, #28]	; (131a8 <usart2_spi_transfer_byte+0x20>)
   1318a:	461a      	mov	r2, r3
   1318c:	6919      	ldr	r1, [r3, #16]
   1318e:	f411 3f40 	tst.w	r1, #196608	; 0x30000
   13192:	d1fb      	bne.n	1318c <usart2_spi_transfer_byte+0x4>

    USART2->CMD = USART_CMD_CLEARRX;
   13194:	f44f 6100 	mov.w	r1, #2048	; 0x800
   13198:	60d9      	str	r1, [r3, #12]

    USART2->TXDATA = ubData;
   1319a:	6358      	str	r0, [r3, #52]	; 0x34

    while(!(USART2->STATUS & USART_STATUS_TXC));
   1319c:	6913      	ldr	r3, [r2, #16]
   1319e:	069b      	lsls	r3, r3, #26
   131a0:	d5fc      	bpl.n	1319c <usart2_spi_transfer_byte+0x14>

    return USART2->RXDATA;
   131a2:	69d0      	ldr	r0, [r2, #28]
}
   131a4:	b2c0      	uxtb	r0, r0
   131a6:	4770      	bx	lr
   131a8:	40010800 	.word	0x40010800

000131ac <usart2_spi_write_byte>:
void usart2_spi_write_byte(const uint8_t ubData, const uint8_t ubWait)
{
   131ac:	b510      	push	{r4, lr}
    while(!(USART2->STATUS & USART_STATUS_TXBL));
   131ae:	4b05      	ldr	r3, [pc, #20]	; (131c4 <usart2_spi_write_byte+0x18>)
   131b0:	461a      	mov	r2, r3
   131b2:	691c      	ldr	r4, [r3, #16]
   131b4:	0664      	lsls	r4, r4, #25
   131b6:	d5fc      	bpl.n	131b2 <usart2_spi_write_byte+0x6>

    USART2->TXDATA = ubData;
   131b8:	6358      	str	r0, [r3, #52]	; 0x34

    while(ubWait && !(USART2->STATUS & USART_STATUS_TXC));
   131ba:	b111      	cbz	r1, 131c2 <usart2_spi_write_byte+0x16>
   131bc:	6913      	ldr	r3, [r2, #16]
   131be:	069b      	lsls	r3, r3, #26
   131c0:	d5fb      	bpl.n	131ba <usart2_spi_write_byte+0xe>
}
   131c2:	bd10      	pop	{r4, pc}
   131c4:	40010800 	.word	0x40010800

000131c8 <adc_init>:
#include "adc.h"

void adc_init()
{
   131c8:	b508      	push	{r3, lr}
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC0;
   131ca:	4b0b      	ldr	r3, [pc, #44]	; (131f8 <adc_init+0x30>)
   131cc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   131d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   131d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC1;
   131d8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   131dc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   131e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

    CMU->ADCCTRL = CMU_ADCCTRL_ADC0CLKINV | CMU_ADCCTRL_ADC0CLKSEL_AUXHFRCO | (3 << _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) | CMU_ADCCTRL_ADC1CLKINV | CMU_ADCCTRL_ADC1CLKSEL_AUXHFRCO | (3 << _CMU_ADCCTRL_ADC1CLKDIV_SHIFT);
   131e4:	4a05      	ldr	r2, [pc, #20]	; (131fc <adc_init+0x34>)
   131e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

    cmu_update_clocks();
   131ea:	f7ff fb35 	bl	12858 <cmu_update_clocks>

    // ADC_CLK is 8 MHz
    // adc_sar_clk is 100 kHz (ADC_CLK / (PRESC + 1)) PRESC = 79
    // TIMEBASE period is 1 us (1 MHz) (ADC_CLK / (TIMEBASE + 1)) TIMEBASE = 7
    ADC0->CTRL = ADC_CTRL_CHCONREFWARMIDLE_KEEPPREV | ADC_CTRL_CHCONMODE_MAXSETTLE | ADC_CTRL_OVSRSEL_X16 | (7 << _ADC_CTRL_TIMEBASE_SHIFT) | (79 << _ADC_CTRL_PRESC_SHIFT) | ADC_CTRL_ASYNCCLKEN_ALWAYSON | ADC_CTRL_ADCCLKMODE_ASYNC | ADC_CTRL_WARMUPMODE_NORMAL;
   131ee:	4b04      	ldr	r3, [pc, #16]	; (13200 <adc_init+0x38>)
   131f0:	4a04      	ldr	r2, [pc, #16]	; (13204 <adc_init+0x3c>)
   131f2:	601a      	str	r2, [r3, #0]
}
   131f4:	bd08      	pop	{r3, pc}
   131f6:	bf00      	nop
   131f8:	400e4000 	.word	0x400e4000
   131fc:	01130113 	.word	0x01130113
   13200:	40082000 	.word	0x40082000
   13204:	83074fc0 	.word	0x83074fc0

00013208 <adc_get_avdd>:

float adc_get_avdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
   13208:	4b1a      	ldr	r3, [pc, #104]	; (13274 <adc_get_avdd+0x6c>)
   1320a:	68da      	ldr	r2, [r3, #12]
   1320c:	f412 5f98 	tst.w	r2, #4864	; 0x1300
   13210:	d1fb      	bne.n	1320a <adc_get_avdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_AVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
   13212:	4a19      	ldr	r2, [pc, #100]	; (13278 <adc_get_avdd+0x70>)
   13214:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
   13216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1321a:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
   1321c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1321e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   13222:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13226:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
   13228:	4a14      	ldr	r2, [pc, #80]	; (1327c <adc_get_avdd+0x74>)
   1322a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1322c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1322e:	f3c2 420e 	ubfx	r2, r2, #16, #15
   13232:	430a      	orrs	r2, r1
   13234:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13238:	4911      	ldr	r1, [pc, #68]	; (13280 <adc_get_avdd+0x78>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   1323a:	f022 020f 	bic.w	r2, r2, #15
   1323e:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13242:	f022 020f 	bic.w	r2, r2, #15
   13246:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
   13248:	689a      	ldr	r2, [r3, #8]
   1324a:	f042 0201 	orr.w	r2, r2, #1
   1324e:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
   13250:	4b08      	ldr	r3, [pc, #32]	; (13274 <adc_get_avdd+0x6c>)
   13252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13254:	07d2      	lsls	r2, r2, #31
   13256:	d5fc      	bpl.n	13252 <adc_get_avdd+0x4a>

    float fAVDD = ADC0->SINGLEDATA * 5000.f / 65535.f;
   13258:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
   1325c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 13284 <adc_get_avdd+0x7c>
   13260:	eef8 7a67 	vcvt.f32.u32	s15, s15
   13264:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fAVDD;
}
   13268:	ed9f 0a07 	vldr	s0, [pc, #28]	; 13288 <adc_get_avdd+0x80>
   1326c:	ee87 0a80 	vdiv.f32	s0, s15, s0
   13270:	4770      	bx	lr
   13272:	bf00      	nop
   13274:	40082000 	.word	0x40082000
   13278:	07ffe078 	.word	0x07ffe078
   1327c:	0fe081b0 	.word	0x0fe081b0
   13280:	40082400 	.word	0x40082400
   13284:	459c4000 	.word	0x459c4000
   13288:	477fff00 	.word	0x477fff00

0001328c <adc_get_dvdd>:
float adc_get_dvdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
   1328c:	4b1a      	ldr	r3, [pc, #104]	; (132f8 <adc_get_dvdd+0x6c>)
   1328e:	68da      	ldr	r2, [r3, #12]
   13290:	f412 5f98 	tst.w	r2, #4864	; 0x1300
   13294:	d1fb      	bne.n	1328e <adc_get_dvdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
   13296:	4a19      	ldr	r2, [pc, #100]	; (132fc <adc_get_dvdd+0x70>)
   13298:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
   1329a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1329e:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
   132a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   132a2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   132a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   132aa:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
   132ac:	4a14      	ldr	r2, [pc, #80]	; (13300 <adc_get_dvdd+0x74>)
   132ae:	6e52      	ldr	r2, [r2, #100]	; 0x64
   132b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   132b2:	f3c2 420e 	ubfx	r2, r2, #16, #15
   132b6:	430a      	orrs	r2, r1
   132b8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   132ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   132bc:	4911      	ldr	r1, [pc, #68]	; (13304 <adc_get_dvdd+0x78>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   132be:	f022 020f 	bic.w	r2, r2, #15
   132c2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   132c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   132c6:	f022 020f 	bic.w	r2, r2, #15
   132ca:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
   132cc:	689a      	ldr	r2, [r3, #8]
   132ce:	f042 0201 	orr.w	r2, r2, #1
   132d2:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
   132d4:	4b08      	ldr	r3, [pc, #32]	; (132f8 <adc_get_dvdd+0x6c>)
   132d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   132d8:	07d2      	lsls	r2, r2, #31
   132da:	d5fc      	bpl.n	132d6 <adc_get_dvdd+0x4a>

    float fDVDD = ADC0->SINGLEDATA * 5000.f / 65535.f;
   132dc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
   132e0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 13308 <adc_get_dvdd+0x7c>
   132e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   132e8:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDVDD;
}
   132ec:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1330c <adc_get_dvdd+0x80>
   132f0:	ee87 0a80 	vdiv.f32	s0, s15, s0
   132f4:	4770      	bx	lr
   132f6:	bf00      	nop
   132f8:	40082000 	.word	0x40082000
   132fc:	07ffe278 	.word	0x07ffe278
   13300:	0fe081b0 	.word	0x0fe081b0
   13304:	40082400 	.word	0x40082400
   13308:	459c4000 	.word	0x459c4000
   1330c:	477fff00 	.word	0x477fff00

00013310 <adc_get_iovdd>:
float adc_get_iovdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
   13310:	4b1a      	ldr	r3, [pc, #104]	; (1337c <adc_get_iovdd+0x6c>)
   13312:	68da      	ldr	r2, [r3, #12]
   13314:	f412 5f98 	tst.w	r2, #4864	; 0x1300
   13318:	d1fb      	bne.n	13312 <adc_get_iovdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_IOVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
   1331a:	4a19      	ldr	r2, [pc, #100]	; (13380 <adc_get_iovdd+0x70>)
   1331c:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
   1331e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13322:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
   13324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13326:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   1332a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1332e:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
   13330:	4a14      	ldr	r2, [pc, #80]	; (13384 <adc_get_iovdd+0x74>)
   13332:	6e52      	ldr	r2, [r2, #100]	; 0x64
   13334:	6b59      	ldr	r1, [r3, #52]	; 0x34
   13336:	f3c2 420e 	ubfx	r2, r2, #16, #15
   1333a:	430a      	orrs	r2, r1
   1333c:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   1333e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13340:	4911      	ldr	r1, [pc, #68]	; (13388 <adc_get_iovdd+0x78>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13342:	f022 020f 	bic.w	r2, r2, #15
   13346:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1334a:	f022 020f 	bic.w	r2, r2, #15
   1334e:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
   13350:	689a      	ldr	r2, [r3, #8]
   13352:	f042 0201 	orr.w	r2, r2, #1
   13356:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
   13358:	4b08      	ldr	r3, [pc, #32]	; (1337c <adc_get_iovdd+0x6c>)
   1335a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1335c:	07d2      	lsls	r2, r2, #31
   1335e:	d5fc      	bpl.n	1335a <adc_get_iovdd+0x4a>

    float fIOVDD = ADC0->SINGLEDATA * 5000.f / 65535.f;
   13360:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
   13364:	ed9f 0a09 	vldr	s0, [pc, #36]	; 1338c <adc_get_iovdd+0x7c>
   13368:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1336c:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fIOVDD;
}
   13370:	ed9f 0a07 	vldr	s0, [pc, #28]	; 13390 <adc_get_iovdd+0x80>
   13374:	ee87 0a80 	vdiv.f32	s0, s15, s0
   13378:	4770      	bx	lr
   1337a:	bf00      	nop
   1337c:	40082000 	.word	0x40082000
   13380:	07ffe578 	.word	0x07ffe578
   13384:	0fe081b0 	.word	0x0fe081b0
   13388:	40082400 	.word	0x40082400
   1338c:	459c4000 	.word	0x459c4000
   13390:	477fff00 	.word	0x477fff00

00013394 <adc_get_corevdd>:
float adc_get_corevdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
   13394:	4b1a      	ldr	r3, [pc, #104]	; (13400 <adc_get_corevdd+0x6c>)
   13396:	68da      	ldr	r2, [r3, #12]
   13398:	f412 5f98 	tst.w	r2, #4864	; 0x1300
   1339c:	d1fb      	bne.n	13396 <adc_get_corevdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DECOUPLE | ADC_SINGLECTRL_REF_2V5 | ADC_SINGLECTRL_RES_OVS;
   1339e:	4a19      	ldr	r2, [pc, #100]	; (13404 <adc_get_corevdd+0x70>)
   133a0:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
   133a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   133a6:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
   133a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   133aa:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   133ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   133b2:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x7FFF0000) >> 16; // Calibration for 2V5 reference
   133b4:	4a14      	ldr	r2, [pc, #80]	; (13408 <adc_get_corevdd+0x74>)
   133b6:	6e12      	ldr	r2, [r2, #96]	; 0x60
   133b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   133ba:	f3c2 420e 	ubfx	r2, r2, #16, #15
   133be:	430a      	orrs	r2, r1
   133c0:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   133c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   133c4:	4911      	ldr	r1, [pc, #68]	; (1340c <adc_get_corevdd+0x78>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   133c6:	f022 020f 	bic.w	r2, r2, #15
   133ca:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   133cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   133ce:	f022 020f 	bic.w	r2, r2, #15
   133d2:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
   133d4:	689a      	ldr	r2, [r3, #8]
   133d6:	f042 0201 	orr.w	r2, r2, #1
   133da:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
   133dc:	4b08      	ldr	r3, [pc, #32]	; (13400 <adc_get_corevdd+0x6c>)
   133de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   133e0:	07d2      	lsls	r2, r2, #31
   133e2:	d5fc      	bpl.n	133de <adc_get_corevdd+0x4a>

    float fDECOUPLE = ADC0->SINGLEDATA * 2500.f / 65535.f;
   133e4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
   133e8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 13410 <adc_get_corevdd+0x7c>
   133ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
   133f0:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDECOUPLE;
}
   133f4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 13414 <adc_get_corevdd+0x80>
   133f8:	ee87 0a80 	vdiv.f32	s0, s15, s0
   133fc:	4770      	bx	lr
   133fe:	bf00      	nop
   13400:	40082000 	.word	0x40082000
   13404:	07ffe438 	.word	0x07ffe438
   13408:	0fe081b0 	.word	0x0fe081b0
   1340c:	40082400 	.word	0x40082400
   13410:	451c4000 	.word	0x451c4000
   13414:	477fff00 	.word	0x477fff00

00013418 <adc_get_r5v_vregi>:
float adc_get_r5v_vregi()
{
   13418:	b510      	push	{r4, lr}
    emu_r5v_amux_config(1, EMU_R5VADCCTRL_AMUXSEL_VREGIDIV10);
   1341a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1341e:	2001      	movs	r0, #1
   13420:	f7fe facc 	bl	119bc <emu_r5v_amux_config>

    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
   13424:	4b1e      	ldr	r3, [pc, #120]	; (134a0 <adc_get_r5v_vregi+0x88>)
   13426:	68da      	ldr	r2, [r3, #12]
   13428:	f412 5f98 	tst.w	r2, #4864	; 0x1300
   1342c:	d1fb      	bne.n	13426 <adc_get_r5v_vregi+0xe>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_256CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_R5VOUT | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
   1342e:	4a1d      	ldr	r2, [pc, #116]	; (134a4 <adc_get_r5v_vregi+0x8c>)
   13430:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
   13432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13436:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
   13438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1343a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   1343e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13442:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
   13444:	4a18      	ldr	r2, [pc, #96]	; (134a8 <adc_get_r5v_vregi+0x90>)
   13446:	6e52      	ldr	r2, [r2, #100]	; 0x64
   13448:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1344a:	f3c2 420e 	ubfx	r2, r2, #16, #15
   1344e:	430a      	orrs	r2, r1
   13450:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13454:	4915      	ldr	r1, [pc, #84]	; (134ac <adc_get_r5v_vregi+0x94>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13456:	f022 020f 	bic.w	r2, r2, #15
   1345a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   1345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1345e:	f022 020f 	bic.w	r2, r2, #15
   13462:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
   13464:	689a      	ldr	r2, [r3, #8]
   13466:	f042 0201 	orr.w	r2, r2, #1
   1346a:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
   1346c:	4b0c      	ldr	r3, [pc, #48]	; (134a0 <adc_get_r5v_vregi+0x88>)
   1346e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13470:	07d2      	lsls	r2, r2, #31
   13472:	d5fc      	bpl.n	1346e <adc_get_r5v_vregi+0x56>

    float fVREGI = ADC0->SINGLEDATA * 5000.f / 65535.f;
   13474:	6c9c      	ldr	r4, [r3, #72]	; 0x48

    emu_r5v_amux_config(0, 0);
   13476:	2100      	movs	r1, #0
   13478:	4608      	mov	r0, r1
   1347a:	f7fe fa9f 	bl	119bc <emu_r5v_amux_config>
    float fVREGI = ADC0->SINGLEDATA * 5000.f / 65535.f;
   1347e:	ee07 4a90 	vmov	s15, r4
   13482:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 134b0 <adc_get_r5v_vregi+0x98>
   13486:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1348a:	ee67 7a87 	vmul.f32	s15, s15, s14
   1348e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 134b4 <adc_get_r5v_vregi+0x9c>
   13492:	ee87 0a87 	vdiv.f32	s0, s15, s14

    return fVREGI * 10.f;
}
   13496:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   1349a:	ee20 0a27 	vmul.f32	s0, s0, s15
   1349e:	bd10      	pop	{r4, pc}
   134a0:	40082000 	.word	0x40082000
   134a4:	09fff578 	.word	0x09fff578
   134a8:	0fe081b0 	.word	0x0fe081b0
   134ac:	40082400 	.word	0x40082400
   134b0:	459c4000 	.word	0x459c4000
   134b4:	477fff00 	.word	0x477fff00

000134b8 <adc_get_r5v_vregi_current>:
float adc_get_r5v_vregi_current()
{
   134b8:	b510      	push	{r4, lr}
    emu_r5v_amux_config(1, EMU_R5VADCCTRL_AMUXSEL_VREGIIMON);
   134ba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
   134be:	2001      	movs	r0, #1
   134c0:	f7fe fa7c 	bl	119bc <emu_r5v_amux_config>

    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
   134c4:	4b1e      	ldr	r3, [pc, #120]	; (13540 <adc_get_r5v_vregi_current+0x88>)
   134c6:	68da      	ldr	r2, [r3, #12]
   134c8:	f412 5f98 	tst.w	r2, #4864	; 0x1300
   134cc:	d1fb      	bne.n	134c6 <adc_get_r5v_vregi_current+0xe>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_256CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_R5VOUT | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
   134ce:	4a1d      	ldr	r2, [pc, #116]	; (13544 <adc_get_r5v_vregi_current+0x8c>)
   134d0:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
   134d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   134d6:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
   134d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   134da:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   134de:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   134e2:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
   134e4:	4a18      	ldr	r2, [pc, #96]	; (13548 <adc_get_r5v_vregi_current+0x90>)
   134e6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   134e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   134ea:	f3c2 420e 	ubfx	r2, r2, #16, #15
   134ee:	430a      	orrs	r2, r1
   134f0:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   134f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   134f4:	4915      	ldr	r1, [pc, #84]	; (1354c <adc_get_r5v_vregi_current+0x94>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   134f6:	f022 020f 	bic.w	r2, r2, #15
   134fa:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   134fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   134fe:	f022 020f 	bic.w	r2, r2, #15
   13502:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
   13504:	689a      	ldr	r2, [r3, #8]
   13506:	f042 0201 	orr.w	r2, r2, #1
   1350a:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
   1350c:	4b0c      	ldr	r3, [pc, #48]	; (13540 <adc_get_r5v_vregi_current+0x88>)
   1350e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13510:	07d2      	lsls	r2, r2, #31
   13512:	d5fc      	bpl.n	1350e <adc_get_r5v_vregi_current+0x56>

    float fIVREGI = ADC0->SINGLEDATA * 5000.f / 65535.f;
   13514:	6c9c      	ldr	r4, [r3, #72]	; 0x48

    emu_r5v_amux_config(0, 0);
   13516:	2100      	movs	r1, #0
   13518:	4608      	mov	r0, r1
   1351a:	f7fe fa4f 	bl	119bc <emu_r5v_amux_config>
    float fIVREGI = ADC0->SINGLEDATA * 5000.f / 65535.f;
   1351e:	ee07 4a90 	vmov	s15, r4
   13522:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 13550 <adc_get_r5v_vregi_current+0x98>
   13526:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1352a:	ee67 7a87 	vmul.f32	s15, s15, s14
   1352e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 13554 <adc_get_r5v_vregi_current+0x9c>
   13532:	ee87 0a87 	vdiv.f32	s0, s15, s14

    return fIVREGI / 2.79f;
}
   13536:	eddf 7a08 	vldr	s15, [pc, #32]	; 13558 <adc_get_r5v_vregi_current+0xa0>
   1353a:	ee80 0a27 	vdiv.f32	s0, s0, s15
   1353e:	bd10      	pop	{r4, pc}
   13540:	40082000 	.word	0x40082000
   13544:	09fff578 	.word	0x09fff578
   13548:	0fe081b0 	.word	0x0fe081b0
   1354c:	40082400 	.word	0x40082400
   13550:	459c4000 	.word	0x459c4000
   13554:	477fff00 	.word	0x477fff00
   13558:	40328f5c 	.word	0x40328f5c

0001355c <adc_get_r5v_vbus>:
float adc_get_r5v_vbus()
{
   1355c:	b510      	push	{r4, lr}
    emu_r5v_amux_config(1, EMU_R5VADCCTRL_AMUXSEL_VBUSDIV10);
   1355e:	2100      	movs	r1, #0
   13560:	2001      	movs	r0, #1
   13562:	f7fe fa2b 	bl	119bc <emu_r5v_amux_config>

    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
   13566:	4b1f      	ldr	r3, [pc, #124]	; (135e4 <adc_get_r5v_vbus+0x88>)
   13568:	68da      	ldr	r2, [r3, #12]
   1356a:	f412 5f98 	tst.w	r2, #4864	; 0x1300
   1356e:	d1fb      	bne.n	13568 <adc_get_r5v_vbus+0xc>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_256CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_R5VOUT | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
   13570:	4a1d      	ldr	r2, [pc, #116]	; (135e8 <adc_get_r5v_vbus+0x8c>)
   13572:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
   13574:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13578:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
   1357a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1357c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   13580:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13584:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
   13586:	4a19      	ldr	r2, [pc, #100]	; (135ec <adc_get_r5v_vbus+0x90>)
   13588:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1358a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1358c:	f3c2 420e 	ubfx	r2, r2, #16, #15
   13590:	430a      	orrs	r2, r1
   13592:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13596:	4916      	ldr	r1, [pc, #88]	; (135f0 <adc_get_r5v_vbus+0x94>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13598:	f022 020f 	bic.w	r2, r2, #15
   1359c:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   1359e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   135a0:	f022 020f 	bic.w	r2, r2, #15
   135a4:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
   135a6:	689a      	ldr	r2, [r3, #8]
   135a8:	f042 0201 	orr.w	r2, r2, #1
   135ac:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
   135ae:	4b0d      	ldr	r3, [pc, #52]	; (135e4 <adc_get_r5v_vbus+0x88>)
   135b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   135b2:	07d2      	lsls	r2, r2, #31
   135b4:	d5fc      	bpl.n	135b0 <adc_get_r5v_vbus+0x54>

    float fVBUS = ADC0->SINGLEDATA * 5000.f / 65535.f;
   135b6:	6c9c      	ldr	r4, [r3, #72]	; 0x48

    emu_r5v_amux_config(0, 0);
   135b8:	2100      	movs	r1, #0
   135ba:	4608      	mov	r0, r1
   135bc:	f7fe f9fe 	bl	119bc <emu_r5v_amux_config>
    float fVBUS = ADC0->SINGLEDATA * 5000.f / 65535.f;
   135c0:	ee07 4a90 	vmov	s15, r4
   135c4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 135f4 <adc_get_r5v_vbus+0x98>
   135c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   135cc:	ee67 7a87 	vmul.f32	s15, s15, s14
   135d0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 135f8 <adc_get_r5v_vbus+0x9c>
   135d4:	ee87 0a87 	vdiv.f32	s0, s15, s14

    return fVBUS * 10.f;
}
   135d8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   135dc:	ee20 0a27 	vmul.f32	s0, s0, s15
   135e0:	bd10      	pop	{r4, pc}
   135e2:	bf00      	nop
   135e4:	40082000 	.word	0x40082000
   135e8:	09fff578 	.word	0x09fff578
   135ec:	0fe081b0 	.word	0x0fe081b0
   135f0:	40082400 	.word	0x40082400
   135f4:	459c4000 	.word	0x459c4000
   135f8:	477fff00 	.word	0x477fff00

000135fc <adc_get_r5v_vbus_current>:
float adc_get_r5v_vbus_current()
{
   135fc:	b510      	push	{r4, lr}
    emu_r5v_amux_config(1, EMU_R5VADCCTRL_AMUXSEL_VBUSIMON);
   135fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   13602:	2001      	movs	r0, #1
   13604:	f7fe f9da 	bl	119bc <emu_r5v_amux_config>

    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
   13608:	4b1e      	ldr	r3, [pc, #120]	; (13684 <adc_get_r5v_vbus_current+0x88>)
   1360a:	68da      	ldr	r2, [r3, #12]
   1360c:	f412 5f98 	tst.w	r2, #4864	; 0x1300
   13610:	d1fb      	bne.n	1360a <adc_get_r5v_vbus_current+0xe>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_256CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_R5VOUT | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
   13612:	4a1d      	ldr	r2, [pc, #116]	; (13688 <adc_get_r5v_vbus_current+0x8c>)
   13614:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
   13616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1361a:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
   1361c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1361e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   13622:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13626:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
   13628:	4a18      	ldr	r2, [pc, #96]	; (1368c <adc_get_r5v_vbus_current+0x90>)
   1362a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1362c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1362e:	f3c2 420e 	ubfx	r2, r2, #16, #15
   13632:	430a      	orrs	r2, r1
   13634:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13638:	4915      	ldr	r1, [pc, #84]	; (13690 <adc_get_r5v_vbus_current+0x94>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   1363a:	f022 020f 	bic.w	r2, r2, #15
   1363e:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   13640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13642:	f022 020f 	bic.w	r2, r2, #15
   13646:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
   13648:	689a      	ldr	r2, [r3, #8]
   1364a:	f042 0201 	orr.w	r2, r2, #1
   1364e:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
   13650:	4b0c      	ldr	r3, [pc, #48]	; (13684 <adc_get_r5v_vbus_current+0x88>)
   13652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13654:	07d2      	lsls	r2, r2, #31
   13656:	d5fc      	bpl.n	13652 <adc_get_r5v_vbus_current+0x56>

    float fIVBUS = ADC0->SINGLEDATA * 5000.f / 65535.f;
   13658:	6c9c      	ldr	r4, [r3, #72]	; 0x48

    emu_r5v_amux_config(0, 0);
   1365a:	2100      	movs	r1, #0
   1365c:	4608      	mov	r0, r1
   1365e:	f7fe f9ad 	bl	119bc <emu_r5v_amux_config>
    float fIVBUS = ADC0->SINGLEDATA * 5000.f / 65535.f;
   13662:	ee07 4a90 	vmov	s15, r4
   13666:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 13694 <adc_get_r5v_vbus_current+0x98>
   1366a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1366e:	ee67 7a87 	vmul.f32	s15, s15, s14
   13672:	ed9f 7a09 	vldr	s14, [pc, #36]	; 13698 <adc_get_r5v_vbus_current+0x9c>
   13676:	ee87 0a87 	vdiv.f32	s0, s15, s14

    return fIVBUS / 2.79f;
}
   1367a:	eddf 7a08 	vldr	s15, [pc, #32]	; 1369c <adc_get_r5v_vbus_current+0xa0>
   1367e:	ee80 0a27 	vdiv.f32	s0, s0, s15
   13682:	bd10      	pop	{r4, pc}
   13684:	40082000 	.word	0x40082000
   13688:	09fff578 	.word	0x09fff578
   1368c:	0fe081b0 	.word	0x0fe081b0
   13690:	40082400 	.word	0x40082400
   13694:	459c4000 	.word	0x459c4000
   13698:	477fff00 	.word	0x477fff00
   1369c:	40328f5c 	.word	0x40328f5c

000136a0 <adc_get_r5v_vrego>:
float adc_get_r5v_vrego()
{
   136a0:	b510      	push	{r4, lr}
    emu_r5v_amux_config(1, EMU_R5VADCCTRL_AMUXSEL_VREGODIV6);
   136a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   136a6:	2001      	movs	r0, #1
   136a8:	f7fe f988 	bl	119bc <emu_r5v_amux_config>

    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
   136ac:	4b1e      	ldr	r3, [pc, #120]	; (13728 <adc_get_r5v_vrego+0x88>)
   136ae:	68da      	ldr	r2, [r3, #12]
   136b0:	f412 5f98 	tst.w	r2, #4864	; 0x1300
   136b4:	d1fb      	bne.n	136ae <adc_get_r5v_vrego+0xe>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_256CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_R5VOUT | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
   136b6:	4a1d      	ldr	r2, [pc, #116]	; (1372c <adc_get_r5v_vrego+0x8c>)
   136b8:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
   136ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   136be:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
   136c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   136c2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   136c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   136ca:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
   136cc:	4a18      	ldr	r2, [pc, #96]	; (13730 <adc_get_r5v_vrego+0x90>)
   136ce:	6e52      	ldr	r2, [r2, #100]	; 0x64
   136d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   136d2:	f3c2 420e 	ubfx	r2, r2, #16, #15
   136d6:	430a      	orrs	r2, r1
   136d8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   136da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   136dc:	4915      	ldr	r1, [pc, #84]	; (13734 <adc_get_r5v_vrego+0x94>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   136de:	f022 020f 	bic.w	r2, r2, #15
   136e2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
   136e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   136e6:	f022 020f 	bic.w	r2, r2, #15
   136ea:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
   136ec:	689a      	ldr	r2, [r3, #8]
   136ee:	f042 0201 	orr.w	r2, r2, #1
   136f2:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
   136f4:	4b0c      	ldr	r3, [pc, #48]	; (13728 <adc_get_r5v_vrego+0x88>)
   136f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   136f8:	07d2      	lsls	r2, r2, #31
   136fa:	d5fc      	bpl.n	136f6 <adc_get_r5v_vrego+0x56>

    float fVREGO = ADC0->SINGLEDATA * 5000.f / 65535.f;
   136fc:	6c9c      	ldr	r4, [r3, #72]	; 0x48

    emu_r5v_amux_config(0, 0);
   136fe:	2100      	movs	r1, #0
   13700:	4608      	mov	r0, r1
   13702:	f7fe f95b 	bl	119bc <emu_r5v_amux_config>
    float fVREGO = ADC0->SINGLEDATA * 5000.f / 65535.f;
   13706:	ee07 4a90 	vmov	s15, r4
   1370a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 13738 <adc_get_r5v_vrego+0x98>
   1370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   13712:	ee67 7a87 	vmul.f32	s15, s15, s14
   13716:	ed9f 7a09 	vldr	s14, [pc, #36]	; 1373c <adc_get_r5v_vrego+0x9c>
   1371a:	ee87 0a87 	vdiv.f32	s0, s15, s14

    return fVREGO * 6.f;
}
   1371e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   13722:	ee20 0a27 	vmul.f32	s0, s0, s15
   13726:	bd10      	pop	{r4, pc}
   13728:	40082000 	.word	0x40082000
   1372c:	09fff578 	.word	0x09fff578
   13730:	0fe081b0 	.word	0x0fe081b0
   13734:	40082400 	.word	0x40082400
   13738:	459c4000 	.word	0x459c4000
   1373c:	477fff00 	.word	0x477fff00

00013740 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, char* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
   13740:	429a      	cmp	r2, r3
    buffer[idx] = character;
   13742:	bf38      	it	cc
   13744:	5488      	strbcc	r0, [r1, r2]
  }
}
   13746:	4770      	bx	lr

00013748 <_out_null>:

// internal null output
static inline void _out_null(char character, char* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
   13748:	4770      	bx	lr

0001374a <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   1374a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1374e:	4617      	mov	r7, r2
   13750:	e9dd 5211 	ldrd	r5, r2, [sp, #68]	; 0x44
  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13754:	f012 0b02 	ands.w	fp, r2, #2
{
   13758:	4680      	mov	r8, r0
   1375a:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	; 0x30
   1375e:	e9dd c00f 	ldrd	ip, r0, [sp, #60]	; 0x3c
   13762:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    buf[len++] = '0';
   13766:	f04f 0e30 	mov.w	lr, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1376a:	d04e      	beq.n	1380a <_ntoa_format+0xc0>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1376c:	f002 0e03 	and.w	lr, r2, #3
   13770:	f1be 0f01 	cmp.w	lr, #1
    buf[len++] = '0';
   13774:	f04f 0a30 	mov.w	sl, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13778:	d04f      	beq.n	1381a <_ntoa_format+0xd0>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
   1377a:	f012 0f10 	tst.w	r2, #16
   1377e:	d01f      	beq.n	137c0 <_ntoa_format+0x76>
    if (((len == prec) || (len == width)) && (len > 0U)) {
   13780:	42a0      	cmp	r0, r4
   13782:	d001      	beq.n	13788 <_ntoa_format+0x3e>
   13784:	42a5      	cmp	r5, r4
   13786:	d14d      	bne.n	13824 <_ntoa_format+0xda>
   13788:	2c00      	cmp	r4, #0
   1378a:	f000 8095 	beq.w	138b8 <_ntoa_format+0x16e>
      len--;
      if ((base == 16U) && (len > 0U)) {
   1378e:	f1bc 0f10 	cmp.w	ip, #16
      len--;
   13792:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
      if ((base == 16U) && (len > 0U)) {
   13796:	d10f      	bne.n	137b8 <_ntoa_format+0x6e>
   13798:	2800      	cmp	r0, #0
   1379a:	d049      	beq.n	13830 <_ntoa_format+0xe6>
        len--;
   1379c:	3c02      	subs	r4, #2
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1379e:	0690      	lsls	r0, r2, #26
   137a0:	f100 808f 	bmi.w	138c2 <_ntoa_format+0x178>
   137a4:	2c1f      	cmp	r4, #31
   137a6:	f200 8082 	bhi.w	138ae <_ntoa_format+0x164>
      buf[len++] = 'x';
   137aa:	1c60      	adds	r0, r4, #1
   137ac:	f04f 0c78 	mov.w	ip, #120	; 0x78
    }
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   137b0:	281f      	cmp	r0, #31
      buf[len++] = 'X';
   137b2:	f806 c004 	strb.w	ip, [r6, r4]
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   137b6:	d87b      	bhi.n	138b0 <_ntoa_format+0x166>
   137b8:	4604      	mov	r4, r0
      buf[len++] = '0';
   137ba:	2030      	movs	r0, #48	; 0x30
   137bc:	5530      	strb	r0, [r6, r4]
   137be:	3401      	adds	r4, #1
    }
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   137c0:	42ac      	cmp	r4, r5
   137c2:	d106      	bne.n	137d2 <_ntoa_format+0x88>
   137c4:	f1b9 0f00 	cmp.w	r9, #0
   137c8:	d102      	bne.n	137d0 <_ntoa_format+0x86>
   137ca:	f012 0f0c 	tst.w	r2, #12
   137ce:	d067      	beq.n	138a0 <_ntoa_format+0x156>
    len--;
   137d0:	1e6c      	subs	r4, r5, #1
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   137d2:	2c1f      	cmp	r4, #31
   137d4:	d805      	bhi.n	137e2 <_ntoa_format+0x98>
    if (negative) {
   137d6:	f1b9 0f00 	cmp.w	r9, #0
   137da:	d064      	beq.n	138a6 <_ntoa_format+0x15c>
      buf[len++] = '-';
   137dc:	222d      	movs	r2, #45	; 0x2d
    }
    else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
   137de:	5532      	strb	r2, [r6, r4]
   137e0:	3401      	adds	r4, #1
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   137e2:	f1be 0f00 	cmp.w	lr, #0
   137e6:	d03b      	beq.n	13860 <_ntoa_format+0x116>
   137e8:	4426      	add	r6, r4
   137ea:	f04f 0a00 	mov.w	sl, #0
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
   137ee:	4554      	cmp	r4, sl
   137f0:	eb0a 0907 	add.w	r9, sl, r7
   137f4:	d138      	bne.n	13868 <_ntoa_format+0x11e>
   137f6:	4648      	mov	r0, r9
    out(buf[len - i - 1U], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
   137f8:	f1bb 0f00 	cmp.w	fp, #0
   137fc:	d14e      	bne.n	1389c <_ntoa_format+0x152>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
   137fe:	b003      	add	sp, #12
   13800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    buf[len++] = '0';
   13804:	f806 e004 	strb.w	lr, [r6, r4]
   13808:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1380a:	42a0      	cmp	r0, r4
   1380c:	d9ae      	bls.n	1376c <_ntoa_format+0x22>
   1380e:	2c20      	cmp	r4, #32
   13810:	d1f8      	bne.n	13804 <_ntoa_format+0xba>
   13812:	e7ab      	b.n	1376c <_ntoa_format+0x22>
    buf[len++] = '0';
   13814:	f806 a004 	strb.w	sl, [r6, r4]
   13818:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1381a:	42a5      	cmp	r5, r4
   1381c:	d9ad      	bls.n	1377a <_ntoa_format+0x30>
   1381e:	2c20      	cmp	r4, #32
   13820:	d1f8      	bne.n	13814 <_ntoa_format+0xca>
   13822:	e7aa      	b.n	1377a <_ntoa_format+0x30>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13824:	f1bc 0f10 	cmp.w	ip, #16
   13828:	d0b9      	beq.n	1379e <_ntoa_format+0x54>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
   1382a:	2c1f      	cmp	r4, #31
   1382c:	d8d9      	bhi.n	137e2 <_ntoa_format+0x98>
   1382e:	e7c4      	b.n	137ba <_ntoa_format+0x70>
   13830:	4604      	mov	r4, r0
   13832:	e7b4      	b.n	1379e <_ntoa_format+0x54>
    else if (flags & FLAGS_SPACE) {
   13834:	0712      	lsls	r2, r2, #28
   13836:	d5d4      	bpl.n	137e2 <_ntoa_format+0x98>
      buf[len++] = ' ';
   13838:	2220      	movs	r2, #32
   1383a:	e7d0      	b.n	137de <_ntoa_format+0x94>
      out(' ', buffer, idx++, maxlen);
   1383c:	2020      	movs	r0, #32
   1383e:	e9cd 1300 	strd	r1, r3, [sp]
   13842:	47c0      	blx	r8
    for (size_t i = len; i < width; i++) {
   13844:	e9dd 1300 	ldrd	r1, r3, [sp]
   13848:	f109 0901 	add.w	r9, r9, #1
   1384c:	45a9      	cmp	r9, r5
   1384e:	eb0a 0209 	add.w	r2, sl, r9
   13852:	d3f3      	bcc.n	1383c <_ntoa_format+0xf2>
   13854:	1b2a      	subs	r2, r5, r4
   13856:	42ac      	cmp	r4, r5
   13858:	bf88      	it	hi
   1385a:	2200      	movhi	r2, #0
   1385c:	4417      	add	r7, r2
   1385e:	e7c3      	b.n	137e8 <_ntoa_format+0x9e>
   13860:	46a1      	mov	r9, r4
   13862:	eba7 0a04 	sub.w	sl, r7, r4
   13866:	e7f1      	b.n	1384c <_ntoa_format+0x102>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13868:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
   1386c:	9301      	str	r3, [sp, #4]
   1386e:	464a      	mov	r2, r9
   13870:	9100      	str	r1, [sp, #0]
  for (size_t i = 0U; i < len; i++) {
   13872:	f10a 0a01 	add.w	sl, sl, #1
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13876:	47c0      	blx	r8
  for (size_t i = 0U; i < len; i++) {
   13878:	e9dd 1300 	ldrd	r1, r3, [sp]
   1387c:	e7b7      	b.n	137ee <_ntoa_format+0xa4>
      out(' ', buffer, idx++, maxlen);
   1387e:	2020      	movs	r0, #32
   13880:	e9cd 1300 	strd	r1, r3, [sp]
   13884:	1c54      	adds	r4, r2, #1
   13886:	47c0      	blx	r8
   13888:	e9dd 1300 	ldrd	r1, r3, [sp]
   1388c:	4622      	mov	r2, r4
    while (idx < width) {
   1388e:	42aa      	cmp	r2, r5
   13890:	d3f5      	bcc.n	1387e <_ntoa_format+0x134>
   13892:	454d      	cmp	r5, r9
   13894:	4628      	mov	r0, r5
   13896:	bf38      	it	cc
   13898:	4648      	movcc	r0, r9
  return idx;
   1389a:	e7b0      	b.n	137fe <_ntoa_format+0xb4>
   1389c:	464a      	mov	r2, r9
   1389e:	e7f6      	b.n	1388e <_ntoa_format+0x144>
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
   138a0:	2d1f      	cmp	r5, #31
   138a2:	462c      	mov	r4, r5
   138a4:	d89d      	bhi.n	137e2 <_ntoa_format+0x98>
    else if (flags & FLAGS_PLUS) {
   138a6:	0750      	lsls	r0, r2, #29
   138a8:	d5c4      	bpl.n	13834 <_ntoa_format+0xea>
      buf[len++] = '+';  // ignore the space if the '+' exists
   138aa:	222b      	movs	r2, #43	; 0x2b
   138ac:	e797      	b.n	137de <_ntoa_format+0x94>
   138ae:	4620      	mov	r0, r4
   138b0:	4604      	mov	r4, r0
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   138b2:	42ac      	cmp	r4, r5
   138b4:	d086      	beq.n	137c4 <_ntoa_format+0x7a>
   138b6:	e794      	b.n	137e2 <_ntoa_format+0x98>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   138b8:	f1bc 0f10 	cmp.w	ip, #16
   138bc:	f47f af7d 	bne.w	137ba <_ntoa_format+0x70>
   138c0:	e76d      	b.n	1379e <_ntoa_format+0x54>
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   138c2:	2c1f      	cmp	r4, #31
   138c4:	d8f5      	bhi.n	138b2 <_ntoa_format+0x168>
      buf[len++] = 'X';
   138c6:	1c60      	adds	r0, r4, #1
   138c8:	f04f 0c58 	mov.w	ip, #88	; 0x58
   138cc:	e770      	b.n	137b0 <_ntoa_format+0x66>

000138ce <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   138ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   138d2:	b091      	sub	sp, #68	; 0x44
   138d4:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
   138d8:	9d18      	ldr	r5, [sp, #96]	; 0x60
   138da:	9e1a      	ldr	r6, [sp, #104]	; 0x68
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   138dc:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   138e0:	d000      	beq.n	138e4 <_ntoa_long+0x16>
   138e2:	b30d      	cbz	r5, 13928 <_ntoa_long+0x5a>
   138e4:	f01c 0f20 	tst.w	ip, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   138e8:	462f      	mov	r7, r5
   138ea:	f10d 0e20 	add.w	lr, sp, #32
   138ee:	f04f 0500 	mov.w	r5, #0
   138f2:	bf14      	ite	ne
   138f4:	f04f 0837 	movne.w	r8, #55	; 0x37
   138f8:	f04f 0857 	moveq.w	r8, #87	; 0x57
      const char digit = (char)(value % base);
   138fc:	fbb7 f9f6 	udiv	r9, r7, r6
   13900:	fb06 7919 	mls	r9, r6, r9, r7
   13904:	fa5f f489 	uxtb.w	r4, r9
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   13908:	f1b9 0f09 	cmp.w	r9, #9
   1390c:	bf94      	ite	ls
   1390e:	3430      	addls	r4, #48	; 0x30
   13910:	4444      	addhi	r4, r8
   13912:	b2e4      	uxtb	r4, r4
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13914:	42b7      	cmp	r7, r6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   13916:	f80e 4b01 	strb.w	r4, [lr], #1
      value /= base;
   1391a:	fbb7 f4f6 	udiv	r4, r7, r6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1391e:	f105 0501 	add.w	r5, r5, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13922:	d301      	bcc.n	13928 <_ntoa_long+0x5a>
   13924:	2d20      	cmp	r5, #32
   13926:	d111      	bne.n	1394c <_ntoa_long+0x7e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   13928:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   1392a:	9405      	str	r4, [sp, #20]
   1392c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1392e:	f8cd c018 	str.w	ip, [sp, #24]
   13932:	e9cd 6403 	strd	r6, r4, [sp, #12]
   13936:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
   1393a:	e9cd 5401 	strd	r5, r4, [sp, #4]
   1393e:	ac08      	add	r4, sp, #32
   13940:	9400      	str	r4, [sp, #0]
   13942:	f7ff ff02 	bl	1374a <_ntoa_format>
}
   13946:	b011      	add	sp, #68	; 0x44
   13948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      value /= base;
   1394c:	4627      	mov	r7, r4
   1394e:	e7d5      	b.n	138fc <_ntoa_long+0x2e>

00013950 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13954:	ed2d 8b02 	vpush	{d8}
   13958:	b091      	sub	sp, #68	; 0x44
   1395a:	ee08 3a10 	vmov	s16, r3
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
   1395e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13960:	055b      	lsls	r3, r3, #21
{
   13962:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
   13966:	4605      	mov	r5, r0
   13968:	460e      	mov	r6, r1
   1396a:	4617      	mov	r7, r2
  if (!(flags & FLAGS_PRECISION) || value) {
   1396c:	d502      	bpl.n	13974 <_ntoa_long_long+0x24>
   1396e:	ea58 0309 	orrs.w	r3, r8, r9
   13972:	d040      	beq.n	139f6 <_ntoa_long_long+0xa6>
   13974:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13976:	f013 0f20 	tst.w	r3, #32
   1397a:	f10d 0a20 	add.w	sl, sp, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1397e:	f04f 0400 	mov.w	r4, #0
   13982:	bf14      	ite	ne
   13984:	f04f 0b37 	movne.w	fp, #55	; 0x37
   13988:	f04f 0b57 	moveq.w	fp, #87	; 0x57
      const char digit = (char)(value % base);
   1398c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   13990:	4640      	mov	r0, r8
   13992:	4649      	mov	r1, r9
   13994:	f7ed f990 	bl	cb8 <__aeabi_uldivmod>
   13998:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1399a:	2a09      	cmp	r2, #9
   1399c:	bf94      	ite	ls
   1399e:	3230      	addls	r2, #48	; 0x30
   139a0:	445a      	addhi	r2, fp
   139a2:	b2d2      	uxtb	r2, r2
   139a4:	f80a 2b01 	strb.w	r2, [sl], #1
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   139a8:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   139ac:	4599      	cmp	r9, r3
   139ae:	bf08      	it	eq
   139b0:	4590      	cmpeq	r8, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   139b2:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
   139b6:	d301      	bcc.n	139bc <_ntoa_long_long+0x6c>
   139b8:	2c20      	cmp	r4, #32
   139ba:	d119      	bne.n	139f0 <_ntoa_long_long+0xa0>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   139bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   139be:	9306      	str	r3, [sp, #24]
   139c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   139c2:	9305      	str	r3, [sp, #20]
   139c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   139c6:	9304      	str	r3, [sp, #16]
   139c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   139ca:	9303      	str	r3, [sp, #12]
   139cc:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
   139d0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   139d4:	ab08      	add	r3, sp, #32
   139d6:	9300      	str	r3, [sp, #0]
   139d8:	463a      	mov	r2, r7
   139da:	ee18 3a10 	vmov	r3, s16
   139de:	4631      	mov	r1, r6
   139e0:	4628      	mov	r0, r5
   139e2:	f7ff feb2 	bl	1374a <_ntoa_format>
}
   139e6:	b011      	add	sp, #68	; 0x44
   139e8:	ecbd 8b02 	vpop	{d8}
   139ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      value /= base;
   139f0:	4680      	mov	r8, r0
   139f2:	4689      	mov	r9, r1
   139f4:	e7ca      	b.n	1398c <_ntoa_long_long+0x3c>
  size_t len = 0U;
   139f6:	2400      	movs	r4, #0
   139f8:	e7e0      	b.n	139bc <_ntoa_long_long+0x6c>

000139fa <_out_char>:
  if (character) {
   139fa:	b108      	cbz	r0, 13a00 <_out_char+0x6>
    _putchar(character);
   139fc:	f7fe b97c 	b.w	11cf8 <_putchar>
}
   13a00:	4770      	bx	lr
   13a02:	0000      	movs	r0, r0
   13a04:	0000      	movs	r0, r0
	...

00013a08 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
   13a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a0c:	ed2d 8b06 	vpush	{d8-d10}
   13a10:	b09b      	sub	sp, #108	; 0x6c
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
   13a12:	f1b1 0a00 	subs.w	sl, r1, #0
{
   13a16:	930b      	str	r3, [sp, #44]	; 0x2c
   13a18:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
    out = _out_null;
   13a1c:	4bce      	ldr	r3, [pc, #824]	; (13d58 <_vsnprintf+0x350>)
   13a1e:	bf18      	it	ne
   13a20:	4603      	movne	r3, r0
{
   13a22:	4616      	mov	r6, r2
    out = _out_null;
   13a24:	930c      	str	r3, [sp, #48]	; 0x30
    return 0U;
   13a26:	2400      	movs	r4, #0
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
        format++;
        break;
   13a28:	e1d1      	b.n	13dce <_vsnprintf+0x3c6>
    if (*format != '%') {
   13a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13a2c:	2825      	cmp	r0, #37	; 0x25
   13a2e:	f103 0301 	add.w	r3, r3, #1
   13a32:	930b      	str	r3, [sp, #44]	; 0x2c
   13a34:	d007      	beq.n	13a46 <_vsnprintf+0x3e>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
   13a36:	1c65      	adds	r5, r4, #1
   13a38:	4622      	mov	r2, r4
   13a3a:	4633      	mov	r3, r6
   13a3c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   13a3e:	4651      	mov	r1, sl
   13a40:	47a0      	blx	r4
   13a42:	462c      	mov	r4, r5
        format++;
        break;
   13a44:	e1c3      	b.n	13dce <_vsnprintf+0x3c6>
    flags = 0U;
   13a46:	2500      	movs	r5, #0
   13a48:	e006      	b.n	13a58 <_vsnprintf+0x50>
      switch (*format) {
   13a4a:	2b2d      	cmp	r3, #45	; 0x2d
   13a4c:	d016      	beq.n	13a7c <_vsnprintf+0x74>
   13a4e:	2b30      	cmp	r3, #48	; 0x30
   13a50:	d10c      	bne.n	13a6c <_vsnprintf+0x64>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
   13a52:	f045 0501 	orr.w	r5, r5, #1
{
   13a56:	920b      	str	r2, [sp, #44]	; 0x2c
      switch (*format) {
   13a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13a5a:	f812 3b01 	ldrb.w	r3, [r2], #1
   13a5e:	2b2b      	cmp	r3, #43	; 0x2b
   13a60:	d00f      	beq.n	13a82 <_vsnprintf+0x7a>
   13a62:	d8f2      	bhi.n	13a4a <_vsnprintf+0x42>
   13a64:	2b20      	cmp	r3, #32
   13a66:	d00f      	beq.n	13a88 <_vsnprintf+0x80>
   13a68:	2b23      	cmp	r3, #35	; 0x23
   13a6a:	d010      	beq.n	13a8e <_vsnprintf+0x86>
    if (_is_digit(*format)) {
   13a6c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   13a70:	2909      	cmp	r1, #9
   13a72:	d830      	bhi.n	13ad6 <_vsnprintf+0xce>
  unsigned int i = 0U;
   13a74:	f04f 0b00 	mov.w	fp, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   13a78:	200a      	movs	r0, #10
   13a7a:	e010      	b.n	13a9e <_vsnprintf+0x96>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
   13a7c:	f045 0502 	orr.w	r5, r5, #2
    } while (n);
   13a80:	e7e9      	b.n	13a56 <_vsnprintf+0x4e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
   13a82:	f045 0504 	orr.w	r5, r5, #4
    } while (n);
   13a86:	e7e6      	b.n	13a56 <_vsnprintf+0x4e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
   13a88:	f045 0508 	orr.w	r5, r5, #8
    } while (n);
   13a8c:	e7e3      	b.n	13a56 <_vsnprintf+0x4e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
   13a8e:	f045 0510 	orr.w	r5, r5, #16
    } while (n);
   13a92:	e7e0      	b.n	13a56 <_vsnprintf+0x4e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   13a94:	fb00 330b 	mla	r3, r0, fp, r3
   13a98:	f1a3 0b30 	sub.w	fp, r3, #48	; 0x30
   13a9c:	920b      	str	r2, [sp, #44]	; 0x2c
  while (_is_digit(**str)) {
   13a9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13aa0:	f812 3b01 	ldrb.w	r3, [r2], #1
   13aa4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   13aa8:	2909      	cmp	r1, #9
   13aaa:	d9f3      	bls.n	13a94 <_vsnprintf+0x8c>
    if (*format == '.') {
   13aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13aae:	781b      	ldrb	r3, [r3, #0]
   13ab0:	2b2e      	cmp	r3, #46	; 0x2e
   13ab2:	f040 80e3 	bne.w	13c7c <_vsnprintf+0x274>
      if (_is_digit(*format)) {
   13ab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13aba:	7852      	ldrb	r2, [r2, #1]
   13abc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   13ac0:	2909      	cmp	r1, #9
   13ac2:	f103 0301 	add.w	r3, r3, #1
      flags |= FLAGS_PRECISION;
   13ac6:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      if (_is_digit(*format)) {
   13aca:	f200 80cc 	bhi.w	13c66 <_vsnprintf+0x25e>
  unsigned int i = 0U;
   13ace:	2700      	movs	r7, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   13ad0:	f04f 0c0a 	mov.w	ip, #10
   13ad4:	e015      	b.n	13b02 <_vsnprintf+0xfa>
    else if (*format == '*') {
   13ad6:	2b2a      	cmp	r3, #42	; 0x2a
   13ad8:	d10c      	bne.n	13af4 <_vsnprintf+0xec>
      const int w = va_arg(va, int);
   13ada:	464b      	mov	r3, r9
   13adc:	920b      	str	r2, [sp, #44]	; 0x2c
   13ade:	f853 bb04 	ldr.w	fp, [r3], #4
      if (w < 0) {
   13ae2:	f1bb 0f00 	cmp.w	fp, #0
        flags |= FLAGS_LEFT;    // reverse padding
   13ae6:	bfbc      	itt	lt
   13ae8:	f045 0502 	orrlt.w	r5, r5, #2
        width = (unsigned int)-w;
   13aec:	f1cb 0b00 	rsblt	fp, fp, #0
      const int w = va_arg(va, int);
   13af0:	4699      	mov	r9, r3
   13af2:	e7db      	b.n	13aac <_vsnprintf+0xa4>
    width = 0U;
   13af4:	f04f 0b00 	mov.w	fp, #0
   13af8:	e7d8      	b.n	13aac <_vsnprintf+0xa4>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
   13afa:	fb0c 2707 	mla	r7, ip, r7, r2
   13afe:	3f30      	subs	r7, #48	; 0x30
   13b00:	460b      	mov	r3, r1
  while (_is_digit(**str)) {
   13b02:	4619      	mov	r1, r3
   13b04:	f811 2b01 	ldrb.w	r2, [r1], #1
   13b08:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
   13b0c:	2809      	cmp	r0, #9
   13b0e:	d9f4      	bls.n	13afa <_vsnprintf+0xf2>
   13b10:	930b      	str	r3, [sp, #44]	; 0x2c
    switch (*format) {
   13b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13b14:	f813 2b01 	ldrb.w	r2, [r3], #1
   13b18:	2a6c      	cmp	r2, #108	; 0x6c
   13b1a:	f000 80b9 	beq.w	13c90 <_vsnprintf+0x288>
   13b1e:	f200 80af 	bhi.w	13c80 <_vsnprintf+0x278>
   13b22:	2a68      	cmp	r2, #104	; 0x68
   13b24:	f000 80bd 	beq.w	13ca2 <_vsnprintf+0x29a>
   13b28:	2a6a      	cmp	r2, #106	; 0x6a
   13b2a:	f000 80c4 	beq.w	13cb6 <_vsnprintf+0x2ae>
   13b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    switch (*format) {
   13b30:	f813 0b01 	ldrb.w	r0, [r3], #1
   13b34:	930b      	str	r3, [sp, #44]	; 0x2c
   13b36:	2878      	cmp	r0, #120	; 0x78
   13b38:	f63f af7d 	bhi.w	13a36 <_vsnprintf+0x2e>
   13b3c:	2857      	cmp	r0, #87	; 0x57
   13b3e:	f200 80bd 	bhi.w	13cbc <_vsnprintf+0x2b4>
   13b42:	2825      	cmp	r0, #37	; 0x25
   13b44:	f43f af77 	beq.w	13a36 <_vsnprintf+0x2e>
   13b48:	2846      	cmp	r0, #70	; 0x46
   13b4a:	f47f af74 	bne.w	13a36 <_vsnprintf+0x2e>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   13b4e:	f109 0307 	add.w	r3, r9, #7
   13b52:	f023 0907 	bic.w	r9, r3, #7
   13b56:	ecb9 7b02 	vldmia	r9!, {d7}
  if (value < 0) {
   13b5a:	2200      	movs	r2, #0
   13b5c:	ec51 0b17 	vmov	r0, r1, d7
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
   13b60:	eeb0 8a47 	vmov.f32	s16, s14
   13b64:	eef0 8a67 	vmov.f32	s17, s15
  if (value < 0) {
   13b68:	2300      	movs	r3, #0
   13b6a:	f7ec ff27 	bl	9bc <__aeabi_dcmplt>
   13b6e:	2800      	cmp	r0, #0
   13b70:	f000 8183 	beq.w	13e7a <_vsnprintf+0x472>
    value = 0 - value;
   13b74:	ec53 2b18 	vmov	r2, r3, d8
   13b78:	2000      	movs	r0, #0
   13b7a:	2100      	movs	r1, #0
   13b7c:	f7ec faf4 	bl	168 <__aeabi_dsub>
    negative = true;
   13b80:	2301      	movs	r3, #1
    value = 0 - value;
   13b82:	ec41 0b18 	vmov	d8, r0, r1
    negative = true;
   13b86:	930f      	str	r3, [sp, #60]	; 0x3c
  if (!(flags & FLAGS_PRECISION)) {
   13b88:	0568      	lsls	r0, r5, #21
   13b8a:	f140 8178 	bpl.w	13e7e <_vsnprintf+0x476>
  if (prec > 9U) {
   13b8e:	2f09      	cmp	r7, #9
   13b90:	bf28      	it	cs
   13b92:	2709      	movcs	r7, #9
   13b94:	970e      	str	r7, [sp, #56]	; 0x38
  int whole = (int)value;
   13b96:	ec51 0b18 	vmov	r0, r1, d8
   13b9a:	f7ec ff37 	bl	a0c <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
   13b9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13ba0:	4b6e      	ldr	r3, [pc, #440]	; (13d5c <_vsnprintf+0x354>)
  int whole = (int)value;
   13ba2:	900d      	str	r0, [sp, #52]	; 0x34
  double tmp = (value - whole) * pow10[prec];
   13ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   13ba8:	ed93 7b00 	vldr	d7, [r3]
   13bac:	eeb0 9a47 	vmov.f32	s18, s14
   13bb0:	eef0 9a67 	vmov.f32	s19, s15
   13bb4:	f7ec fc26 	bl	404 <__aeabi_i2d>
   13bb8:	4602      	mov	r2, r0
   13bba:	460b      	mov	r3, r1
   13bbc:	ec51 0b18 	vmov	r0, r1, d8
   13bc0:	f7ec fad2 	bl	168 <__aeabi_dsub>
   13bc4:	ec53 2b19 	vmov	r2, r3, d9
   13bc8:	f7ec fc86 	bl	4d8 <__aeabi_dmul>
   13bcc:	4602      	mov	r2, r0
   13bce:	460b      	mov	r3, r1
   13bd0:	ec43 2b1a 	vmov	d10, r2, r3
  unsigned long frac = (unsigned long)tmp;
   13bd4:	f7ec ff42 	bl	a5c <__aeabi_d2uiz>
   13bd8:	4607      	mov	r7, r0
  diff = tmp - frac;
   13bda:	f7ec fc03 	bl	3e4 <__aeabi_ui2d>
   13bde:	4602      	mov	r2, r0
   13be0:	460b      	mov	r3, r1
   13be2:	ec51 0b1a 	vmov	r0, r1, d10
   13be6:	f7ec fabf 	bl	168 <__aeabi_dsub>
   13bea:	4602      	mov	r2, r0
   13bec:	460b      	mov	r3, r1
   13bee:	ec43 2b1a 	vmov	d10, r2, r3
  if (diff > 0.5) {
   13bf2:	4b5b      	ldr	r3, [pc, #364]	; (13d60 <_vsnprintf+0x358>)
   13bf4:	2200      	movs	r2, #0
   13bf6:	f7ec feff 	bl	9f8 <__aeabi_dcmpgt>
   13bfa:	2800      	cmp	r0, #0
   13bfc:	f000 8142 	beq.w	13e84 <_vsnprintf+0x47c>
    ++frac;
   13c00:	3701      	adds	r7, #1
    if (frac >= pow10[prec]) {
   13c02:	4638      	mov	r0, r7
   13c04:	f7ec fbee 	bl	3e4 <__aeabi_ui2d>
   13c08:	4602      	mov	r2, r0
   13c0a:	460b      	mov	r3, r1
   13c0c:	ec51 0b19 	vmov	r0, r1, d9
   13c10:	f7ec fede 	bl	9d0 <__aeabi_dcmple>
   13c14:	b118      	cbz	r0, 13c1e <_vsnprintf+0x216>
      ++whole;
   13c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13c18:	3301      	adds	r3, #1
   13c1a:	930d      	str	r3, [sp, #52]	; 0x34
      frac = 0;
   13c1c:	2700      	movs	r7, #0
  if (value > thres_max) {
   13c1e:	a34c      	add	r3, pc, #304	; (adr r3, 13d50 <_vsnprintf+0x348>)
   13c20:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c24:	ec51 0b18 	vmov	r0, r1, d8
   13c28:	f7ec fee6 	bl	9f8 <__aeabi_dcmpgt>
   13c2c:	2800      	cmp	r0, #0
   13c2e:	f47f aefa 	bne.w	13a26 <_vsnprintf+0x1e>
  if (prec == 0U) {
   13c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13c34:	2b00      	cmp	r3, #0
   13c36:	f040 8145 	bne.w	13ec4 <_vsnprintf+0x4bc>
    diff = value - (double)whole;
   13c3a:	980d      	ldr	r0, [sp, #52]	; 0x34
   13c3c:	f7ec fbe2 	bl	404 <__aeabi_i2d>
   13c40:	4602      	mov	r2, r0
   13c42:	460b      	mov	r3, r1
   13c44:	ec51 0b18 	vmov	r0, r1, d8
   13c48:	f7ec fa8e 	bl	168 <__aeabi_dsub>
    if (diff > 0.5) {
   13c4c:	4b44      	ldr	r3, [pc, #272]	; (13d60 <_vsnprintf+0x358>)
   13c4e:	2200      	movs	r2, #0
    diff = value - (double)whole;
   13c50:	4607      	mov	r7, r0
   13c52:	4688      	mov	r8, r1
    if (diff > 0.5) {
   13c54:	f7ec fed0 	bl	9f8 <__aeabi_dcmpgt>
   13c58:	2800      	cmp	r0, #0
   13c5a:	f000 8122 	beq.w	13ea2 <_vsnprintf+0x49a>
      ++whole;
   13c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      ++whole;
   13c60:	3301      	adds	r3, #1
   13c62:	930d      	str	r3, [sp, #52]	; 0x34
   13c64:	e128      	b.n	13eb8 <_vsnprintf+0x4b0>
      else if (*format == '*') {
   13c66:	2a2a      	cmp	r2, #42	; 0x2a
   13c68:	d107      	bne.n	13c7a <_vsnprintf+0x272>
        precision = (unsigned int)va_arg(va, int);
   13c6a:	464b      	mov	r3, r9
        format++;
   13c6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        precision = (unsigned int)va_arg(va, int);
   13c6e:	f853 7b04 	ldr.w	r7, [r3], #4
        format++;
   13c72:	3202      	adds	r2, #2
   13c74:	920b      	str	r2, [sp, #44]	; 0x2c
        precision = (unsigned int)va_arg(va, int);
   13c76:	4699      	mov	r9, r3
   13c78:	e74b      	b.n	13b12 <_vsnprintf+0x10a>
      format++;
   13c7a:	930b      	str	r3, [sp, #44]	; 0x2c
    precision = 0U;
   13c7c:	2700      	movs	r7, #0
   13c7e:	e748      	b.n	13b12 <_vsnprintf+0x10a>
    switch (*format) {
   13c80:	2a74      	cmp	r2, #116	; 0x74
   13c82:	d002      	beq.n	13c8a <_vsnprintf+0x282>
   13c84:	2a7a      	cmp	r2, #122	; 0x7a
   13c86:	f47f af52 	bne.w	13b2e <_vsnprintf+0x126>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13c8a:	f445 7580 	orr.w	r5, r5, #256	; 0x100
        break;
   13c8e:	e74f      	b.n	13b30 <_vsnprintf+0x128>
        if (*format == 'l') {
   13c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13c92:	7852      	ldrb	r2, [r2, #1]
   13c94:	2a6c      	cmp	r2, #108	; 0x6c
   13c96:	d1f8      	bne.n	13c8a <_vsnprintf+0x282>
          flags |= FLAGS_LONG_LONG;
   13c98:	f445 7540 	orr.w	r5, r5, #768	; 0x300
          format++;
   13c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13c9e:	3302      	adds	r3, #2
   13ca0:	e746      	b.n	13b30 <_vsnprintf+0x128>
        if (*format == 'h') {
   13ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13ca4:	7852      	ldrb	r2, [r2, #1]
   13ca6:	2a68      	cmp	r2, #104	; 0x68
   13ca8:	d002      	beq.n	13cb0 <_vsnprintf+0x2a8>
        flags |= FLAGS_SHORT;
   13caa:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   13cae:	e73f      	b.n	13b30 <_vsnprintf+0x128>
          flags |= FLAGS_CHAR;
   13cb0:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
   13cb4:	e7f2      	b.n	13c9c <_vsnprintf+0x294>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   13cb6:	f445 7500 	orr.w	r5, r5, #512	; 0x200
        break;
   13cba:	e739      	b.n	13b30 <_vsnprintf+0x128>
   13cbc:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
   13cc0:	2b20      	cmp	r3, #32
   13cc2:	f63f aeb8 	bhi.w	13a36 <_vsnprintf+0x2e>
   13cc6:	a201      	add	r2, pc, #4	; (adr r2, 13ccc <_vsnprintf+0x2c4>)
   13cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13ccc:	00013d65 	.word	0x00013d65
   13cd0:	00013a37 	.word	0x00013a37
   13cd4:	00013a37 	.word	0x00013a37
   13cd8:	00013a37 	.word	0x00013a37
   13cdc:	00013a37 	.word	0x00013a37
   13ce0:	00013a37 	.word	0x00013a37
   13ce4:	00013a37 	.word	0x00013a37
   13ce8:	00013a37 	.word	0x00013a37
   13cec:	00013a37 	.word	0x00013a37
   13cf0:	00013a37 	.word	0x00013a37
   13cf4:	00013d65 	.word	0x00013d65
   13cf8:	0001402f 	.word	0x0001402f
   13cfc:	00013d65 	.word	0x00013d65
   13d00:	00013a37 	.word	0x00013a37
   13d04:	00013b4f 	.word	0x00013b4f
   13d08:	00013a37 	.word	0x00013a37
   13d0c:	00013a37 	.word	0x00013a37
   13d10:	00013d65 	.word	0x00013d65
   13d14:	00013a37 	.word	0x00013a37
   13d18:	00013a37 	.word	0x00013a37
   13d1c:	00013a37 	.word	0x00013a37
   13d20:	00013a37 	.word	0x00013a37
   13d24:	00013a37 	.word	0x00013a37
   13d28:	00013d65 	.word	0x00013d65
   13d2c:	00014171 	.word	0x00014171
   13d30:	00013a37 	.word	0x00013a37
   13d34:	00013a37 	.word	0x00013a37
   13d38:	000140ab 	.word	0x000140ab
   13d3c:	00013a37 	.word	0x00013a37
   13d40:	00013d65 	.word	0x00013d65
   13d44:	00013a37 	.word	0x00013a37
   13d48:	00013a37 	.word	0x00013a37
   13d4c:	00013d65 	.word	0x00013d65
   13d50:	ffc00000 	.word	0xffc00000
   13d54:	41dfffff 	.word	0x41dfffff
   13d58:	00013749 	.word	0x00013749
   13d5c:	0001de98 	.word	0x0001de98
   13d60:	3fe00000 	.word	0x3fe00000
        if (*format == 'x' || *format == 'X') {
   13d64:	2878      	cmp	r0, #120	; 0x78
   13d66:	f000 8242 	beq.w	141ee <_vsnprintf+0x7e6>
   13d6a:	2858      	cmp	r0, #88	; 0x58
   13d6c:	f000 823d 	beq.w	141ea <_vsnprintf+0x7e2>
        else if (*format == 'o') {
   13d70:	286f      	cmp	r0, #111	; 0x6f
   13d72:	f000 823e 	beq.w	141f2 <_vsnprintf+0x7ea>
        else if (*format == 'b') {
   13d76:	2862      	cmp	r0, #98	; 0x62
   13d78:	f025 0510 	bic.w	r5, r5, #16
   13d7c:	f040 8218 	bne.w	141b0 <_vsnprintf+0x7a8>
          base =  2U;
   13d80:	2302      	movs	r3, #2
        if ((*format != 'i') && (*format != 'd')) {
   13d82:	e21e      	b.n	141c2 <_vsnprintf+0x7ba>
          if (flags & FLAGS_LONG_LONG) {
   13d84:	05ab      	lsls	r3, r5, #22
   13d86:	d537      	bpl.n	13df8 <_vsnprintf+0x3f0>
            const long long value = va_arg(va, long long);
   13d88:	f109 0307 	add.w	r3, r9, #7
   13d8c:	f023 0307 	bic.w	r3, r3, #7
   13d90:	4698      	mov	r8, r3
   13d92:	6859      	ldr	r1, [r3, #4]
   13d94:	f858 0b08 	ldr.w	r0, [r8], #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13d98:	9204      	str	r2, [sp, #16]
   13d9a:	2300      	movs	r3, #0
   13d9c:	9305      	str	r3, [sp, #20]
   13d9e:	0fcb      	lsrs	r3, r1, #31
   13da0:	9302      	str	r3, [sp, #8]
   13da2:	2800      	cmp	r0, #0
   13da4:	460b      	mov	r3, r1
   13da6:	f173 0100 	sbcs.w	r1, r3, #0
   13daa:	e9cd b507 	strd	fp, r5, [sp, #28]
   13dae:	9706      	str	r7, [sp, #24]
   13db0:	4602      	mov	r2, r0
   13db2:	da02      	bge.n	13dba <_vsnprintf+0x3b2>
   13db4:	4242      	negs	r2, r0
   13db6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   13dba:	e9cd 2300 	strd	r2, r3, [sp]
   13dbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   13dc0:	4633      	mov	r3, r6
   13dc2:	4622      	mov	r2, r4
   13dc4:	4651      	mov	r1, sl
   13dc6:	f7ff fdc3 	bl	13950 <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   13dca:	4604      	mov	r4, r0
        break;
   13dcc:	46c1      	mov	r9, r8
  while (*format)
   13dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13dd0:	7818      	ldrb	r0, [r3, #0]
   13dd2:	2800      	cmp	r0, #0
   13dd4:	f47f ae29 	bne.w	13a2a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   13dd8:	42b4      	cmp	r4, r6
   13dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   13ddc:	bf2c      	ite	cs
   13dde:	f106 32ff 	addcs.w	r2, r6, #4294967295	; 0xffffffff
   13de2:	4622      	movcc	r2, r4
   13de4:	4633      	mov	r3, r6
   13de6:	4651      	mov	r1, sl
   13de8:	2000      	movs	r0, #0
   13dea:	47a8      	blx	r5

  // return written chars without terminating \0
  return (int)idx;
}
   13dec:	4620      	mov	r0, r4
   13dee:	b01b      	add	sp, #108	; 0x6c
   13df0:	ecbd 8b06 	vpop	{d8-d10}
   13df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          else if (flags & FLAGS_LONG) {
   13df8:	05e8      	lsls	r0, r5, #23
   13dfa:	f109 0804 	add.w	r8, r9, #4
   13dfe:	d513      	bpl.n	13e28 <_vsnprintf+0x420>
            const long value = va_arg(va, long);
   13e00:	f8d9 3000 	ldr.w	r3, [r9]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
   13e04:	e9cd b504 	strd	fp, r5, [sp, #16]
   13e08:	e9cd 2702 	strd	r2, r7, [sp, #8]
   13e0c:	2b00      	cmp	r3, #0
   13e0e:	ea4f 72d3 	mov.w	r2, r3, lsr #31
   13e12:	9201      	str	r2, [sp, #4]
   13e14:	bfb8      	it	lt
   13e16:	425b      	neglt	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   13e18:	9300      	str	r3, [sp, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   13e1a:	980c      	ldr	r0, [sp, #48]	; 0x30
   13e1c:	4633      	mov	r3, r6
   13e1e:	4622      	mov	r2, r4
   13e20:	4651      	mov	r1, sl
   13e22:	f7ff fd54 	bl	138ce <_ntoa_long>
   13e26:	e7d0      	b.n	13dca <_vsnprintf+0x3c2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
   13e28:	f015 0f40 	tst.w	r5, #64	; 0x40
   13e2c:	f8d9 3000 	ldr.w	r3, [r9]
   13e30:	d001      	beq.n	13e36 <_vsnprintf+0x42e>
   13e32:	b2db      	uxtb	r3, r3
   13e34:	e7e6      	b.n	13e04 <_vsnprintf+0x3fc>
   13e36:	0629      	lsls	r1, r5, #24
   13e38:	bf48      	it	mi
   13e3a:	b21b      	sxthmi	r3, r3
   13e3c:	e7e2      	b.n	13e04 <_vsnprintf+0x3fc>
          else if (flags & FLAGS_LONG) {
   13e3e:	05e8      	lsls	r0, r5, #23
   13e40:	f109 0804 	add.w	r8, r9, #4
   13e44:	d507      	bpl.n	13e56 <_vsnprintf+0x44e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   13e46:	e9cd b104 	strd	fp, r1, [sp, #16]
   13e4a:	e9cd 3702 	strd	r3, r7, [sp, #8]
   13e4e:	9201      	str	r2, [sp, #4]
   13e50:	f8d9 3000 	ldr.w	r3, [r9]
   13e54:	e7e0      	b.n	13e18 <_vsnprintf+0x410>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   13e56:	f015 0f40 	tst.w	r5, #64	; 0x40
   13e5a:	f8d9 2000 	ldr.w	r2, [r9]
   13e5e:	d008      	beq.n	13e72 <_vsnprintf+0x46a>
   13e60:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   13e62:	e9cd 3702 	strd	r3, r7, [sp, #8]
   13e66:	2300      	movs	r3, #0
   13e68:	e9cd b104 	strd	fp, r1, [sp, #16]
   13e6c:	e9cd 2300 	strd	r2, r3, [sp]
   13e70:	e7d3      	b.n	13e1a <_vsnprintf+0x412>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   13e72:	062d      	lsls	r5, r5, #24
   13e74:	bf48      	it	mi
   13e76:	b292      	uxthmi	r2, r2
   13e78:	e7f3      	b.n	13e62 <_vsnprintf+0x45a>
  bool negative = false;
   13e7a:	900f      	str	r0, [sp, #60]	; 0x3c
   13e7c:	e684      	b.n	13b88 <_vsnprintf+0x180>
    prec = 6U;  // by default, precesion is 6
   13e7e:	2306      	movs	r3, #6
   13e80:	930e      	str	r3, [sp, #56]	; 0x38
   13e82:	e688      	b.n	13b96 <_vsnprintf+0x18e>
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
   13e84:	4baf      	ldr	r3, [pc, #700]	; (14144 <_vsnprintf+0x73c>)
   13e86:	ec51 0b1a 	vmov	r0, r1, d10
   13e8a:	2200      	movs	r2, #0
   13e8c:	f7ec fd8c 	bl	9a8 <__aeabi_dcmpeq>
   13e90:	2800      	cmp	r0, #0
   13e92:	f43f aec4 	beq.w	13c1e <_vsnprintf+0x216>
   13e96:	b117      	cbz	r7, 13e9e <_vsnprintf+0x496>
   13e98:	07f9      	lsls	r1, r7, #31
   13e9a:	f57f aec0 	bpl.w	13c1e <_vsnprintf+0x216>
    ++frac;
   13e9e:	3701      	adds	r7, #1
   13ea0:	e6bd      	b.n	13c1e <_vsnprintf+0x216>
    else if ((diff == 0.5) && (whole & 1)) {
   13ea2:	4ba8      	ldr	r3, [pc, #672]	; (14144 <_vsnprintf+0x73c>)
   13ea4:	2200      	movs	r2, #0
   13ea6:	4638      	mov	r0, r7
   13ea8:	4641      	mov	r1, r8
   13eaa:	f7ec fd7d 	bl	9a8 <__aeabi_dcmpeq>
   13eae:	b118      	cbz	r0, 13eb8 <_vsnprintf+0x4b0>
   13eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13eb2:	07da      	lsls	r2, r3, #31
   13eb4:	f53f aed4 	bmi.w	13c60 <_vsnprintf+0x258>
   13eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13eba:	ab12      	add	r3, sp, #72	; 0x48
   13ebc:	4413      	add	r3, r2
      buf[len++] = '.';
   13ebe:	4690      	mov	r8, r2
    buf[len++] = (char)(48 + (whole % 10));
   13ec0:	220a      	movs	r2, #10
   13ec2:	e05f      	b.n	13f84 <_vsnprintf+0x57c>
   13ec4:	aa12      	add	r2, sp, #72	; 0x48
  if (prec == 0U) {
   13ec6:	f04f 0801 	mov.w	r8, #1
      buf[len++] = (char)(48U + (frac % 10U));
   13eca:	200a      	movs	r0, #10
   13ecc:	fbb7 f1f0 	udiv	r1, r7, r0
   13ed0:	fb00 7311 	mls	r3, r0, r1, r7
   13ed4:	3330      	adds	r3, #48	; 0x30
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
   13ed6:	f1b8 0f20 	cmp.w	r8, #32
      buf[len++] = (char)(48U + (frac % 10U));
   13eda:	f802 3b01 	strb.w	r3, [r2], #1
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
   13ede:	d129      	bne.n	13f34 <_vsnprintf+0x52c>
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13ee0:	f005 0303 	and.w	r3, r5, #3
   13ee4:	2b01      	cmp	r3, #1
    buf[len++] = '0';
   13ee6:	aa12      	add	r2, sp, #72	; 0x48
   13ee8:	f04f 0130 	mov.w	r1, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13eec:	d052      	beq.n	13f94 <_vsnprintf+0x58c>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
   13eee:	45c3      	cmp	fp, r8
   13ef0:	d107      	bne.n	13f02 <_vsnprintf+0x4fa>
   13ef2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13ef4:	b91a      	cbnz	r2, 13efe <_vsnprintf+0x4f6>
   13ef6:	f015 0f0c 	tst.w	r5, #12
   13efa:	f000 814e 	beq.w	1419a <_vsnprintf+0x792>
    len--;
   13efe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   13f02:	f1b8 0f1f 	cmp.w	r8, #31
   13f06:	d80a      	bhi.n	13f1e <_vsnprintf+0x516>
    if (negative) {
   13f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13f0a:	2a00      	cmp	r2, #0
   13f0c:	f000 8149 	beq.w	141a2 <_vsnprintf+0x79a>
      buf[len++] = '-';
   13f10:	aa1a      	add	r2, sp, #104	; 0x68
   13f12:	4442      	add	r2, r8
   13f14:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
   13f16:	f802 1c20 	strb.w	r1, [r2, #-32]
   13f1a:	f108 0801 	add.w	r8, r8, #1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13f1e:	2b00      	cmp	r3, #0
   13f20:	d13d      	bne.n	13f9e <_vsnprintf+0x596>
   13f22:	eba4 0308 	sub.w	r3, r4, r8
   13f26:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   13f2a:	930e      	str	r3, [sp, #56]	; 0x38
   13f2c:	e059      	b.n	13fe2 <_vsnprintf+0x5da>
   13f2e:	4698      	mov	r8, r3
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
   13f30:	460f      	mov	r7, r1
   13f32:	e7cb      	b.n	13ecc <_vsnprintf+0x4c4>
   13f34:	2f09      	cmp	r7, #9
   13f36:	f108 0301 	add.w	r3, r8, #1
   13f3a:	d8f8      	bhi.n	13f2e <_vsnprintf+0x526>
      buf[len++] = '0';
   13f3c:	aa12      	add	r2, sp, #72	; 0x48
   13f3e:	2130      	movs	r1, #48	; 0x30
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13f40:	980e      	ldr	r0, [sp, #56]	; 0x38
   13f42:	4643      	mov	r3, r8
   13f44:	4283      	cmp	r3, r0
   13f46:	f108 0801 	add.w	r8, r8, #1
   13f4a:	d108      	bne.n	13f5e <_vsnprintf+0x556>
      buf[len++] = '.';
   13f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13f4e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   13f52:	aa1a      	add	r2, sp, #104	; 0x68
   13f54:	4413      	add	r3, r2
   13f56:	222e      	movs	r2, #46	; 0x2e
   13f58:	f803 2c20 	strb.w	r2, [r3, #-32]
   13f5c:	e7ac      	b.n	13eb8 <_vsnprintf+0x4b0>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13f5e:	f1b8 0f1f 	cmp.w	r8, #31
      buf[len++] = '0';
   13f62:	5499      	strb	r1, [r3, r2]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
   13f64:	d9ec      	bls.n	13f40 <_vsnprintf+0x538>
   13f66:	e7bb      	b.n	13ee0 <_vsnprintf+0x4d8>
    buf[len++] = (char)(48 + (whole % 10));
   13f68:	980d      	ldr	r0, [sp, #52]	; 0x34
   13f6a:	990d      	ldr	r1, [sp, #52]	; 0x34
   13f6c:	fb91 f1f2 	sdiv	r1, r1, r2
   13f70:	fb02 0011 	mls	r0, r2, r1, r0
   13f74:	3030      	adds	r0, #48	; 0x30
   13f76:	f803 0b01 	strb.w	r0, [r3], #1
   13f7a:	f108 0801 	add.w	r8, r8, #1
    if (!(whole /= 10)) {
   13f7e:	910d      	str	r1, [sp, #52]	; 0x34
   13f80:	2900      	cmp	r1, #0
   13f82:	d0ad      	beq.n	13ee0 <_vsnprintf+0x4d8>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
   13f84:	f1b8 0f20 	cmp.w	r8, #32
   13f88:	d1ee      	bne.n	13f68 <_vsnprintf+0x560>
   13f8a:	e7a9      	b.n	13ee0 <_vsnprintf+0x4d8>
    buf[len++] = '0';
   13f8c:	f808 1002 	strb.w	r1, [r8, r2]
   13f90:	f108 0801 	add.w	r8, r8, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
   13f94:	45c3      	cmp	fp, r8
   13f96:	d9aa      	bls.n	13eee <_vsnprintf+0x4e6>
   13f98:	f1b8 0f1f 	cmp.w	r8, #31
   13f9c:	d9f6      	bls.n	13f8c <_vsnprintf+0x584>
   13f9e:	ab12      	add	r3, sp, #72	; 0x48
   13fa0:	4443      	add	r3, r8
   13fa2:	930e      	str	r3, [sp, #56]	; 0x38
   13fa4:	2300      	movs	r3, #0
  for (size_t i = 0U; i < len; i++) {
   13fa6:	930d      	str	r3, [sp, #52]	; 0x34
   13fa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13faa:	18e3      	adds	r3, r4, r3
   13fac:	461f      	mov	r7, r3
   13fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13fb0:	3b01      	subs	r3, #1
   13fb2:	930e      	str	r3, [sp, #56]	; 0x38
   13fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13fb6:	4598      	cmp	r8, r3
   13fb8:	d120      	bne.n	13ffc <_vsnprintf+0x5f4>
  if (flags & FLAGS_LEFT) {
   13fba:	07a9      	lsls	r1, r5, #30
   13fbc:	463c      	mov	r4, r7
   13fbe:	f57f af06 	bpl.w	13dce <_vsnprintf+0x3c6>
   13fc2:	463a      	mov	r2, r7
   13fc4:	e02b      	b.n	1401e <_vsnprintf+0x616>
    else if (flags & FLAGS_SPACE) {
   13fc6:	0728      	lsls	r0, r5, #28
   13fc8:	d5a9      	bpl.n	13f1e <_vsnprintf+0x516>
      buf[len++] = ' ';
   13fca:	aa1a      	add	r2, sp, #104	; 0x68
   13fcc:	4442      	add	r2, r8
   13fce:	2120      	movs	r1, #32
   13fd0:	e7a1      	b.n	13f16 <_vsnprintf+0x50e>
      out(' ', buffer, idx++, maxlen);
   13fd2:	4633      	mov	r3, r6
   13fd4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   13fd6:	4651      	mov	r1, sl
   13fd8:	2020      	movs	r0, #32
   13fda:	47b8      	blx	r7
    for (size_t i = len; i < width; i++) {
   13fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13fde:	3301      	adds	r3, #1
   13fe0:	930d      	str	r3, [sp, #52]	; 0x34
   13fe2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   13fe6:	189a      	adds	r2, r3, r2
   13fe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13fea:	459b      	cmp	fp, r3
   13fec:	d8f1      	bhi.n	13fd2 <_vsnprintf+0x5ca>
   13fee:	ebab 0308 	sub.w	r3, fp, r8
   13ff2:	45c3      	cmp	fp, r8
   13ff4:	bf38      	it	cc
   13ff6:	2300      	movcc	r3, #0
   13ff8:	441c      	add	r4, r3
   13ffa:	e7d0      	b.n	13f9e <_vsnprintf+0x596>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
   13ffc:	980e      	ldr	r0, [sp, #56]	; 0x38
   13ffe:	4633      	mov	r3, r6
   14000:	463a      	mov	r2, r7
   14002:	7800      	ldrb	r0, [r0, #0]
   14004:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   14006:	4651      	mov	r1, sl
   14008:	47b8      	blx	r7
  for (size_t i = 0U; i < len; i++) {
   1400a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1400c:	3301      	adds	r3, #1
   1400e:	e7ca      	b.n	13fa6 <_vsnprintf+0x59e>
      out(' ', buffer, idx++, maxlen);
   14010:	1c55      	adds	r5, r2, #1
   14012:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14014:	4633      	mov	r3, r6
   14016:	4651      	mov	r1, sl
   14018:	2020      	movs	r0, #32
   1401a:	47a0      	blx	r4
   1401c:	462a      	mov	r2, r5
    while (idx < width) {
   1401e:	4593      	cmp	fp, r2
   14020:	d8f6      	bhi.n	14010 <_vsnprintf+0x608>
   14022:	455f      	cmp	r7, fp
   14024:	463b      	mov	r3, r7
   14026:	bf38      	it	cc
   14028:	465b      	movcc	r3, fp
   1402a:	461c      	mov	r4, r3
   1402c:	e6cf      	b.n	13dce <_vsnprintf+0x3c6>
        if (!(flags & FLAGS_LEFT)) {
   1402e:	f015 0302 	ands.w	r3, r5, #2
   14032:	930d      	str	r3, [sp, #52]	; 0x34
   14034:	d024      	beq.n	14080 <_vsnprintf+0x678>
        unsigned int l = 1U;
   14036:	2701      	movs	r7, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   14038:	f859 0b04 	ldr.w	r0, [r9], #4
   1403c:	4633      	mov	r3, r6
   1403e:	4622      	mov	r2, r4
   14040:	f104 0801 	add.w	r8, r4, #1
   14044:	4651      	mov	r1, sl
   14046:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14048:	b2c0      	uxtb	r0, r0
   1404a:	47a0      	blx	r4
        if (flags & FLAGS_LEFT) {
   1404c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1404e:	b353      	cbz	r3, 140a6 <_vsnprintf+0x69e>
   14050:	463c      	mov	r4, r7
        out((char)va_arg(va, int), buffer, idx++, maxlen);
   14052:	4642      	mov	r2, r8
   14054:	e01f      	b.n	14096 <_vsnprintf+0x68e>
            out(' ', buffer, idx++, maxlen);
   14056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14058:	4633      	mov	r3, r6
   1405a:	4651      	mov	r1, sl
   1405c:	2020      	movs	r0, #32
   1405e:	47a8      	blx	r5
   14060:	19e2      	adds	r2, r4, r7
          while (l++ < width) {
   14062:	3701      	adds	r7, #1
   14064:	45bb      	cmp	fp, r7
   14066:	d8f6      	bhi.n	14056 <_vsnprintf+0x64e>
   14068:	f1bb 0f00 	cmp.w	fp, #0
   1406c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   14070:	bf08      	it	eq
   14072:	2300      	moveq	r3, #0
   14074:	f10b 0701 	add.w	r7, fp, #1
   14078:	441c      	add	r4, r3
   1407a:	bf08      	it	eq
   1407c:	2702      	moveq	r7, #2
   1407e:	e7db      	b.n	14038 <_vsnprintf+0x630>
   14080:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   14082:	e7ed      	b.n	14060 <_vsnprintf+0x658>
            out(' ', buffer, idx++, maxlen);
   14084:	1c53      	adds	r3, r2, #1
   14086:	930d      	str	r3, [sp, #52]	; 0x34
   14088:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1408a:	4633      	mov	r3, r6
   1408c:	4651      	mov	r1, sl
   1408e:	2020      	movs	r0, #32
   14090:	47a8      	blx	r5
   14092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14094:	3401      	adds	r4, #1
          while (l++ < width) {
   14096:	45a3      	cmp	fp, r4
   14098:	d8f4      	bhi.n	14084 <_vsnprintf+0x67c>
   1409a:	ebab 0307 	sub.w	r3, fp, r7
   1409e:	45bb      	cmp	fp, r7
   140a0:	bf38      	it	cc
   140a2:	2300      	movcc	r3, #0
   140a4:	4498      	add	r8, r3
        break;
   140a6:	4644      	mov	r4, r8
   140a8:	e691      	b.n	13dce <_vsnprintf+0x3c6>
        char* p = va_arg(va, char*);
   140aa:	464b      	mov	r3, r9
   140ac:	f853 9b04 	ldr.w	r9, [r3], #4
   140b0:	930d      	str	r3, [sp, #52]	; 0x34
  for (s = str; *s; ++s);
   140b2:	464b      	mov	r3, r9
   140b4:	4698      	mov	r8, r3
   140b6:	3301      	adds	r3, #1
   140b8:	f898 2000 	ldrb.w	r2, [r8]
   140bc:	2a00      	cmp	r2, #0
   140be:	d1f9      	bne.n	140b4 <_vsnprintf+0x6ac>
        if (flags & FLAGS_PRECISION) {
   140c0:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
  return (unsigned int)(s - str);
   140c4:	eba8 0809 	sub.w	r8, r8, r9
        if (flags & FLAGS_PRECISION) {
   140c8:	930e      	str	r3, [sp, #56]	; 0x38
   140ca:	d002      	beq.n	140d2 <_vsnprintf+0x6ca>
          l = (l < precision ? l : precision);
   140cc:	45b8      	cmp	r8, r7
   140ce:	bf28      	it	cs
   140d0:	46b8      	movcs	r8, r7
        if (!(flags & FLAGS_LEFT)) {
   140d2:	f015 0302 	ands.w	r3, r5, #2
   140d6:	930f      	str	r3, [sp, #60]	; 0x3c
   140d8:	d119      	bne.n	1410e <_vsnprintf+0x706>
   140da:	eba8 0304 	sub.w	r3, r8, r4
   140de:	4622      	mov	r2, r4
   140e0:	9311      	str	r3, [sp, #68]	; 0x44
   140e2:	e007      	b.n	140f4 <_vsnprintf+0x6ec>
            out(' ', buffer, idx++, maxlen);
   140e4:	1c53      	adds	r3, r2, #1
   140e6:	9310      	str	r3, [sp, #64]	; 0x40
   140e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   140ea:	4633      	mov	r3, r6
   140ec:	4651      	mov	r1, sl
   140ee:	2020      	movs	r0, #32
   140f0:	47a8      	blx	r5
   140f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
          while (l++ < width) {
   140f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   140f6:	18d3      	adds	r3, r2, r3
   140f8:	459b      	cmp	fp, r3
   140fa:	d8f3      	bhi.n	140e4 <_vsnprintf+0x6dc>
   140fc:	ebab 0308 	sub.w	r3, fp, r8
   14100:	45c3      	cmp	fp, r8
   14102:	bf38      	it	cc
   14104:	2300      	movcc	r3, #0
   14106:	f108 0801 	add.w	r8, r8, #1
   1410a:	441c      	add	r4, r3
   1410c:	4498      	add	r8, r3
   1410e:	eba4 0509 	sub.w	r5, r4, r9
   14112:	e005      	b.n	14120 <_vsnprintf+0x718>
   14114:	461f      	mov	r7, r3
          out(*(p++), buffer, idx++, maxlen);
   14116:	4622      	mov	r2, r4
   14118:	4633      	mov	r3, r6
   1411a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1411c:	4651      	mov	r1, sl
   1411e:	47a0      	blx	r4
   14120:	eb05 0409 	add.w	r4, r5, r9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   14124:	f819 0b01 	ldrb.w	r0, [r9], #1
   14128:	b128      	cbz	r0, 14136 <_vsnprintf+0x72e>
   1412a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1412c:	2b00      	cmp	r3, #0
   1412e:	d0f2      	beq.n	14116 <_vsnprintf+0x70e>
   14130:	1e7b      	subs	r3, r7, #1
   14132:	2f00      	cmp	r7, #0
   14134:	d1ee      	bne.n	14114 <_vsnprintf+0x70c>
        if (flags & FLAGS_LEFT) {
   14136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14138:	b1bb      	cbz	r3, 1416a <_vsnprintf+0x762>
   1413a:	4622      	mov	r2, r4
   1413c:	eba8 0904 	sub.w	r9, r8, r4
   14140:	e009      	b.n	14156 <_vsnprintf+0x74e>
   14142:	bf00      	nop
   14144:	3fe00000 	.word	0x3fe00000
            out(' ', buffer, idx++, maxlen);
   14148:	1c57      	adds	r7, r2, #1
   1414a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1414c:	4633      	mov	r3, r6
   1414e:	4651      	mov	r1, sl
   14150:	2020      	movs	r0, #32
   14152:	47a8      	blx	r5
   14154:	463a      	mov	r2, r7
          while (l++ < width) {
   14156:	eb02 0309 	add.w	r3, r2, r9
   1415a:	455b      	cmp	r3, fp
   1415c:	d3f4      	bcc.n	14148 <_vsnprintf+0x740>
   1415e:	ebab 0308 	sub.w	r3, fp, r8
   14162:	45c3      	cmp	fp, r8
   14164:	bf38      	it	cc
   14166:	2300      	movcc	r3, #0
   14168:	441c      	add	r4, r3
        char* p = va_arg(va, char*);
   1416a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
        break;
   1416e:	e62e      	b.n	13dce <_vsnprintf+0x3c6>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   14170:	2308      	movs	r3, #8
   14172:	e9cd 7303 	strd	r7, r3, [sp, #12]
   14176:	2210      	movs	r2, #16
   14178:	2300      	movs	r3, #0
   1417a:	e9cd 3201 	strd	r3, r2, [sp, #4]
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   1417e:	f045 0521 	orr.w	r5, r5, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
   14182:	9505      	str	r5, [sp, #20]
   14184:	f859 3b04 	ldr.w	r3, [r9], #4
   14188:	9300      	str	r3, [sp, #0]
   1418a:	4622      	mov	r2, r4
   1418c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1418e:	4633      	mov	r3, r6
   14190:	4651      	mov	r1, sl
   14192:	f7ff fb9c 	bl	138ce <_ntoa_long>
   14196:	4604      	mov	r4, r0
        break;
   14198:	e619      	b.n	13dce <_vsnprintf+0x3c6>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
   1419a:	f1bb 0f1f 	cmp.w	fp, #31
   1419e:	f63f aebe 	bhi.w	13f1e <_vsnprintf+0x516>
    else if (flags & FLAGS_PLUS) {
   141a2:	076f      	lsls	r7, r5, #29
   141a4:	f57f af0f 	bpl.w	13fc6 <_vsnprintf+0x5be>
      buf[len++] = '+';  // ignore the space if the '+' exists
   141a8:	aa1a      	add	r2, sp, #104	; 0x68
   141aa:	4442      	add	r2, r8
   141ac:	212b      	movs	r1, #43	; 0x2b
   141ae:	e6b2      	b.n	13f16 <_vsnprintf+0x50e>
        if ((*format != 'i') && (*format != 'd')) {
   141b0:	2869      	cmp	r0, #105	; 0x69
   141b2:	f04f 020a 	mov.w	r2, #10
   141b6:	f43f ade5 	beq.w	13d84 <_vsnprintf+0x37c>
   141ba:	2864      	cmp	r0, #100	; 0x64
          base = 10U;
   141bc:	4613      	mov	r3, r2
        if ((*format != 'i') && (*format != 'd')) {
   141be:	f43f ade1 	beq.w	13d84 <_vsnprintf+0x37c>
          if (flags & FLAGS_LONG_LONG) {
   141c2:	f415 7200 	ands.w	r2, r5, #512	; 0x200
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   141c6:	f025 010c 	bic.w	r1, r5, #12
          if (flags & FLAGS_LONG_LONG) {
   141ca:	f43f ae38 	beq.w	13e3e <_vsnprintf+0x436>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   141ce:	2200      	movs	r2, #0
   141d0:	e9cd b107 	strd	fp, r1, [sp, #28]
   141d4:	e9cd 3204 	strd	r3, r2, [sp, #16]
   141d8:	f109 0807 	add.w	r8, r9, #7
   141dc:	f028 0807 	bic.w	r8, r8, #7
   141e0:	9706      	str	r7, [sp, #24]
   141e2:	9202      	str	r2, [sp, #8]
   141e4:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   141e8:	e5e7      	b.n	13dba <_vsnprintf+0x3b2>
          flags |= FLAGS_UPPERCASE;
   141ea:	f045 0520 	orr.w	r5, r5, #32
          base = 16U;
   141ee:	2310      	movs	r3, #16
   141f0:	e7e7      	b.n	141c2 <_vsnprintf+0x7ba>
          base =  8U;
   141f2:	2308      	movs	r3, #8
   141f4:	e7e5      	b.n	141c2 <_vsnprintf+0x7ba>
   141f6:	bf00      	nop

000141f8 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
   141f8:	b40f      	push	{r0, r1, r2, r3}
   141fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   141fc:	aa06      	add	r2, sp, #24
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   141fe:	a902      	add	r1, sp, #8
{
   14200:	f852 3b04 	ldr.w	r3, [r2], #4
  va_start(va, format);
   14204:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
   14206:	9200      	str	r2, [sp, #0]
   14208:	4804      	ldr	r0, [pc, #16]	; (1421c <printf+0x24>)
   1420a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1420e:	f7ff fbfb 	bl	13a08 <_vsnprintf>
  va_end(va);
  return ret;
}
   14212:	b005      	add	sp, #20
   14214:	f85d eb04 	ldr.w	lr, [sp], #4
   14218:	b004      	add	sp, #16
   1421a:	4770      	bx	lr
   1421c:	000139fb 	.word	0x000139fb

00014220 <snprintf>:
  return ret;
}


int snprintf(char* buffer, size_t count, const char* format, ...)
{
   14220:	b40c      	push	{r2, r3}
   14222:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14224:	ac06      	add	r4, sp, #24
   14226:	460a      	mov	r2, r1
   14228:	f854 3b04 	ldr.w	r3, [r4], #4
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
   1422c:	9400      	str	r4, [sp, #0]
   1422e:	4601      	mov	r1, r0
   14230:	4804      	ldr	r0, [pc, #16]	; (14244 <snprintf+0x24>)
  va_start(va, format);
   14232:	9403      	str	r4, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
   14234:	f7ff fbe8 	bl	13a08 <_vsnprintf>
  va_end(va);
  return ret;
}
   14238:	b004      	add	sp, #16
   1423a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1423e:	b002      	add	sp, #8
   14240:	4770      	bx	lr
   14242:	bf00      	nop
   14244:	00013741 	.word	0x00013741

00014248 <roundf>:
   14248:	ee10 3a10 	vmov	r3, s0
   1424c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   14250:	3a7f      	subs	r2, #127	; 0x7f
   14252:	2a16      	cmp	r2, #22
   14254:	ee10 1a10 	vmov	r1, s0
   14258:	dc0e      	bgt.n	14278 <roundf+0x30>
   1425a:	2a00      	cmp	r2, #0
   1425c:	db11      	blt.n	14282 <roundf+0x3a>
   1425e:	480c      	ldr	r0, [pc, #48]	; (14290 <roundf+0x48>)
   14260:	4110      	asrs	r0, r2
   14262:	4203      	tst	r3, r0
   14264:	d005      	beq.n	14272 <roundf+0x2a>
   14266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1426a:	4113      	asrs	r3, r2
   1426c:	440b      	add	r3, r1
   1426e:	ea23 0300 	bic.w	r3, r3, r0
   14272:	ee00 3a10 	vmov	s0, r3
   14276:	4770      	bx	lr
   14278:	2a80      	cmp	r2, #128	; 0x80
   1427a:	d1fa      	bne.n	14272 <roundf+0x2a>
   1427c:	ee30 0a00 	vadd.f32	s0, s0, s0
   14280:	4770      	bx	lr
   14282:	3201      	adds	r2, #1
   14284:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   14288:	d1f3      	bne.n	14272 <roundf+0x2a>
   1428a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   1428e:	e7f0      	b.n	14272 <roundf+0x2a>
   14290:	007fffff 	.word	0x007fffff

00014294 <malloc>:
   14294:	4b02      	ldr	r3, [pc, #8]	; (142a0 <malloc+0xc>)
   14296:	4601      	mov	r1, r0
   14298:	6818      	ldr	r0, [r3, #0]
   1429a:	f000 b871 	b.w	14380 <_malloc_r>
   1429e:	bf00      	nop
   142a0:	2000005c 	.word	0x2000005c

000142a4 <free>:
   142a4:	4b02      	ldr	r3, [pc, #8]	; (142b0 <free+0xc>)
   142a6:	4601      	mov	r1, r0
   142a8:	6818      	ldr	r0, [r3, #0]
   142aa:	f000 b819 	b.w	142e0 <_free_r>
   142ae:	bf00      	nop
   142b0:	2000005c 	.word	0x2000005c

000142b4 <memcpy>:
   142b4:	440a      	add	r2, r1
   142b6:	4291      	cmp	r1, r2
   142b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   142bc:	d100      	bne.n	142c0 <memcpy+0xc>
   142be:	4770      	bx	lr
   142c0:	b510      	push	{r4, lr}
   142c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   142c6:	f803 4f01 	strb.w	r4, [r3, #1]!
   142ca:	4291      	cmp	r1, r2
   142cc:	d1f9      	bne.n	142c2 <memcpy+0xe>
   142ce:	bd10      	pop	{r4, pc}

000142d0 <memset>:
   142d0:	4402      	add	r2, r0
   142d2:	4603      	mov	r3, r0
   142d4:	4293      	cmp	r3, r2
   142d6:	d100      	bne.n	142da <memset+0xa>
   142d8:	4770      	bx	lr
   142da:	f803 1b01 	strb.w	r1, [r3], #1
   142de:	e7f9      	b.n	142d4 <memset+0x4>

000142e0 <_free_r>:
   142e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   142e2:	2900      	cmp	r1, #0
   142e4:	d048      	beq.n	14378 <_free_r+0x98>
   142e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   142ea:	9001      	str	r0, [sp, #4]
   142ec:	2b00      	cmp	r3, #0
   142ee:	f1a1 0404 	sub.w	r4, r1, #4
   142f2:	bfb8      	it	lt
   142f4:	18e4      	addlt	r4, r4, r3
   142f6:	f000 f8c9 	bl	1448c <__malloc_lock>
   142fa:	4a20      	ldr	r2, [pc, #128]	; (1437c <_free_r+0x9c>)
   142fc:	9801      	ldr	r0, [sp, #4]
   142fe:	6813      	ldr	r3, [r2, #0]
   14300:	4615      	mov	r5, r2
   14302:	b933      	cbnz	r3, 14312 <_free_r+0x32>
   14304:	6063      	str	r3, [r4, #4]
   14306:	6014      	str	r4, [r2, #0]
   14308:	b003      	add	sp, #12
   1430a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1430e:	f000 b8c3 	b.w	14498 <__malloc_unlock>
   14312:	42a3      	cmp	r3, r4
   14314:	d90b      	bls.n	1432e <_free_r+0x4e>
   14316:	6821      	ldr	r1, [r4, #0]
   14318:	1862      	adds	r2, r4, r1
   1431a:	4293      	cmp	r3, r2
   1431c:	bf04      	itt	eq
   1431e:	681a      	ldreq	r2, [r3, #0]
   14320:	685b      	ldreq	r3, [r3, #4]
   14322:	6063      	str	r3, [r4, #4]
   14324:	bf04      	itt	eq
   14326:	1852      	addeq	r2, r2, r1
   14328:	6022      	streq	r2, [r4, #0]
   1432a:	602c      	str	r4, [r5, #0]
   1432c:	e7ec      	b.n	14308 <_free_r+0x28>
   1432e:	461a      	mov	r2, r3
   14330:	685b      	ldr	r3, [r3, #4]
   14332:	b10b      	cbz	r3, 14338 <_free_r+0x58>
   14334:	42a3      	cmp	r3, r4
   14336:	d9fa      	bls.n	1432e <_free_r+0x4e>
   14338:	6811      	ldr	r1, [r2, #0]
   1433a:	1855      	adds	r5, r2, r1
   1433c:	42a5      	cmp	r5, r4
   1433e:	d10b      	bne.n	14358 <_free_r+0x78>
   14340:	6824      	ldr	r4, [r4, #0]
   14342:	4421      	add	r1, r4
   14344:	1854      	adds	r4, r2, r1
   14346:	42a3      	cmp	r3, r4
   14348:	6011      	str	r1, [r2, #0]
   1434a:	d1dd      	bne.n	14308 <_free_r+0x28>
   1434c:	681c      	ldr	r4, [r3, #0]
   1434e:	685b      	ldr	r3, [r3, #4]
   14350:	6053      	str	r3, [r2, #4]
   14352:	4421      	add	r1, r4
   14354:	6011      	str	r1, [r2, #0]
   14356:	e7d7      	b.n	14308 <_free_r+0x28>
   14358:	d902      	bls.n	14360 <_free_r+0x80>
   1435a:	230c      	movs	r3, #12
   1435c:	6003      	str	r3, [r0, #0]
   1435e:	e7d3      	b.n	14308 <_free_r+0x28>
   14360:	6825      	ldr	r5, [r4, #0]
   14362:	1961      	adds	r1, r4, r5
   14364:	428b      	cmp	r3, r1
   14366:	bf04      	itt	eq
   14368:	6819      	ldreq	r1, [r3, #0]
   1436a:	685b      	ldreq	r3, [r3, #4]
   1436c:	6063      	str	r3, [r4, #4]
   1436e:	bf04      	itt	eq
   14370:	1949      	addeq	r1, r1, r5
   14372:	6021      	streq	r1, [r4, #0]
   14374:	6054      	str	r4, [r2, #4]
   14376:	e7c7      	b.n	14308 <_free_r+0x28>
   14378:	b003      	add	sp, #12
   1437a:	bd30      	pop	{r4, r5, pc}
   1437c:	20005f00 	.word	0x20005f00

00014380 <_malloc_r>:
   14380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14382:	1ccd      	adds	r5, r1, #3
   14384:	f025 0503 	bic.w	r5, r5, #3
   14388:	3508      	adds	r5, #8
   1438a:	2d0c      	cmp	r5, #12
   1438c:	bf38      	it	cc
   1438e:	250c      	movcc	r5, #12
   14390:	2d00      	cmp	r5, #0
   14392:	4606      	mov	r6, r0
   14394:	db01      	blt.n	1439a <_malloc_r+0x1a>
   14396:	42a9      	cmp	r1, r5
   14398:	d903      	bls.n	143a2 <_malloc_r+0x22>
   1439a:	230c      	movs	r3, #12
   1439c:	6033      	str	r3, [r6, #0]
   1439e:	2000      	movs	r0, #0
   143a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143a2:	f000 f873 	bl	1448c <__malloc_lock>
   143a6:	4921      	ldr	r1, [pc, #132]	; (1442c <_malloc_r+0xac>)
   143a8:	680a      	ldr	r2, [r1, #0]
   143aa:	4614      	mov	r4, r2
   143ac:	b99c      	cbnz	r4, 143d6 <_malloc_r+0x56>
   143ae:	4f20      	ldr	r7, [pc, #128]	; (14430 <_malloc_r+0xb0>)
   143b0:	683b      	ldr	r3, [r7, #0]
   143b2:	b923      	cbnz	r3, 143be <_malloc_r+0x3e>
   143b4:	4621      	mov	r1, r4
   143b6:	4630      	mov	r0, r6
   143b8:	f000 f83c 	bl	14434 <_sbrk_r>
   143bc:	6038      	str	r0, [r7, #0]
   143be:	4629      	mov	r1, r5
   143c0:	4630      	mov	r0, r6
   143c2:	f000 f837 	bl	14434 <_sbrk_r>
   143c6:	1c43      	adds	r3, r0, #1
   143c8:	d123      	bne.n	14412 <_malloc_r+0x92>
   143ca:	230c      	movs	r3, #12
   143cc:	6033      	str	r3, [r6, #0]
   143ce:	4630      	mov	r0, r6
   143d0:	f000 f862 	bl	14498 <__malloc_unlock>
   143d4:	e7e3      	b.n	1439e <_malloc_r+0x1e>
   143d6:	6823      	ldr	r3, [r4, #0]
   143d8:	1b5b      	subs	r3, r3, r5
   143da:	d417      	bmi.n	1440c <_malloc_r+0x8c>
   143dc:	2b0b      	cmp	r3, #11
   143de:	d903      	bls.n	143e8 <_malloc_r+0x68>
   143e0:	6023      	str	r3, [r4, #0]
   143e2:	441c      	add	r4, r3
   143e4:	6025      	str	r5, [r4, #0]
   143e6:	e004      	b.n	143f2 <_malloc_r+0x72>
   143e8:	6863      	ldr	r3, [r4, #4]
   143ea:	42a2      	cmp	r2, r4
   143ec:	bf0c      	ite	eq
   143ee:	600b      	streq	r3, [r1, #0]
   143f0:	6053      	strne	r3, [r2, #4]
   143f2:	4630      	mov	r0, r6
   143f4:	f000 f850 	bl	14498 <__malloc_unlock>
   143f8:	f104 000b 	add.w	r0, r4, #11
   143fc:	1d23      	adds	r3, r4, #4
   143fe:	f020 0007 	bic.w	r0, r0, #7
   14402:	1ac2      	subs	r2, r0, r3
   14404:	d0cc      	beq.n	143a0 <_malloc_r+0x20>
   14406:	1a1b      	subs	r3, r3, r0
   14408:	50a3      	str	r3, [r4, r2]
   1440a:	e7c9      	b.n	143a0 <_malloc_r+0x20>
   1440c:	4622      	mov	r2, r4
   1440e:	6864      	ldr	r4, [r4, #4]
   14410:	e7cc      	b.n	143ac <_malloc_r+0x2c>
   14412:	1cc4      	adds	r4, r0, #3
   14414:	f024 0403 	bic.w	r4, r4, #3
   14418:	42a0      	cmp	r0, r4
   1441a:	d0e3      	beq.n	143e4 <_malloc_r+0x64>
   1441c:	1a21      	subs	r1, r4, r0
   1441e:	4630      	mov	r0, r6
   14420:	f000 f808 	bl	14434 <_sbrk_r>
   14424:	3001      	adds	r0, #1
   14426:	d1dd      	bne.n	143e4 <_malloc_r+0x64>
   14428:	e7cf      	b.n	143ca <_malloc_r+0x4a>
   1442a:	bf00      	nop
   1442c:	20005f00 	.word	0x20005f00
   14430:	20005f04 	.word	0x20005f04

00014434 <_sbrk_r>:
   14434:	b538      	push	{r3, r4, r5, lr}
   14436:	4d06      	ldr	r5, [pc, #24]	; (14450 <_sbrk_r+0x1c>)
   14438:	2300      	movs	r3, #0
   1443a:	4604      	mov	r4, r0
   1443c:	4608      	mov	r0, r1
   1443e:	602b      	str	r3, [r5, #0]
   14440:	f000 f988 	bl	14754 <_sbrk>
   14444:	1c43      	adds	r3, r0, #1
   14446:	d102      	bne.n	1444e <_sbrk_r+0x1a>
   14448:	682b      	ldr	r3, [r5, #0]
   1444a:	b103      	cbz	r3, 1444e <_sbrk_r+0x1a>
   1444c:	6023      	str	r3, [r4, #0]
   1444e:	bd38      	pop	{r3, r4, r5, pc}
   14450:	20006334 	.word	0x20006334

00014454 <strcpy>:
   14454:	4603      	mov	r3, r0
   14456:	f811 2b01 	ldrb.w	r2, [r1], #1
   1445a:	f803 2b01 	strb.w	r2, [r3], #1
   1445e:	2a00      	cmp	r2, #0
   14460:	d1f9      	bne.n	14456 <strcpy+0x2>
   14462:	4770      	bx	lr

00014464 <strncpy>:
   14464:	b510      	push	{r4, lr}
   14466:	3901      	subs	r1, #1
   14468:	4603      	mov	r3, r0
   1446a:	b132      	cbz	r2, 1447a <strncpy+0x16>
   1446c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   14470:	f803 4b01 	strb.w	r4, [r3], #1
   14474:	3a01      	subs	r2, #1
   14476:	2c00      	cmp	r4, #0
   14478:	d1f7      	bne.n	1446a <strncpy+0x6>
   1447a:	441a      	add	r2, r3
   1447c:	2100      	movs	r1, #0
   1447e:	4293      	cmp	r3, r2
   14480:	d100      	bne.n	14484 <strncpy+0x20>
   14482:	bd10      	pop	{r4, pc}
   14484:	f803 1b01 	strb.w	r1, [r3], #1
   14488:	e7f9      	b.n	1447e <strncpy+0x1a>
	...

0001448c <__malloc_lock>:
   1448c:	4801      	ldr	r0, [pc, #4]	; (14494 <__malloc_lock+0x8>)
   1448e:	f000 b809 	b.w	144a4 <__retarget_lock_acquire_recursive>
   14492:	bf00      	nop
   14494:	2000633c 	.word	0x2000633c

00014498 <__malloc_unlock>:
   14498:	4801      	ldr	r0, [pc, #4]	; (144a0 <__malloc_unlock+0x8>)
   1449a:	f000 b804 	b.w	144a6 <__retarget_lock_release_recursive>
   1449e:	bf00      	nop
   144a0:	2000633c 	.word	0x2000633c

000144a4 <__retarget_lock_acquire_recursive>:
   144a4:	4770      	bx	lr

000144a6 <__retarget_lock_release_recursive>:
   144a6:	4770      	bx	lr

000144a8 <__udivmoddi4>:
   144a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
   144ae:	468a      	mov	sl, r1
   144b0:	468e      	mov	lr, r1
   144b2:	4615      	mov	r5, r2
   144b4:	4604      	mov	r4, r0
   144b6:	4619      	mov	r1, r3
   144b8:	2b00      	cmp	r3, #0
   144ba:	f040 80ca 	bne.w	14652 <__udivmoddi4+0x1aa>
   144be:	4552      	cmp	r2, sl
   144c0:	fab2 f782 	clz	r7, r2
   144c4:	d947      	bls.n	14556 <__udivmoddi4+0xae>
   144c6:	b14f      	cbz	r7, 144dc <__udivmoddi4+0x34>
   144c8:	f1c7 0820 	rsb	r8, r7, #32
   144cc:	fa0a f307 	lsl.w	r3, sl, r7
   144d0:	fa20 f808 	lsr.w	r8, r0, r8
   144d4:	40bd      	lsls	r5, r7
   144d6:	ea48 0e03 	orr.w	lr, r8, r3
   144da:	40bc      	lsls	r4, r7
   144dc:	ea4f 4915 	mov.w	r9, r5, lsr #16
   144e0:	fa1f f885 	uxth.w	r8, r5
   144e4:	fbbe fbf9 	udiv	fp, lr, r9
   144e8:	0c22      	lsrs	r2, r4, #16
   144ea:	fb09 e31b 	mls	r3, r9, fp, lr
   144ee:	fb0b fc08 	mul.w	ip, fp, r8
   144f2:	ea42 4a03 	orr.w	sl, r2, r3, lsl #16
   144f6:	45d4      	cmp	ip, sl
   144f8:	d929      	bls.n	1454e <__udivmoddi4+0xa6>
   144fa:	eb15 0a0a 	adds.w	sl, r5, sl
   144fe:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
   14502:	d204      	bcs.n	1450e <__udivmoddi4+0x66>
   14504:	45d4      	cmp	ip, sl
   14506:	d902      	bls.n	1450e <__udivmoddi4+0x66>
   14508:	f1ab 0002 	sub.w	r0, fp, #2
   1450c:	44aa      	add	sl, r5
   1450e:	ebaa 0a0c 	sub.w	sl, sl, ip
   14512:	b2a4      	uxth	r4, r4
   14514:	fbba f3f9 	udiv	r3, sl, r9
   14518:	fb09 aa13 	mls	sl, r9, r3, sl
   1451c:	fb03 f808 	mul.w	r8, r3, r8
   14520:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   14524:	45a0      	cmp	r8, r4
   14526:	d914      	bls.n	14552 <__udivmoddi4+0xaa>
   14528:	192c      	adds	r4, r5, r4
   1452a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   1452e:	d203      	bcs.n	14538 <__udivmoddi4+0x90>
   14530:	45a0      	cmp	r8, r4
   14532:	d901      	bls.n	14538 <__udivmoddi4+0x90>
   14534:	1e9a      	subs	r2, r3, #2
   14536:	442c      	add	r4, r5
   14538:	eba4 0408 	sub.w	r4, r4, r8
   1453c:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
   14540:	b11e      	cbz	r6, 1454a <__udivmoddi4+0xa2>
   14542:	40fc      	lsrs	r4, r7
   14544:	2300      	movs	r3, #0
   14546:	6034      	str	r4, [r6, #0]
   14548:	6073      	str	r3, [r6, #4]
   1454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1454e:	4658      	mov	r0, fp
   14550:	e7dd      	b.n	1450e <__udivmoddi4+0x66>
   14552:	461a      	mov	r2, r3
   14554:	e7f0      	b.n	14538 <__udivmoddi4+0x90>
   14556:	b902      	cbnz	r2, 1455a <__udivmoddi4+0xb2>
   14558:	deff      	udf	#255	; 0xff
   1455a:	bb9f      	cbnz	r7, 145c4 <__udivmoddi4+0x11c>
   1455c:	ebaa 0302 	sub.w	r3, sl, r2
   14560:	2101      	movs	r1, #1
   14562:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   14566:	b2aa      	uxth	r2, r5
   14568:	fbb3 fefc 	udiv	lr, r3, ip
   1456c:	0c20      	lsrs	r0, r4, #16
   1456e:	fb0c 331e 	mls	r3, ip, lr, r3
   14572:	fb0e f802 	mul.w	r8, lr, r2
   14576:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1457a:	4598      	cmp	r8, r3
   1457c:	d965      	bls.n	1464a <__udivmoddi4+0x1a2>
   1457e:	18eb      	adds	r3, r5, r3
   14580:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
   14584:	d204      	bcs.n	14590 <__udivmoddi4+0xe8>
   14586:	4598      	cmp	r8, r3
   14588:	d902      	bls.n	14590 <__udivmoddi4+0xe8>
   1458a:	f1ae 0002 	sub.w	r0, lr, #2
   1458e:	442b      	add	r3, r5
   14590:	eba3 0308 	sub.w	r3, r3, r8
   14594:	b2a4      	uxth	r4, r4
   14596:	fbb3 fefc 	udiv	lr, r3, ip
   1459a:	fb0c 331e 	mls	r3, ip, lr, r3
   1459e:	fb0e f202 	mul.w	r2, lr, r2
   145a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   145a6:	42a2      	cmp	r2, r4
   145a8:	d951      	bls.n	1464e <__udivmoddi4+0x1a6>
   145aa:	192c      	adds	r4, r5, r4
   145ac:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
   145b0:	d204      	bcs.n	145bc <__udivmoddi4+0x114>
   145b2:	42a2      	cmp	r2, r4
   145b4:	d902      	bls.n	145bc <__udivmoddi4+0x114>
   145b6:	f1ae 0302 	sub.w	r3, lr, #2
   145ba:	442c      	add	r4, r5
   145bc:	1aa4      	subs	r4, r4, r2
   145be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   145c2:	e7bd      	b.n	14540 <__udivmoddi4+0x98>
   145c4:	f1c7 0820 	rsb	r8, r7, #32
   145c8:	fa2a f908 	lsr.w	r9, sl, r8
   145cc:	40bd      	lsls	r5, r7
   145ce:	fa20 f808 	lsr.w	r8, r0, r8
   145d2:	fa0a f307 	lsl.w	r3, sl, r7
   145d6:	ea48 0203 	orr.w	r2, r8, r3
   145da:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   145de:	b2ab      	uxth	r3, r5
   145e0:	fbb9 fefc 	udiv	lr, r9, ip
   145e4:	0c11      	lsrs	r1, r2, #16
   145e6:	fb0c 901e 	mls	r0, ip, lr, r9
   145ea:	fb0e f803 	mul.w	r8, lr, r3
   145ee:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   145f2:	4580      	cmp	r8, r0
   145f4:	fa04 f407 	lsl.w	r4, r4, r7
   145f8:	d923      	bls.n	14642 <__udivmoddi4+0x19a>
   145fa:	1828      	adds	r0, r5, r0
   145fc:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   14600:	d204      	bcs.n	1460c <__udivmoddi4+0x164>
   14602:	4580      	cmp	r8, r0
   14604:	d902      	bls.n	1460c <__udivmoddi4+0x164>
   14606:	f1ae 0102 	sub.w	r1, lr, #2
   1460a:	4428      	add	r0, r5
   1460c:	eba0 0008 	sub.w	r0, r0, r8
   14610:	b292      	uxth	r2, r2
   14612:	fbb0 fefc 	udiv	lr, r0, ip
   14616:	fb0c 001e 	mls	r0, ip, lr, r0
   1461a:	fb0e f803 	mul.w	r8, lr, r3
   1461e:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   14622:	4598      	cmp	r8, r3
   14624:	d90f      	bls.n	14646 <__udivmoddi4+0x19e>
   14626:	18eb      	adds	r3, r5, r3
   14628:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
   1462c:	d204      	bcs.n	14638 <__udivmoddi4+0x190>
   1462e:	4598      	cmp	r8, r3
   14630:	d902      	bls.n	14638 <__udivmoddi4+0x190>
   14632:	f1ae 0202 	sub.w	r2, lr, #2
   14636:	442b      	add	r3, r5
   14638:	eba3 0308 	sub.w	r3, r3, r8
   1463c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   14640:	e78f      	b.n	14562 <__udivmoddi4+0xba>
   14642:	4671      	mov	r1, lr
   14644:	e7e2      	b.n	1460c <__udivmoddi4+0x164>
   14646:	4672      	mov	r2, lr
   14648:	e7f6      	b.n	14638 <__udivmoddi4+0x190>
   1464a:	4670      	mov	r0, lr
   1464c:	e7a0      	b.n	14590 <__udivmoddi4+0xe8>
   1464e:	4673      	mov	r3, lr
   14650:	e7b4      	b.n	145bc <__udivmoddi4+0x114>
   14652:	4553      	cmp	r3, sl
   14654:	d905      	bls.n	14662 <__udivmoddi4+0x1ba>
   14656:	b10e      	cbz	r6, 1465c <__udivmoddi4+0x1b4>
   14658:	e9c6 0a00 	strd	r0, sl, [r6]
   1465c:	2100      	movs	r1, #0
   1465e:	4608      	mov	r0, r1
   14660:	e773      	b.n	1454a <__udivmoddi4+0xa2>
   14662:	fab3 f883 	clz	r8, r3
   14666:	f1b8 0f00 	cmp.w	r8, #0
   1466a:	d110      	bne.n	1468e <__udivmoddi4+0x1e6>
   1466c:	4553      	cmp	r3, sl
   1466e:	d301      	bcc.n	14674 <__udivmoddi4+0x1cc>
   14670:	4282      	cmp	r2, r0
   14672:	d80a      	bhi.n	1468a <__udivmoddi4+0x1e2>
   14674:	1a84      	subs	r4, r0, r2
   14676:	eb6a 0303 	sbc.w	r3, sl, r3
   1467a:	2001      	movs	r0, #1
   1467c:	469e      	mov	lr, r3
   1467e:	2e00      	cmp	r6, #0
   14680:	d065      	beq.n	1474e <__udivmoddi4+0x2a6>
   14682:	e9c6 4e00 	strd	r4, lr, [r6]
   14686:	2100      	movs	r1, #0
   14688:	e75f      	b.n	1454a <__udivmoddi4+0xa2>
   1468a:	4640      	mov	r0, r8
   1468c:	e7f7      	b.n	1467e <__udivmoddi4+0x1d6>
   1468e:	f1c8 0920 	rsb	r9, r8, #32
   14692:	fa03 f308 	lsl.w	r3, r3, r8
   14696:	fa22 f709 	lsr.w	r7, r2, r9
   1469a:	431f      	orrs	r7, r3
   1469c:	fa20 f409 	lsr.w	r4, r0, r9
   146a0:	fa0a f308 	lsl.w	r3, sl, r8
   146a4:	fa2a f509 	lsr.w	r5, sl, r9
   146a8:	431c      	orrs	r4, r3
   146aa:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   146ae:	fa02 fc08 	lsl.w	ip, r2, r8
   146b2:	fa00 fe08 	lsl.w	lr, r0, r8
   146b6:	fbb5 f2fa 	udiv	r2, r5, sl
   146ba:	b2bb      	uxth	r3, r7
   146bc:	fb0a 5012 	mls	r0, sl, r2, r5
   146c0:	0c25      	lsrs	r5, r4, #16
   146c2:	fb02 f103 	mul.w	r1, r2, r3
   146c6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   146ca:	42a9      	cmp	r1, r5
   146cc:	d93b      	bls.n	14746 <__udivmoddi4+0x29e>
   146ce:	197d      	adds	r5, r7, r5
   146d0:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
   146d4:	d203      	bcs.n	146de <__udivmoddi4+0x236>
   146d6:	42a9      	cmp	r1, r5
   146d8:	d901      	bls.n	146de <__udivmoddi4+0x236>
   146da:	1e90      	subs	r0, r2, #2
   146dc:	443d      	add	r5, r7
   146de:	1a6d      	subs	r5, r5, r1
   146e0:	b2a4      	uxth	r4, r4
   146e2:	fbb5 f2fa 	udiv	r2, r5, sl
   146e6:	fb0a 5512 	mls	r5, sl, r2, r5
   146ea:	4353      	muls	r3, r2
   146ec:	ea44 4105 	orr.w	r1, r4, r5, lsl #16
   146f0:	428b      	cmp	r3, r1
   146f2:	d92a      	bls.n	1474a <__udivmoddi4+0x2a2>
   146f4:	1879      	adds	r1, r7, r1
   146f6:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
   146fa:	d203      	bcs.n	14704 <__udivmoddi4+0x25c>
   146fc:	428b      	cmp	r3, r1
   146fe:	d901      	bls.n	14704 <__udivmoddi4+0x25c>
   14700:	1e94      	subs	r4, r2, #2
   14702:	4439      	add	r1, r7
   14704:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
   14708:	fba0 450c 	umull	r4, r5, r0, ip
   1470c:	1ac9      	subs	r1, r1, r3
   1470e:	42a9      	cmp	r1, r5
   14710:	4623      	mov	r3, r4
   14712:	462a      	mov	r2, r5
   14714:	d302      	bcc.n	1471c <__udivmoddi4+0x274>
   14716:	d106      	bne.n	14726 <__udivmoddi4+0x27e>
   14718:	45a6      	cmp	lr, r4
   1471a:	d204      	bcs.n	14726 <__udivmoddi4+0x27e>
   1471c:	ebb4 030c 	subs.w	r3, r4, ip
   14720:	eb65 0207 	sbc.w	r2, r5, r7
   14724:	3801      	subs	r0, #1
   14726:	b196      	cbz	r6, 1474e <__udivmoddi4+0x2a6>
   14728:	ebbe 0403 	subs.w	r4, lr, r3
   1472c:	eb61 0e02 	sbc.w	lr, r1, r2
   14730:	fa0e f909 	lsl.w	r9, lr, r9
   14734:	fa24 f308 	lsr.w	r3, r4, r8
   14738:	ea49 0303 	orr.w	r3, r9, r3
   1473c:	fa2e f108 	lsr.w	r1, lr, r8
   14740:	e9c6 3100 	strd	r3, r1, [r6]
   14744:	e79f      	b.n	14686 <__udivmoddi4+0x1de>
   14746:	4610      	mov	r0, r2
   14748:	e7c9      	b.n	146de <__udivmoddi4+0x236>
   1474a:	4614      	mov	r4, r2
   1474c:	e7da      	b.n	14704 <__udivmoddi4+0x25c>
   1474e:	4631      	mov	r1, r6
   14750:	e6fb      	b.n	1454a <__udivmoddi4+0xa2>
	...

00014754 <_sbrk>:
   14754:	4a04      	ldr	r2, [pc, #16]	; (14768 <_sbrk+0x14>)
   14756:	4905      	ldr	r1, [pc, #20]	; (1476c <_sbrk+0x18>)
   14758:	6813      	ldr	r3, [r2, #0]
   1475a:	2b00      	cmp	r3, #0
   1475c:	bf08      	it	eq
   1475e:	460b      	moveq	r3, r1
   14760:	4418      	add	r0, r3
   14762:	6010      	str	r0, [r2, #0]
   14764:	4618      	mov	r0, r3
   14766:	4770      	bx	lr
   14768:	20005f08 	.word	0x20005f08
   1476c:	20006344 	.word	0x20006344
   14770:	33221100 	.word	0x33221100
   14774:	77665544 	.word	0x77665544
   14778:	bbaa9988 	.word	0xbbaa9988
   1477c:	ffeeddcc 	.word	0xffeeddcc
   14780:	ffff      	.short	0xffff
   14782:	ffff      	.short	0xffff
   14784:	c6188410 	.word	0xc6188410
   14788:	0000      	.short	0x0000
   1478a:	00          	.byte	0x00
   1478b:	5b          	.byte	0x5b
   1478c:	205d7325 	.word	0x205d7325
   14790:	6148202d 	.word	0x6148202d
   14794:	66206472 	.word	0x66206472
   14798:	746c7561 	.word	0x746c7561
   1479c:	74532021 	.word	0x74532021
   147a0:	206b6361 	.word	0x206b6361
   147a4:	63617274 	.word	0x63617274
   147a8:	0a0d3a65 	.word	0x0a0d3a65
   147ac:	73255b00 	.word	0x73255b00
   147b0:	202d205d 	.word	0x202d205d
   147b4:	5b203052 	.word	0x5b203052
   147b8:	30257830 	.word	0x30257830
   147bc:	0d5d5838 	.word	0x0d5d5838
   147c0:	255b000a 	.word	0x255b000a
   147c4:	2d205d73 	.word	0x2d205d73
   147c8:	20315220 	.word	0x20315220
   147cc:	2578305b 	.word	0x2578305b
   147d0:	5d583830 	.word	0x5d583830
   147d4:	5b000a0d 	.word	0x5b000a0d
   147d8:	205d7325 	.word	0x205d7325
   147dc:	3252202d 	.word	0x3252202d
   147e0:	78305b20 	.word	0x78305b20
   147e4:	58383025 	.word	0x58383025
   147e8:	000a0d5d 	.word	0x000a0d5d
   147ec:	5d73255b 	.word	0x5d73255b
   147f0:	52202d20 	.word	0x52202d20
   147f4:	305b2033 	.word	0x305b2033
   147f8:	38302578 	.word	0x38302578
   147fc:	0a0d5d58 	.word	0x0a0d5d58
   14800:	73255b00 	.word	0x73255b00
   14804:	202d205d 	.word	0x202d205d
   14808:	20323152 	.word	0x20323152
   1480c:	2578305b 	.word	0x2578305b
   14810:	5d583830 	.word	0x5d583830
   14814:	5b000a0d 	.word	0x5b000a0d
   14818:	205d7325 	.word	0x205d7325
   1481c:	524c202d 	.word	0x524c202d
   14820:	31525b20 	.word	0x31525b20
   14824:	5b205d34 	.word	0x5b205d34
   14828:	30257830 	.word	0x30257830
   1482c:	205d5838 	.word	0x205d5838
   14830:	6c6c6163 	.word	0x6c6c6163
   14834:	74657220 	.word	0x74657220
   14838:	0d6e7275 	.word	0x0d6e7275
   1483c:	255b000a 	.word	0x255b000a
   14840:	2d205d73 	.word	0x2d205d73
   14844:	20435020 	.word	0x20435020
   14848:	3531525b 	.word	0x3531525b
   1484c:	305b205d 	.word	0x305b205d
   14850:	38302578 	.word	0x38302578
   14854:	70205d58 	.word	0x70205d58
   14858:	72676f72 	.word	0x72676f72
   1485c:	63206d61 	.word	0x63206d61
   14860:	746e756f 	.word	0x746e756f
   14864:	0a0d7265 	.word	0x0a0d7265
   14868:	73255b00 	.word	0x73255b00
   1486c:	202d205d 	.word	0x202d205d
   14870:	20525350 	.word	0x20525350
   14874:	2578305b 	.word	0x2578305b
   14878:	5d583830 	.word	0x5d583830
   1487c:	6f727020 	.word	0x6f727020
   14880:	6d617267 	.word	0x6d617267
   14884:	61747320 	.word	0x61747320
   14888:	20737574 	.word	0x20737574
   1488c:	69676572 	.word	0x69676572
   14890:	72657473 	.word	0x72657473
   14894:	5b000a0d 	.word	0x5b000a0d
   14898:	205d7325 	.word	0x205d7325
   1489c:	2d2d202d 	.word	0x2d2d202d
   148a0:	2d2d2d2d 	.word	0x2d2d2d2d
   148a4:	2d2d2d2d 	.word	0x2d2d2d2d
   148a8:	2d2d2d2d 	.word	0x2d2d2d2d
   148ac:	2d2d2d2d 	.word	0x2d2d2d2d
   148b0:	2d2d2d2d 	.word	0x2d2d2d2d
   148b4:	2d2d2d2d 	.word	0x2d2d2d2d
   148b8:	2d2d2d2d 	.word	0x2d2d2d2d
   148bc:	5b000a0d 	.word	0x5b000a0d
   148c0:	205d7325 	.word	0x205d7325
   148c4:	4648202d 	.word	0x4648202d
   148c8:	5b205253 	.word	0x5b205253
   148cc:	30257830 	.word	0x30257830
   148d0:	0d5d5838 	.word	0x0d5d5838
   148d4:	255b000a 	.word	0x255b000a
   148d8:	2d205d73 	.word	0x2d205d73
   148dc:	53434920 	.word	0x53434920
   148e0:	305b2052 	.word	0x305b2052
   148e4:	38302578 	.word	0x38302578
   148e8:	0a0d5d58 	.word	0x0a0d5d58
   148ec:	73255b00 	.word	0x73255b00
   148f0:	202d205d 	.word	0x202d205d
   148f4:	2050534d 	.word	0x2050534d
   148f8:	2578305b 	.word	0x2578305b
   148fc:	5d583830 	.word	0x5d583830
   14900:	0a0d      	.short	0x0a0d
   14902:	00          	.byte	0x00
   14903:	5b          	.byte	0x5b
   14904:	205d7325 	.word	0x205d7325
   14908:	654d202d 	.word	0x654d202d
   1490c:	79726f6d 	.word	0x79726f6d
   14910:	6e616d20 	.word	0x6e616d20
   14914:	6d656761 	.word	0x6d656761
   14918:	20746e65 	.word	0x20746e65
   1491c:	6c756166 	.word	0x6c756166
   14920:	53202174 	.word	0x53202174
   14924:	6b636174 	.word	0x6b636174
   14928:	61727420 	.word	0x61727420
   1492c:	0d3a6563 	.word	0x0d3a6563
   14930:	255b000a 	.word	0x255b000a
   14934:	2d205d73 	.word	0x2d205d73
   14938:	464d4d20 	.word	0x464d4d20
   1493c:	5b205253 	.word	0x5b205253
   14940:	30257830 	.word	0x30257830
   14944:	0d5d5832 	.word	0x0d5d5832
   14948:	255b000a 	.word	0x255b000a
   1494c:	2d205d73 	.word	0x2d205d73
   14950:	464d4d20 	.word	0x464d4d20
   14954:	5b205241 	.word	0x5b205241
   14958:	30257830 	.word	0x30257830
   1495c:	0d5d5838 	.word	0x0d5d5838
   14960:	000a      	.short	0x000a
   14962:	255b      	.short	0x255b
   14964:	2d205d73 	.word	0x2d205d73
   14968:	73754220 	.word	0x73754220
   1496c:	75616620 	.word	0x75616620
   14970:	2021746c 	.word	0x2021746c
   14974:	63617453 	.word	0x63617453
   14978:	7274206b 	.word	0x7274206b
   1497c:	3a656361 	.word	0x3a656361
   14980:	5b000a0d 	.word	0x5b000a0d
   14984:	205d7325 	.word	0x205d7325
   14988:	4642202d 	.word	0x4642202d
   1498c:	5b205253 	.word	0x5b205253
   14990:	30257830 	.word	0x30257830
   14994:	0d5d5832 	.word	0x0d5d5832
   14998:	255b000a 	.word	0x255b000a
   1499c:	2d205d73 	.word	0x2d205d73
   149a0:	41464220 	.word	0x41464220
   149a4:	305b2052 	.word	0x305b2052
   149a8:	38302578 	.word	0x38302578
   149ac:	0a0d5d58 	.word	0x0a0d5d58
   149b0:	00          	.byte	0x00
   149b1:	5b          	.byte	0x5b
   149b2:	7325      	.short	0x7325
   149b4:	202d205d 	.word	0x202d205d
   149b8:	67617355 	.word	0x67617355
   149bc:	61662065 	.word	0x61662065
   149c0:	21746c75 	.word	0x21746c75
   149c4:	61745320 	.word	0x61745320
   149c8:	74206b63 	.word	0x74206b63
   149cc:	65636172 	.word	0x65636172
   149d0:	000a0d3a 	.word	0x000a0d3a
   149d4:	5d73255b 	.word	0x5d73255b
   149d8:	55202d20 	.word	0x55202d20
   149dc:	20525346 	.word	0x20525346
   149e0:	2578305b 	.word	0x2578305b
   149e4:	5d583430 	.word	0x5d583430
   149e8:	0a0d      	.short	0x0a0d
	...

000149eb <__FUNCTION__.7669>:
   149eb:	6168 6472 6166 6c75 5f74 7274 6361 5f65     hardfault_trace_
   149fb:	7473 6361 006b                              stack.

00014a01 <__FUNCTION__.7682>:
   14a01:	656d 6d6d 6e61 6761 5f65 7274 6361 5f65     memmanage_trace_
   14a11:	7473 6361 006b                              stack.

00014a17 <__FUNCTION__.7695>:
   14a17:	7562 6673 7561 746c 745f 6172 6563 735f     busfault_trace_s
   14a27:	6174 6b63                                    tack.

00014a2c <__FUNCTION__.7708>:
   14a2c:	7375 6761 6665 7561 746c 745f 6172 6563     usagefault_trace
   14a3c:	735f 6174 6b63 5b00 7325 205d 202d 764f     _stack.[%s] - Ov
   14a4c:	6e65 5020 4449 6920 696e 2074 4b4f 0d21     en PID init OK!.
   14a5c:	000a 255b 5d73 2d20 4f20 6576 206e 4950     ..[%s] - Oven PI
   14a6c:	2044 6e69 7469 4e20 4b4f 0d21 000a 255b     D init NOK!...[%
   14a7c:	5d73 2d20 5020 4449 2d20 4c20 7361 2074     s] - PID - Last 
   14a8c:	7075 6164 6574 203a 6c25 756c 6d20 2073     update: %llu ms 
   14a9c:	6761 0d6f 000a 255b 5d73 2d20 5020 4449     ago...[%s] - PID
   14aac:	2d20 4d20 5043 3639 3030 7420 6d65 2070      - MCP9600 temp 
   14abc:	2e25 6633 4320 0a0d 5b00 7325 205d 202d     %.3f C...[%s] - 
   14acc:	4950 2044 202d 6574 706d 7420 7261 6567     PID - temp targe
   14adc:	2074 2e25 6633 4320 0a0d 5b00 7325 205d     t %.3f C...[%s] 
   14aec:	202d 4950 2044 202d 6e69 6574 7267 6c61     - PID - integral
   14afc:	2520 332e 0d66 000a 255b 5d73 2d20 5020      %.3f...[%s] - P
   14b0c:	4449 2d20 6f20 7475 7570 2074 2e25 6632     ID - output %.2f
   14b1c:	2f20 2520 0d64 000a 255b 5d73 2d20 5320      / %d...[%s] - S
   14b2c:	6174 6574 2d20 7020 6572 6568 7461 0a0d     tate - preheat..
   14b3c:	5b00 7325 205d 202d 7453 7461 2065 202d     .[%s] - State - 
   14b4c:	7270 676f 6572 7373 2d20 2520 332e 2066     progress - %.3f 
   14b5c:	2043 202f 3631 2030 0d43 000a 255b 5d73     C / 160 C...[%s]
   14b6c:	2d20 5320 6174 6574 2d20 7320 616f 0d6b      - State - soak.
   14b7c:	000a 255b 5d73 2d20 5320 6174 6574 2d20     ..[%s] - State -
   14b8c:	7020 6f72 7267 7365 2073 202d 6c25 2075      progress - %lu 
   14b9c:	736d 6c20 6665 0d74 000a 255b 5d73 2d20     ms left...[%s] -
   14bac:	5320 6174 6574 2d20 7220 6665 6f6c 0d77      State - reflow.
   14bbc:	000a 255b 5d73 2d20 5320 6174 6574 2d20     ..[%s] - State -
   14bcc:	7020 6f72 7267 7365 2073 202d 2e25 6633      progress - %.3f
   14bdc:	4320 2f20 3220 3032 4320 0a0d 5b00 7325      C / 220 C...[%s
   14bec:	205d 202d 7453 7461 2065 202d 6f63 6c6f     ] - State - cool
   14bfc:	0a0d 5b00 7325 205d 202d 7453 7461 2065     ...[%s] - State 
   14c0c:	202d 6469 656c 0a0d                          - idle...

00014c15 <__FUNCTION__.8591>:
   14c15:	766f 6e65 695f 696e 0074                    oven_init.

00014c1f <__FUNCTION__.8599>:
   14c1f:	766f 6e65 745f 7361 006b 624f 656a 7463     oven_task.Object
   14c2f:	7520 6173 6567 6420 6d65 006f 7542 7474      usage demo.Butt
   14c3f:	6e6f 3120 4200 7475 6f74 206e 0032 6f4e     on 1.Button 2.No
   14c4f:	656e 4c0a 7469 6c74 0a65 6148 666c 410a     ne.Little.Half.A
   14c5f:	6c20 746f 410a 6c6c 3f00 2500 2573 7568      lot.All.?.%s%hu
   14c6f:	2546 7568 6325 6325 6825 7568 4c00 574f     F%hu%c%c%hhu.LOW
   14c7f:	4f00 004b 255b 5d73 2d20 4420 7665 6369     .OK.[%s] - Devic
   14c8f:	3a65 2520 0d73 000a 255b 5d73 2d20 4420     e: %s...[%s] - D
   14c9f:	7665 6369 2065 6552 6976 6973 6e6f 203a     evice Revision: 
   14caf:	7830 3025 5834 0a0d 5b00 7325 205d 202d     0x%04X...[%s] - 
   14cbf:	6143 696c 7262 7461 6f69 206e 6574 706d     Calibration temp
   14ccf:	7265 7461 7275 3a65 2520 6868 2075 0d43     erature: %hhu C.
   14cdf:	000a 255b 5d73 2d20 4620 616c 6873 5320     ..[%s] - Flash S
   14cef:	7a69 3a65 2520 7568 6b20 0d42 000a 255b     ize: %hu kB...[%
   14cff:	5d73 2d20 5220 4d41 5320 7a69 3a65 2520     s] - RAM Size: %
   14d0f:	7568 6b20 0d42 000a 255b 5d73 2d20 4620     hu kB...[%s] - F
   14d1f:	6572 2065 4152 3a4d 2520 756c 4220 0a0d     ree RAM: %lu B..
   14d2f:	5b00 7325 205d 202d 6e55 7169 6575 4920     .[%s] - Unique I
   14d3f:	3a44 2520 3830 2d58 3025 5838 0a0d 5b00     D: %08X-%08X...[
   14d4f:	7325 205d 202d 4d52 2055 202d 6552 6573     %s] - RMU - Rese
   14d5f:	2074 6163 7375 3a65 2520 6868 0d75 000a     t cause: %hhu...
   14d6f:	255b 5d73 2d20 5220 554d 2d20 5220 7365     [%s] - RMU - Res
   14d7f:	7465 7320 6174 6574 203a 6825 7568 0a0d     et state: %hhu..
   14d8f:	5b00 7325 205d 202d 4d43 2055 202d 4648     .[%s] - CMU - HF
   14d9f:	4f58 4320 6f6c 6b63 203a 2e25 6631 4d20     XO Clock: %.1f M
   14daf:	7a48 0d21 000a 255b 5d73 2d20 4320 554d     Hz!...[%s] - CMU
   14dbf:	2d20 4820 5246 4f43 4320 6f6c 6b63 203a      - HFRCO Clock: 
   14dcf:	2e25 6631 4d20 7a48 0d21 000a 255b 5d73     %.1f MHz!...[%s]
   14ddf:	2d20 4320 554d 2d20 5520 4853 5246 4f43      - CMU - USHFRCO
   14def:	4320 6f6c 6b63 203a 2e25 6631 4d20 7a48      Clock: %.1f MHz
   14dff:	0d21 000a 255b 5d73 2d20 4320 554d 2d20     !...[%s] - CMU -
   14e0f:	4120 5855 4648 4352 204f 6c43 636f 3a6b      AUXHFRCO Clock:
   14e1f:	2520 312e 2066 484d 217a 0a0d 5b00 7325      %.1f MHz!...[%s
   14e2f:	205d 202d 4d43 2055 202d 464c 4f58 4320     ] - CMU - LFXO C
   14e3f:	6f6c 6b63 203a 2e25 6633 6b20 7a48 0d21     lock: %.3f kHz!.
   14e4f:	000a 255b 5d73 2d20 4320 554d 2d20 4c20     ..[%s] - CMU - L
   14e5f:	5246 4f43 4320 6f6c 6b63 203a 2e25 6633     FRCO Clock: %.3f
   14e6f:	6b20 7a48 0d21 000a 255b 5d73 2d20 4320      kHz!...[%s] - C
   14e7f:	554d 2d20 5520 464c 4352 204f 6c43 636f     MU - ULFRCO Cloc
   14e8f:	3a6b 2520 332e 2066 486b 217a 0a0d 5b00     k: %.3f kHz!...[
   14e9f:	7325 205d 202d 4d43 2055 202d 4648 5253     %s] - CMU - HFSR
   14eaf:	2043 6c43 636f 3a6b 2520 312e 2066 484d     C Clock: %.1f MH
   14ebf:	217a 0a0d 5b00 7325 205d 202d 4d43 2055     z!...[%s] - CMU 
   14ecf:	202d 4648 4320 6f6c 6b63 203a 2e25 6631     - HF Clock: %.1f
   14edf:	4d20 7a48 0d21 000a 255b 5d73 2d20 4320      MHz!...[%s] - C
   14eef:	554d 2d20 4820 4246 5355 4320 6f6c 6b63     MU - HFBUS Clock
   14eff:	203a 2e25 6631 4d20 7a48 0d21 000a 255b     : %.1f MHz!...[%
   14f0f:	5d73 2d20 4320 554d 2d20 4820 4346 524f     s] - CMU - HFCOR
   14f1f:	2045 6c43 636f 3a6b 2520 312e 2066 484d     E Clock: %.1f MH
   14f2f:	217a 0a0d 5b00 7325 205d 202d 4d43 2055     z!...[%s] - CMU 
   14f3f:	202d 4648 5845 2050 6c43 636f 3a6b 2520     - HFEXP Clock: %
   14f4f:	312e 2066 484d 217a 0a0d 5b00 7325 205d     .1f MHz!...[%s] 
   14f5f:	202d 4d43 2055 202d 4648 4550 2052 6c43     - CMU - HFPER Cl
   14f6f:	636f 3a6b 2520 312e 2066 484d 217a 0a0d     ock: %.1f MHz!..
   14f7f:	5b00 7325 205d 202d 4d43 2055 202d 4648     .[%s] - CMU - HF
   14f8f:	4550 4252 4320 6f6c 6b63 203a 2e25 6631     PERB Clock: %.1f
   14f9f:	4d20 7a48 0d21 000a 255b 5d73 2d20 4320      MHz!...[%s] - C
   14faf:	554d 2d20 4820 5046 5245 2043 6c43 636f     MU - HFPERC Cloc
   14fbf:	3a6b 2520 312e 2066 484d 217a 0a0d 5b00     k: %.1f MHz!...[
   14fcf:	7325 205d 202d 4d43 2055 202d 4648 454c     %s] - CMU - HFLE
   14fdf:	4320 6f6c 6b63 203a 2e25 6631 4d20 7a48      Clock: %.1f MHz
   14fef:	0d21 000a 255b 5d73 2d20 4320 554d 2d20     !...[%s] - CMU -
   14fff:	5120 5053 2049 6c43 636f 3a6b 2520 312e      QSPI Clock: %.1
   1500f:	2066 484d 217a 0a0d 5b00 7325 205d 202d     f MHz!...[%s] - 
   1501f:	4d43 2055 202d 4453 4f49 4320 6f6c 6b63     CMU - SDIO Clock
   1502f:	203a 2e25 6631 4d20 7a48 0d21 000a 255b     : %.1f MHz!...[%
   1503f:	5d73 2d20 4320 554d 2d20 5520 4253 4320     s] - CMU - USB C
   1504f:	6f6c 6b63 203a 2e25 6631 4d20 7a48 0d21     lock: %.1f MHz!.
   1505f:	000a 255b 5d73 2d20 4320 554d 2d20 4120     ..[%s] - CMU - A
   1506f:	4344 2030 6c43 636f 3a6b 2520 312e 2066     DC0 Clock: %.1f 
   1507f:	484d 217a 0a0d 5b00 7325 205d 202d 4d43     MHz!...[%s] - CM
   1508f:	2055 202d 4441 3143 4320 6f6c 6b63 203a     U - ADC1 Clock: 
   1509f:	2e25 6631 4d20 7a48 0d21 000a 255b 5d73     %.1f MHz!...[%s]
   150af:	2d20 4320 554d 2d20 4420 4742 4320 6f6c      - CMU - DBG Clo
   150bf:	6b63 203a 2e25 6631 4d20 7a48 0d21 000a     ck: %.1f MHz!...
   150cf:	255b 5d73 2d20 4320 554d 2d20 4120 5855     [%s] - CMU - AUX
   150df:	4320 6f6c 6b63 203a 2e25 6631 4d20 7a48      Clock: %.1f MHz
   150ef:	0d21 000a 255b 5d73 2d20 4320 554d 2d20     !...[%s] - CMU -
   150ff:	4c20 4146 4320 6f6c 6b63 203a 2e25 6633      LFA Clock: %.3f
   1510f:	6b20 7a48 0d21 000a 255b 5d73 2d20 4320      kHz!...[%s] - C
   1511f:	554d 2d20 4c20 5345 4e45 4553 4320 6f6c     MU - LESENSE Clo
   1512f:	6b63 203a 2e25 6633 6b20 7a48 0d21 000a     ck: %.3f kHz!...
   1513f:	255b 5d73 2d20 4320 554d 2d20 5220 4354     [%s] - CMU - RTC
   1514f:	4320 6f6c 6b63 203a 2e25 6633 6b20 7a48      Clock: %.3f kHz
   1515f:	0d21 000a 255b 5d73 2d20 4320 554d 2d20     !...[%s] - CMU -
   1516f:	4c20 4443 4320 6f6c 6b63 203a 2e25 6633      LCD Clock: %.3f
   1517f:	6b20 7a48 0d21 000a 255b 5d73 2d20 4320      kHz!...[%s] - C
   1518f:	554d 2d20 4c20 5445 4d49 5245 2030 6c43     MU - LETIMER0 Cl
   1519f:	636f 3a6b 2520 332e 2066 486b 217a 0a0d     ock: %.3f kHz!..
   151af:	5b00 7325 205d 202d 4d43 2055 202d 454c     .[%s] - CMU - LE
   151bf:	4954 454d 3152 4320 6f6c 6b63 203a 2e25     TIMER1 Clock: %.
   151cf:	6633 6b20 7a48 0d21 000a 255b 5d73 2d20     3f kHz!...[%s] -
   151df:	4320 554d 2d20 4c20 4246 4320 6f6c 6b63      CMU - LFB Clock
   151ef:	203a 2e25 6633 6b20 7a48 0d21 000a 255b     : %.3f kHz!...[%
   151ff:	5d73 2d20 4320 554d 2d20 4c20 5545 5241     s] - CMU - LEUAR
   1520f:	3054 4320 6f6c 6b63 203a 2e25 6633 6b20     T0 Clock: %.3f k
   1521f:	7a48 0d21 000a 255b 5d73 2d20 4320 554d     Hz!...[%s] - CMU
   1522f:	2d20 4c20 5545 5241 3154 4320 6f6c 6b63      - LEUART1 Clock
   1523f:	203a 2e25 6633 6b20 7a48 0d21 000a 255b     : %.3f kHz!...[%
   1524f:	5d73 2d20 4320 554d 2d20 5320 5359 4954     s] - CMU - SYSTI
   1525f:	4b43 4320 6f6c 6b63 203a 2e25 6633 6b20     CK Clock: %.3f k
   1526f:	7a48 0d21 000a 255b 5d73 2d20 4320 554d     Hz!...[%s] - CMU
   1527f:	2d20 4320 4553 204e 6c43 636f 3a6b 2520      - CSEN Clock: %
   1528f:	332e 2066 486b 217a 0a0d 5b00 7325 205d     .3f kHz!...[%s] 
   1529f:	202d 4d43 2055 202d 464c 2043 6c43 636f     - CMU - LFC Cloc
   152af:	3a6b 2520 332e 2066 486b 217a 0a0d 5b00     k: %.3f kHz!...[
   152bf:	7325 205d 202d 4d43 2055 202d 464c 2045     %s] - CMU - LFE 
   152cf:	6c43 636f 3a6b 2520 332e 2066 486b 217a     Clock: %.3f kHz!
   152df:	0a0d 5b00 7325 205d 202d 4d43 2055 202d     ...[%s] - CMU - 
   152ef:	5452 4343 4320 6f6c 6b63 203a 2e25 6633     RTCC Clock: %.3f
   152ff:	6b20 7a48 0d21 000a 255b 5d73 2d20 4520      kHz!...[%s] - E
   1530f:	554d 2d20 4120 4456 2044 6146 6c6c 5420     MU - AVDD Fall T
   1531f:	7268 7365 6f68 646c 203a 2e25 6632 6d20     hreshold: %.2f m
   1532f:	2156 0a0d 5b00 7325 205d 202d 4d45 2055     V!...[%s] - EMU 
   1533f:	202d 5641 4444 5220 7369 2065 6854 6572     - AVDD Rise Thre
   1534f:	6873 6c6f 3a64 2520 322e 2066 566d 0d21     shold: %.2f mV!.
   1535f:	000a 255b 5d73 2d20 4520 554d 2d20 4120     ..[%s] - EMU - A
   1536f:	4456 2044 6f56 746c 6761 3a65 2520 322e     VDD Voltage: %.2
   1537f:	2066 566d 0a0d 5b00 7325 205d 202d 4d45     f mV...[%s] - EM
   1538f:	2055 202d 5641 4444 5320 6174 7574 3a73     U - AVDD Status:
   1539f:	2520 0d73 000a 255b 5d73 2d20 4520 554d      %s...[%s] - EMU
   153af:	2d20 4420 4456 2044 6146 6c6c 5420 7268      - DVDD Fall Thr
   153bf:	7365 6f68 646c 203a 2e25 6632 6d20 2156     eshold: %.2f mV!
   153cf:	0a0d 5b00 7325 205d 202d 4d45 2055 202d     ...[%s] - EMU - 
   153df:	5644 4444 5220 7369 2065 6854 6572 6873     DVDD Rise Thresh
   153ef:	6c6f 3a64 2520 322e 2066 566d 0d21 000a     old: %.2f mV!...
   153ff:	255b 5d73 2d20 4520 554d 2d20 4420 4456     [%s] - EMU - DVD
   1540f:	2044 6f56 746c 6761 3a65 2520 322e 2066     D Voltage: %.2f 
   1541f:	566d 0a0d 5b00 7325 205d 202d 4d45 2055     mV...[%s] - EMU 
   1542f:	202d 5644 4444 5320 6174 7574 3a73 2520     - DVDD Status: %
   1543f:	0d73 000a 255b 5d73 2d20 4520 554d 2d20     s...[%s] - EMU -
   1544f:	4920 564f 4444 4620 6c61 206c 6854 6572      IOVDD Fall Thre
   1545f:	6873 6c6f 3a64 2520 322e 2066 566d 0d21     shold: %.2f mV!.
   1546f:	000a 255b 5d73 2d20 4520 554d 2d20 4920     ..[%s] - EMU - I
   1547f:	564f 4444 5220 7369 2065 6854 6572 6873     OVDD Rise Thresh
   1548f:	6c6f 3a64 2520 322e 2066 566d 0d21 000a     old: %.2f mV!...
   1549f:	255b 5d73 2d20 4520 554d 2d20 4920 564f     [%s] - EMU - IOV
   154af:	4444 5620 6c6f 6174 6567 203a 2e25 6632     DD Voltage: %.2f
   154bf:	6d20 0d56 000a 255b 5d73 2d20 4520 554d      mV...[%s] - EMU
   154cf:	2d20 4920 564f 4444 5320 6174 7574 3a73      - IOVDD Status:
   154df:	2520 0d73 000a 255b 5d73 2d20 4520 554d      %s...[%s] - EMU
   154ef:	2d20 4320 726f 2065 6f56 746c 6761 3a65      - Core Voltage:
   154ff:	2520 322e 2066 566d 0a0d 5b00 7325 205d      %.2f mV...[%s] 
   1550f:	202d 4d45 2055 202d 3552 2056 5256 4745     - EMU - R5V VREG
   1551f:	2049 6f56 746c 6761 3a65 2520 322e 2066     I Voltage: %.2f 
   1552f:	566d 0a0d 5b00 7325 205d 202d 4d45 2055     mV...[%s] - EMU 
   1553f:	202d 3552 2056 5256 4745 2049 7543 7272     - R5V VREGI Curr
   1554f:	6e65 3a74 2520 322e 2066 416d 0a0d 5b00     ent: %.2f mA...[
   1555f:	7325 205d 202d 4d45 2055 202d 3552 2056     %s] - EMU - R5V 
   1556f:	4256 5355 5620 6c6f 6174 6567 203a 2e25     VBUS Voltage: %.
   1557f:	6632 6d20 0d56 000a 255b 5d73 2d20 4520     2f mV...[%s] - E
   1558f:	554d 2d20 5220 5635 5620 5542 2053 7543     MU - R5V VBUS Cu
   1559f:	7272 6e65 3a74 2520 322e 2066 416d 0a0d     rrent: %.2f mA..
   155af:	5b00 7325 205d 202d 4d45 2055 202d 3552     .[%s] - EMU - R5
   155bf:	2056 5256 4745 204f 6f56 746c 6761 3a65     V VREGO Voltage:
   155cf:	2520 322e 2066 566d 0a0d 5b00 7325 205d      %.2f mV...[%s] 
   155df:	202d 6353 6e61 696e 676e 4920 4332 6220     - Scanning I2C b
   155ef:	7375 3020 2e2e 0d2e 000a 255b 5d73 2d20     us 0......[%s] -
   155ff:	2020 4120 6464 6572 7373 3020 2578 3230        Address 0x%02
   1560f:	2058 4341 654b 2164 0a0d 5b00 7325 205d     X ACKed!...[%s] 
   1561f:	202d 6353 6e61 696e 676e 4920 4332 6220     - Scanning I2C b
   1562f:	7375 3120 2e2e 0d2e 000a 255b 5d73 2d20     us 1......[%s] -
   1563f:	4d20 5043 3639 3030 2320 2030 6e69 7469      MCP9600 #0 init
   1564f:	4f20 214b 0a0d 5b00 7325 205d 202d 434d      OK!...[%s] - MC
   1565f:	3950 3036 2030 3023 6920 696e 2074 4f4e     P9600 #0 init NO
   1566f:	214b 0a0d 5b00 7325 205d 202d 434d 3950     K!...[%s] - MCP9
   1567f:	3036 2030 3723 6920 696e 2074 4b4f 0d21     600 #7 init OK!.
   1568f:	000a 255b 5d73 2d20 4d20 5043 3639 3030     ..[%s] - MCP9600
   1569f:	2320 2037 6e69 7469 4e20 4b4f 0d21 000a      #7 init NOK!...
   156af:	255b 5d73 2d20 4620 616c 6873 5020 7261     [%s] - Flash Par
   156bf:	2074 4449 203a 3025 5836 0a0d 5b00 7325     t ID: %06X...[%s
   156cf:	205d 202d 6c46 7361 2068 4449 203a 3025     ] - Flash ID: %0
   156df:	5832 3025 5832 3025 5832 3025 5832 3025     2X%02X%02X%02X%0
   156ef:	5832 3025 5832 3025 5832 3025 5832 0a0d     2X%02X%02X%02X..
   156ff:	5b00 7325 205d 202d 4b53 3839 3232 4c20     .[%s] - SK9822 L
   1570f:	4445 2073 6e49 7469 0d21 000a 255b 5d73     EDs Init!...[%s]
   1571f:	2d20 4920 494c 3439 3838 6920 696e 2174      - ILI9488 init!
   1572f:	0a0d 5b00 7325 205d 202d 5446 3236 3633     ...[%s] - FT6236
   1573f:	6920 696e 2174 0a0d 5b00 7325 205d 202d      init!...[%s] - 
   1574f:	434d 3950 3036 2030 3023 4920 2044 7830     MCP9600 #0 ID 0x
   1575f:	3025 5832 5220 7665 7369 6f69 206e 7830     %02X Revision 0x
   1576f:	3025 5832 0a0d 5b00 7325 205d 202d 434d     %02X...[%s] - MC
   1577f:	3950 3036 2030 3723 4920 2044 7830 3025     P9600 #7 ID 0x%0
   1578f:	5832 5220 7665 7369 6f69 206e 7830 3025     2X Revision 0x%0
   1579f:	5832 0a0d 4500 5246 3233 474d 5031 4500     2X...EFR32MG1P.E
   157af:	5246 3233 474d 4231 4500 5246 3233 474d     FR32MG1B.EFR32MG
   157bf:	5631 4500 5246 3233 4742 5031 4500 5246     1V.EFR32BG1P.EFR
   157cf:	3233 4742 4231 4500 5246 3233 4742 5631     32BG1B.EFR32BG1V
   157df:	4500 5246 3233 4746 5031 4500 5246 3233     .EFR32FG1P.EFR32
   157ef:	4746 4231 4500 5246 3233 4746 5631 4500     FG1B.EFR32FG1V.E
   157ff:	5246 3233 474d 3231 0050 4645 3352 4d32     FR32MG12P.EFR32M
   1580f:	3147 4232 4500 5246 3233 474d 3231 0056     G12B.EFR32MG12V.
   1581f:	4645 3352 4232 3147 5032 4500 5246 3233     EFR32BG12P.EFR32
   1582f:	4742 3231 0042 4645 3352 4232 3147 5632     BG12B.EFR32BG12V
   1583f:	4500 5246 3233 4746 3231 0050 4645 3352     .EFR32FG12P.EFR3
   1584f:	4632 3147 4232 4500 5246 3233 4746 3231     2FG12B.EFR32FG12
   1585f:	0056 4645 3352 4d32 3147 5033 4500 5246     V.EFR32MG13P.EFR
   1586f:	3233 474d 3331 0042 4645 3352 4d32 3147     32MG13B.EFR32MG1
   1587f:	5633 4500 5246 3233 4742 3331 0050 4645     3V.EFR32BG13P.EF
   1588f:	3352 4232 3147 4233 4500 5246 3233 4742     R32BG13B.EFR32BG
   1589f:	3331 0056 4645 3352 5a32 3147 5033 4500     13V.EFR32ZG13P.E
   158af:	5246 3233 4746 3331 0050 4645 3352 4632     FR32FG13P.EFR32F
   158bf:	3147 4233 4500 5246 3233 4746 3331 0056     G13B.EFR32FG13V.
   158cf:	4645 3352 4d32 3147 5034 4500 5246 3233     EFR32MG14P.EFR32
   158df:	474d 3431 0042 4645 3352 4d32 3147 5634     MG14B.EFR32MG14V
   158ef:	4500 5246 3233 4742 3431 0050 4645 3352     .EFR32BG14P.EFR3
   158ff:	4232 3147 4234 4500 5246 3233 4742 3431     2BG14B.EFR32BG14
   1590f:	0056 4645 3352 5a32 3147 5034 4500 5246     V.EFR32ZG14P.EFR
   1591f:	3233 4746 3431 0050 4645 3352 4632 3147     32FG14P.EFR32FG1
   1592f:	4234 4500 5246 3233 4746 3431 0056 4645     4B.EFR32FG14V.EF
   1593f:	334d 4732 4500 4d46 3233 4747 4500 4d46     M32G.EFM32GG.EFM
   1594f:	3233 4754 4500 4d46 3233 474c 4500 4d46     32TG.EFM32LG.EFM
   1595f:	3233 4757 4500 4d46 3233 475a 4500 4d46     32WG.EFM32ZG.EFM
   1596f:	3233 4748 4500 4d46 3233 4750 4231 4500     32HG.EFM32PG1B.E
   1597f:	4d46 3233 474a 4231 4500 4d46 3233 4750     FM32JG1B.EFM32PG
   1598f:	3231 0042 4645 334d 4a32 3147 4232 4500     12B.EFM32JG12B.E
   1599f:	4d46 3233 4747 3131 0042 4645 334d 5432     FM32GG11B.EFM32T
   159af:	3147 4231 4500 4d46 3233 4747 3231 0042     G11B.EFM32GG12B.
   159bf:	5a45 3352 4c32 0047 5a45 3352 5732 0047     EZR32LG.EZR32WG.
   159cf:	5a45 3352 4832 0047                          EZR32HG..

000159d8 <CSWTCH.56>:
   159d8:	57a4 0001 57ae 0001 57b8 0001 57c2 0001     .W...W...W...W..
   159e8:	57cc 0001 57d6 0001 4c68 0001 4c68 0001     .W...W..hL..hL..
   159f8:	4c68 0001 57e0 0001 57ea 0001 57f4 0001     hL...W...W...W..
   15a08:	57fe 0001 5809 0001 5814 0001 581f 0001     .W...X...X...X..
   15a18:	582a 0001 5835 0001 4c68 0001 4c68 0001     *X..5X..hL..hL..
   15a28:	4c68 0001 5840 0001 584b 0001 5856 0001     hL..@X..KX..VX..
   15a38:	5861 0001 586c 0001 5877 0001 5882 0001     aX..lX..wX...X..
   15a48:	588d 0001 5898 0001 58a3 0001 4c68 0001     .X...X...X..hL..
   15a58:	4c68 0001 58ae 0001 58b9 0001 58c4 0001     hL...X...X...X..
   15a68:	58cf 0001 58da 0001 58e5 0001 58f0 0001     .X...X...X...X..
   15a78:	58fb 0001 5906 0001 5911 0001 4c68 0001     .X...Y...Y..hL..
   15a88:	4c68 0001 591c 0001 5927 0001 5932 0001     hL...Y..'Y..2Y..
   15a98:	4c68 0001 4c68 0001 4c68 0001 4c68 0001     hL..hL..hL..hL..
   15aa8:	4c68 0001 4c68 0001 4c68 0001 593d 0001     hL..hL..hL..=Y..
   15ab8:	5944 0001 594c 0001 5954 0001 595c 0001     DY..LY..TY..\Y..
   15ac8:	5964 0001 596c 0001 4c68 0001 4c68 0001     dY..lY..hL..hL..
   15ad8:	4c68 0001 5974 0001 4c68 0001 597e 0001     hL..tY..hL..~Y..
   15ae8:	4c68 0001 5988 0001 4c68 0001 5993 0001     hL...Y..hL...Y..
   15af8:	4c68 0001 4c68 0001 4c68 0001 4c68 0001     hL..hL..hL..hL..
   15b08:	4c68 0001 4c68 0001 4c68 0001 4c68 0001     hL..hL..hL..hL..
   15b18:	4c68 0001 4c68 0001 4c68 0001 4c68 0001     hL..hL..hL..hL..
   15b28:	599e 0001 4c68 0001 4c68 0001 59a9 0001     .Y..hL..hL...Y..
   15b38:	4c68 0001 4c68 0001 59b4 0001 4c68 0001     hL..hL...Y..hL..
   15b48:	4c68 0001 4c68 0001 4c68 0001 4c68 0001     hL..hL..hL..hL..
   15b58:	4c68 0001 4c68 0001 4c68 0001 4c68 0001     hL..hL..hL..hL..
   15b68:	4c68 0001 4c68 0001 4c68 0001 4c68 0001     hL..hL..hL..hL..
   15b78:	59bf 0001 59c7 0001 59cf 0001               .Y...Y...Y..

00015b84 <__FUNCTION__.14077>:
   15b84:	6e69 7469                                    init.

00015b89 <__FUNCTION__.14088>:
   15b89:	616d 6e69                                    main.

00015b8e <g_usPacLookup>:
   15b8e:	000a 000c 0012 0018 001d 0022 0026 002a     ..........".&.*.
   15b9e:	002e 0032 0035 0039 003c 0040 0043 0046     ..2.5.9.<.@.C.F.
   15bae:	0049 004c 004f 0052 0055 0058 005a 005d     I.L.O.R.U.X.Z.].
   15bbe:	0060 0062 0065 0067 006a 006d 006f 0071     `.b.e.g.j.m.o.q.
   15bce:	0074 0076 0079 007b 007d 0080 0082 0084     t.v.y.{.}.......
   15bde:	0086 0089 008b 008d 008f 0091 0094 0096     ................
   15bee:	0098 009a 009c 009e 00a0 00a2 00a4 00a6     ................
   15bfe:	00a8 00aa 00ac 00ae 00b0 00b2 00b4 00b6     ................
   15c0e:	00b8 00ba 00bc 00be 00c0 00c1 00c3 00c5     ................
   15c1e:	00c7 00c9 00cb 00cd 00ce 00d0 00d2 00d4     ................
   15c2e:	00d6 00d7 00d9 00db 00dd 00de 00e0 00e2     ................
   15c3e:	00e4 00e5 00e7 00e9 00ea 00ec 00ee 00ef     ................
   15c4e:	00f1 00f3 00f4 00f6 00f8 00f9 00fb 00fd     ................
   15c5e:	00fe 0100 0102 0103 0105 0106 0108 010a     ................
   15c6e:	010b 010d 010e 0110 0112 0113 0115 0116     ................
   15c7e:	0118 0119 011b 011d 011e 0120 0121 0123     .......... .!.#.
   15c8e:	0124 0126 0127 0129 012a 012c 012d 012f     $.&.'.).*.,.-./.
   15c9e:	0130 0132 0133 0135 0136 0138 0139 013b     0.2.3.5.6.8.9.;.
   15cae:	013c 013e 013f 0140 0142 0143 0145 0146     <.>.?.@.B.C.E.F.
   15cbe:	0148 0149 014b 014c 014d 014f 0150 0152     H.I.K.L.M.O.P.R.
   15cce:	0153 0155 0156 0157 0159 015a 015c 015d     S.U.V.W.Y.Z.\.].
   15cde:	015e 0160 0161 0163 0164 0165 0167 0168     ^.`.a.c.d.e.g.h.
   15cee:	0169 016b 016c 016d 016f 0170 0172 0173     i.k.l.m.o.p.r.s.
   15cfe:	0174 0176 0177 0178 017a 017b 017c 017e     t.v.w.x.z.{.|.~.
   15d0e:	017f 0180 0182 0183 0184 0186 0187 0188     ................
   15d1e:	018a 018b 018c 018e 018f 0190 0191 0193     ................
   15d2e:	0194 0195 0197 0198 0199 019b 019c 019d     ................
   15d3e:	019e 01a0 01a1 01a2 01a3 01a5 01a6 01a7     ................
   15d4e:	01a9 01aa 01ab 01ac 01ae 01af 01b0 01b1     ................
   15d5e:	01b3 01b4 01b5 01b6 01b8 01b9 01ba 01bb     ................
   15d6e:	01bd 01be 01bf 01c0 01c2 01c3 01c4 01c5     ................
   15d7e:	01c6 01c8 01c9 01ca 01cb 01cd 01ce 01cf     ................
   15d8e:	01d0 01d1 01d3 01d4 01d5 01d6 01d7 01d9     ................
   15d9e:	01da 01db 01dc 01dd 01df 01e0 01e1 01e2     ................
   15dae:	01e3 01e5 01e6 01e7 01e8 01e9 01eb 01ec     ................
   15dbe:	01ed 01ee 01ef 01f0 01f2 01f3 01f4 01f5     ................
   15dce:	01f6 01f7 01f9 01fa 01fb 01fc 01fd 01fe     ................
   15dde:	0200 0201 0202 0203 0204 0205 0206 0208     ................
   15dee:	0209 020a 020b 020c 020d 020e 0210 0211     ................
   15dfe:	0212 0213 0214 0215 0216 0218 0219 021a     ................
   15e0e:	021b 021c 021d 021e 021f 0221 0222 0223     ..........!.".#.
   15e1e:	0224 0225 0226 0227 0228 0229 022b 022c     $.%.&.'.(.).+.,.
   15e2e:	022d 022e 022f 0230 0231 0232 0233 0235     -.../.0.1.2.3.5.
   15e3e:	0236 0237 0238 0239 023a 023b 023c 023d     6.7.8.9.:.;.<.=.
   15e4e:	023e 0240 0241 0242 0243 0244 0245 0246     >.@.A.B.C.D.E.F.
   15e5e:	0247 0248 0249 024a 024b 024d 024e 024f     G.H.I.J.K.M.N.O.
   15e6e:	0250 0251 0252 0253 0254 0255 0256 0257     P.Q.R.S.T.U.V.W.
   15e7e:	0258 0259 025b 025c 025d 025e 025f 0260     X.Y.[.\.].^._.`.
   15e8e:	0261 0262 0263 0264 0265 0266 0267 0268     a.b.c.d.e.f.g.h.
   15e9e:	0269 026a 026b 026d 026e 026f 0270 0271     i.j.k.m.n.o.p.q.
   15eae:	0272 0273 0274 0275 0276 0277 0278 0279     r.s.t.u.v.w.x.y.
   15ebe:	027a 027b 027c 027d 027e 027f 0280 0281     z.{.|.}.~.......
   15ece:	0282 0283 0285 0286 0287 0288 0289 028a     ................
   15ede:	028b 028c 028d 028e 028f 0290 0291 0292     ................
   15eee:	0293 0294 0295 0296 0297 0298 0299 029a     ................
   15efe:	029b 029c 029d 029e 029f 02a0 02a1 02a2     ................
   15f0e:	02a3 02a4 02a5 02a6 02a7 02a8 02a9 02aa     ................
   15f1e:	02ab 02ac 02ad 02ae 02af 02b0 02b1 02b2     ................
   15f2e:	02b3 02b4 02b5 02b6 02b7 02b8 02b9 02ba     ................
   15f3e:	02bb 02bc 02bd 02be 02bf 02c0 02c1 02c2     ................
   15f4e:	02c3 02c4 02c5 02c6 02c7 02c8 02c9 02ca     ................
   15f5e:	02cb 02cc 02cd 02ce 02cf 02d0 02d1 02d2     ................
   15f6e:	02d3 02d4 02d5 02d6 02d7 02d8 02d9 02da     ................
   15f7e:	02db 02dc 02dd 02de 02df 02e0 02e1 02e2     ................
   15f8e:	02e2 02e3 02e4 02e5 02e6 02e7 02e8 02e9     ................
   15f9e:	02ea 02eb 02ec 02ed 02ee 02ef 02f0 02f1     ................
   15fae:	02f2 02f3 02f4 02f5 02f6 02f7 02f8 02f9     ................
   15fbe:	02fa 02fb 02fb 02fc 02fd 02fe 02ff 0300     ................
   15fce:	0301 0302 0303 0304 0305 0306 0307 0308     ................
   15fde:	0309 030a 030b 030c 030d 030d 030e 030f     ................
   15fee:	0310 0311 0312 0313 0314 0315 0316 0317     ................
   15ffe:	0318 0319 031a 031b 031c 031c 031d 031e     ................
   1600e:	031f 0320 0321 0322 0323 0324 0325 0326     .. .!.".#.$.%.&.
   1601e:	0327 0328 0329 032a 032a 032b 032c 032d     '.(.).*.*.+.,.-.
   1602e:	032e 032f 0330 0331 0332 0333 0334 0335     ../.0.1.2.3.4.5.
   1603e:	0336 0336 0337 0338 0339 033a 033b 033c     6.6.7.8.9.:.;.<.
   1604e:	033d 033e 033f 0340 0341 0341 0342 0343     =.>.?.@.A.A.B.C.
   1605e:	0344 0345 0346 0347 0348 0349 034a 034b     D.E.F.G.H.I.J.K.
   1606e:	034c 034c 034d 034e 034f 0350 0351 0352     L.L.M.N.O.P.Q.R.
   1607e:	0353 0354 0355 0355 0356 0357 0358 0359     S.T.U.U.V.W.X.Y.
   1608e:	035a 035b 035c 035d 035e 035f 035f 0360     Z.[.\.].^._._.`.
   1609e:	0361 0362 0363 0364 0365 0366 0367 0367     a.b.c.d.e.f.g.g.
   160ae:	0368 0369 036a 036b 036c 036d 036e 036f     h.i.j.k.l.m.n.o.
   160be:	0370 0370 0371 0372 0373 0374 0375 0376     p.p.q.r.s.t.u.v.
   160ce:	0377 0378 0378 0379 037a 037b 037c 037d     w.x.x.y.z.{.|.}.
   160de:	037e 037f 0380 0380 0381 0382 0383 0384     ~...............
   160ee:	0385 0386 0387 0387 0388 0389 038a 038b     ................
   160fe:	038c 038d 038e 038f 038f 0390 0391 0392     ................
   1610e:	0393 0394 0395 0396 0396 0397 0398 0399     ................
   1611e:	039a 039b 039c 039d 039d 039e 039f 03a0     ................
   1612e:	03a1 03a2 03a3 03a3 03a4 03a5 03a6 03a7     ................
   1613e:	03a8 03a9 03aa 03aa 03ab 03ac 03ad 03ae     ................
   1614e:	03af 03b0 03b0 03b1 03b2 03b3 03b4 03b5     ................
   1615e:	03b6 03b6 03b7 03b8 03b9 03ba 03bb 03bc     ................
   1616e:	03bd 03bd 03be 03bf 03c0 03c1 03c2 03c3     ................
   1617e:	03c3 03c4 03c5 03c6 03c7 03c8 03c8 03c9     ................
   1618e:	03ca 03cb 03cc 03cd 03ce 03ce 03cf 03d0     ................
   1619e:	03d1 03d2 03d3 03d4 03d4 03d5 03d6 03d7     ................
   161ae:	03d8 03d9 03d9 03da 03db 03dc 03dd 03de     ................
   161be:	03df 03df 03e0 03e1 03e2 03e3 03e4 03e4     ................
   161ce:	03e5 03e6 03e7 03e8 03e9 03ea 03ea 03eb     ................
   161de:	03ec 03ed 03ee 03ef 03ef 03f0 03f1 03f2     ................
   161ee:	03f3 03f4 03f4 03f5 03f6 03f7 03f8 03f9     ................
   161fe:	03f9 03fa 03fb 03fc 03fd 03fe 03fe 03ff     ................
   1620e:	0400 0401 0402 0403 0403 0404 0405 0406     ................
   1621e:	0407 0408 0408 0409 040a 040b 040c 040d     ................
   1622e:	040d 040e 040f 0410 0411 0412 0412 0413     ................
   1623e:	0414 0415 0416 0416 0417 0418 0419 041a     ................
   1624e:	041b 041b 041c 041d 041e 041f 0420 0420     ............ . .
   1625e:	0421 0422 0423 0424 0424 0425 0426 0427     !.".#.$.$.%.&.'.
   1626e:	0428 0429 0429 042a 042b 042c 042d 042d     (.).).*.+.,.-.-.
   1627e:	042e 042f 0430 0431 0431 0432 0433 0434     ../.0.1.1.2.3.4.
   1628e:	0435 0436 0436 0437 0438 0439 043a 043a     5.6.6.7.8.9.:.:.
   1629e:	043b 043c 043d 043e 043e 043f 0440 0441     ;.<.=.>.>.?.@.A.
   162ae:	0442 0443 0443 0444 0445 0446 0447 0447     B.C.C.D.E.F.G.G.
   162be:	0448 0449 044a 044b 044b 044c 044d 044e     H.I.J.K.K.L.M.N.
   162ce:	044f 044f 0450 0451 0452 0453 0453 0454     O.O.P.Q.R.S.S.T.
   162de:	0455 0456 0457 0457 0458 0459 045a 045b     U.V.W.W.X.Y.Z.[.
   162ee:	045c 045c 045d 045e 045f 0460 0460 0461     \.\.].^._.`.`.a.
   162fe:	0462 0463 0463 0464 0465 0466 0467 0467     b.c.c.d.e.f.g.g.
   1630e:	0468 0469 046a 046b 046b 046c 046d 046e     h.i.j.k.k.l.m.n.
   1631e:	046f 046f 0470 0471 0472 0473 0473 0474     o.o.p.q.r.s.s.t.
   1632e:	0475 0476 0477 0477 0478 0479 047a 047b     u.v.w.w.x.y.z.{.
   1633e:	047b 047c 047d 047e 047e 047f 0480 0481     {.|.}.~.~.......
   1634e:	0482 0482 0483 0484 0485 0486 0486 0487     ................
   1635e:	0488 0489 048a 048a 048b 048c 048d 048d     ................
   1636e:	048e 048f 0490 0491 0491 0492 0493 0494     ................
   1637e:	0495 0495 0496 0497 0498 0498 0499 049a     ................
   1638e:	049b 049c 049c 049d 049e 049f 049f 04a0     ................
   1639e:	04a1 04a2 04a3 04a3 04a4 04a5 04a6 04a6     ................
   163ae:	04a7 04a8 04a9 04aa 04aa 04ab 04ac 04ad     ................
   163be:	04ad 04ae 04af 04b0 04b1 04b1 04b2 04b3     ................
   163ce:	04b4 04b4 04b5 04b6 04b7 04b8 04b8 04b9     ................
   163de:	04ba 04bb 04bb 04bc 04bd 04be 04bf 04bf     ................
   163ee:	04c0 04c1 04c2 04c2 04c3 04c4 04c5 04c5     ................
   163fe:	04c6 04c7 04c8 04c9 04c9 04ca 04cb 04cc     ................
   1640e:	04cc 04cd 04ce 04cf 04cf 04d0 04d1 04d2     ................
   1641e:	04d3 04d3 04d4 04d5 04d6 04d6 04d7 04d8     ................
   1642e:	04d9 04d9 04da 04db 04dc 04dc 04dd 04de     ................
   1643e:	04df 04e0 04e0 04e1 04e2 04e3 04e3 04e4     ................
   1644e:	04e5 04e6 04e6 04e7 04e8 04e9 04e9 04ea     ................
   1645e:	04eb 04ec 04ec 04ed 04ee 04ef 04ef 04f0     ................
   1646e:	04f1 04f2 04f3 04f3 04f4 04f5 04f6 04f6     ................
   1647e:	04f7 04f8 04f9 04f9 04fa 04fb 04fc 04fc     ................
   1648e:	04fd 04fe 04ff 04ff 0500 0501 0502 0502     ................
   1649e:	0503 0504 0505 0505 0506 0507 0508 0508     ................
   164ae:	0509 050a 050b 050b 050c 050d 050e 050e     ................
   164be:	050f 0510 0511 0511 0512 0513 0514 0514     ................
   164ce:	0515 0516 0517 0517 0518 0519 051a 051a     ................
   164de:	051b 051c 051d 051d 051e 051f 0520 0520     ............ . .
   164ee:	0521 0522 0523 0523 0524 0525 0526 0526     !.".#.#.$.%.&.&.
   164fe:	0527 0528 0529 0529 052a 052b 052c 052c     '.(.).).*.+.,.,.
   1650e:	052d 052e 052f 052f 0530 0531 0532 0532     -..././.0.1.2.2.
   1651e:	0533 0534 0535 0535 0536 0537 0537 0538     3.4.5.5.6.7.7.8.
   1652e:	0539 053a 053a 053b 053c 053d 053d 053e     9.:.:.;.<.=.=.>.
   1653e:	053f 0540 0540 0541 0542 0543 0543 0544     ?.@.@.A.B.C.C.D.
   1654e:	0545 0546 0546 0547 0548 0548 0549 054a     E.F.F.G.H.H.I.J.
   1655e:	054b 054b 054c 054d 054e 054e 054f 0550     K.K.L.M.N.N.O.P.
   1656e:	0551 0551 0552 0553 0554 0554 0555 0556     Q.Q.R.S.T.T.U.V.
   1657e:	0556 0557 0558 0559 0559 055a 055b 055c     V.W.X.Y.Y.Z.[.\.
   1658e:	055c 055d 055e 055f 055f 0560 0561 0561     \.].^._._.`.a.a.
   1659e:	0562 0563 0564 0564 0565 0566 0567 0567     b.c.d.d.e.f.g.g.
   165ae:	0568 0569 0569 056a 056b 056c 056c 056d     h.i.i.j.k.l.l.m.
   165be:	056e 056f 056f 0570 0571 0572 0572 0573     n.o.o.p.q.r.r.s.
   165ce:	0574 0574 0575 0576 0577 0577 0578 0579     t.t.u.v.w.w.x.y.
   165de:	057a 057a 057b 057c 057c 057d 057e 057f     z.z.{.|.|.}.~...
   165ee:	057f 0580 0581 0581 0582 0583 0584 0584     ................
   165fe:	0585 0586 0587 0587 0588 0589 0589 058a     ................
   1660e:	058b 058c 058c 058d 058e 058f 058f 0590     ................
   1661e:	0591 0591 0592 0593 0594 0594 0595 0596     ................
   1662e:	0596 0597 0598 0599 0599 059a 059b 059c     ................
   1663e:	059c 059d 059e 059e 059f 05a0 05a1 05a1     ................
   1664e:	05a2 05a3 05a3 05a4 05a5 05a6 05a6 05a7     ................
   1665e:	05a8 05a8 05a9 05aa 05ab 05ab 05ac 05ad     ................
   1666e:	05ad 05ae 05af 05b0 05b0 05b1 05b2 05b2     ................
   1667e:	05b3 05b4 05b5 05b5 05b6 05b7 05b7 05b8     ................
   1668e:	05b9 05ba 05ba 05bb 05bc 05bc 05bd 05be     ................
   1669e:	05bf 05bf 05c0 05c1 05c1 05c2 05c3 05c4     ................
   166ae:	05c4 05c5 05c6 05c6 05c7 05c8 05c9 05c9     ................
   166be:	05ca 05cb 05cb 05cc 05cd 05ce 05ce 05cf     ................
   166ce:	05d0 05d0 05d1 05d2 05d2 05d3 05d4 05d5     ................
   166de:	05d5 05d6 05d7 05d7 05d8 05d9 05da 05da     ................
   166ee:	05db 05dc 05dc 05dd 05de 05df 05df 05e0     ................
   166fe:	05e1 05e1 05e2 05e3 05e3 05e4 05e5 05e6     ................
   1670e:	05e6 05e7 05e8 05e8 05e9 05ea 05eb 05eb     ................
   1671e:	05ec 05ed 05ed 05ee 05ef 05ef 05f0 05f1     ................
   1672e:	05f2 05f2 05f3 05f4 05f4 05f5 05f6 05f6     ................
   1673e:	05f7 05f8 05f9 05f9 05fa 05fb 05fb 05fc     ................
   1674e:	05fd 05fd 05fe 05ff 0600 0600 0601 0602     ................
   1675e:	0602 0603 0604 0604 0605 0606 0607 0607     ................
   1676e:	0608 0609 0609 060a 060b 060b 060c 060d     ................
   1677e:	060e 060e 060f 0610 0610 0611 0612 0612     ................
   1678e:	0613 0614 0615 0615 0616 0617 0617 0618     ................
   1679e:	0619 0619 061a 061b 061c 061c 061d 061e     ................
   167ae:	061e 061f 0620 0620 0621 0622 0622 0623     .... . .!.".".#.
   167be:	0624 0625 0625 0626 0627 0627 0628 0629     $.%.%.&.'.'.(.).
   167ce:	0629 062a 062b 062b 062c 062d 062e 062e     ).*.+.+.,.-.....
   167de:	062f 0630 0630 0631 0632 0632 0633 0634     /.0.0.1.2.2.3.4.
   167ee:	0634 0635 0636 0637 0637 0638 0639 0639     4.5.6.7.7.8.9.9.
   167fe:	063a 063b 063b 063c 063d 063d 063e 063f     :.;.;.<.=.=.>.?.
   1680e:	0640 0640 0641 0642 0642 0643 0644 0644     @.@.A.B.B.C.D.D.
   1681e:	0645 0646 0646 0647 0648 0649 0649 064a     E.F.F.G.H.I.I.J.
   1682e:	064b 064b 064c 064d 064d 064e 064f 064f     K.K.L.M.M.N.O.O.
   1683e:	0650 0651 0651 0652 0653 0654 0654 0655     P.Q.Q.R.S.T.T.U.
   1684e:	0656 0656 0657 0658 0658 0659 065a 065a     V.V.W.X.X.Y.Z.Z.
   1685e:	065b 065c 065c 065d 065e 065e 065f 0660     [.\.\.].^.^._.`.
   1686e:	0661 0661 0662 0663 0663 0664 0665 0665     a.a.b.c.c.d.e.e.
   1687e:	0666 0667 0667 0668 0669 0669 066a 066b     f.g.g.h.i.i.j.k.
   1688e:	066b 066c 066d 066e 066e 066f 0670 0670     k.l.m.n.n.o.p.p.
   1689e:	0671 0672 0672 0673 0674 0674 0675 0676     q.r.r.s.t.t.u.v.
   168ae:	0676 0677 0678 0678 0679 067a 067a 067b     v.w.x.x.y.z.z.{.
   168be:	067c 067d 067d 067e 067f 067f 0680 0681     |.}.}.~.........
   168ce:	0681 0682 0683 0683 0684 0685 0685 0686     ................
   168de:	0687 0687 0688 0689 0689 068a 068b 068b     ................
   168ee:	068c 068d 068d 068e 068f 0690 0690 0691     ................
   168fe:	0692 0692 0693 0694 0694 0695 0696 0696     ................
   1690e:	0697 0698 0698 0699 069a 069a 069b 069c     ................
   1691e:	069c 069d 069e 069e 069f 06a0 06a0 06a1     ................
   1692e:	06a2 06a2 06a3 06a4 06a4 06a5 06a6 06a6     ................
   1693e:	06a7 06a8 06a8 06a9 06aa 06ab 06ab 06ac     ................
   1694e:	06ad 06ad 06ae 06af 06af 06b0 06b1 06b1     ................
   1695e:	06b2 06b3 06b3 06b4 06b5 06b5 06b6 06b7     ................
   1696e:	06b7 06b8 06b9 06b9 06ba 06bb 06bb 06bc     ................
   1697e:	06bd 06bd 06be 06bf 06bf 06c0 06c1 06c1     ................
   1698e:	06c2 06c3 06c3 06c4 06c5 06c5 06c6 06c7     ................
   1699e:	06c7 06c8 06c9 06c9 06ca 06cb 06cb 06cc     ................
   169ae:	06cd 06cd 06ce 06cf 06cf 06d0 06d1 06d1     ................
   169be:	06d2 06d3 06d3 06d4 06d5 06d5 06d6 06d7     ................
   169ce:	06d7 06d8 06d9 06d9 06da 06db 06db 06dc     ................
   169de:	06dd 06dd 06de 06df 06df 06e0 06e1 06e1     ................
   169ee:	06e2 06e3 06e3 06e4 06e5 06e5 06e6 06e7     ................
   169fe:	06e7 06e8 06e9 06e9 06ea 06eb 06eb 06ec     ................
   16a0e:	06ed 06ed 06ee 06ef 06ef 06f0 06f1 06f1     ................
   16a1e:	06f2 06f3 06f3 06f4 06f5 06f5 06f6 06f7     ................
   16a2e:	06f7 06f8 06f9 06f9 06fa 06fb 06fb 06fc     ................
   16a3e:	06fd 06fd 06fe 06ff 06ff 0700 0701 0701     ................
   16a4e:	0702 0703 0703 0704 0705 0705 0706 0707     ................
   16a5e:	0707 0708 0709 0709 070a 070b 070b 070c     ................
   16a6e:	070d 070d 070e 070e 070f 0710 0710 0711     ................
   16a7e:	0712 0712 0713 0714 0714 0715 0716 0716     ................
   16a8e:	0717 0718 0718 0719 071a 071a 071b 071c     ................
   16a9e:	071c 071d 071e 071e 071f 0720 0720 0721     .......... . .!.
   16aae:	0722 0722 0723 0724 0724 0725 0726 0726     ".".#.$.$.%.&.&.
   16abe:	0727 0728 0728 0729 0729 072a 072b 072b     '.(.(.).).*.+.+.
   16ace:	072c 072d 072d 072e 072f 072f 0730 0731     ,.-.-..././.0.1.
   16ade:	0731 0732 0733 0733 0734 0735 0735 0736     1.2.3.3.4.5.5.6.
   16aee:	0737 0737 0738 0739 0739 073a 073b 073b     7.7.8.9.9.:.;.;.
   16afe:	073c 073c 073d 073e 073e 073f 0740 0740     <.<.=.>.>.?.@.@.
   16b0e:	0741 0742 0742 0743 0744 0744 0745 0746     A.B.B.C.D.D.E.F.
   16b1e:	0746 0747 0748 0748 0749 074a 074a 074b     F.G.H.H.I.J.J.K.
   16b2e:	074c 074c 074d 074d 074e 074f 074f 0750     L.L.M.M.N.O.O.P.
   16b3e:	0751 0751 0752 0753 0753 0754 0755 0755     Q.Q.R.S.S.T.U.U.
   16b4e:	0756 0757 0757 0758 0759 0759 075a 075b     V.W.W.X.Y.Y.Z.[.
   16b5e:	075b 075c 075c 075d 075e 075e 075f 0760     [.\.\.].^.^._.`.
   16b6e:	0760 0761 0762 0762 0763 0764 0764 0765     `.a.b.b.c.d.d.e.
   16b7e:	0766 0766 0767 0768 0768 0769 0769 076a     f.f.g.h.h.i.i.j.
   16b8e:	076b 076b 076c 076d 076d 076e 076f 076f     k.k.l.m.m.n.o.o.
   16b9e:	0770 0771 0771 0772 0773 0773 0774 0774     p.q.q.r.s.s.t.t.
   16bae:	0775 0776 0776 0777 0778 0778 0779 077a     u.v.v.w.x.x.y.z.
   16bbe:	077a 077b 077c 077c 077d 077e 077e 077f     z.{.|.|.}.~.~...
   16bce:	077f 0780 0781 0781 0782 0783 0783 0784     ................
   16bde:	0785 0785 0786 0787 0787 0788 0789 0789     ................
   16bee:	078a 078a 078b 078c 078c 078d 078e 078e     ................
   16bfe:	078f 0790 0790 0791 0792 0792 0793 0794     ................
   16c0e:	0794 0795 0795 0796 0797 0797 0798 0799     ................
   16c1e:	0799 079a 079b 079b 079c 079d 079d 079e     ................
   16c2e:	079e 079f 07a0 07a0 07a1 07a2 07a2 07a3     ................
   16c3e:	07a4 07a4 07a5 07a6 07a6 07a7 07a7 07a8     ................
   16c4e:	07a9 07a9 07aa 07ab 07ab 07ac 07ad 07ad     ................
   16c5e:	07ae 07af 07af 07b0 07b0 07b1 07b2 07b2     ................
   16c6e:	07b3 07b4 07b4 07b5 07b6 07b6 07b7 07b7     ................
   16c7e:	07b8 07b9 07b9 07ba 07bb 07bb 07bc 07bd     ................
   16c8e:	07bd 07be 07bf 07bf 07c0 07c0 07c1 07c2     ................
   16c9e:	07c2 07c3 07c4 07c4 07c5 07c6 07c6 07c7     ................
   16cae:	07c7 07c8 07c9 07c9 07ca 07cb 07cb 07cc     ................
   16cbe:	07cd 07cd 07ce 07cf 07cf 07d0 07d0 07d1     ................
   16cce:	07d2 07d2 07d3 07d4 07d4 07d5 07d6 07d6     ................
   16cde:	07d7 07d7 07d8 07d9 07d9 07da 07db 07db     ................
   16cee:	07dc 07dd 07dd 07de 07de 07df 07e0 07e0     ................
   16cfe:	07e1 07e2 07e2 07e3 07e4 07e4 07e5 07e5     ................
   16d0e:	07e6 07e7 07e7 07e8 07e9 07e9 07ea 07eb     ................
   16d1e:	07eb 07ec 07ec 07ed 07ee 07ee 07ef 07f0     ................
   16d2e:	07f0 07f1 07f2 07f2 07f3 07f3 07f4 07f5     ................
   16d3e:	07f5 07f6 07f7 07f7 07f8 07f9 07f9 07fa     ................
   16d4e:	07fa 07fb 07fc 07fc 07fd 07fe 07fe 07ff     ................
   16d5e:	07ff 0800 0801 0801 0802 0803 0803 0804     ................
   16d6e:	0805 0805 0806 0806 0807 0808 0808 0809     ................
   16d7e:	080a 080a 080b 080c 080c 080d 080d 080e     ................
   16d8e:	080f 080f 0810 0811 0811 0812 0812 0813     ................
   16d9e:	0814 0814 0815 0816 0816 0817 0818 0818     ................
   16dae:	0819 0819 081a 081b 081b 081c 081d 081d     ................
   16dbe:	081e 081e 081f 0820 0820 0821 0822 0822     ...... . .!.".".
   16dce:	0823 0824 0824 0825 0825 0826 0827 0827     #.$.$.%.%.&.'.'.
   16dde:	0828 0829 0829 082a 082a 082b 082c 082c     (.).).*.*.+.,.,.
   16dee:	082d 082e 082e 082f 082f 0830 0831 0831     -....././.0.1.1.
   16dfe:	0832 0833 0833 0834 0835 0835 0836 0836     2.3.3.4.5.5.6.6.
   16e0e:	0837 0838 0838 0839 083a 083a 083b 083b     7.8.8.9.:.:.;.;.
   16e1e:	083c 083d 083d 083e 083f 083f 0840 0840     <.=.=.>.?.?.@.@.
   16e2e:	0841 0842 0842 0843 0844 0844 0845 0845     A.B.B.C.D.D.E.E.
   16e3e:	0846 0847 0847 0848 0849 0849 084a 084b     F.G.G.H.I.I.J.K.
   16e4e:	084b 084c 084c 084d 084e 084e 084f 0850     K.L.L.M.N.N.O.P.
   16e5e:	0850 0851 0851 0852 0853 0853 0854 0855     P.Q.Q.R.S.S.T.U.
   16e6e:	0855 0856 0856 0857 0858 0858 0859 085a     U.V.V.W.X.X.Y.Z.
   16e7e:	085a 085b 085b 085c 085d 085d 085e 085f     Z.[.[.\.].].^._.
   16e8e:	085f 0860 0860 0861 0862 0862 0863 0864     _.`.`.a.b.b.c.d.
   16e9e:	0864 0865 0865 0866 0867 0867 0868 0869     d.e.e.f.g.g.h.i.
   16eae:	0869 086a 086a 086b 086c 086c 086d 086e     i.j.j.k.l.l.m.n.
   16ebe:	086e 086f 086f 0870 0871 0871 0872 0873     n.o.o.p.q.q.r.s.
   16ece:	0873 0874 0874 0875 0876 0876 0877 0878     s.t.t.u.v.v.w.x.
   16ede:	0878 0879 0879 087a 087b 087b 087c 087d     x.y.y.z.{.{.|.}.
   16eee:	087d 087e 087e 087f 0880 0880 0881 0882     }.~.~...........
   16efe:	0882 0883 0883 0884 0885 0885 0886 0886     ................
   16f0e:	0887 0888 0888 0889 088a 088a 088b 088b     ................
   16f1e:	088c 088d 088d 088e 088f 088f 0890 0890     ................
   16f2e:	0891 0892 0892 0893 0894 0894 0895 0895     ................
   16f3e:	0896 0897 0897 0898 0899 0899 089a 089a     ................
   16f4e:	089b 089c 089c 089d 089d 089e 089f 089f     ................
   16f5e:	08a0 08a1 08a1 08a2 08a2 08a3 08a4 08a4     ................
   16f6e:	08a5 08a6 08a6 08a7 08a7 08a8 08a9 08a9     ................
   16f7e:	08aa 08ab 08ab 08ac 08ac 08ad 08ae 08ae     ................
   16f8e:	08af 08af 08b0 08b1 08b1 08b2 08b3 08b3     ................
   16f9e:	08b4 08b4 08b5 08b6 08b6 08b7 08b8 08b8     ................
   16fae:	08b9 08b9 08ba 08bb 08bb 08bc 08bc 08bd     ................
   16fbe:	08be 08be 08bf 08c0 08c0 08c1 08c1 08c2     ................
   16fce:	08c3 08c3 08c4 08c4 08c5 08c6 08c6 08c7     ................
   16fde:	08c8 08c8 08c9 08c9 08ca 08cb 08cb 08cc     ................
   16fee:	08cd 08cd 08ce 08ce 08cf 08d0 08d0 08d1     ................
   16ffe:	08d1 08d2 08d3 08d3 08d4 08d5 08d5 08d6     ................
   1700e:	08d6 08d7 08d8 08d8 08d9 08d9 08da 08db     ................
   1701e:	08db 08dc 08dd 08dd 08de 08de 08df 08e0     ................
   1702e:	08e0 08e1 08e1 08e2 08e3 08e3 08e4 08e5     ................
   1703e:	08e5 08e6 08e6 08e7 08e8 08e8 08e9 08e9     ................
   1704e:	08ea 08eb 08eb 08ec 08ed 08ed 08ee 08ee     ................
   1705e:	08ef 08f0 08f0 08f1 08f1 08f2 08f3 08f3     ................
   1706e:	08f4 08f5 08f5 08f6 08f6 08f7 08f8 08f8     ................
   1707e:	08f9 08f9 08fa 08fb 08fb 08fc 08fd 08fd     ................
   1708e:	08fe 08fe 08ff 0900 0900 0901 0901 0902     ................
   1709e:	0903 0903 0904 0905 0905 0906 0906 0907     ................
   170ae:	0908 0908 0909 0909 090a 090b 090b 090c     ................
   170be:	090c 090d 090e 090e 090f 0910 0910 0911     ................
   170ce:	0911 0912 0913 0913 0914 0914 0915 0916     ................
   170de:	0916 0917 0918 0918 0919 0919 091a 091b     ................
   170ee:	091b 091c 091c 091d 091e 091e 091f 091f     ................
   170fe:	0920 0921 0921 0922 0923 0923 0924 0924      .!.!.".#.#.$.$.
   1710e:	0925 0926 0926 0927 0927 0928 0929 0929     %.&.&.'.'.(.).).
   1711e:	092a 092a 092b 092c 092c 092d 092e 092e     *.*.+.,.,.-.....
   1712e:	092f 092f 0930 0931 0931 0932 0932 0933     /./.0.1.1.2.2.3.
   1713e:	0934 0934 0935 0935 0936 0937 0937 0938     4.4.5.5.6.7.7.8.
   1714e:	0939 0939 093a 093a 093b 093c 093c 093d     9.9.:.:.;.<.<.=.
   1715e:	093d 093e 093f 093f 0940 0940 0941 0942     =.>.?.?.@.@.A.B.
   1716e:	0942 0943 0943 0944 0945 0945 0946 0947     B.C.C.D.E.E.F.G.
   1717e:	0947 0948 0948 0949 094a 094a 094b 094b     G.H.H.I.J.J.K.K.
   1718e:	094c 094d 094d 094e 094e 094f 0950 0950     L.M.M.N.N.O.P.P.
   1719e:	0951 0951 0952 0953 0953 0954 0955 0955     Q.Q.R.S.S.T.U.U.
   171ae:	0956 0956 0957 0958 0958 0959 0959 095a     V.V.W.X.X.Y.Y.Z.
   171be:	095b 095b 095c 095c 095d 095e 095e 095f     [.[.\.\.].^.^._.
   171ce:	095f 0960 0961 0961 0962 0963 0963 0964     _.`.a.a.b.c.c.d.
   171de:	0964 0965 0966 0966 0967 0967 0968 0969     d.e.f.f.g.g.h.i.
   171ee:	0969 096a 096a 096b 096c 096c 096d 096d     i.j.j.k.l.l.m.m.
   171fe:	096e 096f 096f 0970 0970 0971 0972 0972     n.o.o.p.p.q.r.r.
   1720e:	0973 0974 0974 0975 0975 0976 0977 0977     s.t.t.u.u.v.w.w.
   1721e:	0978 0978 0979 097a 097a 097b 097b 097c     x.x.y.z.z.{.{.|.
   1722e:	097d 097d 097e 097e 097f 0980 0980 0981     }.}.~.~.........
   1723e:	0981 0982 0983 0983 0984 0985 0985 0986     ................
   1724e:	0986 0987 0988 0988 0989 0989 098a 098b     ................
   1725e:	098b 098c 098c 098d 098e 098e 098f 098f     ................
   1726e:	0990 0991 0991 0992 0992 0993 0994 0994     ................
   1727e:	0995 0995 0996 0997 0997 0998 0998 0999     ................
   1728e:	099a 099a 099b 099c 099c 099d 099d 099e     ................
   1729e:	099f 099f 09a0 09a0 09a1 09a2 09a2 09a3     ................
   172ae:	09a3 09a4 09a5 09a5 09a6 09a6 09a7 09a8     ................
   172be:	09a8 09a9 09a9 09aa 09ab 09ab 09ac 09ac     ................
   172ce:	09ad 09ae 09ae 09af 09af 09b0 09b1 09b1     ................
   172de:	09b2 09b2 09b3 09b4 09b4 09b5 09b5 09b6     ................
   172ee:	09b7 09b7 09b8 09b9 09b9 09ba 09ba 09bb     ................
   172fe:	09bc 09bc 09bd 09bd 09be 09bf 09bf 09c0     ................
   1730e:	09c0 09c1 09c2 09c2 09c3 09c3 09c4 09c5     ................
   1731e:	09c5 09c6 09c6 09c7 09c8 09c8 09c9 09c9     ................
   1732e:	09ca 09cb 09cb 09cc 09cc 09cd 09ce 09ce     ................
   1733e:	09cf 09cf 09d0 09d1 09d1 09d2 09d2 09d3     ................
   1734e:	09d4 09d4 09d5 09d5 09d6 09d7 09d7 09d8     ................
   1735e:	09d8 09d9 09da 09da 09db 09db 09dc 09dd     ................
   1736e:	09dd 09de 09de 09df 09e0 09e0 09e1 09e1     ................
   1737e:	09e2 09e3 09e3 09e4 09e4 09e5 09e6 09e6     ................
   1738e:	09e7 09e7 09e8 09e9 09e9 09ea 09ea 09eb     ................
   1739e:	09ec 09ec 09ed 09ed 09ee 09ef 09ef 09f0     ................
   173ae:	09f1 09f1 09f2 09f2 09f3 09f4 09f4 09f5     ................
   173be:	09f5 09f6 09f7 09f7 09f8 09f8 09f9 09fa     ................
   173ce:	09fa 09fb 09fb 09fc 09fd 09fd 09fe 09fe     ................
   173de:	09ff 0a00 0a00 0a01 0a01 0a02 0a03 0a03     ................
   173ee:	0a04 0a04 0a05 0a06 0a06 0a07 0a07 0a08     ................
   173fe:	0a09 0a09 0a0a 0a0a 0a0b 0a0c 0a0c 0a0d     ................
   1740e:	0a0d 0a0e 0a0f 0a0f 0a10 0a10 0a11 0a12     ................
   1741e:	0a12 0a13 0a13 0a14 0a15 0a15 0a16 0a16     ................
   1742e:	0a17 0a18 0a18 0a19 0a19 0a1a 0a1a 0a1b     ................
   1743e:	0a1c 0a1c 0a1d 0a1d 0a1e 0a1f 0a1f 0a20     .............. .
   1744e:	0a20 0a21 0a22 0a22 0a23 0a23 0a24 0a25      .!.".".#.#.$.%.
   1745e:	0a25 0a26 0a26 0a27 0a28 0a28 0a29 0a29     %.&.&.'.(.(.).).
   1746e:	0a2a 0a2b 0a2b 0a2c 0a2c 0a2d 0a2e 0a2e     *.+.+.,.,.-.....
   1747e:	0a2f 0a2f 0a30 0a31 0a31 0a32 0a32 0a33     /./.0.1.1.2.2.3.
   1748e:	0a34 0a34 0a35 0a35 0a36 0a37 0a37 0a38     4.4.5.5.6.7.7.8.
   1749e:	0a38 0a39 0a3a 0a3a 0a3b 0a3b 0a3c 0a3d     8.9.:.:.;.;.<.=.
   174ae:	0a3d 0a3e 0a3e 0a3f 0a40 0a40 0a41 0a41     =.>.>.?.@.@.A.A.
   174be:	0a42 0a43 0a43 0a44 0a44 0a45 0a46 0a46     B.C.C.D.D.E.F.F.
   174ce:	0a47 0a47 0a48 0a49 0a49 0a4a 0a4a 0a4b     G.G.H.I.I.J.J.K.
   174de:	0a4c 0a4c 0a4d 0a4d 0a4e 0a4f 0a4f 0a50     L.L.M.M.N.O.O.P.
   174ee:	0a50 0a51 0a52 0a52 0a53 0a53 0a54 0a54     P.Q.R.R.S.S.T.T.
   174fe:	0a55 0a56 0a56 0a57 0a57 0a58 0a59 0a59     U.V.V.W.W.X.Y.Y.
   1750e:	0a5a 0a5a 0a5b 0a5c 0a5c 0a5d 0a5d 0a5e     Z.Z.[.\.\.].].^.
   1751e:	0a5f 0a5f 0a60 0a60 0a61 0a62 0a62 0a63     _._.`.`.a.b.b.c.
   1752e:	0a63 0a64 0a65 0a65 0a66 0a66 0a67 0a68     c.d.e.e.f.f.g.h.
   1753e:	0a68 0a69 0a69 0a6a 0a6b 0a6b 0a6c 0a6c     h.i.i.j.k.k.l.l.
   1754e:	0a6d 0a6e 0a6e 0a6f 0a6f 0a70 0a71 0a71     m.n.n.o.o.p.q.q.
   1755e:	0a72 0a72 0a73 0a74 0a74 0a75 0a75 0a76     r.r.s.t.t.u.u.v.
   1756e:	0a76 0a77 0a78 0a78 0a79 0a79 0a7a 0a7b     v.w.x.x.y.y.z.{.
   1757e:	0a7b 0a7c 0a7c 0a7d 0a7e 0a7e 0a7f 0a7f     {.|.|.}.~.~.....
   1758e:	0a80 0a81 0a81 0a82 0a82 0a83 0a84 0a84     ................
   1759e:	0a85 0a85 0a86 0a87 0a87 0a88 0a88 0a89     ................
   175ae:	0a8a 0a8a 0a8b 0a8b 0a8c 0a8d 0a8d 0a8e     ................
   175be:	0a8e 0a8f 0a8f 0a90 0a91 0a91 0a92 0a92     ................
   175ce:	0a93 0a94 0a94 0a95 0a95 0a96 0a97 0a97     ................
   175de:	0a98 0a98 0a99 0a9a 0a9a 0a9b 0a9b 0a9c     ................
   175ee:	0a9d 0a9d 0a9e 0a9e 0a9f 0aa0 0aa0 0aa1     ................
   175fe:	0aa1 0aa2 0aa3 0aa3 0aa4 0aa4 0aa5 0aa5     ................
   1760e:	0aa6 0aa7 0aa7 0aa8 0aa8 0aa9 0aaa 0aaa     ................
   1761e:	0aab 0aab 0aac 0aad 0aad 0aae 0aae 0aaf     ................
   1762e:	0ab0 0ab0 0ab1 0ab1 0ab2 0ab3 0ab3 0ab4     ................
   1763e:	0ab4 0ab5 0ab6 0ab6 0ab7 0ab7 0ab8 0ab8     ................
   1764e:	0ab9 0aba 0aba 0abb 0abb 0abc 0abd 0abd     ................
   1765e:	0abe 0abe 0abf 0ac0 0ac0 0ac1 0ac1 0ac2     ................
   1766e:	0ac3 0ac3 0ac4 0ac4 0ac5 0ac6 0ac6 0ac7     ................
   1767e:	0ac7 0ac8 0ac9 0ac9 0aca 0aca 0acb 0acb     ................
   1768e:	0acc 0acd 0acd 0ace 0ace 0acf 0ad0 0ad0     ................
   1769e:	0ad1 0ad1 0ad2 0ad3 0ad3 0ad4 0ad4 0ad5     ................
   176ae:	0ad6 0ad6 0ad7 0ad7 0ad8 0ad9 0ad9 0ada     ................
   176be:	0ada 0adb 0adc 0adc 0add 0add 0ade 0ade     ................
   176ce:	0adf 0ae0 0ae0 0ae1 0ae1 0ae2 0ae3 0ae3     ................
   176de:	0ae4 0ae4 0ae5 0ae6 0ae6 0ae7 0ae7 0ae8     ................
   176ee:	0ae9 0ae9 0aea 0aea 0aeb 0aec 0aec 0aed     ................
   176fe:	0aed 0aee 0aee 0aef 0af0 0af0 0af1 0af1     ................
   1770e:	0af2 0af3 0af3 0af4 0af4 0af5 0af6 0af6     ................
   1771e:	0af7 0af7 0af8 0af9 0af9 0afa 0afa 0afb     ................
   1772e:	0afb 0afc 0afd 0afd 0afe 0afe 0aff 0b00     ................
   1773e:	0b00 0b01 0b01 0b02 0b03 0b03 0b04 0b04     ................
   1774e:	0b05 0b06 0b06 0b07 0b07 0b08 0b09 0b09     ................
   1775e:	0b0a 0b0a 0b0b 0b0b 0b0c 0b0d 0b0d 0b0e     ................
   1776e:	0b0e 0b0f 0b10 0b10 0b11 0b11 0b12 0b13     ................
   1777e:	0b13 0b14 0b14 0b15 0b16 0b16 0b17 0b17     ................
   1778e:	0b18 0b18 0b19 0b1a 0b1a 0b1b 0b1b 0b1c     ................
   1779e:	0b1d 0b1d 0b1e 0b1e 0b1f 0b20 0b20 0b21     .......... . .!.
   177ae:	0b21 0b22 0b23 0b23 0b24 0b24 0b25 0b25     !.".#.#.$.$.%.%.
   177be:	0b26 0b27 0b27 0b28 0b28 0b29 0b2a 0b2a     &.'.'.(.(.).*.*.
   177ce:	0b2b 0b2b 0b2c 0b2d 0b2d 0b2e 0b2e 0b2f     +.+.,.-.-...../.
   177de:	0b30 0b30 0b31 0b31 0b32 0b33 0b33 0b34     0.0.1.1.2.3.3.4.
   177ee:	0b34 0b35 0b35 0b36 0b37 0b37 0b38 0b38     4.5.5.6.7.7.8.8.
   177fe:	0b39 0b3a 0b3a 0b3b 0b3b 0b3c 0b3d 0b3d     9.:.:.;.;.<.=.=.
   1780e:	0b3e 0b3e 0b3f 0b3f 0b40 0b41 0b41 0b42     >.>.?.?.@.A.A.B.
   1781e:	0b42 0b43 0b44 0b44 0b45 0b45 0b46 0b47     B.C.D.D.E.E.F.G.
   1782e:	0b47 0b48 0b48 0b49 0b4a 0b4a 0b4b 0b4b     G.H.H.I.J.J.K.K.
   1783e:	0b4c 0b4c 0b4d 0b4e 0b4e 0b4f 0b4f 0b50     L.L.M.N.N.O.O.P.
   1784e:	0b51 0b51 0b52 0b52 0b53 0b54 0b54 0b55     Q.Q.R.R.S.T.T.U.
   1785e:	0b55 0b56 0b57 0b57 0b58 0b58 0b59 0b59     U.V.W.W.X.X.Y.Y.
   1786e:	0b5a 0b5b 0b5b 0b5c 0b5c 0b5d 0b5e 0b5e     Z.[.[.\.\.].^.^.
   1787e:	0b5f 0b5f 0b60 0b61 0b61 0b62 0b62 0b63     _._.`.a.a.b.b.c.
   1788e:	0b64 0b64 0b65 0b65 0b66 0b66 0b67 0b68     d.d.e.e.f.f.g.h.
   1789e:	0b68 0b69 0b69 0b6a 0b6b 0b6b 0b6c 0b6c     h.i.i.j.k.k.l.l.
   178ae:	0b6d 0b6e 0b6e 0b6f 0b6f 0b70 0b70 0b71     m.n.n.o.o.p.p.q.
   178be:	0b72 0b72 0b73 0b73 0b74 0b75 0b75 0b76     r.r.s.s.t.u.u.v.
   178ce:	0b76 0b77 0b78 0b78 0b79 0b79 0b7a 0b7b     v.w.x.x.y.y.z.{.
   178de:	0b7b 0b7c 0b7c 0b7d 0b7d 0b7e 0b7f 0b7f     {.|.|.}.}.~.....
   178ee:	0b80 0b80 0b81 0b82 0b82 0b83 0b83 0b84     ................
   178fe:	0b85 0b85 0b86 0b86 0b87 0b87 0b88 0b89     ................
   1790e:	0b89 0b8a 0b8a 0b8b 0b8c 0b8c 0b8d 0b8d     ................
   1791e:	0b8e 0b8f 0b8f 0b90 0b90 0b91 0b92 0b92     ................
   1792e:	0b93 0b93 0b94 0b94 0b95 0b96 0b96 0b97     ................
   1793e:	0b97 0b98 0b99 0b99 0b9a 0b9a 0b9b 0b9c     ................
   1794e:	0b9c 0b9d 0b9d 0b9e 0b9e 0b9f 0ba0 0ba0     ................
   1795e:	0ba1 0ba1 0ba2 0ba3 0ba3 0ba4 0ba4 0ba5     ................
   1796e:	0ba6 0ba6 0ba7 0ba7 0ba8 0ba8 0ba9 0baa     ................
   1797e:	0baa 0bab 0bab 0bac 0bad 0bad 0bae 0bae     ................
   1798e:	0baf 0bb0 0bb0 0bb1 0bb1 0bb2 0bb3 0bb3     ................
   1799e:	0bb4 0bb4 0bb5 0bb5 0bb6 0bb7 0bb7 0bb8     ................
   179ae:	0bb8 0bb9 0bba 0bba 0bbb 0bbb 0bbc 0bbd     ................
   179be:	0bbd 0bbe 0bbe 0bbf 0bbf 0bc0 0bc1 0bc1     ................
   179ce:	0bc2 0bc2 0bc3 0bc4 0bc4 0bc5 0bc5 0bc6     ................
   179de:	0bc7 0bc7 0bc8 0bc8 0bc9 0bc9 0bca 0bcb     ................
   179ee:	0bcb 0bcc 0bcc 0bcd 0bce 0bce 0bcf 0bcf     ................
   179fe:	0bd0 0bd1 0bd1 0bd2 0bd2 0bd3 0bd3 0bd4     ................
   17a0e:	0bd5 0bd5 0bd6 0bd6 0bd7 0bd8 0bd8 0bd9     ................
   17a1e:	0bd9 0bda 0bdb 0bdb 0bdc 0bdc 0bdd 0bde     ................
   17a2e:	0bde 0bdf 0bdf 0be0 0be0 0be1 0be2 0be2     ................
   17a3e:	0be3 0be3 0be4 0be5 0be5 0be6 0be6 0be7     ................
   17a4e:	0be8 0be8 0be9 0be9 0bea 0bea 0beb 0bec     ................
   17a5e:	0bec 0bed 0bed 0bee 0bef 0bef 0bf0 0bf0     ................
   17a6e:	0bf1 0bf2 0bf2 0bf3 0bf3 0bf4 0bf4 0bf5     ................
   17a7e:	0bf6 0bf6 0bf7 0bf7 0bf8 0bf9 0bf9 0bfa     ................
   17a8e:	0bfa 0bfb 0bfc 0bfc 0bfd 0bfd 0bfe 0bfe     ................
   17a9e:	0bff 0c00 0c00 0c01 0c01 0c02 0c03 0c03     ................
   17aae:	0c04 0c04 0c05 0c06 0c06 0c07 0c07 0c08     ................
   17abe:	0c08 0c09 0c0a 0c0a 0c0b 0c0b 0c0c 0c0d     ................
   17ace:	0c0d 0c0e 0c0e 0c0f 0c10 0c10 0c11 0c11     ................
   17ade:	0c12 0c12 0c13 0c14 0c14 0c15 0c15 0c16     ................
   17aee:	0c17 0c17 0c18 0c18 0c19 0c1a 0c1a 0c1b     ................
   17afe:	0c1b 0c1c 0c1c 0c1d 0c1e 0c1e 0c1f 0c1f     ................
   17b0e:	0c20 0c21 0c21 0c22 0c22 0c23 0c24 0c24      .!.!.".".#.$.$.
   17b1e:	0c25 0c25 0c26 0c26 0c27 0c28 0c28 0c29     %.%.&.&.'.(.(.).
   17b2e:	0c29 0c2a 0c2b 0c2b 0c2c 0c2c 0c2d 0c2e     ).*.+.+.,.,.-...
   17b3e:	0c2e 0c2f 0c2f 0c30 0c30 0c31 0c32 0c32     .././.0.0.1.2.2.
   17b4e:	0c33 0c33 0c34 0c35 0c35 0c36 0c36 0c37     3.3.4.5.5.6.6.7.
   17b5e:	0c38 0c38 0c39 0c39 0c3a 0c3a 0c3b 0c3c     8.8.9.9.:.:.;.<.
   17b6e:	0c3c 0c3d 0c3d 0c3e 0c3f 0c3f 0c40 0c40     <.=.=.>.?.?.@.@.
   17b7e:	0c41 0c42 0c42 0c43 0c43 0c44 0c44 0c45     A.B.B.C.C.D.D.E.
   17b8e:	0c46 0c46 0c47 0c47 0c48 0c49 0c49 0c4a     F.F.G.G.H.I.I.J.
   17b9e:	0c4a 0c4b 0c4c 0c4c 0c4d 0c4d 0c4e 0c4e     J.K.L.L.M.M.N.N.
   17bae:	0c4f 0c50 0c50 0c51 0c51 0c52 0c53 0c53     O.P.P.Q.Q.R.S.S.
   17bbe:	0c54 0c54 0c55 0c56 0c56 0c57 0c57 0c58     T.T.U.V.V.W.W.X.
   17bce:	0c58 0c59 0c5a 0c5a 0c5b 0c5b 0c5c 0c5d     X.Y.Z.Z.[.[.\.].
   17bde:	0c5d 0c5e 0c5e 0c5f 0c60 0c60 0c61 0c61     ].^.^._.`.`.a.a.
   17bee:	0c62 0c62 0c63 0c64 0c64 0c65 0c65 0c66     b.b.c.d.d.e.e.f.
   17bfe:	0c67 0c67 0c68 0c68 0c69 0c6a 0c6a 0c6b     g.g.h.h.i.j.j.k.
   17c0e:	0c6b 0c6c 0c6c 0c6d 0c6e 0c6e 0c6f 0c6f     k.l.l.m.n.n.o.o.
   17c1e:	0c70 0c71 0c71 0c72 0c72 0c73 0c74 0c74     p.q.q.r.r.s.t.t.
   17c2e:	0c75 0c75 0c76 0c77 0c77 0c78 0c78 0c79     u.u.v.w.w.x.x.y.
   17c3e:	0c79 0c7a 0c7b 0c7b 0c7c 0c7c 0c7d 0c7e     y.z.{.{.|.|.}.~.
   17c4e:	0c7e 0c7f 0c7f 0c80 0c81 0c81 0c82 0c82     ~...............
   17c5e:	0c83 0c83 0c84 0c85 0c85 0c86 0c86 0c87     ................
   17c6e:	0c88 0c88 0c89 0c89 0c8a 0c8b 0c8b 0c8c     ................
   17c7e:	0c8c 0c8d 0c8d 0c8e 0c8f 0c8f 0c90 0c90     ................
   17c8e:	0c91 0c92 0c92 0c93 0c93 0c94 0c95 0c95     ................
   17c9e:	0c96 0c96 0c97 0c97 0c98 0c99 0c99 0c9a     ................
   17cae:	0c9a 0c9b 0c9c 0c9c 0c9d 0c9d 0c9e 0c9f     ................
   17cbe:	0c9f 0ca0 0ca0 0ca1 0ca1 0ca2 0ca3 0ca3     ................
   17cce:	0ca4 0ca4 0ca5 0ca6 0ca6 0ca7 0ca7 0ca8     ................
   17cde:	0ca9 0ca9 0caa 0caa 0cab 0cab 0cac 0cad     ................
   17cee:	0cad 0cae 0cae 0caf 0cb0 0cb0 0cb1 0cb1     ................
   17cfe:	0cb2 0cb3 0cb3 0cb4 0cb4 0cb5 0cb5 0cb6     ................
   17d0e:	0cb7 0cb7 0cb8 0cb8 0cb9 0cba 0cba 0cbb     ................
   17d1e:	0cbb 0cbc 0cbd 0cbd 0cbe 0cbe 0cbf 0cbf     ................
   17d2e:	0cc0 0cc1 0cc1 0cc2 0cc2 0cc3 0cc4 0cc4     ................
   17d3e:	0cc5 0cc5 0cc6 0cc7 0cc7 0cc8 0cc8 0cc9     ................
   17d4e:	0cc9 0cca 0ccb 0ccb 0ccc 0ccc 0ccd 0cce     ................
   17d5e:	0cce 0ccf 0ccf 0cd0 0cd1 0cd1 0cd2 0cd2     ................
   17d6e:	0cd3 0cd4 0cd4 0cd5 0cd5 0cd6 0cd6 0cd7     ................
   17d7e:	0cd8 0cd8 0cd9 0cd9 0cda 0cdb 0cdb 0cdc     ................
   17d8e:	0cdc 0cdd 0cde 0cde 0cdf 0cdf 0ce0 0ce0     ................
   17d9e:	0ce1 0ce2 0ce2 0ce3 0ce3 0ce4 0ce5 0ce5     ................
   17dae:	0ce6 0ce6 0ce7 0ce8 0ce8 0ce9 0ce9 0cea     ................
   17dbe:	0cea 0ceb 0cec 0cec 0ced 0ced 0cee 0cef     ................
   17dce:	0cef 0cf0 0cf0 0cf1 0cf2 0cf2 0cf3 0cf3     ................
   17dde:	0cf4 0cf5 0cf5 0cf6 0cf6 0cf7 0cf7 0cf8     ................
   17dee:	0cf9 0cf9 0cfa 0cfa 0cfb 0cfc 0cfc 0cfd     ................
   17dfe:	0cfd 0cfe 0cff 0cff 0d00 0d00 0d01 0d01     ................
   17e0e:	0d02 0d03 0d03 0d04 0d04 0d05 0d06 0d06     ................
   17e1e:	0d07 0d07 0d08 0d09 0d09 0d0a 0d0a 0d0b     ................
   17e2e:	0d0b 0d0c 0d0d 0d0d 0d0e 0d0e 0d0f 0d10     ................
   17e3e:	0d10 0d11 0d11 0d12 0d13 0d13 0d14 0d14     ................
   17e4e:	0d15 0d16 0d16 0d17 0d17 0d18 0d18 0d19     ................
   17e5e:	0d1a 0d1a 0d1b 0d1b 0d1c 0d1d 0d1d 0d1e     ................
   17e6e:	0d1e 0d1f 0d20 0d20 0d21 0d21 0d22 0d22     .... . .!.!.".".
   17e7e:	0d23 0d24 0d24 0d25 0d25 0d26 0d27 0d27     #.$.$.%.%.&.'.'.
   17e8e:	0d28 0d28 0d29 0d2a 0d2a 0d2b 0d2b 0d2c     (.(.).*.*.+.+.,.
   17e9e:	0d2d 0d2d 0d2e 0d2e 0d2f 0d2f 0d30 0d31     -.-....././.0.1.
   17eae:	0d31 0d32 0d32 0d33 0d34 0d34 0d35 0d35     1.2.2.3.4.4.5.5.
   17ebe:	0d36 0d37 0d37 0d38 0d38 0d39 0d3a 0d3a     6.7.7.8.8.9.:.:.
   17ece:	0d3b 0d3b 0d3c 0d3c 0d3d 0d3e 0d3e 0d3f     ;.;.<.<.=.>.>.?.
   17ede:	0d3f 0d40 0d41 0d41 0d42 0d42 0d43 0d44     ?.@.A.A.B.B.C.D.
   17eee:	0d44 0d45 0d45 0d46 0d46 0d47 0d48 0d48     D.E.E.F.F.G.H.H.
   17efe:	0d49 0d49 0d4a 0d4b 0d4b 0d4c 0d4c 0d4d     I.I.J.K.K.L.L.M.
   17f0e:	0d4e 0d4e 0d4f 0d4f 0d50 0d51 0d51 0d52     N.N.O.O.P.Q.Q.R.
   17f1e:	0d52 0d53 0d53 0d54 0d55 0d55 0d56 0d56     R.S.S.T.U.U.V.V.
   17f2e:	0d57 0d58 0d58 0d59 0d59 0d5a 0d5b 0d5b     W.X.X.Y.Y.Z.[.[.
   17f3e:	0d5c 0d5c 0d5d 0d5e 0d5e 0d5f 0d5f 0d60     \.\.].^.^._._.`.
   17f4e:	0d60 0d61 0d62 0d62 0d63 0d63 0d64 0d65     `.a.b.b.c.c.d.e.
   17f5e:	0d65 0d66 0d66 0d67 0d68 0d68 0d69 0d69     e.f.f.g.h.h.i.i.
   17f6e:	0d6a 0d6b 0d6b 0d6c 0d6c 0d6d 0d6d 0d6e     j.k.k.l.l.m.m.n.
   17f7e:	0d6f 0d6f 0d70 0d70 0d71 0d72 0d72 0d73     o.o.p.p.q.r.r.s.
   17f8e:	0d73 0d74 0d75 0d75 0d76 0d76 0d77 0d78     s.t.u.u.v.v.w.x.
   17f9e:	0d78 0d79 0d79 0d7a 0d7a 0d7b 0d7c 0d7c     x.y.y.z.z.{.|.|.
   17fae:	0d7d 0d7d 0d7e 0d7f 0d7f 0d80 0d80 0d81     }.}.~...........
   17fbe:	0d82 0d82 0d83 0d83 0d84 0d85 0d85 0d86     ................
   17fce:	0d86 0d87 0d88 0d88 0d89 0d89 0d8a 0d8a     ................
   17fde:	0d8b 0d8c 0d8c 0d8d 0d8d 0d8e 0d8f 0d8f     ................
   17fee:	0d90 0d90 0d91 0d92 0d92 0d93 0d93 0d94     ................
   17ffe:	0d95 0d95 0d96 0d96 0d97 0d97 0d98 0d99     ................
   1800e:	0d99 0d9a 0d9a 0d9b 0d9c 0d9c 0d9d 0d9d     ................
   1801e:	0d9e 0d9f 0d9f 0da0 0da0 0da1 0da2 0da2     ................
   1802e:	0da3 0da3 0da4 0da5 0da5 0da6 0da6 0da7     ................
   1803e:	0da7 0da8 0da9 0da9 0daa 0daa 0dab 0dac     ................
   1804e:	0dac 0dad 0dad 0dae 0daf 0daf 0db0 0db0     ................
   1805e:	0db1 0db2 0db2 0db3 0db3 0db4 0db5 0db5     ................
   1806e:	0db6 0db6 0db7 0db7 0db8 0db9 0db9 0dba     ................
   1807e:	0dba 0dbb 0dbc 0dbc 0dbd 0dbd 0dbe 0dbf     ................
   1808e:	0dbf 0dc0 0dc0 0dc1 0dc2 0dc2 0dc3 0dc3     ................
   1809e:	0dc4 0dc5 0dc5 0dc6 0dc6 0dc7 0dc7 0dc8     ................
   180ae:	0dc9 0dc9 0dca 0dca 0dcb 0dcc 0dcc 0dcd     ................
   180be:	0dcd 0dce 0dcf 0dcf 0dd0 0dd0 0dd1 0dd2     ................
   180ce:	0dd2 0dd3 0dd3 0dd4 0dd5 0dd5 0dd6 0dd6     ................
   180de:	0dd7 0dd8 0dd8 0dd9 0dd9 0dda 0dda 0ddb     ................
   180ee:	0ddc 0ddc 0ddd 0ddd 0dde 0ddf 0ddf 0de0     ................
   180fe:	0de0 0de1 0de2 0de2 0de3 0de3 0de4 0de5     ................
   1810e:	0de5 0de6 0de6 0de7 0de8 0de8 0de9 0de9     ................
   1811e:	0dea 0deb 0deb 0dec 0dec 0ded 0ded 0dee     ................
   1812e:	0def 0def 0df0 0df0 0df1 0df2 0df2 0df3     ................
   1813e:	0df3 0df4 0df5 0df5 0df6 0df6 0df7 0df8     ................
   1814e:	0df8 0df9 0df9 0dfa 0dfb 0dfb 0dfc 0dfc     ................
   1815e:	0dfd 0dfe 0dfe 0dff 0dff 0e00 0e01 0e01     ................
   1816e:	0e02 0e02 0e03 0e03 0e04 0e05 0e05 0e06     ................
   1817e:	0e06 0e07 0e08 0e08 0e09 0e09 0e0a 0e0b     ................
   1818e:	0e0b 0e0c 0e0c 0e0d 0e0e 0e0e 0e0f 0e0f     ................
   1819e:	0e10 0e11 0e11 0e12 0e12 0e13 0e14 0e14     ................
   181ae:	0e15 0e15 0e16 0e17 0e17 0e18 0e18 0e19     ................
   181be:	0e19 0e1a 0e1b 0e1b 0e1c 0e1c 0e1d 0e1e     ................
   181ce:	0e1e 0e1f 0e1f 0e20 0e21 0e21 0e22 0e22     ...... .!.!.".".
   181de:	0e23 0e24 0e24 0e25 0e25 0e26 0e27 0e27     #.$.$.%.%.&.'.'.
   181ee:	0e28 0e28 0e29 0e2a 0e2a 0e2b 0e2b 0e2c     (.(.).*.*.+.+.,.
   181fe:	0e2d 0e2d 0e2e 0e2e 0e2f 0e30 0e30 0e31     -.-...../.0.0.1.
   1820e:	0e31 0e32 0e33 0e33 0e34 0e34 0e35 0e35     1.2.3.3.4.4.5.5.
   1821e:	0e36 0e37 0e37 0e38 0e38 0e39 0e3a 0e3a     6.7.7.8.8.9.:.:.
   1822e:	0e3b 0e3b 0e3c 0e3d 0e3d 0e3e 0e3e 0e3f     ;.;.<.=.=.>.>.?.
   1823e:	0e40 0e40 0e41 0e41 0e42 0e43 0e43 0e44     @.@.A.A.B.C.C.D.
   1824e:	0e44 0e45 0e46 0e46 0e47 0e47 0e48 0e49     D.E.F.F.G.G.H.I.
   1825e:	0e49 0e4a 0e4a 0e4b 0e4c 0e4c 0e4d 0e4d     I.J.J.K.L.L.M.M.
   1826e:	0e4e 0e4f 0e4f 0e50 0e50 0e51 0e52 0e52     N.O.O.P.P.Q.R.R.
   1827e:	0e53 0e53 0e54 0e55 0e55 0e56 0e56 0e57     S.S.T.U.U.V.V.W.
   1828e:	0e58 0e58 0e59 0e59 0e5a 0e5a 0e5b 0e5c     X.X.Y.Y.Z.Z.[.\.
   1829e:	0e5c 0e5d 0e5d 0e5e 0e5f 0e5f 0e60 0e60     \.].].^._._.`.`.
   182ae:	0e61 0e62 0e62 0e63 0e63 0e64 0e65 0e65     a.b.b.c.c.d.e.e.
   182be:	0e66 0e66 0e67 0e68 0e68 0e69 0e69 0e6a     f.f.g.h.h.i.i.j.
   182ce:	0e6b 0e6b 0e6c 0e6c 0e6d 0e6e 0e6e 0e6f     k.k.l.l.m.n.n.o.
   182de:	0e6f 0e70 0e71 0e71 0e72 0e72 0e73 0e74     o.p.q.q.r.r.s.t.
   182ee:	0e74 0e75 0e75 0e76 0e77 0e77 0e78 0e78     t.u.u.v.w.w.x.x.
   182fe:	0e79 0e7a 0e7a 0e7b 0e7b 0e7c 0e7d 0e7d     y.z.z.{.{.|.}.}.
   1830e:	0e7e 0e7e 0e7f 0e80 0e80 0e81 0e81 0e82     ~.~.............
   1831e:	0e83 0e83 0e84 0e84 0e85 0e86 0e86 0e87     ................
   1832e:	0e87 0e88 0e89 0e89 0e8a 0e8a 0e8b 0e8c     ................
   1833e:	0e8c 0e8d 0e8d 0e8e 0e8f 0e8f 0e90 0e90     ................
   1834e:	0e91 0e92 0e92 0e93 0e93 0e94 0e95 0e95     ................
   1835e:	0e96 0e96 0e97 0e98 0e98 0e99 0e99 0e9a     ................
   1836e:	0e9b 0e9b 0e9c 0e9c 0e9d 0e9e 0e9e 0e9f     ................
   1837e:	0e9f 0ea0 0ea1 0ea1 0ea2 0ea2 0ea3 0ea4     ................
   1838e:	0ea4 0ea5 0ea5 0ea6 0ea7 0ea7 0ea8 0ea8     ................
   1839e:	0ea9 0eaa 0eaa 0eab 0eab 0eac 0ead 0ead     ................
   183ae:	0eae 0eae 0eaf 0eb0 0eb0 0eb1 0eb1 0eb2     ................
   183be:	0eb3 0eb3 0eb4 0eb4 0eb5 0eb6 0eb6 0eb7     ................
   183ce:	0eb7 0eb8 0eb9 0eb9 0eba 0eba 0ebb 0ebc     ................
   183de:	0ebc 0ebd 0ebd 0ebe 0ebf 0ebf 0ec0 0ec0     ................
   183ee:	0ec1 0ec2 0ec2 0ec3 0ec3 0ec4 0ec5 0ec5     ................
   183fe:	0ec6 0ec6 0ec7 0ec8 0ec8 0ec9 0ec9 0eca     ................
   1840e:	0ecb 0ecb 0ecc 0ecc 0ecd 0ece 0ece 0ecf     ................
   1841e:	0ecf 0ed0 0ed1 0ed1 0ed2 0ed2 0ed3 0ed4     ................
   1842e:	0ed4 0ed5 0ed5 0ed6 0ed7 0ed7 0ed8 0ed8     ................
   1843e:	0ed9 0eda 0eda 0edb 0edb 0edc 0edd 0edd     ................
   1844e:	0ede 0ede 0edf 0ee0 0ee0 0ee1 0ee1 0ee2     ................
   1845e:	0ee3 0ee3 0ee4 0ee4 0ee5 0ee6 0ee6 0ee7     ................
   1846e:	0ee8 0ee8 0ee9 0ee9 0eea 0eeb 0eeb 0eec     ................
   1847e:	0eec 0eed 0eee 0eee 0eef 0eef 0ef0 0ef1     ................
   1848e:	0ef1 0ef2 0ef2 0ef3 0ef4 0ef4 0ef5 0ef5     ................
   1849e:	0ef6 0ef7 0ef7 0ef8 0ef8 0ef9 0efa 0efa     ................
   184ae:	0efb 0efb 0efc 0efd 0efd 0efe 0efe 0eff     ................
   184be:	0f00 0f00 0f01 0f01 0f02 0f03 0f03 0f04     ................
   184ce:	0f04 0f05 0f06 0f06 0f07 0f08 0f08 0f09     ................
   184de:	0f09 0f0a 0f0b 0f0b 0f0c 0f0c 0f0d 0f0e     ................
   184ee:	0f0e 0f0f 0f0f 0f10 0f11 0f11 0f12 0f12     ................
   184fe:	0f13 0f14 0f14 0f15 0f15 0f16 0f17 0f17     ................
   1850e:	0f18 0f18 0f19 0f1a 0f1a 0f1b 0f1b 0f1c     ................
   1851e:	0f1d 0f1d 0f1e 0f1e 0f1f 0f20 0f20 0f21     .......... . .!.
   1852e:	0f22 0f22 0f23 0f23 0f24 0f25 0f25 0f26     ".".#.#.$.%.%.&.
   1853e:	0f26 0f27 0f28 0f28 0f29 0f29 0f2a 0f2b     &.'.(.(.).).*.+.
   1854e:	0f2b 0f2c 0f2c 0f2d 0f2e 0f2e 0f2f 0f2f     +.,.,.-....././.
   1855e:	0f30 0f31 0f31 0f32 0f32 0f33 0f34 0f34     0.1.1.2.2.3.4.4.
   1856e:	0f35 0f36 0f36 0f37 0f37 0f38 0f39 0f39     5.6.6.7.7.8.9.9.
   1857e:	0f3a 0f3a 0f3b 0f3c 0f3c 0f3d 0f3d 0f3e     :.:.;.<.<.=.=.>.
   1858e:	0f3f 0f3f 0f40 0f40 0f41 0f42 0f42 0f43     ?.?.@.@.A.B.B.C.
   1859e:	0f43 0f44 0f45 0f45 0f46 0f47 0f47 0f48     C.D.E.E.F.G.G.H.
   185ae:	0f48 0f49 0f4a 0f4a 0f4b 0f4b 0f4c 0f4d     H.I.J.J.K.K.L.M.
   185be:	0f4d 0f4e 0f4e 0f4f 0f50 0f50 0f51 0f51     M.N.N.O.P.P.Q.Q.
   185ce:	0f52 0f53 0f53 0f54 0f54 0f55 0f56 0f56     R.S.S.T.T.U.V.V.
   185de:	0f57 0f58 0f58 0f59 0f59 0f5a 0f5b 0f5b     W.X.X.Y.Y.Z.[.[.
   185ee:	0f5c 0f5c 0f5d 0f5e 0f5e 0f5f 0f5f 0f60     \.\.].^.^._._.`.
   185fe:	0f61 0f61 0f62 0f62 0f63 0f64 0f64 0f65     a.a.b.b.c.d.d.e.
   1860e:	0f66 0f66 0f67 0f67 0f68 0f69 0f69 0f6a     f.f.g.g.h.i.i.j.
   1861e:	0f6a 0f6b 0f6c 0f6c 0f6d 0f6d 0f6e 0f6f     j.k.l.l.m.m.n.o.
   1862e:	0f6f 0f70 0f70 0f71 0f72 0f72 0f73 0f74     o.p.p.q.r.r.s.t.
   1863e:	0f74 0f75 0f75 0f76 0f77 0f77 0f78 0f78     t.u.u.v.w.w.x.x.
   1864e:	0f79 0f7a 0f7a 0f7b 0f7b 0f7c 0f7d 0f7d     y.z.z.{.{.|.}.}.
   1865e:	0f7e 0f7f 0f7f 0f80 0f80 0f81 0f82 0f82     ~...............
   1866e:	0f83 0f83 0f84 0f85 0f85 0f86 0f86 0f87     ................
   1867e:	0f88 0f88 0f89 0f89 0f8a 0f8b 0f8b 0f8c     ................
   1868e:	0f8d 0f8d 0f8e 0f8e 0f8f 0f90 0f90 0f91     ................
   1869e:	0f91 0f92 0f93 0f93 0f94 0f94 0f95 0f96     ................
   186ae:	0f96 0f97 0f98 0f98 0f99 0f99 0f9a 0f9b     ................
   186be:	0f9b 0f9c 0f9c 0f9d 0f9e 0f9e 0f9f 0fa0     ................
   186ce:	0fa0 0fa1 0fa1 0fa2 0fa3 0fa3 0fa4 0fa4     ................
   186de:	0fa5 0fa6 0fa6 0fa7 0fa7 0fa8 0fa9 0fa9     ................
   186ee:	0faa 0fab 0fab 0fac 0fac 0fad 0fae 0fae     ................
   186fe:	0faf 0faf 0fb0 0fb1 0fb1 0fb2 0fb2 0fb3     ................
   1870e:	0fb4 0fb4 0fb5 0fb6 0fb6 0fb7 0fb7 0fb8     ................
   1871e:	0fb9 0fb9 0fba 0fba 0fbb 0fbc 0fbc 0fbd     ................
   1872e:	0fbe 0fbe 0fbf 0fbf 0fc0 0fc1 0fc1 0fc2     ................
   1873e:	0fc2 0fc3 0fc4 0fc4 0fc5 0fc6 0fc6 0fc7     ................
   1874e:	0fc7 0fc8 0fc9 0fc9 0fca 0fca 0fcb 0fcc     ................
   1875e:	0fcc 0fcd 0fce 0fce 0fcf 0fcf 0fd0 0fd1     ................
   1876e:	0fd1 0fd2 0fd2 0fd3 0fd4 0fd4 0fd5 0fd5     ................
   1877e:	0fd6 0fd7 0fd7 0fd8 0fd9 0fd9 0fda 0fda     ................
   1878e:	0fdb 0fdc 0fdc 0fdd 0fdd 0fde 0fdf 0fdf     ................
   1879e:	0fe0 0fe1 0fe1 0fe2 0fe2 0fe3 0fe4 0fe4     ................
   187ae:	0fe5 0fe6 0fe6 0fe7 0fe7 0fe8 0fe9 0fe9     ................
   187be:	0fea 0fea 0feb 0fec 0fec 0fed 0fee 0fee     ................
   187ce:	0fef 0fef 0ff0 0ff1 0ff1 0ff2 0ff2 0ff3     ................
   187de:	0ff4 0ff4 0ff5 0ff6 0ff6 0ff7 0ff7 0ff8     ................
   187ee:	0ff9 0ff9 0ffa 0ffa 0ffb 0ffc 0ffc 0ffd     ................
   187fe:	0ffe 0ffe 0fff 0fff 1000 1001 1001 1002     ................
   1880e:	1003 1003 1004 1004 1005 1006 1006 1007     ................
   1881e:	1007 1008 1009 1009 100a 100b 100b 100c     ................
   1882e:	100c 100d 100e 100e 100f 100f 1010 1011     ................
   1883e:	1011 1012 1013 1013 1014 1014 1015 1016     ................
   1884e:	1016 1017 1018 1018 1019 1019 101a 101b     ................
   1885e:	101b 101c 101c 101d 101e 101e 101f 1020     .............. .
   1886e:	1020 1021 1021 1022 1023 1023 1024 1025      .!.!.".#.#.$.%.
   1887e:	1025 1026 1026 1027 1028 1028 1029 102a     %.&.&.'.(.(.).*.
   1888e:	102a 102b 102b 102c 102d 102d 102e 102e     *.+.+.,.-.-.....
   1889e:	102f 1030 1030 1031 1032 1032 1033 1033     /.0.0.1.2.2.3.3.
   188ae:	1034 1035 1035 1036 1037 1037 1038 1038     4.5.5.6.7.7.8.8.
   188be:	1039 103a 103a 103b 103c 103c 103d 103d     9.:.:.;.<.<.=.=.
   188ce:	103e 103f 103f 1040 1040 1041 1042 1042     >.?.?.@.@.A.B.B.
   188de:	1043 1044 1044 1045 1045 1046 1047 1047     C.D.D.E.E.F.G.G.
   188ee:	1048 1049 1049 104a 104a 104b 104c 104c     H.I.I.J.J.K.L.L.
   188fe:	104d 104e 104e 104f 104f 1050 1051 1051     M.N.N.O.O.P.Q.Q.
   1890e:	1052 1053 1053 1054 1054 1055 1056 1056     R.S.S.T.T.U.V.V.
   1891e:	1057 1058 1058 1059 1059 105a 105b 105b     W.X.X.Y.Y.Z.[.[.
   1892e:	105c 105d 105d 105e 105e 105f 1060 1060     \.].].^.^._.`.`.
   1893e:	1061 1062 1062 1063 1063 1064 1065 1065     a.b.b.c.c.d.e.e.
   1894e:	1066 1066 1067 1068 1068 1069 106a 106a     f.f.g.h.h.i.j.j.
   1895e:	106b 106b 106c 106d 106d 106e 106f 106f     k.k.l.m.m.n.o.o.
   1896e:	1070 1070 1071 1072 1072 1073 1074 1074     p.p.q.r.r.s.t.t.
   1897e:	1075 1075 1076 1077 1077 1078 1079 1079     u.u.v.w.w.x.y.y.
   1898e:	107a 107b 107b 107c 107c 107d 107e 107e     z.{.{.|.|.}.~.~.
   1899e:	107f 1080 1080 1081 1081 1082 1083 1083     ................
   189ae:	1084 1085 1085 1086 1086 1087 1088 1088     ................
   189be:	1089 108a 108a 108b 108b 108c 108d 108d     ................
   189ce:	108e 108f 108f 1090 1090 1091 1092 1092     ................
   189de:	1093 1094 1094 1095 1095 1096 1097 1097     ................
   189ee:	1098 1099 1099 109a 109a 109b 109c 109c     ................
   189fe:	109d 109e 109e 109f 10a0 10a0 10a1 10a1     ................
   18a0e:	10a2 10a3 10a3 10a4 10a5 10a5 10a6 10a6     ................
   18a1e:	10a7 10a8 10a8 10a9 10aa 10aa 10ab 10ab     ................
   18a2e:	10ac 10ad 10ad 10ae 10af 10af 10b0 10b0     ................
   18a3e:	10b1 10b2 10b2 10b3 10b4 10b4 10b5 10b6     ................
   18a4e:	10b6 10b7 10b7 10b8 10b9 10b9 10ba 10bb     ................
   18a5e:	10bb 10bc 10bc 10bd 10be 10be 10bf 10c0     ................
   18a6e:	10c0 10c1 10c2 10c2 10c3 10c3 10c4 10c5     ................
   18a7e:	10c5 10c6 10c7 10c7 10c8 10c8 10c9 10ca     ................
   18a8e:	10ca 10cb 10cc 10cc 10cd 10ce 10ce 10cf     ................
   18a9e:	10cf 10d0 10d1 10d1 10d2 10d3 10d3 10d4     ................
   18aae:	10d4 10d5 10d6 10d6 10d7 10d8 10d8 10d9     ................
   18abe:	10da 10da 10db 10db 10dc 10dd 10dd 10de     ................
   18ace:	10df 10df 10e0 10e1 10e1 10e2 10e2 10e3     ................
   18ade:	10e4 10e4 10e5 10e6 10e6 10e7 10e7 10e8     ................
   18aee:	10e9 10e9 10ea 10eb 10eb 10ec 10ed 10ed     ................
   18afe:	10ee 10ee 10ef 10f0 10f0 10f1 10f2 10f2     ................
   18b0e:	10f3 10f4 10f4 10f5 10f5 10f6 10f7 10f7     ................
   18b1e:	10f8 10f9 10f9 10fa 10fb 10fb 10fc 10fc     ................
   18b2e:	10fd 10fe 10fe 10ff 1100 1100 1101 1102     ................
   18b3e:	1102 1103 1103 1104 1105 1105 1106 1107     ................
   18b4e:	1107 1108 1109 1109 110a 110a 110b 110c     ................
   18b5e:	110c 110d 110e 110e 110f 1110 1110 1111     ................
   18b6e:	1111 1112 1113 1113 1114 1115 1115 1116     ................
   18b7e:	1117 1117 1118 1118 1119 111a 111a 111b     ................
   18b8e:	111c 111c 111d 111e 111e 111f 111f 1120     .............. .
   18b9e:	1121 1121 1122 1123 1123 1124 1125 1125     !.!.".#.#.$.%.%.
   18bae:	1126 1127 1127 1128 1128 1129 112a 112a     &.'.'.(.(.).*.*.
   18bbe:	112b 112c 112c 112d 112e 112e 112f 112f     +.,.,.-....././.
   18bce:	1130 1131 1131 1132 1133 1133 1134 1135     0.1.1.2.3.3.4.5.
   18bde:	1135 1136 1136 1137 1138 1138 1139 113a     5.6.6.7.8.8.9.:.
   18bee:	113a 113b 113c 113c 113d 113e 113e 113f     :.;.<.<.=.>.>.?.
   18bfe:	113f 1140 1141 1141 1142 1143 1143 1144     ?.@.A.A.B.C.C.D.
   18c0e:	1145 1145 1146 1147 1147 1148 1148 1149     E.E.F.G.G.H.H.I.
   18c1e:	114a 114a 114b 114c 114c 114d 114e 114e     J.J.K.L.L.M.N.N.
   18c2e:	114f 1150 1150 1151 1151 1152 1153 1153     O.P.P.Q.Q.R.S.S.
   18c3e:	1154 1155 1155 1156 1157 1157 1158 1159     T.U.U.V.W.W.X.Y.
   18c4e:	1159 115a 115a 115b 115c 115c 115d 115e     Y.Z.Z.[.\.\.].^.
   18c5e:	115e 115f 1160 1160 1161 1162 1162 1163     ^._.`.`.a.b.b.c.
   18c6e:	1163 1164 1165 1165 1166 1167 1167 1168     c.d.e.e.f.g.g.h.
   18c7e:	1169 1169 116a 116b 116b 116c 116d 116d     i.i.j.k.k.l.m.m.
   18c8e:	116e 116e 116f 1170 1170 1171 1172 1172     n.n.o.p.p.q.r.r.
   18c9e:	1173 1174 1174 1175 1176 1176 1177 1177     s.t.t.u.v.v.w.w.
   18cae:	1178 1179 1179 117a 117b 117b 117c 117d     x.y.y.z.{.{.|.}.
   18cbe:	117d 117e 117f 117f 1180 1181 1181 1182     }.~.............
   18cce:	1182 1183 1184 1184 1185 1186 1186 1187     ................
   18cde:	1188 1188 1189 118a 118a 118b 118c 118c     ................
   18cee:	118d 118d 118e 118f 118f 1190 1191 1191     ................
   18cfe:	1192 1193 1193 1194 1195 1195 1196 1197     ................
   18d0e:	1197 1198 1199 1199 119a 119a 119b 119c     ................
   18d1e:	119c 119d 119e 119e 119f 11a0 11a0 11a1     ................
   18d2e:	11a2 11a2 11a3 11a4 11a4 11a5 11a6 11a6     ................
   18d3e:	11a7 11a7 11a8 11a9 11a9 11aa 11ab 11ab     ................
   18d4e:	11ac 11ad 11ad 11ae 11af 11af 11b0 11b1     ................
   18d5e:	11b1 11b2 11b3 11b3 11b4 11b5 11b5 11b6     ................
   18d6e:	11b6 11b7 11b8 11b8 11b9 11ba 11ba 11bb     ................
   18d7e:	11bc 11bc 11bd 11be 11be 11bf 11c0 11c0     ................
   18d8e:	11c1 11c2 11c2 11c3 11c4 11c4 11c5 11c5     ................
   18d9e:	11c6 11c7 11c7 11c8 11c9 11c9 11ca 11cb     ................
   18dae:	11cb 11cc 11cd 11cd 11ce 11cf 11cf 11d0     ................
   18dbe:	11d1 11d1 11d2 11d3 11d3 11d4 11d5 11d5     ................
   18dce:	11d6 11d7 11d7 11d8 11d8 11d9 11da 11da     ................
   18dde:	11db 11dc 11dc 11dd 11de 11de 11df 11e0     ................
   18dee:	11e0 11e1 11e2 11e2 11e3 11e4 11e4 11e5     ................
   18dfe:	11e6 11e6 11e7 11e8 11e8 11e9 11ea 11ea     ................
   18e0e:	11eb 11ec 11ec 11ed 11ed 11ee 11ef 11ef     ................
   18e1e:	11f0 11f1 11f1 11f2 11f3 11f3 11f4 11f5     ................
   18e2e:	11f5 11f6 11f7 11f7 11f8 11f9 11f9 11fa     ................
   18e3e:	11fb 11fb 11fc 11fd 11fd 11fe 11ff 11ff     ................
   18e4e:	1200 1201 1201 1202 1203 1203 1204 1205     ................
   18e5e:	1205 1206 1207 1207 1208 1209 1209 120a     ................
   18e6e:	120a 120b 120c 120c 120d 120e 120e 120f     ................
   18e7e:	1210 1210 1211 1212 1212 1213 1214 1214     ................
   18e8e:	1215 1216 1216 1217 1218 1218 1219 121a     ................
   18e9e:	121a 121b 121c 121c 121d 121e 121e 121f     ................
   18eae:	1220 1220 1221 1222 1222 1223 1224 1224      . .!.".".#.$.$.
   18ebe:	1225 1226 1226 1227 1228 1228 1229 122a     %.&.&.'.(.(.).*.
   18ece:	122a 122b 122c 122c 122d 122e 122e 122f     *.+.,.,.-...../.
   18ede:	1230 1230 1231 1232 1232 1233 1234 1234     0.0.1.2.2.3.4.4.
   18eee:	1235 1236 1236 1237 1238 1238 1239 123a     5.6.6.7.8.8.9.:.
   18efe:	123a 123b 123c 123c 123d 123e 123e 123f     :.;.<.<.=.>.>.?.
   18f0e:	1240 1240 1241 1242 1242 1243 1244 1244     @.@.A.B.B.C.D.D.
   18f1e:	1245 1246 1246 1247 1248 1248 1249 124a     E.F.F.G.H.H.I.J.
   18f2e:	124a 124b 124c 124c 124d 124e 124e 124f     J.K.L.L.M.N.N.O.
   18f3e:	1250 1250 1251 1252 1252 1253 1254 1254     P.P.Q.R.R.S.T.T.
   18f4e:	1255 1256 1256 1257 1258 1258 1259 125a     U.V.V.W.X.X.Y.Z.
   18f5e:	125a 125b 125c 125c 125d 125e 125e 125f     Z.[.\.\.].^.^._.
   18f6e:	1260 1260 1261 1262 1262 1263 1264 1264     `.`.a.b.b.c.d.d.
   18f7e:	1265 1266 1266 1267 1268 1268 1269 126a     e.f.f.g.h.h.i.j.
   18f8e:	126a 126b 126c 126c 126d 126e 126e 126f     j.k.l.l.m.n.n.o.
   18f9e:	1270 1270 1271 1272 1272 1273 1274 1274     p.p.q.r.r.s.t.t.
   18fae:	1275 1276 1276 1277 1278 1278 1279 127a     u.v.v.w.x.x.y.z.
   18fbe:	127a 127b 127c 127c 127d 127e 127f 127f     z.{.|.|.}.~.....
   18fce:	1280 1281 1281 1282 1283 1283 1284 1285     ................
   18fde:	1285 1286 1287 1287 1288 1289 1289 128a     ................
   18fee:	128b 128b 128c 128d 128d 128e 128f 128f     ................
   18ffe:	1290 1291 1291 1292 1293 1293 1294 1295     ................
   1900e:	1295 1296 1297 1297 1298 1299 129a 129a     ................
   1901e:	129b 129c 129c 129d 129e 129e 129f 12a0     ................
   1902e:	12a0 12a1 12a2 12a2 12a3 12a4 12a4 12a5     ................
   1903e:	12a6 12a6 12a7 12a8 12a8 12a9 12aa 12aa     ................
   1904e:	12ab 12ac 12ac 12ad 12ae 12af 12af 12b0     ................
   1905e:	12b1 12b1 12b2 12b3 12b3 12b4 12b5 12b5     ................
   1906e:	12b6 12b7 12b7 12b8 12b9 12b9 12ba 12bb     ................
   1907e:	12bb 12bc 12bd 12bd 12be 12bf 12c0 12c0     ................
   1908e:	12c1 12c2 12c2 12c3 12c4 12c4 12c5 12c6     ................
   1909e:	12c6 12c7 12c8 12c8 12c9 12ca 12ca 12cb     ................
   190ae:	12cc 12cc 12cd 12ce 12cf 12cf 12d0 12d1     ................
   190be:	12d1 12d2 12d3 12d3 12d4 12d5 12d5 12d6     ................
   190ce:	12d7 12d7 12d8 12d9 12d9 12da 12db 12db     ................
   190de:	12dc 12dd 12de 12de 12df 12e0 12e0 12e1     ................
   190ee:	12e2 12e2 12e3 12e4 12e4 12e5 12e6 12e6     ................
   190fe:	12e7 12e8 12e9 12e9 12ea 12eb 12eb 12ec     ................
   1910e:	12ed 12ed 12ee 12ef 12ef 12f0 12f1 12f1     ................
   1911e:	12f2 12f3 12f4 12f4 12f5 12f6 12f6 12f7     ................
   1912e:	12f8 12f8 12f9 12fa 12fa 12fb 12fc 12fc     ................
   1913e:	12fd 12fe 12ff 12ff 1300 1301 1301 1302     ................
   1914e:	1303 1303 1304 1305 1305 1306 1307 1307     ................
   1915e:	1308 1309 130a 130a 130b 130c 130c 130d     ................
   1916e:	130e 130e 130f 1310 1310 1311 1312 1313     ................
   1917e:	1313 1314 1315 1315 1316 1317 1317 1318     ................
   1918e:	1319 1319 131a 131b 131c 131c 131d 131e     ................
   1919e:	131e 131f 1320 1320 1321 1322 1322 1323     .... . .!.".".#.
   191ae:	1324 1325 1325 1326 1327 1327 1328 1329     $.%.%.&.'.'.(.).
   191be:	1329 132a 132b 132b 132c 132d 132e 132e     ).*.+.+.,.-.....
   191ce:	132f 1330 1330 1331 1332 1332 1333 1334     /.0.0.1.2.2.3.4.
   191de:	1334 1335 1336 1337 1337 1338 1339 1339     4.5.6.7.7.8.9.9.
   191ee:	133a 133b 133b 133c 133d 133e 133e 133f     :.;.;.<.=.>.>.?.
   191fe:	1340 1340 1341 1342 1342 1343 1344 1345     @.@.A.B.B.C.D.E.
   1920e:	1345 1346 1347 1347 1348 1349 1349 134a     E.F.G.G.H.I.I.J.
   1921e:	134b 134c 134c 134d 134e 134e 134f 1350     K.L.L.M.N.N.O.P.
   1922e:	1350 1351 1352 1352 1353 1354 1355 1355     P.Q.R.R.S.T.U.U.
   1923e:	1356 1357 1357 1358 1359 1359 135a 135b     V.W.W.X.Y.Y.Z.[.
   1924e:	135c 135c 135d 135e 135e 135f 1360 1361     \.\.].^.^._.`.a.
   1925e:	1361 1362 1363 1363 1364 1365 1365 1366     a.b.c.c.d.e.e.f.
   1926e:	1367 1368 1368 1369 136a 136a 136b 136c     g.h.h.i.j.j.k.l.
   1927e:	136c 136d 136e 136f 136f 1370 1371 1371     l.m.n.o.o.p.q.q.
   1928e:	1372 1373 1373 1374 1375 1376 1376 1377     r.s.s.t.u.v.v.w.
   1929e:	1378 1378 1379 137a 137b 137b 137c 137d     x.x.y.z.{.{.|.}.
   192ae:	137d 137e 137f 137f 1380 1381 1382 1382     }.~.............
   192be:	1383 1384 1384 1385 1386 1387 1387 1388     ................
   192ce:	1389 1389 138a 138b 138b 138c 138d 138e     ................
   192de:	138e 138f 1390 1390 1391 1392 1393 1393     ................
   192ee:	1394 1395 1395 1396 1397 1398 1398 1399     ................
   192fe:	139a 139a 139b 139c 139d 139d 139e 139f     ................
   1930e:	139f 13a0 13a1 13a1 13a2 13a3 13a4 13a4     ................
   1931e:	13a5 13a6 13a6 13a7 13a8 13a9 13a9 13aa     ................
   1932e:	13ab 13ab 13ac 13ad 13ae 13ae 13af 13b0     ................
   1933e:	13b0 13b1 13b2 13b3 13b3 13b4 13b5 13b5     ................
   1934e:	13b6 13b7 13b8 13b8 13b9 13ba 13ba 13bb     ................
   1935e:	13bc 13bd 13bd 13be 13bf 13bf 13c0 13c1     ................
   1936e:	13c2 13c2 13c3 13c4 13c4 13c5 13c6 13c7     ................
   1937e:	13c7 13c8 13c9 13c9 13ca 13cb 13cc 13cc     ................
   1938e:	13cd 13ce 13ce 13cf 13d0 13d1 13d1 13d2     ................
   1939e:	13d3 13d3 13d4 13d5 13d6 13d6 13d7 13d8     ................
   193ae:	13d9 13d9 13da 13db 13db 13dc 13dd 13de     ................
   193be:	13de 13df 13e0 13e0 13e1 13e2 13e3 13e3     ................
   193ce:	13e4 13e5 13e5 13e6 13e7 13e8 13e8 13e9     ................
   193de:	13ea 13eb 13eb 13ec 13ed 13ed 13ee 13ef     ................
   193ee:	13f0 13f0 13f1 13f2 13f2 13f3 13f4 13f5     ................
   193fe:	13f5 13f6 13f7 13f8 13f8 13f9 13fa 13fa     ................
   1940e:	13fb 13fc 13fd 13fd 13fe 13ff 13ff 1400     ................
   1941e:	1401 1402 1402 1403 1404 1405 1405 1406     ................
   1942e:	1407 1407 1408 1409 140a 140a 140b 140c     ................
   1943e:	140d 140d 140e 140f 140f 1410 1411 1412     ................
   1944e:	1412 1413 1414 1415 1415 1416 1417 1417     ................
   1945e:	1418 1419 141a 141a 141b 141c 141d 141d     ................
   1946e:	141e 141f 141f 1420 1421 1422 1422 1423     ...... .!.".".#.
   1947e:	1424 1425 1425 1426 1427 1428 1428 1429     $.%.%.&.'.(.(.).
   1948e:	142a 142a 142b 142c 142d 142d 142e 142f     *.*.+.,.-.-.../.
   1949e:	1430 1430 1431 1432 1433 1433 1434 1435     0.0.1.2.3.3.4.5.
   194ae:	1435 1436 1437 1438 1438 1439 143a 143b     5.6.7.8.8.9.:.;.
   194be:	143b 143c 143d 143e 143e 143f 1440 1440     ;.<.=.>.>.?.@.@.
   194ce:	1441 1442 1443 1443 1444 1445 1446 1446     A.B.C.C.D.E.F.F.
   194de:	1447 1448 1449 1449 144a 144b 144b 144c     G.H.I.I.J.K.K.L.
   194ee:	144d 144e 144e 144f 1450 1451 1451 1452     M.N.N.O.P.Q.Q.R.
   194fe:	1453 1454 1454 1455 1456 1457 1457 1458     S.T.T.U.V.W.W.X.
   1950e:	1459 145a 145a 145b 145c 145c 145d 145e     Y.Z.Z.[.\.\.].^.
   1951e:	145f 145f 1460 1461 1462 1462 1463 1464     _._.`.a.b.b.c.d.
   1952e:	1465 1465 1466 1467 1468 1468 1469 146a     e.e.f.g.h.h.i.j.
   1953e:	146b 146b 146c 146d 146e 146e 146f 1470     k.k.l.m.n.n.o.p.
   1954e:	1470 1471 1472 1473 1473 1474 1475 1476     p.q.r.s.s.t.u.v.
   1955e:	1476 1477 1478 1479 1479 147a 147b 147c     v.w.x.y.y.z.{.|.
   1956e:	147c 147d 147e 147f 147f 1480 1481 1482     |.}.~...........
   1957e:	1482 1483 1484 1485 1485 1486 1487 1488     ................
   1958e:	1488 1489 148a 148b 148b 148c 148d 148e     ................
   1959e:	148e 148f 1490 1491 1491 1492 1493 1494     ................
   195ae:	1494 1495 1496 1497 1497 1498 1499 149a     ................
   195be:	149a 149b 149c 149d 149d 149e 149f 14a0     ................
   195ce:	14a0 14a1 14a2 14a3 14a3 14a4 14a5 14a6     ................
   195de:	14a6 14a7 14a8 14a9 14a9 14aa 14ab 14ac     ................
   195ee:	14ac 14ad 14ae 14af 14af 14b0 14b1 14b2     ................
   195fe:	14b2 14b3 14b4 14b5 14b5 14b6 14b7 14b8     ................
   1960e:	14b8 14b9 14ba 14bb 14bb 14bc 14bd 14be     ................
   1961e:	14be 14bf 14c0 14c1 14c2 14c2 14c3 14c4     ................
   1962e:	14c5 14c5 14c6 14c7 14c8 14c8 14c9 14ca     ................
   1963e:	14cb 14cb 14cc 14cd 14ce 14ce 14cf 14d0     ................
   1964e:	14d1 14d1 14d2 14d3 14d4 14d4 14d5 14d6     ................
   1965e:	14d7 14d8 14d8 14d9 14da 14db 14db 14dc     ................
   1966e:	14dd 14de 14de 14df 14e0 14e1 14e1 14e2     ................
   1967e:	14e3 14e4 14e4 14e5 14e6 14e7 14e8 14e8     ................
   1968e:	14e9 14ea 14eb 14eb 14ec 14ed 14ee 14ee     ................
   1969e:	14ef 14f0 14f1 14f1 14f2 14f3 14f4 14f5     ................
   196ae:	14f5 14f6 14f7 14f8 14f8 14f9 14fa 14fb     ................
   196be:	14fb 14fc 14fd 14fe 14ff 14ff 1500 1501     ................
   196ce:	1502 1502 1503 1504 1505 1505 1506 1507     ................
   196de:	1508 1509 1509 150a 150b 150c 150c 150d     ................
   196ee:	150e 150f 150f 1510 1511 1512 1513 1513     ................
   196fe:	1514 1515 1516 1516 1517 1518 1519 151a     ................
   1970e:	151a 151b 151c 151d 151d 151e 151f 1520     .............. .
   1971e:	1521 1521 1522 1523 1524 1524 1525 1526     !.!.".#.$.$.%.&.
   1972e:	1527 1527 1528 1529 152a 152b 152b 152c     '.'.(.).*.+.+.,.
   1973e:	152d 152e 152e 152f 1530 1531 1532 1532     -...../.0.1.2.2.
   1974e:	1533 1534 1535 1535 1536 1537 1538 1539     3.4.5.5.6.7.8.9.
   1975e:	1539 153a 153b 153c 153d 153d 153e 153f     9.:.;.<.=.=.>.?.
   1976e:	1540 1540 1541 1542 1543 1544 1544 1545     @.@.A.B.C.D.D.E.
   1977e:	1546 1547 1547 1548 1549 154a 154b 154b     F.G.G.H.I.J.K.K.
   1978e:	154c 154d 154e 154f 154f 1550 1551 1552     L.M.N.O.O.P.Q.R.
   1979e:	1552 1553 1554 1555 1556 1556 1557 1558     R.S.T.U.V.V.W.X.
   197ae:	1559 1559 155a 155b 155c 155d 155d 155e     Y.Y.Z.[.\.].].^.
   197be:	155f 1560 1561 1561 1562 1563 1564 1565     _.`.a.a.b.c.d.e.
   197ce:	1565 1566 1567 1568 1568 1569 156a 156b     e.f.g.h.h.i.j.k.
   197de:	156c 156c 156d 156e 156f 1570 1570 1571     l.l.m.n.o.p.p.q.
   197ee:	1572 1573 1574 1574 1575 1576 1577 1577     r.s.t.t.u.v.w.w.
   197fe:	1578 1579 157a 157b 157b 157c 157d 157e     x.y.z.{.{.|.}.~.
   1980e:	157f 157f 1580 1581 1582 1583 1583 1584     ................
   1981e:	1585 1586 1587 1587 1588 1589 158a 158b     ................
   1982e:	158b 158c 158d 158e 158f 158f 1590 1591     ................
   1983e:	1592 1593 1593 1594 1595 1596 1597 1597     ................
   1984e:	1598 1599 159a 159b 159b 159c 159d 159e     ................
   1985e:	159f 159f 15a0 15a1 15a2 15a3 15a3 15a4     ................
   1986e:	15a5 15a6 15a7 15a7 15a8 15a9 15aa 15ab     ................
   1987e:	15ab 15ac 15ad 15ae 15af 15af 15b0 15b1     ................
   1988e:	15b2 15b3 15b3 15b4 15b5 15b6 15b7 15b7     ................
   1989e:	15b8 15b9 15ba 15bb 15bb 15bc 15bd 15be     ................
   198ae:	15bf 15c0 15c0 15c1 15c2 15c3 15c4 15c4     ................
   198be:	15c5 15c6 15c7 15c8 15c8 15c9 15ca 15cb     ................
   198ce:	15cc 15cc 15cd 15ce 15cf 15d0 15d1 15d1     ................
   198de:	15d2 15d3 15d4 15d5 15d5 15d6 15d7 15d8     ................
   198ee:	15d9 15d9 15da 15db 15dc 15dd 15de 15de     ................
   198fe:	15df 15e0 15e1 15e2 15e2 15e3 15e4 15e5     ................
   1990e:	15e6 15e6 15e7 15e8 15e9 15ea 15eb 15eb     ................
   1991e:	15ec 15ed 15ee 15ef 15ef 15f0 15f1 15f2     ................
   1992e:	15f3 15f4 15f4 15f5 15f6 15f7 15f8 15f9     ................
   1993e:	15f9 15fa 15fb 15fc 15fd 15fd 15fe 15ff     ................
   1994e:	1600 1601 1602 1602 1603 1604 1605 1606     ................
   1995e:	1606 1607 1608 1609 160a 160b 160b 160c     ................
   1996e:	160d 160e 160f 1610 1610 1611 1612 1613     ................
   1997e:	1614 1615 1615 1616 1617 1618 1619 1619     ................
   1998e:	161a 161b 161c 161d 161e 161e 161f 1620     .............. .
   1999e:	1621 1622 1623 1623 1624 1625 1626 1627     !.".#.#.$.%.&.'.
   199ae:	1628 1628 1629 162a 162b 162c 162d 162d     (.(.).*.+.,.-.-.
   199be:	162e 162f 1630 1631 1632 1632 1633 1634     ../.0.1.2.2.3.4.
   199ce:	1635 1636 1637 1637 1638 1639 163a 163b     5.6.7.7.8.9.:.;.
   199de:	163c 163c 163d 163e 163f 1640 1641 1641     <.<.=.>.?.@.A.A.
   199ee:	1642 1643 1644 1645 1646 1647 1647 1648     B.C.D.E.F.G.G.H.
   199fe:	1649 164a 164b 164c 164c 164d 164e 164f     I.J.K.L.L.M.N.O.
   19a0e:	1650 1651 1651 1652 1653 1654 1655 1656     P.Q.Q.R.S.T.U.V.
   19a1e:	1656 1657 1658 1659 165a 165b 165c 165c     V.W.X.Y.Z.[.\.\.
   19a2e:	165d 165e 165f 1660 1661 1661 1662 1663     ].^._.`.a.a.b.c.
   19a3e:	1664 1665 1666 1667 1667 1668 1669 166a     d.e.f.g.g.h.i.j.
   19a4e:	166b 166c 166c 166d 166e 166f 1670 1671     k.l.l.m.n.o.p.q.
   19a5e:	1672 1672 1673 1674 1675 1676 1677 1678     r.r.s.t.u.v.w.x.
   19a6e:	1678 1679 167a 167b 167c 167d 167d 167e     x.y.z.{.|.}.}.~.
   19a7e:	167f 1680 1681 1682 1683 1683 1684 1685     ................
   19a8e:	1686 1687 1688 1689 1689 168a 168b 168c     ................
   19a9e:	168d 168e 168f 168f 1690 1691 1692 1693     ................
   19aae:	1694 1695 1695 1696 1697 1698 1699 169a     ................
   19abe:	169b 169b 169c 169d 169e 169f 16a0 16a1     ................
   19ace:	16a1 16a2 16a3 16a4 16a5 16a6 16a7 16a8     ................
   19ade:	16a8 16a9 16aa 16ab 16ac 16ad 16ae 16ae     ................
   19aee:	16af 16b0 16b1 16b2 16b3 16b4 16b5 16b5     ................
   19afe:	16b6 16b7 16b8 16b9 16ba 16bb 16bb 16bc     ................
   19b0e:	16bd 16be 16bf 16c0 16c1 16c2 16c2 16c3     ................
   19b1e:	16c4 16c5 16c6 16c7 16c8 16c9 16c9 16ca     ................
   19b2e:	16cb 16cc 16cd 16ce 16cf 16d0 16d0 16d1     ................
   19b3e:	16d2 16d3 16d4 16d5 16d6 16d7 16d7 16d8     ................
   19b4e:	16d9 16da 16db 16dc 16dd 16de 16de 16df     ................
   19b5e:	16e0 16e1 16e2 16e3 16e4 16e5 16e5 16e6     ................
   19b6e:	16e7 16e8 16e9 16ea 16eb 16ec 16ec 16ed     ................
   19b7e:	16ee 16ef 16f0 16f1 16f2 16f3 16f4 16f4     ................
   19b8e:	16f5 16f6 16f7 16f8 16f9 16fa 16fb 16fc     ................
   19b9e:	16fc 16fd 16fe 16ff 1700 1701 1702 1703     ................
   19bae:	1704 1704 1705 1706 1707 1708 1709 170a     ................
   19bbe:	170b 170c 170c 170d 170e 170f 1710 1711     ................
   19bce:	1712 1713 1714 1714 1715 1716 1717 1718     ................
   19bde:	1719 171a 171b 171c 171c 171d 171e 171f     ................
   19bee:	1720 1721 1722 1723 1724 1725 1725 1726      .!.".#.$.%.%.&.
   19bfe:	1727 1728 1729 172a 172b 172c 172d 172e     '.(.).*.+.,.-...
   19c0e:	172e 172f 1730 1731 1732 1733 1734 1735     ../.0.1.2.3.4.5.
   19c1e:	1736 1737 1737 1738 1739 173a 173b 173c     6.7.7.8.9.:.;.<.
   19c2e:	173d 173e 173f 1740 1741 1741 1742 1743     =.>.?.@.A.A.B.C.
   19c3e:	1744 1745 1746 1747 1748 1749 174a 174b     D.E.F.G.H.I.J.K.
   19c4e:	174b 174c 174d 174e 174f 1750 1751 1752     K.L.M.N.O.P.Q.R.
   19c5e:	1753 1754 1755 1755 1756 1757 1758 1759     S.T.U.U.V.W.X.Y.
   19c6e:	175a 175b 175c 175d 175e 175f 1760 1760     Z.[.\.].^._.`.`.
   19c7e:	1761 1762 1763 1764 1765 1766 1767 1768     a.b.c.d.e.f.g.h.
   19c8e:	1769 176a 176b 176b 176c 176d 176e 176f     i.j.k.k.l.m.n.o.
   19c9e:	1770 1771 1772 1773 1774 1775 1776 1776     p.q.r.s.t.u.v.v.
   19cae:	1777 1778 1779 177a 177b 177c 177d 177e     w.x.y.z.{.|.}.~.
   19cbe:	177f 1780 1781 1782 1783 1783 1784 1785     ................
   19cce:	1786 1787 1788 1789 178a 178b 178c 178d     ................
   19cde:	178e 178f 1790 1790 1791 1792 1793 1794     ................
   19cee:	1795 1796 1797 1798 1799 179a 179b 179c     ................
   19cfe:	179d 179e 179e 179f 17a0 17a1 17a2 17a3     ................
   19d0e:	17a4 17a5 17a6 17a7 17a8 17a9 17aa 17ab     ................
   19d1e:	17ac 17ac 17ad 17ae 17af 17b0 17b1 17b2     ................
   19d2e:	17b3 17b4 17b5 17b6 17b7 17b8 17b9 17ba     ................
   19d3e:	17bb 17bc 17bd 17bd 17be 17bf 17c0 17c1     ................
   19d4e:	17c2 17c3 17c4 17c5 17c6 17c7 17c8 17c9     ................
   19d5e:	17ca 17cb 17cc 17cd 17ce 17cf 17cf 17d0     ................
   19d6e:	17d1 17d2 17d3 17d4 17d5 17d6 17d7 17d8     ................
   19d7e:	17d9 17da 17db 17dc 17dd 17de 17df 17e0     ................
   19d8e:	17e1 17e2 17e3 17e4 17e4 17e5 17e6 17e7     ................
   19d9e:	17e8 17e9 17ea 17eb 17ec 17ed 17ee 17ef     ................
   19dae:	17f0 17f1 17f2 17f3 17f4 17f5 17f6 17f7     ................
   19dbe:	17f8 17f9 17fa 17fb 17fc 17fd 17fe 17fe     ................
   19dce:	17ff 1800 1801 1802 1803 1804 1805 1806     ................
   19dde:	1807 1808 1809 180a 180b 180c 180d 180e     ................
   19dee:	180f 1810 1811 1812 1813 1814 1815 1816     ................
   19dfe:	1817 1818 1819 181a 181b 181c 181d 181e     ................
   19e0e:	181f 1820 1821 1822 1823 1823 1824 1825     .. .!.".#.#.$.%.
   19e1e:	1826 1827 1828 1829 182a 182b 182c 182d     &.'.(.).*.+.,.-.
   19e2e:	182e 182f 1830 1831 1832 1833 1834 1835     ../.0.1.2.3.4.5.
   19e3e:	1836 1837 1838 1839 183a 183b 183c 183d     6.7.8.9.:.;.<.=.
   19e4e:	183e 183f 1840 1841 1842 1843 1844 1845     >.?.@.A.B.C.D.E.
   19e5e:	1846 1847 1848 1849 184a 184b 184c 184d     F.G.H.I.J.K.L.M.
   19e6e:	184e 184f 1850 1851 1852 1853 1854 1855     N.O.P.Q.R.S.T.U.
   19e7e:	1856 1857 1858 1859 185a 185b 185c 185d     V.W.X.Y.Z.[.\.].
   19e8e:	185e 185f 1860 1861 1862 1863 1864 1865     ^._.`.a.b.c.d.e.
   19e9e:	1866 1867 1868 1869 186a 186b 186c 186d     f.g.h.i.j.k.l.m.
   19eae:	186e 186f 1870 1871 1872 1873 1874 1875     n.o.p.q.r.s.t.u.
   19ebe:	1876 1877 1878 1879 187a 187b 187c 187d     v.w.x.y.z.{.|.}.
   19ece:	187e 187f 1880 1881 1882 1883 1884 1885     ~...............
   19ede:	1886 1887 1888 1889 188a 188b 188c 188d     ................
   19eee:	188e 188f 1891 1892 1893 1894 1895 1896     ................
   19efe:	1897 1898 1899 189a 189b 189c 189d 189e     ................
   19f0e:	189f 18a0 18a1 18a2 18a3 18a4 18a5 18a6     ................
   19f1e:	18a7 18a8 18a9 18aa 18ab 18ac 18ad 18ae     ................
   19f2e:	18af 18b0 18b1 18b2 18b3 18b4 18b6 18b7     ................
   19f3e:	18b8 18b9 18ba 18bb 18bc 18bd 18be 18bf     ................
   19f4e:	18c0 18c1 18c2 18c3 18c4 18c5 18c6 18c7     ................
   19f5e:	18c8 18c9 18ca 18cb 18cc 18cd 18ce 18d0     ................
   19f6e:	18d1 18d2 18d3 18d4 18d5 18d6 18d7 18d8     ................
   19f7e:	18d9 18da 18db 18dc 18dd 18de 18df 18e0     ................
   19f8e:	18e1 18e2 18e3 18e5 18e6 18e7 18e8 18e9     ................
   19f9e:	18ea 18eb 18ec 18ed 18ee 18ef 18f0 18f1     ................
   19fae:	18f2 18f3 18f4 18f5 18f7 18f8 18f9 18fa     ................
   19fbe:	18fb 18fc 18fd 18fe 18ff 1900 1901 1902     ................
   19fce:	1903 1904 1905 1907 1908 1909 190a 190b     ................
   19fde:	190c 190d 190e 190f 1910 1911 1912 1913     ................
   19fee:	1914 1916 1917 1918 1919 191a 191b 191c     ................
   19ffe:	191d 191e 191f 1920 1921 1923 1924 1925     ...... .!.#.$.%.
   1a00e:	1926 1927 1928 1929 192a 192b 192c 192d     &.'.(.).*.+.,.-.
   1a01e:	192e 1930 1931 1932 1933 1934 1935 1936     ..0.1.2.3.4.5.6.
   1a02e:	1937 1938 1939 193a 193c 193d 193e 193f     7.8.9.:.<.=.>.?.
   1a03e:	1940 1941 1942 1943 1944 1945 1946 1948     @.A.B.C.D.E.F.H.
   1a04e:	1949 194a 194b 194c 194d 194e 194f 1950     I.J.K.L.M.N.O.P.
   1a05e:	1951 1953 1954 1955 1956 1957 1958 1959     Q.S.T.U.V.W.X.Y.
   1a06e:	195a 195b 195d 195e 195f 1960 1961 1962     Z.[.].^._.`.a.b.
   1a07e:	1963 1964 1965 1967 1968 1969 196a 196b     c.d.e.g.h.i.j.k.
   1a08e:	196c 196d 196e 196f 1971 1972 1973 1974     l.m.n.o.q.r.s.t.
   1a09e:	1975 1976 1977 1978 197a 197b 197c 197d     u.v.w.x.z.{.|.}.
   1a0ae:	197e 197f 1980 1981 1983 1984 1985 1986     ~...............
   1a0be:	1987 1988 1989 198a 198c 198d 198e 198f     ................
   1a0ce:	1990 1991 1992 1993 1995 1996 1997 1998     ................
   1a0de:	1999 199a 199b 199d 199e 199f 19a0 19a1     ................
   1a0ee:	19a2 19a3 19a5 19a6 19a7 19a8 19a9 19aa     ................
   1a0fe:	19ab 19ad 19ae 19af 19b0 19b1 19b2 19b3     ................
   1a10e:	19b5 19b6 19b7 19b8 19b9 19ba 19bc 19bd     ................
   1a11e:	19be 19bf 19c0 19c1 19c2 19c4 19c5 19c6     ................
   1a12e:	19c7 19c8 19c9 19cb 19cc 19cd 19ce 19cf     ................
   1a13e:	19d0 19d2 19d3 19d4 19d5 19d6 19d7 19d9     ................
   1a14e:	19da 19db 19dc 19dd 19de 19e0 19e1 19e2     ................
   1a15e:	19e3 19e4 19e5 19e7 19e8 19e9 19ea 19eb     ................
   1a16e:	19ed 19ee 19ef 19f0 19f1 19f2 19f4 19f5     ................
   1a17e:	19f6 19f7 19f8 19fa 19fb 19fc 19fd 19fe     ................
   1a18e:	19ff 1a01 1a02 1a03 1a04 1a05 1a07 1a08     ................
   1a19e:	1a09 1a0a 1a0b 1a0d 1a0e 1a0f 1a10 1a11     ................
   1a1ae:	1a13 1a14 1a15 1a16 1a17 1a19 1a1a 1a1b     ................
   1a1be:	1a1c 1a1d 1a1f 1a20 1a21 1a22 1a23 1a25     ...... .!.".#.%.
   1a1ce:	1a26 1a27 1a28 1a2a 1a2b 1a2c 1a2d 1a2e     &.'.(.*.+.,.-...
   1a1de:	1a30 1a31 1a32 1a33 1a34 1a36 1a37 1a38     0.1.2.3.4.6.7.8.
   1a1ee:	1a39 1a3b 1a3c 1a3d 1a3e 1a3f 1a41 1a42     9.;.<.=.>.?.A.B.
   1a1fe:	1a43 1a44 1a46 1a47 1a48 1a49 1a4b 1a4c     C.D.F.G.H.I.K.L.
   1a20e:	1a4d 1a4e 1a4f 1a51 1a52 1a53 1a54 1a56     M.N.O.Q.R.S.T.V.
   1a21e:	1a57 1a58 1a59 1a5b 1a5c 1a5d 1a5e 1a60     W.X.Y.[.\.].^.`.
   1a22e:	1a61 1a62 1a63 1a65 1a66 1a67 1a68 1a6a     a.b.c.e.f.g.h.j.
   1a23e:	1a6b 1a6c 1a6d 1a6f 1a70 1a71 1a72 1a74     k.l.m.o.p.q.r.t.
   1a24e:	1a75 1a76 1a77 1a79 1a7a 1a7b 1a7c 1a7e     u.v.w.y.z.{.|.~.
   1a25e:	1a7f 1a80 1a81 1a83 1a84 1a85 1a86 1a88     ................
   1a26e:	1a89 1a8a 1a8c 1a8d 1a8e 1a8f 1a91 1a92     ................
   1a27e:	1a93 1a94 1a96 1a97 1a98 1a9a 1a9b 1a9c     ................
   1a28e:	1a9d 1a9f 1aa0 1aa1 1aa3 1aa4 1aa5 1aa6     ................
   1a29e:	1aa8 1aa9 1aaa 1aac 1aad 1aae 1aaf 1ab1     ................
   1a2ae:	1ab2 1ab3 1ab5 1ab6 1ab7 1ab9 1aba 1abb     ................
   1a2be:	1abc 1abe 1abf 1ac0 1ac2 1ac3 1ac4 1ac6     ................
   1a2ce:	1ac7 1ac8 1ac9 1acb 1acc 1acd 1acf 1ad0     ................
   1a2de:	1ad1 1ad3 1ad4 1ad5 1ad7 1ad8 1ad9 1adb     ................
   1a2ee:	1adc 1add 1adf 1ae0 1ae1 1ae3 1ae4 1ae5     ................
   1a2fe:	1ae7 1ae8 1ae9 1aea 1aec 1aed 1aee 1af0     ................
   1a30e:	1af1 1af3 1af4 1af5 1af7 1af8 1af9 1afb     ................
   1a31e:	1afc 1afd 1aff 1b00 1b01 1b03 1b04 1b05     ................
   1a32e:	1b07 1b08 1b09 1b0b 1b0c 1b0d 1b0f 1b10     ................
   1a33e:	1b12 1b13 1b14 1b16 1b17 1b18 1b1a 1b1b     ................
   1a34e:	1b1c 1b1e 1b1f 1b21 1b22 1b23 1b25 1b26     ......!.".#.%.&.
   1a35e:	1b27 1b29 1b2a 1b2b 1b2d 1b2e 1b30 1b31     '.).*.+.-...0.1.
   1a36e:	1b32 1b34 1b35 1b37 1b38 1b39 1b3b 1b3c     2.4.5.7.8.9.;.<.
   1a37e:	1b3d 1b3f 1b40 1b42 1b43 1b44 1b46 1b47     =.?.@.B.C.D.F.G.
   1a38e:	1b49 1b4a 1b4b 1b4d 1b4e 1b50 1b51 1b52     I.J.K.M.N.P.Q.R.
   1a39e:	1b54 1b55 1b57 1b58 1b59 1b5b 1b5c 1b5e     T.U.W.X.Y.[.\.^.
   1a3ae:	1b5f 1b61 1b62 1b63 1b65 1b66 1b68 1b69     _.a.b.c.e.f.h.i.
   1a3be:	1b6a 1b6c 1b6d 1b6f 1b70 1b72 1b73 1b74     j.l.m.o.p.r.s.t.
   1a3ce:	1b76 1b77 1b79 1b7a 1b7c 1b7d 1b7f 1b80     v.w.y.z.|.}.....
   1a3de:	1b81 1b83 1b84 1b86 1b87 1b89 1b8a 1b8c     ................
   1a3ee:	1b8d 1b8e 1b90 1b91 1b93 1b94 1b96 1b97     ................
   1a3fe:	1b99 1b9a 1b9c 1b9d 1b9e 1ba0 1ba1 1ba3     ................
   1a40e:	1ba4 1ba6 1ba7 1ba9 1baa 1bac 1bad 1baf     ................
   1a41e:	1bb0 1bb2 1bb3 1bb5 1bb6 1bb8 1bb9 1bbb     ................
   1a42e:	1bbc 1bbd 1bbf 1bc0 1bc2 1bc3 1bc5 1bc6     ................
   1a43e:	1bc8 1bc9 1bcb 1bcc 1bce 1bcf 1bd1 1bd2     ................
   1a44e:	1bd4 1bd6 1bd7 1bd9 1bda 1bdc 1bdd 1bdf     ................
   1a45e:	1be0 1be2 1be3 1be5 1be6 1be8 1be9 1beb     ................
   1a46e:	1bec 1bee 1bef 1bf1 1bf2 1bf4 1bf6 1bf7     ................
   1a47e:	1bf9 1bfa 1bfc 1bfd 1bff 1c00 1c02 1c03     ................
   1a48e:	1c05 1c07 1c08 1c0a 1c0b 1c0d 1c0e 1c10     ................
   1a49e:	1c11 1c13 1c15 1c16 1c18 1c19 1c1b 1c1c     ................
   1a4ae:	1c1e 1c20 1c21 1c23 1c24 1c26 1c27 1c29     .. .!.#.$.&.'.).
   1a4be:	1c2b 1c2c 1c2e 1c2f 1c31 1c33 1c34 1c36     +.,.../.1.3.4.6.
   1a4ce:	1c37 1c39 1c3b 1c3c 1c3e 1c3f 1c41 1c43     7.9.;.<.>.?.A.C.
   1a4de:	1c44 1c46 1c47 1c49 1c4b 1c4c 1c4e 1c50     D.F.G.I.K.L.N.P.
   1a4ee:	1c51 1c53 1c54 1c56 1c58 1c59 1c5b 1c5d     Q.S.T.V.X.Y.[.].
   1a4fe:	1c5e 1c60 1c61 1c63 1c65 1c66 1c68 1c6a     ^.`.a.c.e.f.h.j.
   1a50e:	1c6b 1c6d 1c6f 1c70 1c72 1c74 1c75 1c77     k.m.o.p.r.t.u.w.
   1a51e:	1c79 1c7a 1c7c 1c7e 1c7f 1c81 1c83 1c84     y.z.|.~.........
   1a52e:	1c86 1c88 1c89 1c8b 1c8d 1c8e 1c90 1c92     ................
   1a53e:	1c93 1c95 1c97 1c98 1c9a 1c9c 1c9e 1c9f     ................
   1a54e:	1ca1 1ca3 1ca4 1ca6 1ca8 1caa 1cab 1cad     ................
   1a55e:	1caf 1cb0 1cb2 1cb4 1cb6 1cb7 1cb9 1cbb     ................
   1a56e:	1cbd 1cbe 1cc0 1cc2 1cc3 1cc5 1cc7 1cc9     ................
   1a57e:	1cca 1ccc 1cce 1cd0 1cd1 1cd3 1cd5 1cd7     ................
   1a58e:	1cd9 1cda 1cdc 1cde 1ce0 1ce1 1ce3 1ce5     ................
   1a59e:	1ce7 1ce8 1cea 1cec 1cee 1cf0 1cf1 1cf3     ................
   1a5ae:	1cf5 1cf7 1cf9 1cfa 1cfc 1cfe 1d00 1d02     ................
   1a5be:	1d04 1d05 1d07 1d09 1d0b 1d0d 1d0e 1d10     ................
   1a5ce:	1d12 1d14 1d16 1d18 1d19 1d1b 1d1d 1d1f     ................
   1a5de:	1d21 1d23 1d25 1d26 1d28 1d2a 1d2c 1d2e     !.#.%.&.(.*.,...
   1a5ee:	1d30 1d32 1d33 1d35 1d37 1d39 1d3b 1d3d     0.2.3.5.7.9.;.=.
   1a5fe:	1d3f 1d41 1d43 1d44 1d46 1d48 1d4a 1d4c     ?.A.C.D.F.H.J.L.
   1a60e:	1d4e 1d50 1d52 1d54 1d56 1d58 1d59 1d5b     N.P.R.T.V.X.Y.[.
   1a61e:	1d5d 1d5f 1d61 1d63 1d65 1d67 1d69 1d6b     ]._.a.c.e.g.i.k.
   1a62e:	1d6d 1d6f 1d71 1d73 1d75 1d77 1d79 1d7b     m.o.q.s.u.w.y.{.
   1a63e:	1d7d 1d7f 1d81 1d82 1d84 1d86 1d88 1d8a     }...............
   1a64e:	1d8c 1d8e 1d90 1d92 1d94 1d96 1d98 1d9a     ................
   1a65e:	1d9c 1d9e 1da1 1da3 1da5 1da7 1da9 1dab     ................
   1a66e:	1dad 1daf 1db1 1db3 1db5 1db7 1db9 1dbb     ................
   1a67e:	1dbd 1dbf 1dc1 1dc3 1dc5 1dc7 1dca 1dcc     ................
   1a68e:	1dce 1dd0 1dd2 1dd4 1dd6 1dd8 1dda 1ddc     ................
   1a69e:	1ddf 1de1 1de3 1de5 1de7 1de9 1deb 1ded     ................
   1a6ae:	1df0 1df2 1df4 1df6 1df8 1dfa 1dfd 1dff     ................
   1a6be:	1e01 1e03 1e05 1e07 1e0a 1e0c 1e0e 1e10     ................
   1a6ce:	1e12 1e15 1e17 1e19 1e1b 1e1d 1e20 1e22     ............ .".
   1a6de:	1e24 1e26 1e29 1e2b 1e2d 1e2f 1e32 1e34     $.&.).+.-./.2.4.
   1a6ee:	1e36 1e38 1e3b 1e3d 1e3f 1e41 1e44 1e46     6.8.;.=.?.A.D.F.
   1a6fe:	1e48 1e4b 1e4d 1e4f 1e51 1e54 1e56 1e58     H.K.M.O.Q.T.V.X.
   1a70e:	1e5b 1e5d 1e5f 1e62 1e64 1e66 1e69 1e6b     [.]._.b.d.f.i.k.
   1a71e:	1e6d 1e70 1e72 1e75 1e77 1e79 1e7c 1e7e     m.p.r.u.w.y.|.~.
   1a72e:	1e80 1e83 1e85 1e88 1e8a 1e8d 1e8f 1e91     ................
   1a73e:	1e94 1e96 1e99 1e9b 1e9e 1ea0 1ea3 1ea5     ................
   1a74e:	1ea7 1eaa 1eac 1eaf 1eb1 1eb4 1eb6 1eb9     ................
   1a75e:	1ebb 1ebe 1ec0 1ec3 1ec6 1ec8 1ecb 1ecd     ................
   1a76e:	1ed0 1ed2 1ed5 1ed7 1eda 1edd 1edf 1ee2     ................
   1a77e:	1ee4 1ee7 1eea 1eec 1eef 1ef2 1ef4 1ef7     ................
   1a78e:	1ef9 1efc 1eff 1f01 1f04 1f07 1f09 1f0c     ................
   1a79e:	1f0f 1f12 1f14 1f17 1f1a 1f1c 1f1f 1f22     ..............".
   1a7ae:	1f25 1f27 1f2a 1f2d 1f30 1f33 1f35 1f38     %.'.*.-.0.3.5.8.
   1a7be:	1f3b 1f3e 1f41 1f43 1f46 1f49 1f4c 1f4f     ;.>.A.C.F.I.L.O.
   1a7ce:	1f52 1f55 1f57 1f5a 1f5d 1f60 1f63 1f66     R.U.W.Z.].`.c.f.
   1a7de:	1f69 1f6c 1f6f 1f72 1f75 1f78 1f7b 1f7e     i.l.o.r.u.x.{.~.
   1a7ee:	1f81 1f84 1f87 1f8a 1f8d 1f90 1f93 1f96     ................
   1a7fe:	1f99 1f9c 1f9f 1fa2 1fa5 1fa8 1fab 1fae     ................
   1a80e:	1fb2 1fb5 1fb8 1fbb 1fbe 1fc1 1fc5 1fc8     ................
   1a81e:	1fcb 1fce 1fd1 1fd5 1fd8 1fdb 1fdf 1fe2     ................
   1a82e:	1fe5 1fe8 1fec 1fef 1ff2 1ff6 1ff9 1ffc     ................
   1a83e:	2000 2003 2007 200a 200e 2011 2014 2018     . . . . . . . . 
   1a84e:	201b 201f 2022 2026 2029 202d 2031 2034     . . " & ) - 1 4 
   1a85e:	2038 203b 203f 2043 2046 204a 204e 2051     8 ; ? C F J N Q 
   1a86e:	2055 2059 205c 2060 2064 2068 206b 206f     U Y \ ` d h k o 
   1a87e:	2073 2077 207b 207f 2082 2086 208a 208e     s w { . . . . . 
   1a88e:	2092 2096 209a 209e 20a2 20a6 20aa 20ae     . . . . . . . . 
   1a89e:	20b2 20b7 20bb 20bf 20c3 20c7 20cb 20d0     . . . . . . . . 
   1a8ae:	20d4 20d8 20dd 20e1 20e5 20ea 20ee 20f2     . . . . . . . . 
   1a8be:	20f7 20fb 2100 2104 2109 210d 2112 2117     . . .!.!.!.!.!.!
   1a8ce:	211b 2120 2125 2129 212e 2133 2138 213d     .! !%!)!.!3!8!=!
   1a8de:	2141 2146 214b 2150 2155 215a 215f 2164     A!F!K!P!U!Z!_!d!
   1a8ee:	2169 216f 2174 2179 217e 2184 2189 218e     i!o!t!y!~!.!.!.!
   1a8fe:	2194 2199 219f 21a4 21aa 21af 21b5 21bb     .!.!.!.!.!.!.!.!
   1a90e:	21c1 21c6 21cc 21d2 21d8 21de 21e4 21ea     .!.!.!.!.!.!.!.!
   1a91e:	21f0 21f7 21fd 2203 220a 2210 2217 221d     .!.!.!."."."."."
   1a92e:	2224 222b 2231 2238 223f 2246 224d 2254     $"+"1"8"?"F"M"T"
   1a93e:	225c 2263 226a 2272 227a 2281 2289 2291     \"c"j"r"z"."."."
   1a94e:	2299 22a1 22a9 22b2 22ba 22c3 22cb 22d4     ."."."."."."."."
   1a95e:	22dd 22e6 22f0 22f9 2303 230d 2317 2321     .".".".".#.#.#!#
   1a96e:	232b 2336 2341 234c 2357 2363 236f 237b     +#6#A#L#W#c#o#{#
   1a97e:	2387 2394 23a1 23af 23bd 23cc 23db 23ea     .#.#.#.#.#.#.#.#
   1a98e:	23fb 240b 241d 2430 2443 2458 246e 2485     .#.$.$0$C$X$n$.$
   1a99e:	249e 24ba 24d8 24f9 2520 254d 2586 25d8     .$.$.$.$ %M%.%.%
   1a9ae:	25e4 2c20 3b2e 2d3a 005f 754f 2074 666f     .% ,.;:-_.Out of
   1a9be:	6d20 6d65 726f 0079                          memory.

0001a9c6 <opa_map2.7357>:
   1a9c6:	50d2                                        .P

0001a9c8 <opa_map3.7358>:
   1a9c8:	96e6                                         ..<

0001a9cb <opa_map4.7359>:
   1a9cb:	b9eb 327d                                   ..}2

0001a9cf <opa_map8.7360>:
   1a9cf:	f2fa bfdb 759e 284c                         .....uL(

0001a9d7 <seg1.7866>:
   1a9d7:	                                             .

0001a9d8 <seg2.7867>:
   1a9d8:	c040                                        @.

0001a9da <seg3.7868>:
   1a9da:	802a                                         *..

0001a9dd <seg4.7869>:
   1a9dd:	6020 df9f                                    `..

0001a9e1 <seg5.7870>:
   1a9e1:	4c1a b280                                    .L...

0001a9e6 <seg6.7871>:
   1a9e6:	4015 946a eabf                              .@j...

0001a9ec <seg7.7872>:
   1a9ec:	3712 805b c8a4                               .7[....

0001a9f3 <seg8.7873>:
   1a9f3:	3010 7050 af8f efcf                          .0Pp.....

0001a9fc <seg_map.7874>:
   1a9fc:	a9d7 0001 a9d8 0001 a9da 0001 a9dd 0001     ................
   1aa0c:	a9e1 0001 a9e6 0001 a9ec 0001 a9f3 0001     ................

0001aa1c <CSWTCH.62>:
   1aa1c:	0200 0604 0b09 0f0d                         ........

0001aa24 <cmaps>:
   1aa24:	0020 0000 005f 0001 0000 0000 0000 0000      ..._...........
   1aa34:	0000 0000 f001 0000 08a2 0060 dd96 0001     ..........`.....
   1aa44:	0000 0000 0039 0002                         ....9...

0001aa4c <glyph_dsc>:
	...
   1aa54:	0000 03f0 0000 0000 0000 0420 0c02 0001     .......... .....
   1aa64:	000c 0520 0504 0701 0016 09f0 0c0a 0000     .. .............
   1aa74:	0052 0900 1009 fe00 009a 0bc0 0c0c 0000     R...............
   1aa84:	00e2 09f0 0c0a 0000 011e 02d0 0402 0800     ................
   1aa94:	0122 0580 1205 fc01 014f 0590 1205 fc00     ".......O.......
   1aaa4:	017c 06e0 0707 0500 0195 0910 0909 0100     |...............
   1aab4:	01be 0320 0503 fd00 01c6 0470 0305 0400     .. .......p.....
   1aac4:	01ce 0430 0202 0001 01d0 06a0 0d07 ff00     ..0.............
   1aad4:	01fe 0900 0c09 0000 0234 0900 0c05 0001     ........4.......
   1aae4:	0252 0900 0c09 0000 0288 0900 0c08 0000     R...............
   1aaf4:	02b8 0900 0c09 0000 02ee 0900 0c08 0001     ................
   1ab04:	031e 0900 0c08 0001 034e 0900 0c09 0000     ........N.......
   1ab14:	0384 0900 0c09 0000 03ba 0900 0c08 0000     ................
   1ab24:	03ea 03e0 0902 0001 03f3 0360 0c03 fd00     ..........`.....
   1ab34:	0405 0820 0807 0100 0421 08d0 0607 0301     .. .....!.......
   1ab44:	0436 0860 0807 0101 0452 0790 0c07 0000     6.`.....R.......
   1ab54:	047c 0e60 0f0e fd00 04e5 0a70 0c0b 0000     |.`.......p.....
   1ab64:	0527 09f0 0c09 0001 055d 0a70 0c0a 0000     '.......].p.....
   1ab74:	0599 0a80 0c09 0001 05cf 0920 0c08 0001     .......... .....
   1ab84:	05ff 08e0 0c08 0001 062f 0ae0 0c0a 0000     ......../.......
   1ab94:	066b 0b70 0c0a 0001 06a7 0460 0c02 0001     k.p.......`.....
   1aba4:	06b3 08d0 0c08 0000 06e3 0a10 0c0a 0001     ................
   1abb4:	071f 08a0 0c08 0001 074f 0e00 0c0c 0001     ........O.......
   1abc4:	0797 0b70 0c0a 0001 07d3 0b00 0c0b 0000     ..p.............
   1abd4:	0815 0a20 0c09 0001 084b 0b00 0e0b fe00     .. .....K.......
   1abe4:	0898 09e0 0c09 0001 08ce 0980 0c09 0000     ................
   1abf4:	0904 0990 0c0a 0000 0940 0a60 0c09 0001     ........@.`.....
   1ac04:	0976 0a30 0c0a 0000 09b2 0e30 0c0e 0000     v.0.......0.....
   1ac14:	0a06 0a10 0c0a 0000 0a42 09a0 0c0a 0000     ........B.......
   1ac24:	0a7e 0990 0c09 0000 0ab4 0440 1204 fd01     ~.........@.....
   1ac34:	0ad8 0690 0d07 ff00 0b06 0440 1204 fd00     ..........@.....
   1ac44:	0b2a 06b0 0607 0600 0b3f 0740 0308 fe00     *.......?.@.....
   1ac54:	0b4b 04f0 0304 0a00 0b51 08b0 0908 0000     K.......Q.......
   1ac64:	0b75 0900 0c08 0001 0ba5 0860 0908 0000     u.........`.....
   1ac74:	0bc9 0900 0c08 0000 0bf9 0880 0908 0000     ................
   1ac84:	0c1d 0590 0e06 0000 0c47 0900 0c08 fd00     ........G.......
   1ac94:	0c77 08d0 0c07 0001 0ca1 03e0 0c02 0001     w...............
   1aca4:	0cad 03d0 0f04 fdff 0ccb 0820 0c08 0001     .......... .....
   1acb4:	0cfb 03e0 0c02 0001 0d07 0e00 090c 0001     ................
   1acc4:	0d3d 08d0 0907 0001 0d5d 0920 0909 0000     =.......]. .....
   1acd4:	0d86 0900 0c08 fd01 0db6 0920 0c08 fd00     .......... .....
   1ace4:	0de6 0570 0905 0001 0dfd 0840 0908 0000     ..p.......@.....
   1acf4:	0e21 0540 0b05 0000 0e3d 08d0 0907 0001     !.@.....=.......
   1ad04:	0e5d 07c0 0908 0000 0e81 0c00 090c 0000     ]...............
   1ad14:	0eb7 07f0 0908 0000 0edb 0790 0c08 fd00     ................
   1ad24:	0f0b 07f0 0908 0000 0f2f 0570 1106 fd00     ......../.p.....
   1ad34:	0f62 03e0 0e02 fe01 0f70 0570 1105 fd00     b.......p.p.....
   1ad44:	0f9b 0ae0 0509 0301 0fb2 1000 1110 fe00     ................
   1ad54:	103a 1000 0c10 0000 109a 1000 0e10 ff00     :...............
   1ad64:	110a 1000 0c10 0000 116a 0b00 0c0b 0000     ........j.......
   1ad74:	11ac 1000 1010 fe00 122c 1000 1010 fe00     ........,.......
   1ad84:	12ac 1200 0e12 ff00 132a 1000 1010 fe00     ........*.......
   1ad94:	13aa 1200 0c12 0000 1416 1000 1010 fe00     ................
   1ada4:	1496 0800 0e08 ff00 14ce 0c00 0e0c ff00     ................
   1adb4:	1522 1200 1012 fe00 15b2 1000 0c10 0000     "...............
   1adc4:	1612 0e00 100a fe02 1662 0e00 120e fd00     ........b.......
   1add4:	16e0 0e00 0f0e ff00 1749 0e00 0e0e ff00     ........I.......
   1ade4:	17ab 0e00 100a fe02 17fb 0e00 0e10 ffff     ................
   1adf4:	186b 0a00 0e0a ff00 18b1 0a00 0e0a ff00     k...............
   1ae04:	18f7 0e00 0e0e ff00 1959 0e00 040e 0400     ........Y.......
   1ae14:	1975 1200 0c12 0000 19e1 1400 1014 fe00     u...............
   1ae24:	1a81 1200 1014 feff 1b21 1000 1010 fe00     ........!.......
   1ae34:	1ba1 0e00 0a0e 0100 1be7 0e00 0a0e 0100     ................
   1ae44:	1c2d 1400 0e14 ff00 1cb9 1000 0c10 0000     -...............
   1ae54:	1d19 1000 1010 fe00 1d99 1000 1111 feff     ................
   1ae64:	1e2a 0e00 0e0f ff00 1e93 0e00 100e fe00     *...............
   1ae74:	1f03 0e00 0e0e ff00 1f65 0a00 100c feff     ........e.......
   1ae84:	1fc5 0e00 100e fe00 2035 0e00 100e fe00     ........5 ......
   1ae94:	20a5 1200 0c12 0000 2111 1000 1212 fdff     . .......!......
   1aea4:	21b3 0c00 100c fe00 2213 1400 0f14 ff00     .!......."......
   1aeb4:	22a9 1400 0a14 0100 230d 1400 0a14 0100     .".......#......
   1aec4:	2371 1400 0a14 0100 23d5 1400 0a14 0100     q#.......#......
   1aed4:	2439 1400 0a14 0100 249d 1400 0e15 ff00     9$.......$......
   1aee4:	2530 0e00 100c fe01 2590 0e00 100e fe00     0%.......%......
   1aef4:	2600 1000 1111 fdff 2691 1400 0c14 0000     .&.......&......
   1af04:	2709 0c00 100c fe00 2769 1020 0b11 0100     .'......i' .....

0001af14 <gylph_bitmap>:
   1af14:	acad acac acac 9b9b 0056 8c57 d4e2 d3e2     ........V.W.....
   1af24:	d2e0 d1e0 0000 0100 0ef0 0030 c004 002f     ..........0.../.
   1af34:	0800 5c90 0d00 ffff f4ff 2e01 c742 0020     ...\........B. .
   1af44:	001f 00e3 4d00 f001 7f00 ffff a0ff b812     .....M..........
   1af54:	b228 0010 0ac4 0070 f200 500c 0100 0ff0     (.....p....P....
   1af64:	0020 0000 0010 0000 400e 0000 e602 0000      ........@......
   1af74:	ff0a 10fc f506 fa04 ac00 0800 09e0 00e0     ................
   1af84:	0026 b33f 0000 3c00 50fd 0000 af03 0170     &.?....<.P....p.
   1af94:	0000 009f 00f6 f105 d10c ce01 3e00 fefe     .............>..
   1afa4:	0040 f605 0010 0f00 0020 de05 0080 0000     @....... .......
   1afb4:	310f 00d4 0070 002e 0897 0090 310f 2ed5     .1..p........1..
   1afc4:	0010 de05 b580 0000 0000 c005 0000 0000     ................
   1afd4:	291e 20ec 0000 6c98 c017 0300 97e0 f001     .). ...l........
   1afe4:	0d00 9750 f001 1900 6c00 c007 0000 0900     ..P......l......
   1aff4:	20fc 3c00 30fc 0000 4aeb 00e0 f303 f301     . .<.0...J......
   1b004:	0200 06f5 00f1 bd00 508f 0000 f43f 0000     .........P..?...
   1b014:	ec03 00f8 0d71 7fc0 f142 402f f90a 1fe0     ....q...B./@....
   1b024:	0060 70cf e40a ef15 00b0 fe8d f895 3f3f     `..p..........??
   1b034:	2c3e 0200 0300 01e1 00e5 009b 401f e006     >,...........@..
   1b044:	ab00 0d00 0090 00e8 700e d800 0c00 00a0     .........p......
   1b054:	008d f103 0d00 0070 104e 9b00 0000 2080     ......p.N...... 
   1b064:	0800 00a0 700d 4f00 0010 00d8 e008 4f00     .....p.O.......O
   1b074:	0120 00f4 600f f600 1f00 0350 00f3 005f      ....`....P..._.
   1b084:	b00a f400 8b00 4e00 0620 0020 1f00 0000     .......N . .....
   1b094:	f001 9b00 5b6f 8d73 83fd de00 00a0 1f9c     ....o[s.........
   1b0a4:	0750 6630 0000 a202 0000 3f00 0030 0300     P.0f.......?0...
   1b0b4:	00f3 1100 514f 6f10 ffff 61ff 7f44 4174     ....OQ.o...aD.tA
   1b0c4:	0300 00f3 0000 303f 0000 f303 0000 600f     ......?0.......`
   1b0d4:	4ff5 9028 0000 0000 ff0b 23f1 0033 ab88     .O(........#3...
   1b0e4:	0000 004e 0a00 0090 f300 0000 006d 0c00     ..N.........m...
   1b0f4:	0070 f102 0000 007c 0d00 0060 f003 0000     p.....|...`.....
   1b104:	009a 0e00 0040 e005 0000 00a9 0000 7d00     ....@..........}
   1b114:	60fd 5f00 9f84 0c50 00b0 00bc 00f7 f007     .`._..P.........
   1b124:	501f 5f00 f501 0500 1ff1 0050 115f 00f5     .P._......P._...
   1b134:	f006 700f 7f00 cc00 0c00 05b0 49f9 00f5     ...p.........I..
   1b144:	df06 00d6 3900 dfa5 99fb b02c cb00 0c00     .....9....,.....
   1b154:	00b0 00cb b00c cb00 0c00 00b0 00cb b00c     ................
   1b164:	cb00 7e00 60fd 9f00 9f74 1f60 0060 02cc     ...~.`..t.`.`...
   1b174:	00a2 d009 0000 d900 0000 7f00 0010 4f00     ...............O
   1b184:	0060 2f00 0090 1e00 00a0 0c00 00c0 0a00     `../............
   1b194:	33f4 1033 ffff f6ff 8d00 50fd e60a f548     .33........P..H.
   1b1a4:	600f ca00 0001 bb00 0000 f416 0f00 60ff     .`.............`
   1b1b4:	0300 f449 0000 bc00 1016 8e00 602f bc00     ..I........./`..
   1b1c4:	e60a f448 8d00 50fc 0000 f00c 0000 ff06     ..H....P........
   1b1d4:	0000 ec01 00f0 ac00 006f 3f00 f026 0d00     ........o..?&...
   1b1e4:	6f80 0700 06e0 01f0 00f5 006f ff8f ffff     .o........o.....
   1b1f4:	33a1 8f33 0032 0600 00f0 0000 006f ff0d     .33.2.......o...
   1b204:	f0ff a60f 6066 401f 0000 202f 0000 cf4f     ....f`.@../ ..O.
   1b214:	10fa 844f b08f 0000 f207 0000 f402 0043     ..O...........C.
   1b224:	f402 009d f106 a42f a06f cf04 00e8 2a00     ....../.o......*
   1b234:	00e9 fc05 0063 801f 0000 007e 0000 bfbb     ....c.....~.....
   1b244:	00f9 a4ef 807f 00fb f008 00f8 f204 00d9     ................
   1b254:	f204 009e e008 c51e 707f cf02 00e7 ff6f     .........p....o.
   1b264:	ffff 3341 3833 00f1 0000 00c9 0000 203f     ..A338........? 
   1b274:	0000 b00a 0000 f501 0000 8e00 0000 0e00     ................
   1b284:	0070 0600 00f1 0000 00da 0000 304f 0000     p...........O0..
   1b294:	c00b 0000 6d00 60fd 6f00 8f84 0c60 00b0     .....m.`.o..`...
   1b2a4:	00bb 00ca c00a f406 f604 0900 f9ff 0500     ................
   1b2b4:	48f7 00f5 00e8 e009 501f 5f00 f810 0800     .H.......P._....
   1b2c4:	08f0 47f7 00f7 df07 00d7 6e00 30fc f807     ...G.......n.0..
   1b2d4:	f15c 900e f801 402f ac00 302f 8e00 700f     \...../@../0...p
   1b2e4:	ae00 e40a fe17 cf01 abfc 0200 c820 0000     ............ ...
   1b2f4:	f205 2500 60af 9e00 00b4 87ba 0000 0000     ...%.`..........
   1b304:	9700 0eba a570 0000 0000 0000 0000 0ea5     ....p...........
   1b314:	f571 017d 0020 0400 00b0 fc4c cf05 06b4     q.}. .....L.....
   1b324:	20fa 2c00 30fa 0400 c5bf 0000 f03b 0000     . .,.0......;...
   1b334:	0102 1111 ff0d fbff 4434 2044 1111 df10     ........4DD ....
   1b344:	ffff 33b3 3233 00b4 0b00 50fd 0200 e79f     ...332.....P....
   1b354:	0000 fb07 3900 55fd c5cf fb00 0040 0002     .....9.U....@...
   1b364:	0000 bf03 01e8 57ec 4ef8 0a10 00d0 9d00     .......W.N......
   1b374:	0000 801e 0c00 00d0 e20a 0100 00f6 1900     ................
   1b384:	0020 0000 0000 2019 0200 00e4 0000 ef3a      ...... ......:.
   1b394:	40eb 0000 e707 2631 00e8 6e00 0020 0c00     .@....1&...n ...
   1b3a4:	0150 00f3 c58e e002 b007 c308 007e 0cc3     P...........~...
   1b3b4:	1f50 5c30 9600 200f 006d 006b 1f78 9a00     P.0\... m.k.x...
   1b3c4:	8a00 7800 001f 00b8 0099 0f87 a920 c800     ...x........ ...
   1b3d4:	c300 500d 156d 06ec 07c0 0bc0 1cf9 10fb     ...Pm...........
   1b3e4:	e700 0000 0000 0000 a33e 3410 0000 0100     ........>..4....
   1b3f4:	ff8d 00c6 0000 9f00 0010 0000 f60f 0000     ................
   1b404:	0500 c0fb 0000 bb00 204f 0000 601f 00f8     ........O ...`..
   1b414:	0600 0af1 00d0 cc00 5f00 0030 702f f901     ........._0./p..
   1b424:	0800 ffff e0ff dc00 3333 506f 503f 0000     ........33oP?P..
   1b434:	09eb 00e0 0800 aff1 fcff 0a50 45e4 50af     ..........P..E.P
   1b444:	00ad db00 d00a 0d00 adb0 1700 0af4 ffff     ................
   1b454:	00f8 33ad f648 d00a 0a00 ade0 0000 0a7f     ...3H...........
   1b464:	00d0 e00a 44ae f759 ff0a d6ff 0000 df08     .....DY.........
   1b474:	00e8 cf00 7f75 07b0 00f3 f404 b00d 0000     ....u...........
   1b484:	0fd8 0080 0000 700f 0000 0f00 0070 0000     .......p....p...
   1b494:	800f 0000 0d00 00b0 c700 f307 0400 00f5     ................
   1b4a4:	75cf b07e 0900 e8ef af00 e9ff 0a10 46e4     .u~............F
   1b4b4:	20de 00ad dc00 d00a 0500 adf3 0000 7a1f     . .............z
   1b4c4:	00d0 f800 00ad 0f00 d08a 0100 adf7 0000     ................
   1b4d4:	3a5f 00d0 d01d 44ae e26e ff0a 91fe af00     _:.....Dn.......
   1b4e4:	ffff aef7 4444 ad42 0000 ad00 0000 ad00     ....DDB.........
   1b4f4:	0000 af00 ffff adc0 3333 ad20 0000 ad00     ........33 .....
   1b504:	0000 ad00 0000 ae00 4444 af42 ffff aff8     ........DDB.....
   1b514:	ffff aef6 4444 ad41 0000 ad00 0000 ad00     ....DDA.........
   1b524:	0000 ad00 0000 af00 ffff ad90 3333 ad20     ............33 .
   1b534:	0000 ad00 0000 ad00 0000 ad00 0000 0000     ................
   1b544:	ef08 00e9 ce00 7e75 07c0 00f3 f603 c00c     ......u~........
   1b554:	0000 0f75 0090 0000 700f 0000 0f00 0670     ..u......p....p.
   1b564:	fbff 900f 3301 0cdb 00d0 cb00 f506 0000     .....3..........
   1b574:	00cb 84bf f75a 0700 fcdf ad50 0000 f107     ....Z.....P.....
   1b584:	00ad 0700 adf1 0000 f107 00ad 0700 adf1     ................
   1b594:	0000 f107 ffaf ffff adf1 3333 f139 00ad     ..........339...
   1b5a4:	0700 adf1 0000 f107 00ad 0700 adf1 0000     ................
   1b5b4:	f107 00ad 0700 9ff1 9f9f 9f9f 9f9f 9f9f     ................
   1b5c4:	9f9f 009f 0000 00e9 0000 00e9 0000 00e9     ................
   1b5d4:	0000 00e9 0000 00e9 0000 00e9 0000 00e9     ................
   1b5e4:	0000 36e9 0000 7fe9 0210 1ef7 5dc5 03e1     ...6.........]..
   1b5f4:	eabe ad20 0000 408f 00ad f606 ad00 4f00     .. ....@.......O
   1b604:	0090 02ad 00fb ad00 d01d 0000 cfad 0060     ..............`.
   1b614:	af00 f2fc 0000 41af 00ec ad00 4f00 0080     .......A.....O..
   1b624:	00ad f408 ad00 0000 10ce 00ad 2f00 ada0     ............./..
   1b634:	0000 ad00 0000 ad00 0000 ad00 0000 ad00     ................
   1b644:	0000 ad00 0000 ad00 0000 ad00 0000 ad00     ................
   1b654:	0000 ad00 0000 ae00 4444 af40 ffff aff3     ........DD@.....
   1b664:	0070 0700 affa 00d0 0d00 aefa 00f3 3f00     p..............?
   1b674:	abea 00d9 ac00 abca 007e f600 acca 501f     ........~......P
   1b684:	f106 acca b00b a00c adda f105 402f adda     ............/@..
   1b694:	e700 008e adda 8d00 00e8 adda 2f00 00f2     ............./..
   1b6a4:	adda 0c00 00b0 afda 0020 f106 c0af 0600     ........ .......
   1b6b4:	aff1 00f6 f106 bead 0610 adf1 902f f106     ............/...
   1b6c4:	07ad 06f3 adf1 dd00 f106 00ad 763f adf1     ............?v..
   1b6d4:	0900 f1f8 00ad ef01 adf1 0000 f15f 00ad     ............_...
   1b6e4:	0b00 00f1 df08 00d8 0c00 58f8 00fc f406     ...........X....
   1b6f4:	0400 00f6 00cc 0c00 0fc0 0080 8f00 f701     ................
   1b704:	0000 f107 601f 0000 106f 00f8 0800 0cf0     .....`..o.......
   1b714:	00c0 cc00 6f00 0040 603f bf00 8f85 00c0     .....o@.?`......
   1b724:	8d00 80fe af00 feff 0a80 45e4 d08f 00ad     ...........E....
   1b734:	4f00 d05a 0000 adf7 0000 6a2f 01d0 f13c     .OZ......./j..<.
   1b744:	ffaf d3ff d30a 1033 ad00 0000 0a00 00d0     ......3.........
   1b754:	0000 00ad 0000 d00a 0000 0000 ef08 00d7     ................
   1b764:	0c00 58f8 00fb f307 0500 00f5 00db 0d00     ...X............
   1b774:	0fb0 0070 9e00 f602 0000 f008 502f 0000     ..p........./P..
   1b784:	007f 00f7 0900 0de0 00b0 db00 7f00 0030     ..............0.
   1b794:	504f ce00 8f75 00b0 8e00 f6fe 0000 0000     OP..u...........
   1b7a4:	f909 0000 0000 6006 ffbf 50fc e40b af45     .......`...P..E.
   1b7b4:	bd70 0000 0bbe 00d0 f007 00bd af00 d00b     p...............
   1b7c4:	6f01 bf80 ffff 0b80 37d3 00f3 00bd b00d     .o.......7......
   1b7d4:	d00b 5f00 bd40 0000 0bcc 00d0 f504 5c00     ..._@..........\
   1b7e4:	a2ff 6f00 6c95 0ef2 00a0 a00e 00f9 6700     ...o.l.........g
   1b7f4:	f50a 0000 0a00 93fe 0000 8e03 00f9 0000     ................
   1b804:	f806 1029 0a00 f7d2 0000 09cc 55f9 50af     ..)..........U.P
   1b814:	cf06 50ec ff9f ffff 24f3 fa44 4044 0000     ...P.....$D.D@..
   1b824:	00f8 0000 f800 0000 0000 00f8 0000 f800     ................
   1b834:	0000 0000 00f8 0000 f800 0000 0000 00f8     ................
   1b844:	0000 f800 0000 0000 00f8 0000 f800 0000     ................
   1b854:	00e9 2f00 905e 0200 e9f5 0000 5e2f 0090     .../^......./^..
   1b864:	f502 00e9 2f00 905e 0200 e9f5 0000 5e2f     ...../^......./^
   1b874:	0090 f502 00da 3f00 e04a 0800 2ff1 59c6     .......?J..../.Y
   1b884:	00f7 ef2a 00c5 009f 0000 4fdc 0050 f702     ..*........OP...
   1b894:	a00e 0700 08f1 00f0 c00d f503 2f00 0060     ............./`.
   1b8a4:	00da 107f 7f00 cb00 0000 522f 00f5 0c00     ........../R....
   1b8b4:	f0a7 0000 fd07 00a0 0100 40ff 0000 be00     ...........@....
   1b8c4:	0000 106f 9f00 0000 2fcb 0040 30df f800     ..o....../@..0..
   1b8d4:	800e fe01 0370 0bf4 06b0 b0f8 f006 f007     ....p...........
   1b8e4:	a40a 09f0 04d0 0ef2 f460 900d f600 102f     ........`...../.
   1b8f4:	0fb8 0050 7dc9 7c00 204f 9d00 00b9 8e3f     ..P..}.|O ....?.
   1b904:	0000 e45f 0e00 00ea 1f00 00f0 f70a 0000     .._.............
   1b914:	b00e 0600 00f3 902f 0800 08f3 00f3 902f     ....../......./.
   1b924:	ec00 be00 0010 655f 00f6 0b00 c0ee 0000     ......_e........
   1b934:	ff02 0030 0300 40ff 0000 ed0c 00d0 6f00     ..0....@.......o
   1b944:	f754 0100 00eb 20af f20a 1f00 3fb0 0080     T...... .....?..
   1b954:	f407 109f 0700 1ff3 0090 a00e f109 7f00     ................
   1b964:	0120 00f9 00ea 8f00 f217 0000 9e1f 0090      ...............
   1b974:	0700 10ff 0000 f900 0000 0000 00f8 0000     ................
   1b984:	f800 0000 0000 00f8 0000 f800 0000 ff3f     ..............?.
   1b994:	ffff 44b1 4844 00f7 0000 00dc 0000 308f     ...DDH.........0
   1b9a4:	0000 803f 0000 d00d 0000 f307 0000 f802     ..?.............
   1b9b4:	0000 cd00 0000 7f00 0040 2f00 44c4 4544     ........@../.DDE
   1b9c4:	ffff ffff 0000 f1df 30da 00d9 00d9 00d9     .........0......
   1b9d4:	00d9 00d9 00d9 00d9 00d9 00d9 00d9 00d9     ................
   1b9e4:	00d9 00d9 f1df 3023 008d 0200 00f3 0c00     ......#0........
   1b9f4:	0090 6e00 0000 f501 0000 b00a 0000 105f     ...n.........._.
   1ba04:	0000 00e6 0900 00c0 3f00 0020 d800 0000     .........? .....
   1ba14:	e007 0000 402f 0000 f0ef f038 f006 f006     ..../@....8.....
   1ba24:	f006 f006 f006 f006 f006 f006 f006 f006     ................
   1ba34:	f006 f006 f007 f0ef 3023 5f00 0000 f60b     ........#0._....
   1ba44:	0200 c0fa 8c00 202f 600e 04b9 05f1 00e0     ....../ .`......
   1ba54:	0000 ff00 ffff 33f3 3333 2830 0b20 01c0     .......3330( ...
   1ba64:	00d6 fc8d 0a40 48e5 04f2 0020 00e7 ef7c     ....@..H.. ...|.
   1ba74:	09f8 22e5 0fe8 0060 1fe8 0260 0cf8 6ee6     ..."..`...`....n
   1ba84:	02f9 e6bf e8a9 0000 e800 0000 e800 0000     ................
   1ba94:	e900 e89f ef00 8f95 ea80 0900 e8e0 0400     ................
   1baa4:	e8f2 0300 e8f3 0400 eaf2 0900 efe0 8f95     ................
   1bab4:	e780 e99f 0000 fc6d 0650 49f7 0ef4 0090     ......m.P..I....
   1bac4:	2fbb 0040 4f12 0020 2f00 0040 0e00 0080     ./@..O ../@.....
   1bad4:	069a 48f7 00f4 fc6d 0050 0000 009e 0000     ...H..m.P.......
   1bae4:	009e 0000 009e fa8e 079e 59f9 0efe 00a0     ...........Y....
   1baf4:	2fae 0040 3f9e 0030 2f9e 0040 0e9e 0080     ./@..?0../@.....
   1bb04:	079e 26f6 00fe ea8e 009e fd5d 0540 4af8     ...&......].@..J
   1bb14:	0ef2 00a0 2fd9 0050 4f9c ffff 3ffe 3363     ...../P..O...?c3
   1bb24:	0e33 0080 0610 45f8 00d8 fe5d 0080 0000     3......E..].....
   1bb34:	3c00 00f8 42dd f501 0200 00f4 ff8f 15f1     .<...B..........
   1bb44:	20f6 f403 0300 00f4 f403 0300 00f4 f403     . ..............
   1bb54:	0300 00f4 f403 0000 fa8e 078e 59f9 0efe     .............Y..
   1bb64:	00a0 2fae 0040 3f9e 0030 2f9e 0040 0e9e     .../@..?0../@...
   1bb74:	0090 07ae 59f9 00fe fa8e 00ae 0000 09cb     .....Y..........
   1bb84:	49c5 00f4 fc8e e840 0000 800e 0000 00e8     .I....@.........
   1bb94:	0e00 ee88 ef90 8fa5 b06e ca00 00e8 be0b     ........n.......
   1bba4:	0080 e8bc 0b00 80ce bc00 00e8 ce0b 0080     ................
   1bbb4:	b9bc 0076 caca caca caca caca 00ca 00c8     ..v.............
   1bbc4:	0085 0000 00d9 00d9 00d9 00d9 00d9 00d9     ................
   1bbd4:	00d9 00d9 00d9 26d9 7ff7 e8b0 0000 e800     .......&........
   1bbe4:	0000 e800 0000 e800 7f00 e840 f606 e800     ..........@.....
   1bbf4:	804f eb00 00fb ef00 00fe ed00 a03f e800     O...........?...
   1bc04:	f506 e800 ae00 e810 1e00 cab0 caca caca     ................
   1bc14:	caca caca caca e8ca f99f ee08 efa1 9f85     ................
   1bc24:	57db eaf9 0d00 00e0 e89d 0b00 00b0 e88e     .W..............
   1bc34:	0b00 00b0 e88f 0b00 00b0 e88f 0b00 00b0     ................
   1bc44:	e88f 0b00 00b0 e88f 0b00 00b0 e88f e99e     ................
   1bc54:	fa0e f658 00eb ae0c 0080 e8bb 0b00 80ce     ..X.............
   1bc64:	bc00 00e8 ce0b 0080 e8bc 0b00 00c0 fd5d     ..............].
   1bc74:	0070 945f 707f a00e 8f00 f413 0200 4ff5     p._..p.........O
   1bc84:	0030 630f 00f4 f502 900e 8f00 5f10 7f94     0..c........._..
   1bc94:	0070 fd6d 0070 afe8 00e8 62ef 706f 00e9     p.m.p......bop..
   1bca4:	e009 00e8 f104 00e8 f303 00e8 f105 00e9     ................
   1bcb4:	e00a 74ef 708f aee9 00e9 00e8 0000 00e8     ...t.p..........
   1bcc4:	0000 00e8 0000 8e00 8efa f807 fe48 900e     ............H...
   1bcd4:	ae00 402f 9e00 303f 9e00 402f 9e00 900e     ../@..?0../@....
   1bce4:	ae00 f807 fe48 8e00 aeea 0000 9e00 0000     ....H...........
   1bcf4:	9e00 0000 9e00 bfe9 f82e ea51 0e00 0080     ..........Q.....
   1bd04:	00e8 800e e800 0e00 0080 00e8 0000 fb9e     ................
   1bd14:	0a30 4ce5 0ee1 0180 0ab3 10e6 0000 fc8d     0..L............
   1bd24:	0040 2900 2df3 0040 0cf6 49d5 01f2 fc9e     @..).-@....I....
   1bd34:	0640 00f1 106f ffef 7fa2 0631 00f1 106f     @...o.....1...o.
   1bd44:	f106 6f00 0610 00f1 734f af00 f890 0b00     ...o....Os......
   1bd54:	80bf bb00 00f8 bf0b 0080 f8bb 0b00 80be     ................
   1bd64:	bb00 00da b90d 5bf6 1afb 9bfe 9eb0 0200     .......[........
   1bd74:	3ff4 0730 0ee0 0c80 0890 1fd0 0340 6ef2     .?0.........@..n
   1bd84:	0000 b9d7 0000 f48d 0000 e02f 0000 900d     ........../.....
   1bd94:	8e00 0b00 00b0 4fe8 0f20 02f0 0ff3 5d60     .......O .....`]
   1bda4:	06e5 0bf0 99a0 0aa9 06b0 e4e0 0e5e 0260     ............^.`.
   1bdb4:	f0f5 5f0f 0020 b0ed dd0b 0000 609f f906     ..._ ........`..
   1bdc4:	0000 105f f502 4f00 0750 0af3 1fe0 0190     .._....OP.......
   1bdd4:	aef8 0000 f56f 0000 e00f 0000 f67f 0200     ....o...........
   1bde4:	8ef7 0b10 0ed0 5fa0 0640 aef4 0500 4ff3     ......._@......O
   1bdf4:	0930 0ed0 0e80 0980 3fd0 0320 8df2 0000     0........? .....
   1be04:	c7d8 0000 f28e 0000 c02f 0000 700e 0000     ......../....p..
   1be14:	103f 1500 00da 5f00 00b1 3f00 ffff 04f2     ?......_...?....
   1be24:	4e44 00d0 8f00 0020 f703 0000 b00d 0000     DN.... .........
   1be34:	10ae 0500 00f5 1e00 33c3 5f31 ffff 00f6     .........31_....
   1be44:	3000 0a00 00e1 106f bb00 0000 00d9 d900     .0....o.........
   1be54:	0000 00e8 f405 8f00 00a0 f218 0000 00e8     ................
   1be64:	d900 0000 00d9 ca00 0000 008e 1c00 00c1     ................
   1be74:	6000 a8a8 a8a8 a8a8 a8a8 a8a8 a8a8 a8a8     .`..............
   1be84:	0030 e209 0a00 00d0 204f f303 3f00 0230     0.......O ...?0.
   1be94:	00f4 b10d 3f00 0ce0 02d3 00f5 303f f303     .....?......?0..
   1bea4:	4f00 0920 07e0 00f4 0052 0000 0000 0100     .O .....R.......
   1beb4:	d3bf 6c00 5aac 2cf6 508d ff07 00c1 0100     ...l.Z.,.P......
   1bec4:	0030 0000 0000 0000 0000 0000 0000 0000     0...............
   1bed4:	dc49 0000 0000 bf16 ffff 0000 8d03 ffff     I...............
   1bee4:	ffff 0000 ffcf ffff ffff 0000 ffff ffff     ................
   1bef4:	ffc7 0000 ffff 51ea ff00 0000 83ff 0000     .......Q........
   1bf04:	ff00 0000 00ff 0000 ff00 0000 00ff 0000     ................
   1bf14:	ff00 0000 00ff 0000 ff00 0000 00ff 2b00     ...............+
   1bf24:	ffff 0000 00ff df00 ffff ff2b 00ff df00     ..........+.....
   1bf34:	fdff ffdf 00ff 2b00 b2ff ffdf 00fd 0000     .......+........
   1bf44:	0000 ff2b 00b2 0000 0000 0fd0 ffff ffff     ..+.............
   1bf54:	0df0 ffff 88c8 8c88 ffff 0ff0 0080 0800     ................
   1bf64:	0ff0 0ff0 0080 0800 0ff0 ffff 0080 0800     ................
   1bf74:	ffff 0ff0 ccec cecc 0ff0 0ff0 ccec cecc     ................
   1bf84:	0ff0 ffff 0080 0800 ffff 0ff0 0080 0800     ................
   1bf94:	0ff0 0ff0 0080 0800 0ff0 ffff 88c8 8c88     ................
   1bfa4:	ffff 0fd0 ffff ffff 0df0 ffdf ff73 ffff     ............s...
   1bfb4:	fdff ffff ffa5 ffff ffff ffff ffa5 ffff     ................
   1bfc4:	ffff ffdf ff73 ffff fdff 0000 0000 0000     ....s...........
   1bfd4:	0000 ffdf ff73 ffff fdff ffff ffa5 ffff     ....s...........
   1bfe4:	ffff ffff ffa5 ffff ffff ffdf ff73 ffff     ............s...
   1bff4:	fdff 0000 0000 0000 0000 ffdf ff73 ffff     ............s...
   1c004:	fdff ffff ffa5 ffff ffff ffff ffa5 ffff     ................
   1c014:	ffff ffdf ff73 ffff fdff 0000 0000 0000     ....s...........
   1c024:	b10a 0000 0000 0000 fcbf 0000 0000 0b00     ................
   1c034:	fbff 0000 0000 bf00 c0ff a01b 0000 ff0b     ................
   1c044:	00fc fbcf 0000 ffbf 00c0 ffbf 0bb0 fcff     ................
   1c054:	0000 ff0c bffb c0ff 0000 cf00 ffff 00fb     ................
   1c064:	0000 0c00 ffff 00b0 0000 0000 fbbf 0000     ................
   1c074:	0000 0000 b00b 0000 0000 0003 0000 0803     ................
   1c084:	10fc 1c00 fff8 10fc ff1c fff5 2cfc f5ff     .............,..
   1c094:	ff05 ffff 00f5 ff05 f5ff 0000 ff1d 10fd     ................
   1c0a4:	1c00 ffff 10fc ff1c fff9 1cfc f5ff ff05     ................
   1c0b4:	dffc 00f5 ff05 a4d1 0000 a104 0000 4f00     ...............O
   1c0c4:	00e0 0000 0200 6f10 03f1 0010 5f00 6fd0     .......o....._.o
   1c0d4:	3ff1 00d1 ff03 6ff1 5ff1 00fd ff0d 6f40     .?.....o._....@o
   1c0e4:	09f1 70ff f74f 6f00 00f1 e0cf f09f 6f00     ...pO..o.......o
   1c0f4:	00f1 f35f c0bf 6f00 00f1 f52f c0bf 4f00     .._....o../....O
   1c104:	00e0 f61f e0af 0000 0000 f44f f46f 0000     ..........O.o...
   1c114:	0000 f0af fe0f 0010 0500 a0ff ff06 00d3     ................
   1c124:	7f00 20ff 9f00 daff ffbe 00f4 0600 ffff     ... ............
   1c134:	fdff 0030 0000 bd17 50ca 0000 0000 8b00     ..0......P......
   1c144:	00b8 0000 0000 ff00 00ff 0000 3000 ff06     .............0..
   1c154:	60ff 0003 fd04 ffdf fdff 40ef ff0d ffff     .`.........@....
   1c164:	ffff d0ff ff4f f9ff ff9f f4ff ff08 20ff     ....O.......... 
   1c174:	ff02 80ff ff00 00f9 9f00 00ff ff00 00f9     ................
   1c184:	9f00 00ff ff08 20ff ff02 80ff ff4f f9ff     ....... ....O...
   1c194:	ff9f f4ff ff0d ffff ffff d0ff fe04 ffdf     ................
   1c1a4:	fdff 40df 3000 ff06 60ff 0003 0000 ff00     ...@.0...`......
   1c1b4:	00ff 0000 0000 8b00 00b8 0000 0000 0300     ................
   1c1c4:	30dd f33f 0000 0000 ff6f 4ff5 00f4 0000     .0?.....o..O....
   1c1d4:	ff09 ff99 f4bf 0000 bf01 22f6 ff6f 00f4     ..........."o...
   1c1e4:	2d00 35fe 53ff f4ef 0400 c1ff ff8f 2df8     .-.5.S.........-
   1c1f4:	40fe fa7f ff1a ffff afa1 cff7 df82 ffff     .@..............
   1c204:	fdff fc28 0e14 ffff ffff e0ff 0041 ff0f     ..(.........A...
   1c214:	ffff ffff 00f0 0f00 f9ff 8f00 f0ff 0000     ................
   1c224:	ff0f 00f8 ff8f 00f0 0f00 f8ff 8f00 f0ff     ................
   1c234:	0000 ff0e 00f6 ff6f 00e0 0000 df00 00fd     ......o.........
   1c244:	0000 0000 ff00 00ff 0000 0000 ff00 00ff     ................
   1c254:	0000 0000 ff00 00ff 0000 0000 ff00 00ff     ................
   1c264:	0000 0000 ff00 00ff 0000 4f00 ffff ffff     ...........O....
   1c274:	00f4 0b00 ffff ffff 00b0 0000 ffbf fbff     ................
   1c284:	0000 0000 ff0b b0ff 0000 0000 bf00 00fb     ................
   1c294:	0000 ffdf 1bfc cfb1 fdff ffff c2ff ff2c     ..............,.
   1c2a4:	ffff ffff ffff ffff ffff ffff ffff f0ff     ................
   1c2b4:	ffe0 ffdf ffff ffff fdff 0400 ffef ffff     ................
   1c2c4:	40fe 0000 ff1e ffff ffff 00e1 af00 00b0     .@..............
   1c2d4:	0000 fa0b 0500 10ff 0000 0100 50ff f61e     .............P..
   1c2e4:	0000 0000 6f00 afe1 00b0 0000 0000 fa0b     .....o..........
   1c2f4:	ffff 80ff 0800 ffff ffff ffff 00f1 ff1f     ................
   1c304:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c314:	ffff ffff ffff ffff ffff ffff 8fff ffff     ................
   1c324:	ffff ffff f8ff 0000 bd06 50da ff02 0500     ...........P....
   1c334:	ffef feff ff42 7f00 a7ff ff7b fff9 ff05     ....B.....{.....
   1c344:	00c1 2c00 ffff fc0e 0000 2202 ffdf f25f     ...,.......".._.
   1c354:	0000 ff0f ffff b08f 0000 ff0f ffff 0000     ................
	...
   1c370:	0000 ffff f0ff 0000 f80b ffff f0ff 0000     ................
   1c380:	f42f fdff 2022 0000 e0cf ffff 00c2 2c00     /..." .........,
   1c390:	40ff 9fff b7ff ff6a 00f7 24ff ffdf feff     .@....j....$....
   1c3a0:	0050 20ff ac05 60db 0000 0000 0000 0000     P.. ...`........
   1c3b0:	8d00 0000 ff08 0000 ff8f ffdf ffff ffff     ................
   1c3c0:	ffff ffff ffff ffff ffff ffff ffff ffdf     ................
   1c3d0:	ffff 0000 ff8f 0000 ff08 0000 8d00 0000     ................
	...
   1c3e8:	0000 8d00 0000 0000 ff08 0000 0000 ff8f     ................
   1c3f8:	0000 ffcf ffff 5001 ffff ffff f706 ffff     .......P........
   1c408:	ffff be00 ffff ffff ae00 ffff ffff f805     ................
   1c418:	ffdf ffff 6002 0000 ff9f 0000 0000 ff09     .....`..........
   1c428:	0000 0000 9e00 0000 0000 0000 0000 0000     ................
   1c438:	0000 0000 1006 0000 0000 0000 1f00 00d2     ................
   1c448:	0000 8d00 0000 ee03 0010 0800 00ff b10a     ................
   1c458:	b02f 0000 ff8f 0500 07fc dff4 ffff 02ff     /...............
   1c468:	5f50 f960 ffff ffff f706 c00d ffbd ffff     P_`.............
   1c478:	00ff 09ae 9ff0 ffff ffff ae00 f009 ff8f     ................
   1c488:	ffff 06ff 0df7 adc0 ffdf ffff 5002 605f     .............P_`
   1c498:	00e9 8f00 00ff fc05 f406 0000 ff08 0a00     ................
   1c4a8:	2fb1 00b0 0000 008d 0200 10ee 0000 0000     ./..............
   1c4b8:	0000 d21f 0000 0000 0000 0600 0010 ff8f     ................
   1c4c8:	ffff ffff f8ff fcff ffff ffff ffff 20ff     ............... 
   1c4d8:	ff2f ffff ffff 00fc ff0c eeff ffff 20ff     /.............. 
   1c4e8:	ff2f 22fe ffef fcff ffff 00e2 ff2e feff     /.."............
   1c4f8:	fe4e 0020 ff02 e2ff c202 0000 ff00 20ff     N. ............ 
   1c508:	0000 0000 ff00 00ff 0000 0000 ff00 ffff     ................
   1c518:	ffff ffff ffff ff8f ffff ffff f8ff 0000     ................
   1c528:	0000 ff00 0030 cc01 40ff 2d00 ffff 0340     ....0....@.-..@.
   1c538:	ffef 40ff ff3f ffff ff44 ffff 9fff ffff     ...@?...D.......
   1c548:	ffff ffff ffff ffff ffff ffff ffaf ffff     ................
   1c558:	45ff ffff ffff 4f40 ffff 40ff ef03 ffff     .E....@O...@....
   1c568:	0040 ff2e 30ff 0100 00cc 0000 0000 0000     @....0..........
   1c578:	0000 0000 8f00 0091 0000 0000 ffff 0070     ..............p.
   1c588:	0000 ff00 fdff 0040 0000 ffff faff 0010     ......@.........
   1c598:	ff00 ffff f7ff 0000 ffff ffff d5ff ff00     ................
   1c5a8:	ffff ffff b2ff ffff ffff ffff fffd ffff     ................
   1c5b8:	ffff fdff ffff ffff ffff ffb2 ffff ffff     ................
   1c5c8:	00d5 ffff ffff 00f7 ff00 ffff 10fa 0000     ................
   1c5d8:	ffff 40fd 0000 ff00 70ff 0000 0000 a18e     ...@.....p......
	...
   1c5f8:	0000 8f00 f8ff 8f00 f8ff ffff 00ff ffff     ................
   1c608:	ffff ffff ff00 ffff ffff 00ff ffff ffff     ................
   1c618:	ffff ff00 ffff ffff 00ff ffff ffff ffff     ................
   1c628:	ff00 ffff ffff 00ff ffff ffff ffff ff00     ................
   1c638:	ffff ffff 00ff ffff ffff ffff ff00 ffff     ................
   1c648:	ffff 00ff ffff ffff ffff ff00 ffff ff7f     ................
   1c658:	00f7 ff7f 8ff7 ffff ffff f8ff ffff ffff     ................
   1c668:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c678:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c688:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c698:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c6a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1c6b8:	ff8f ffff ffff 00f8 0000 0000 10cc 0300     ................
   1c6c8:	ffff 00d2 ff04 feff 0430 ffff f4ff ff04     ........0.......
   1c6d8:	ffff 54ff ffff ffff fff9 ffff ffff ffff     ...T............
   1c6e8:	ffff ffff ffff f9ff ffff ffff ff44 ffff     ............D...
   1c6f8:	04f3 ffff 30fe ff04 d2ff 0400 ccff 0010     .....0..........
   1c708:	ff03 0000 0000 0000 0000 d22d 0000 0000     ..........-.....
   1c718:	0100 feef 0010 0000 1d00 ffff 00d1 0000     ................
   1c728:	cf00 ffff 00fc 0000 ff0b ffff b0ff 0000     ................
   1c738:	ffaf ffff faff 0900 ffff ffff ffff 0f90     ................
   1c748:	ffff ffff ffff 08f0 ffff ffff ffff 0080     ................
   1c758:	0000 0000 0000 0c00 ffff ffff ffff 0fc0     ................
   1c768:	ffff ffff ffff 0ff0 ffff ffff ffff 0cf0     ................
   1c778:	ffff ffff ffff 00c0 0000 401a 0000 df01     ...........@....
   1c788:	00f0 1d00 a0ff 0100 fadf 0000 ff1d 00a0     ................
   1c798:	df01 00fa 0c00 a0ff 0000 ff0d 0080 0100     ................
   1c7a8:	f8df 0000 1d00 80ff 0000 df01 00f8 0000     ................
   1c7b8:	ff1d 0080 0100 f0df 0000 1b00 0450 00a1     ............P...
   1c7c8:	0000 fd0f 0010 0a00 d1ff 0000 af00 10fd     ................
   1c7d8:	0000 ff0a 00d1 0000 fdaf 0010 0a00 c0ff     ................
   1c7e8:	0000 ff08 00d0 8f00 10fd 0800 d1ff 0000     ................
   1c7f8:	fd8f 0010 ff08 00d1 0f00 10fd 0000 b105     ................
   1c808:	0000 0000 0400 40ff 0000 0000 ff08 0080     .......@........
   1c818:	0000 0800 80ff 0000 0000 ff08 0080 0000     ................
   1c828:	0800 80ff 0000 8848 ff8c 88c8 ff84 ffff     ......H.........
   1c838:	ffff ffff ffff ffff ffff 48ff 8c88 c8ff     ...........H....
   1c848:	8488 0000 ff08 0080 0000 0800 80ff 0000     ................
   1c858:	0000 ff08 0080 0000 0800 80ff 0000 0000     ................
   1c868:	ff04 0040 1400 4444 4444 4144 ffef ffff     ..@...DDDDDA....
   1c878:	ffff fffe ffff ffff ffff bb7b bbbb bbbb     ..........{.....
   1c888:	00b7 0500 ffad 50da 0000 0400 fcdf cf88     .......P........
   1c898:	40fd 0000 fe7f 0040 ef04 00f7 ff07 00f4     .@....@.........
   1c8a8:	809e ff4f 4f70 c0ff af00 0cf8 f4ff ffdf     ..O.pO..........
   1c8b8:	9a80 feff ff08 dffd 80ff ffef 08fe fdff     ................
   1c8c8:	ff4f 8fc0 f8ff ff0c 07f4 f4ff ee08 4f80     O..............O
   1c8d8:	70ff 7f00 40fe 0400 f8ef 0000 df04 88fc     .p...@..........
   1c8e8:	fdcf 0040 0000 ad05 daff 0050 8c00 0020     ..@.......P... .
   1c8f8:	0000 0000 0000 df00 00e4 0000 0000 0000     ................
   1c908:	1b00 80ff df49 a5fd 0000 0000 ff7f d8ff     ....I...........
   1c918:	ff8c 00d4 0000 ef04 00f8 4e00 70ff 0000     ...........N.p..
   1c928:	1c00 69ff 04e8 f7ff 0400 00e3 fe9f 80ff     ...i............
   1c938:	ffcf 0d40 70ff ff05 e0ff ff8f 0dd0 f7ff     ..@..p..........
   1c948:	2d00 e0ff ff8f 04d0 fcff 0000 f8af ffcf     .-..............
   1c958:	0030 ff7f 0040 ff06 f7ff 0000 ff08 00f4     0...@...........
   1c968:	3e00 a0ff 0000 4d00 c8ff 0182 f7bf 0000     .>.....M........
   1c978:	0000 df5a 10fc ff08 00a0 0000 0000 0000     ..Z.............
   1c988:	4e00 00fd 0000 0000 0000 0200 00c8 0000     .N..............
   1c998:	2d00 00d2 0000 0000 0000 bf00 00fb 0000     .-..............
   1c9a8:	0000 0000 ff05 50ff 0000 0000 0000 ff0d     .......P........
   1c9b8:	d0ff 0000 0000 0000 ff7f f7ff 0000 0000     ................
   1c9c8:	0100 d8ff ff8d 0010 0000 0a00 a0ff ff0a     ................
   1c9d8:	00a0 0000 3f00 b0ff ff0b 00f3 0000 cf00     .....?..........
   1c9e8:	c0ff ff0c 00fc 0000 ff05 d0ff ff0d 50ff     ...............P
   1c9f8:	0000 ff0e f9ff ff9f e0ff 0000 ff8f e2ff     ................
   1ca08:	ff2e f8ff 0200 ffff 90ff ff09 ffff 0a10     ................
   1ca18:	ffff e3ff ff3e ffff 0fa0 ffff ffff ffff     ....>...........
   1ca28:	ffff 08f0 ffff ffff ffff ffff 0080 0000     ................
	...
   1ca40:	0000 d800 0000 0000 0000 ff00 ff80 70ff     ...............p
   1ca50:	0700 ffff fff8 f6ff 6f00 ffff 78fd ff8e     .........o...x..
   1ca60:	ff15 ffe8 00e2 e502 fe4f fe20 0020 1300     ........O. . ...
   1ca70:	f3ff 5200 0000 3f00 31ff 5200 0000 ef02     ...R...?.1.R....
   1ca80:	5ef4 fe20 7820 ff8e ff51 ffe8 ffe2 f6ff     .^ . x..Q.......
   1ca90:	6f00 ffff fffd 70ff 0700 ffff 00f8 0000     .o.....p........
   1caa0:	0000 ff00 0080 0000 0000 d800 0000 0000     ................
	...
   1cabc:	0000 dd01 0010 0000 1d00 d1ff 0000 0100     ................
   1cacc:	ffdf 10fd 0000 ff1d ff99 00d1 df01 00f9     ................
   1cadc:	fd9f 1d10 90ff 0900 d1ff f9bf 0000 9f00     ................
   1caec:	5ffb 0090 0000 f509 0000 0000 0000 0000     ._..............
   1cafc:	0000 0000 0000 905f 0000 0900 bff5 00f9     ......_.........
   1cb0c:	0000 fb9f ff1d 0090 ff09 01d1 f9df 9f00     ................
   1cb1c:	10fd 1d00 99ff d1ff 0000 df01 fdff 0010     ................
   1cb2c:	0000 ff1d 00d1 0000 0100 10dd 0000 0000     ................
	...
   1cb4c:	d11d 0000 0000 0000 0100 fddf ef10 ffff     ................
   1cb5c:	d0ff 1d00 ffff afd1 ffff f0ff cf00 fccf     ................
   1cb6c:	00fc 0000 f00f 6b00 f11f 00b6 0000 f00f     .......k........
   1cb7c:	0000 f00f 0000 0000 f00f 0000 f00f 0000     ................
   1cb8c:	0000 f00f 0000 f00f 0000 6b00 f11f 00b6     ...........k....
   1cb9c:	f00f 0000 cf00 fccf 00fc ff0f ffff 1dfa     ................
   1cbac:	ffff 00d1 ff0d ffff 01fe fddf 0010 0000     ................
   1cbbc:	0000 0000 d11d 0000 0000 0000 0000 0000     ................
   1cbcc:	8f00 ffff 00e2 0000 ff00 ffff 20fe 0000     ............. ..
   1cbdc:	ff00 ffff ffff ffff fff8 ffff ffff ffff     ................
   1cbec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cbfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cc0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1cc1c:	ffff ffff ffff ffff 8fff ffff ffff ffff     ................
   1cc2c:	00f8 0000 b00b 0000 0000 0000 fbbf 0000     ................
   1cc3c:	0000 0b00 ffff 00b0 0000 bf00 ffff 00fb     ................
   1cc4c:	0000 ff0b ffff b0ff 0000 ff4f ffff f4ff     ..........O.....
   1cc5c:	0000 0000 ffff 0000 0000 0000 ffff 0000     ................
   1cc6c:	0000 0000 ffff 0000 0000 0000 ffff 0000     ................
   1cc7c:	0000 0000 ffff 0000 df00 f0ff fddf ff0f     ................
   1cc8c:	fffd f9ff 0000 ff9f ffff ffff ffff ffff     ................
   1cc9c:	ffff ffff ffff e0f0 dfff ffff ffff ffff     ................
   1ccac:	00fd 0000 0000 0000 0000 0000 0000 0a00     ................
   1ccbc:	62ea 0000 0000 0200 ffff 00f0 0000 0000     .b..............
   1cccc:	ff9f 00ff 0000 0000 ff0f d0ff 0000 0000     ................
   1ccdc:	ff02 fbff 0000 0000 0300 ffef 0070 0000     ............p...
   1ccec:	0000 ff04 00f2 0000 0000 bf00 00fb 0000     ................
   1ccfc:	0000 6f00 30ff 0000 0002 4f00 90ff 0200     ...o.0.....O....
   1cd0c:	f38f 6f00 d0ff 0a00 ffff bfe4 d1ff 0000     ...o............
   1cd1c:	ffef ffff d1ff 0000 ff0a ffff 90ff 0000     ................
   1cd2c:	6f00 ffff 30fb 0000 0200 dbff 0072 0000     .o...0......r...
   1cd3c:	0000 ee08 0080 0600 0861 ffff 0080 ff2d     ........a.....-.
   1cd4c:	efd0 fe33 2e00 f3ff f30e e03f ff2e 00f3     ..3.......?.....
   1cd5c:	ff8f 6eff f3ff 0000 ff8e ffff 00f3 0000     ...n............
   1cd6c:	ef02 f3ff 0000 0000 ff2e 30ff 0000 ef08     ...........0....
   1cd7c:	ffff 30ff 0800 ffff eff6 30ff ef00 fe33     ...0.......0..3.
   1cd8c:	ef02 30ff f30e e03f ef02 30ff ff8f 00f8     ...0..?....0....
   1cd9c:	df02 00fd e88e 0000 6600 0010 df00 ffff     .........f......
   1cdac:	200d 0000 ffff 0fff 00e2 ff00 ffff fd0f     . ..............
   1cdbc:	f0df ffff 20ff ff00 fff0 ffff ffff f0ff     ..... ..........
   1cdcc:	ffff ffff ffff fff0 ffff ffff f0ff ffff     ................
   1cddc:	ffff ffff fff0 ffff ffff f0ff ffff ffff     ................
   1cdec:	ffff fff0 ffff ffff f0ff ffff ffff ffff     ................
   1cdfc:	dff0 ffff fdff f9ff 0000 0000 ff00 ffff     ................
   1ce0c:	ffff 0000 ffdf ffff 00fd 8f00 ffff ffff     ................
   1ce1c:	00c2 ffff ffff feff ff20 0000 0100 e2ff     ........ .......
   1ce2c:	00ff 0000 ff00 fffc 0000 0000 ffff 00ff     ................
   1ce3c:	0000 ff00 ffff ffff ffff ffff ffff ffff     ................
   1ce4c:	ffff ffff fbff bf11 ffff ffff 00f1 ff1f     ................
   1ce5c:	ffff f1ff 1f00 ffff ffff 11fb ffbf ffff     ................
   1ce6c:	ffff ffff ffff ff8f ffff ffff 00f8 ffdf     ................
   1ce7c:	00fd 0100 ffff 00fc 0300 ffff 00f7 0600     ................
   1ce8c:	ffff 00f2 0800 ffff 00d0 0a00 ffff ffff     ................
   1ce9c:	0cd0 ffff ffff 0ea0 ffff ffff 0d20 ffff     ............ ...
   1ceac:	f8ff 0000 0a00 e0ff 0000 0e00 50ff 0000     .............P..
   1cebc:	2f00 00fc 0000 5f00 00f3 0000 9f00 00a0     ./....._........
   1cecc:	0000 df00 0010 0000 d700 0000 0000 ee04     ................
   1cedc:	0040 0000 ffdf ff99 00fd ff00 99ff ffff     @...............
   1ceec:	0000 ffff ffff 00ff ff00 90ff 0000 0000     ................
   1cefc:	ffff ff0d 0dff ff20 0fff ffff e20f ffff     ...... .........
   1cf0c:	ff0f 0fff fffd 0fff ffff 0020 ffff ff0f     .......... .....
   1cf1c:	ffff ffff 0fff ffff ffff ffff ff0f ffff     ................
   1cf2c:	dfff 0fff ffff ffff 0000 ff0f ffff 00ff     ................
   1cf3c:	0f00 ffff ffff 0000 ff0d ffff 00fd 0000     ................
   1cf4c:	00cc 0000 0000 ff02 0030 0000 bf01 fcff     ........0.......
   1cf5c:	0020 1e00 ffff e1ff 0000 ff9f ffff 00f8      ...............
   1cf6c:	ef00 ffff fdff 0000 ffff ffff 00ff ff01     ................
   1cf7c:	ffff ffff 0300 ffff ffff 30ff ff08 ffff     ...........0....
   1cf8c:	ffff 1e80 ffff ffff e1ff ffcf ffff ffff     ................
   1cf9c:	cffc ffff ffff fcff 0000 0000 0000 0000     ................
   1cfac:	0e00 e0ff 0000 0000 ee04 0040 8f00 ffff     ..........@.....
   1cfbc:	ffff ffff f8ff ffff ffff ffff ffff ffff     ................
   1cfcc:	f000 000f 0ff0 ff00 00ff 0ff0 f000 000f     ................
   1cfdc:	ffff ffff ffff ffff ffff f8ff 8008 0888     ................
   1cfec:	8f80 ffff 08f8 8880 8008 ff8f ffff ffff     ................
   1cffc:	ffff ffff ffff f000 0000 0f00 ff00 00ff     ................
   1d00c:	00f0 0000 000f ffff ffff ffff ffff ffff     ................
   1d01c:	ff8f ffff ffff ffff 00f8 0000 0000 0000     ................
	...
   1d034:	af03 0070 0000 0000 cf04 f0ff 0000 0000     ..p.............
   1d044:	df06 ffff 00a0 0000 ef17 ffff 30ff 0000     .............0..
   1d054:	ff18 ffff fcff 0000 ff2a ffff ffff 00f4     ........*.......
   1d064:	ff08 ffff ffff d0ff 0f00 ffff ffff ffff     ................
   1d074:	0060 ff08 ffff ffff 00fe 0000 0000 ff00     `...............
   1d084:	f7ff 0000 0000 0000 ffff 00f1 0000 0000     ................
   1d094:	ff00 80ff 0000 0000 0000 ffff 0010 0000     ................
   1d0a4:	0000 ff00 00fa 0000 0000 0000 f2ff 0000     ................
   1d0b4:	0000 0000 8f00 0080 0000 0000 0000 0000     ................
   1d0c4:	0000 df00 ffff d2f0 ff00 ffff fef0 ff20     .............. .
   1d0d4:	ffff fff0 ffe2 ffff fff0 fffd ffff 00f2     ................
   1d0e4:	ff00 ffff ffff ffff ffff ffff ffff ffff     ................
   1d0f4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d104:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d114:	ffff ffff ffff ffff ffff ffff dfff ffff     ................
   1d124:	ffff 00fd 0000 0000 0000 0000 0000 0400     ................
   1d134:	ef9c c9fe 0040 0000 ef07 ffff ffff 70fe     ....@..........p
   1d144:	0400 ffdf a8fc cf8a fdff 6f40 d5ff 0000     ..........@o....
   1d154:	0000 ff5d cff6 00f6 0000 0000 6f00 1afc     ..]..........o..
   1d164:	0030 df5a a5fd 0300 00a1 4d00 ffff ffff     0.Z........M....
   1d174:	00d4 0000 ff05 a8fe ef8a 50ff 0000 df01     ...........P....
   1d184:	0070 0700 10fd 0000 1200 0000 0000 0021     p.............!.
   1d194:	0000 0000 4e00 00e4 0000 0000 0000 ef00     .....N..........
   1d1a4:	00fe 0000 0000 0000 ef00 00fe 0000 0000     ................
   1d1b4:	0000 4e00 00e4 0000 8f00 ffff ffff ffff     ...N............
   1d1c4:	ffff ff80 ffff ffff ffff ffff fff0 0000     ................
   1d1d4:	0000 0000 0f00 fffd ff0f ffff ffff 0fff     ................
   1d1e4:	ffff ff0f ffff ffff 00ff ffff ff0f ffff     ................
   1d1f4:	ffff 00ff ffff ff0f ffff ffff 0fff ffff     ................
   1d204:	0000 0000 0000 0f00 fffd ffff ffff ffff     ................
   1d214:	ffff 8ff0 ffff ffff ffff ffff 8f80 ffff     ................
   1d224:	ffff ffff ffff ff80 ffff ffff ffff ffff     ................
   1d234:	fff0 0000 0000 0000 0f00 fffd ff0f ffff     ................
   1d244:	f0ff 0f00 ffff ff0f ffff f0ff 0000 ffff     ................
   1d254:	ff0f ffff f0ff 0000 ffff ff0f ffff f0ff     ................
   1d264:	0f00 ffff 0000 0000 0000 0f00 fffd ffff     ................
   1d274:	ffff ffff ffff 8ff0 ffff ffff ffff ffff     ................
   1d284:	8f80 ffff ffff ffff ffff ff80 ffff ffff     ................
   1d294:	ffff ffff fff0 0000 0000 0000 0f00 fffd     ................
   1d2a4:	ff0f ffff 0000 0f00 ffff ff0f ffff 0000     ................
   1d2b4:	0000 ffff ff0f ffff 0000 0000 ffff ff0f     ................
   1d2c4:	ffff 0000 0f00 ffff 0000 0000 0000 0f00     ................
   1d2d4:	fffd ffff ffff ffff ffff 8ff0 ffff ffff     ................
   1d2e4:	ffff ffff 8f80 ffff ffff ffff ffff ff80     ................
   1d2f4:	ffff ffff ffff ffff fff0 0000 0000 0000     ................
   1d304:	0f00 fffd ff0f 00f0 0000 0f00 ffff ff0f     ................
   1d314:	00f0 0000 0000 ffff ff0f 00f0 0000 0000     ................
   1d324:	ffff ff0f 00f0 0000 0f00 ffff 0000 0000     ................
   1d334:	0000 0f00 fffd ffff ffff ffff ffff 8ff0     ................
   1d344:	ffff ffff ffff ffff 8f80 ffff ffff ffff     ................
   1d354:	ffff ff80 ffff ffff ffff ffff fff0 0000     ................
   1d364:	0000 0000 0f00 fffd 0000 0000 0000 0f00     ................
   1d374:	ffff 0000 0000 0000 0000 ffff 0000 0000     ................
   1d384:	0000 0000 ffff 0000 0000 0000 0f00 ffff     ................
   1d394:	0000 0000 0000 0f00 fffd ffff ffff ffff     ................
   1d3a4:	ffff 8ff0 ffff ffff ffff ffff 0080 0000     ................
   1d3b4:	0000 0001 0000 0000 0000 0000 fd07 0010     ................
   1d3c4:	0000 0000 0100 ffcf 00f5 0000 0000 0000     ................
   1d3d4:	29b9 10fe 0000 0000 0000 103f 0002 0000     .)........?.....
   1d3e4:	0300 80df 900a 0000 0300 0070 ffdf f777     ..........p...w.
   1d3f4:	5555 5555 d38f ff0f ccfd dcdf cccc ffcd     UUUU............
   1d404:	8fb0 10fe aa00 0000 4d00 0040 1046 0100     .........M@.F...
   1d414:	02f2 1033 0000 0000 0000 b109 f9cf 0000     ..3.............
   1d424:	0000 0000 0a00 ffff 0090 0000 0000 0000     ................
   1d434:	bf00 00f9 0000 0000 0000 0100 0022 0000     ............"...
   1d444:	1800 fddf 0092 ef02 effb 30ff ff0d 2efa     ...........0....
   1d454:	e0ff ff4f 03fa f5ff fa9f 35fa fa4f c0cf     ..O........5O...
   1d464:	3d8a fd0b fbef 1203 fe8f ffff 06b0 ffff     .=..............
   1d474:	ffff 08d1 ffff fdef 1011 ff9f d1df 3b59     ..............Y;
   1d484:	fd0b d7af 38fa fb1d ff5f 01fa f7df ff0d     .....8.._.......
   1d494:	1dfa f1ff ef03 dffc 50ff 1800 fedf 00a3     .........P......
   1d4a4:	0000 ff7f 00f7 ef00 ffff ffff feff ffef     ................
   1d4b4:	ffff ffff 00fe 0000 0000 0000 ff0f ffff     ................
   1d4c4:	ffff 0ff0 ffff ffff f0ff f90f 999f 9ff9     ................
   1d4d4:	0ff0 8ff8 f888 f08f f80f 888f 8ff8 0ff0     ................
   1d4e4:	8ff8 f888 f08f f80f 888f 8ff8 0ff0 8ff8     ................
   1d4f4:	f888 f08f f80f 888f 8ff8 0ff0 9ff9 f999     ................
   1d504:	f09f ff0f ffff ffff 08f0 ffff ffff 80ff     ................
   1d514:	0000 0000 0000 a07f 0000 0000 0000 ff8f     ................
   1d524:	00b0 0000 0000 ff0d a0ff 0000 0000 1d8a     ................
   1d534:	ffff 0000 0000 fa8f ff1d 0070 0000 ff8f     ..........p.....
   1d544:	1dfa 0080 0000 ff8f faff 0000 0000 ff8f     ................
   1d554:	ffff 0080 0000 ff8f ffff 0080 0000 ff8f     ................
   1d564:	ffff 0080 0000 ff8f ffff 0080 0000 ff6f     ..............o.
   1d574:	ffff 0080 0000 ff0b ffff 0080 0000 df00     ................
   1d584:	ffff 0080 0000 0e00 ffff 0080 0000 0000     ................
   1d594:	dbde 0060 0000 0000 0000 0000 0000 0000     ..`.............
   1d5a4:	0000 1b00 ffff ffff ffff 00e4 df01 ffff     ................
   1d5b4:	ffff ffff 00fe ff1d faff feef ffaf 01ff     ................
   1d5c4:	ffdf a0ff e22e ff0a 1dff ffff e2ff 2002     ............... 
   1d5d4:	ff2e cfff ffff feff 0220 ffef cfff ffff     ........ .......
   1d5e4:	feff 0220 ffef 1dff ffff e2ff 2002 ff2e     .. .......... ..
   1d5f4:	01ff ffdf a0ff e22e ff0a 00ff ff1d faff     ................
   1d604:	feef ffaf 00ff df01 ffff ffff ffff 00fe     ................
   1d614:	1b00 ffff ffff ffff 00e4 ff08 ffff 00e4     ................
   1d624:	ff8f ffff 08fe 0ff8 400b 8fff 0ff8 400b     .........@.....@
   1d634:	ffff 0ff8 400b ffff ffff ffff ffff ffff     .....@..........
   1d644:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d654:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   1d664:	ffff ffff ffff ffff ffff ffff efff ffff     ................
   1d674:	ffff 4efe ffff ffff 00e4 0000 0000 0000     ...N............
   1d684:	0001 0000 0000 0000 e003 0000 0010 0000     ................
   1d694:	ef02 0010 00bf 0000 7f00 00f1 f1cf 0000     ................
   1d6a4:	0700 11ff ffcf 7777 7777 f1bf ffcf ffff     ......wwww......
   1d6b4:	ffff ffff ff17 ffff ffff ffff 07e0 f1ff     ................
   1d6c4:	0000 0000 0000 ff06 0010 0000 0000 0500     ................
   1d6d4:	00a0 0000 0000                               .......

0001d6db <kern_class_values>:
	...
   1d6e7:	fb00 0000 0000 0000 0000 0000 0000 0000     ................
	...
   1d6ff:	00f3 0000 0000 0000 00f1 0000 0000 0000     ................
   1d70f:	0000 0000 f9fa fe00 00f8 00f6 0000 0001     ................
	...
   1d72f:	0300 0002 0003 0000 0000 0000 0000 0000     ................
   1d73f:	0000 0000 0000 00eb 0000 0000 0000 0000     ................
	...
   1d76b:	0000 e400 0000 0000 0000 0000 0000 0000     ................
	...
   1d78b:	00f1 0000 0000 f800 ff00 0000 fef0 f7f5     ................
   1d79b:	f400 0000 0000 0000 00ff fe00 faff 00fc     ................
   1d7ab:	0002 0000 0000 0000 0000 0000 0000 fd00     ................
   1d7bb:	fd00 0000 00f9 0000 0000 0000 0000 0000     ................
	...
   1d7d3:	00fd 0000 0000 0000 0000 00fc 0000 0000     ................
   1d7e3:	ff00 0000 0000 0000 0000 0000 0000 fe00     ................
   1d7f3:	0000 0000 f300 0000 fd00 0000 fd00 fd00     ................
   1d803:	fd00 fdfb 0000 0000 0000 0000 0000 0000     ................
	...
   1d823:	0003 0000 0000 0000 fe00 00fe 00fe 0000     ................
   1d833:	fdfe 00fd 0000 0000 0000 e300 0000 eb00     ................
   1d843:	df00 0300 0000 0000 0000 fc00 00fd fd00     ................
   1d853:	00fd fd00 00fd 0000 0000 0000 0000 0000     ................
   1d863:	0000 0002 0000 00fc 0000 fd02 0000 0000     ................
	...
   1d887:	fd00 0000 0000 0000 0000 0000 0000 0000     ................
	...
   1d8a7:	f800 0000 fc00 0000 0000 0000 0000 0000     ................
   1d8b7:	fd00 fd00 00fd 0000 fbfd 00f8 0000 d600     ................
   1d8c7:	0000 0000 0000 0200 00f8 de00 eaf9 00ee     ................
   1d8d7:	00e2 0000 0000 0000 0000 fb00 f5ef 0000     ................
   1d8e7:	0000 0000 0000 00d8 0000 00ef 00e7 0000     ................
   1d8f7:	0000 00fc 00fd feff 0000 00fe 0200 0200     ................
	...
   1d917:	fb00 fd00 00fe 00fc 0000 0000 0000 0000     ................
	...
   1d93b:	00f6 00fe fa00 0000 0000 0000 0000 0000     ................
   1d94b:	0000 0000 0000 00fb 0000 e500 00e3 f600     ................
   1d95b:	e2fd 02fe 0200 0002 0002 f200 00f4 f4f2     ................
   1d96b:	f2f7 f400 f9f7 f9f6 0000 0000 0003 fbe4     ................
   1d97b:	0000 fef7 0000 0000 0000 0000 0200 fbfa     ................
   1d98b:	0000 fcfa 0000 fffd 0000 0200 0000 0200     ................
   1d99b:	f100 00f9 fb00 0000 0200 0000 0000 0000     ................
   1d9ab:	fc02 00fc fc00 00fd fe00 0000 0000 0002     ................
   1d9bb:	0000 0000 fa00 0000 fd00 0000 0000 0002     ................
   1d9cb:	0000 0000 fd00 0000 00fd 0000 fcfd 0000     ................
   1d9db:	0000 0000 03fc e6fa 00fa f400 f4fc 02fe     ................
   1d9eb:	02f4 0202 0002 f702 fdf8 f8fb f9fb fbfd     ................
   1d9fb:	00fe fcfd 0002 0000 0000 0000 0000 fd02     ................
	...
   1da13:	0000 fd00 0000 00fd 0000 fdfe 00fd 0000     ................
	...
   1da2b:	0000 fe00 0000 00fe 0000 0000 0000 0000     ................
	...
   1da47:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
	...
   1da63:	fe00 0000 0000 fc00 0000 0000 0000 0000     ................
	...
   1da87:	00ff fefe 0000 00ff 0000 0000 0000 0000     ................
	...
   1daaf:	fe00 0000 0000 0000 0000 0000 0000 0000     ................
	...
   1dacb:	0000 00fe 0000 0000 0002 0003 0000 0000     ................
	...
   1dae3:	0000 0200 fd00 0000 0000 0000 0000 0000     ................
   1daf3:	0200 f300 0000 0000 0000 0000 0000 0000     ................
	...
   1db2b:	0000 fe00 0000 0000 0000 0000 0000 0000     ................
   1db3b:	ef00 0000 0000 0000 0000 0000 0000 0000     ................
	...
   1db57:	0000 00fe fefd 0000 0002 0000 00f1 0000     ................
	...
   1db73:	fefb 0002 00fe 0600 0200 0002 0000 0000     ................
	...
   1db97:	0000 fe00 0000 0000 0000 0000 0000 0002     ................
   1dba7:	0000 00f3 0000 0000 0000 0000 0000 0000     ................
   1dbb7:	0000 fefe 0002 00fe 0000 0000 0000 0000     ................
   1dbc7:	0000 0000 f100 0000 0000 0000 0000 0000     ................
	...
   1dbff:	fe00 0000 00fe 0000 0000 0000 0000 0000     ................
	...
   1dc23:	00fe fe00 0000 0000 0000 0000 0000 0000     ................
	...
   1dc3b:	00fe fe00 0000 0000 0000 0000 0000 0000     ................
	...

0001dc54 <kern_classes>:
   1dc54:	d6db 0001 dc64 0001 dcfd 0001 2328 0000     ....d.......(#..

0001dc64 <kern_left_class_mapping>:
   1dc64:	0100 0200 0000 0000 0302 0000 0400 0400     ................
   1dc74:	0005 0000 0000 0000 0000 0000 0000 0000     ................
   1dc84:	0000 0706 0908 0b0a 0c00 0d0c 0f0e 0c0c     ................
   1dc94:	1009 1211 1300 140d 1615 1817 0019 0000     ................
   1dca4:	0000 1b1a 001c 1e1d 1f00 0000 0020 1f1f     ............ ...
   1dcb4:	1b21 2200 2300 2400 2625 2724 0028 0000     !..".#.$%&$'(...
	...

0001dcfd <kern_right_class_mapping>:
   1dcfd:	0100 0200 0000 0300 0002 0504 0600 0607     ................
   1dd0d:	0008 0000 0000 0000 0000 0000 0000 0000     ................
   1dd1d:	0009 000a 000b 0000 000b 0c00 0000 0000     ................
   1dd2d:	000b 000b 0e0d 100f 1211 1413 0000 0015     ................
   1dd3d:	0000 0016 1717 1817 0017 0000 0000 1919     ................
   1dd4d:	191a 1b17 1d1c 1f1e 2120 221f 0000 0023     ........ !."..#.
	...

0001dd96 <unicode_list_1>:
   1dd96:	0000 0007 000a 000b 000c 0010 0012 0014     ................
   1dda6:	0018 001b 0020 0025 0026 0027 003d 0047     .... .%.&.'.=.G.
   1ddb6:	004a 004b 004c 0050 0051 0052 0053 0066     J.K.L.P.Q.R.S.f.
   1ddc6:	0067 006d 006f 0070 0073 0076 0077 0078     g.m.o.p.s.v.w.x.
   1ddd6:	007a 0092 0094 00c3 00c4 00c6 00e6 00e9     z...............
   1dde6:	00f2 011b 0123 015a 01ea 023f 0240 0241     ....#.Z...?.@.A.
   1ddf6:	0242 0243 0286 0292 02ec 0303 0559 07c1     B.C.........Y...
   1de06:	08a1 554e 4c4c 7020 696f 746e 7265 4900     ..NULL pointer.I
   1de16:	766e 6c61 6469 7320 7974 656c 6c00 5f76     nvalid style.lv_
   1de26:	626f 006a 766c 645f 6c64 7369 0074 704f     obj.lv_ddlist.Op
   1de36:	6974 6e6f 3120 4f0a 7470 6f69 206e 0a32     tion 1.Option 2.
   1de46:	704f 6974 6e6f 3320 ef00 b881 6c00 5f76     Option 3.....lv_
   1de56:	6170 6567 6c00 5f76 7462 006e 766c 735f     page.lv_btn.lv_s
   1de66:	696c 6564 0072 766c 635f 6168 7472 6c00     lider.lv_chart.l
   1de76:	5f76 6f63 746e 6c00 5f76 616c 6562 006c     v_cont.lv_label.
   1de86:	6554 7478 6c00 5f76 6162 0072 0000 0000     Text.lv_bar.....
	...

0001de98 <pow10.5188>:
   1de98:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   1dea8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   1deb8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   1dec8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   1ded8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
